<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Applying to Outreachy</title>
      <link href="/sg/2022/06/03/outr_intro/"/>
      <url>/sg/2022/06/03/outr_intro/</url>
      
        <content type="html"><![CDATA[<p>Hi there :)</p><p>I’m Sam Li, a Chinese junior student studying computer science on my own. The first two years were especially difficult for me because I had to balance my course plan and school courses, and I had many failures to find the right way to study a CS course. However, along the way, I met several friends who share my interests and we have a lot of fun talking about it. That’s where I first learned about open source organizations, which eventually led me to GSOC and Outreachy.</p><p>It is a great honor for me to be chosen by QEMU for Outreachy 2022, and it is the happiest moment of my life thus far. Besides, I’ve had the best mentors in the world. At the start of the application process, I assumed that this journey would help me develop my characters. Several changes have occurred in my life during the first week of work. I start running again, and I run a little longer each day, and I have a more consistent schedule for working remotely. In comparison to the time when I was very shy in public speaking, I am now more open to communicating with others. It may not always be very productive. But, thanks to the mentors’ invaluable assistance, I believe I am on the right track.</p><p>There is more to my personality. I enjoy reading history and science fiction. It’s fascinating how history depicts the past while science fiction depicts the future, both of which reflect some reality for the present. Dead Poets Society is my favorite film. I’m always disappointed by the endings and Neil’s fate. Civilization VI is a game that I enjoy playing. It’s a turn-based board game in which you can shape the path of the civilization.</p><p>Authenticity, meaningful work, and adventure are three of my core values.</p><p>My values are built on the foundation of authenticity. Honesty, in my opinion, is the best way to treat people. It’s also how I handle things. I can’t stand untruths and would rather get to the bottom of it. The desire to discover the truth prevents me from giving up when I face adversity. And here I am, in this project, to learn system programming.</p><p>Meaningful work is also very important to me. What’s the point of doing something if you’re not proud of it? There are various criteria that vary depending on the individual. For me, I’ve discovered an interest in storage systems, and I’ll try to figure out what specific goal I want to achieve in the internship before graduating from university.</p><p>I feel alive when I’m on an adventure. Most of the time, adventure entails risks. I am not interested in following the mainstream, where some people believe that a higher degree automatically solves some life problems, such as the high unemployment rate in these years. So I give up something in order to figure out what I really want to do with my life. It may sound naive, but I really want to see more of the world, either geographically or professionally. I’d like to thank Roosh, Zhi Guo, and all of my mentors Stefan, Damien, Hannes, and Dmitry for their support and guidance along the way, as well as Outreachy for this opportunity.</p>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> Outreachy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Outreachy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OS Lab Reports</title>
      <link href="/sg/2022/05/20/os_xv6/"/>
      <url>/sg/2022/05/20/os_xv6/</url>
      
        <content type="html"><![CDATA[<h2 id="Lab1-v2"><a class="header-anchor" href="#Lab1-v2">¶</a>Lab1</h2><h3 id="Book"><a class="header-anchor" href="#Book">¶</a>Book</h3><ol><li>file descriptors: when to share offsets? Only dup + fork calls.</li><li>Error file redirection: 2 &gt; &amp;1</li><li>Pipe: read will wait for write.</li></ol><h3 id="Exp-primes"><a class="header-anchor" href="#Exp-primes">¶</a>Exp:primes</h3><p>process communication:</p><ul><li><p>Type matching: pass ints to pipe</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//write(int fd, char* buf, int n);</span></span><br><span class="line">write(fd, &amp;<span class="keyword">int</span>, <span class="keyword">sizeof</span> <span class="keyword">int</span>);</span><br></pre></td></tr></table></figure></li></ul><p>Goal: pipe-base sieve and correctness</p><p>Thinking process:</p><ol><li>Write fork + pipe as a whole in main(). Can’t figure out how to write tranportation between process tree and pipe.</li><li>Write a helper function: a process generating primes. Can’t figure out choosing input/output</li><li>Found out how to write process tree after rereading the xv6 book: pass array as input<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li><li>prime logic: found that the first number passed into pipe is prime number. So we can add fork() in newProcess and recurrence relation in the child process.</li><li>details：error handling/read/write error/close logic/wait-&gt;exit</li></ol><p>Hypothiesis:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newProcess</span><span class="params">(<span class="keyword">int</span> p[<span class="number">2</span>])</span></span>&#123;</span><br><span class="line">...</span><br><span class="line">    pipe(c);</span><br><span class="line">    read(p[<span class="number">0</span>], buff, <span class="number">4</span>); <span class="comment">//read from parent</span></span><br><span class="line">    <span class="keyword">int</span> prime = buff[<span class="number">0</span>]; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;prime %d\n&quot;</span>, prime);</span><br><span class="line">    <span class="keyword">while</span>(read(p[<span class="number">0</span>], buff, <span class="number">4</span>) != <span class="number">0</span>)&#123; <span class="comment">//???</span></span><br><span class="line">        <span class="keyword">int</span> n = buff[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (n % prime != <span class="number">0</span>)&#123;</span><br><span class="line">            write(c[<span class="number">1</span>], &amp;n, <span class="number">4</span>);</span><br><span class="line">            newProcess(c);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Read from Parent or Child</li><li>write/read error</li></ol><p>I think the process is right. But the program runs too slow to find the right answer</p><p>Problem: why would read error occur?</p><p>Possible reason:</p><ol><li><p>run out of resources: file desicriptors between recursive calls</p><p>-&gt; nothing changes -&gt; wrong methods</p></li></ol><p>Experiment:</p><p>Exp 1:  rewrite the newProcess by using fork</p><p>Exp 2: rewrite the close logic</p><p>Predictions:</p><ol><li><p>when to close</p><p>After when we don’t need use the file descriptor in current process.</p></li></ol><p>Observations:</p><ol><li>Wait would pass the file descriptor to the exit</li></ol><h3 id="Exp-xargs"><a class="header-anchor" href="#Exp-xargs">¶</a>Exp:xargs</h3><p>Thinking process：</p><ol><li>Write as a whole: split line, then split execution. Difficulty: split string into array.</li></ol><p>problem: cmd part and argument part.</p><p>specification: cmd = argv[1], the rest is argument.</p><h2 id="Lab2"><a class="header-anchor" href="#Lab2">¶</a>Lab2</h2><h3 id="Book-v2"><a class="header-anchor" href="#Book-v2">¶</a>Book</h3><h3 id="Exp-trace"><a class="header-anchor" href="#Exp-trace">¶</a>Exp: trace</h3><p>Problem: what is trace?</p><p>Trace is a user call helping to track one particular syscall in the execution process.</p><p>Problem: what’s the relation between sys_call and sys_proc?</p><h3 id="Exp-sysinfo"><a class="header-anchor" href="#Exp-sysinfo">¶</a>Exp: sysinfo</h3><p>It’s easy to overlook the spelling error. One bracket makes you question about everything:)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (copyout(myproc()-&gt;pagetable, addr, (<span class="keyword">char</span> *)&amp;info, <span class="keyword">sizeof</span>(info) &lt; <span class="number">0</span>); <span class="comment">// off-by-one-bracket error</span></span><br><span class="line"><span class="keyword">if</span> (copyout(myproc()-&gt;pagetable, addr, (<span class="keyword">char</span> *)&amp;info, <span class="keyword">sizeof</span>(info)) &lt; <span class="number">0</span>);  <span class="comment">// correct one</span></span><br></pre></td></tr></table></figure><h2 id="Lab3"><a class="header-anchor" href="#Lab3">¶</a>Lab3</h2><p>Goal: allow the kernel to directly dereference user pointers</p><h3 id="Book-v3"><a class="header-anchor" href="#Book-v3">¶</a>Book</h3><h3 id="Exp-print-pt"><a class="header-anchor" href="#Exp-print-pt">¶</a>Exp:print pt</h3><p>You can’t write it without knowing the page table implementation in xv6. At first, it needs a simple and straightforward solution and then optimize it. I was thinking about using iteration or recursion, which took a while.</p><h3 id="Exp-kernel-page-table"><a class="header-anchor" href="#Exp-kernel-page-table">¶</a>Exp: kernel page table</h3><p>problem: page table set up: panic</p><ul><li>When to start paging?</li></ul><p>Hypothesis:</p><ol><li>Traps due to missing mappings</li><li>scheduler</li></ol><p>Experiment:</p><ol><li><p>modify allocproc: seems correct</p></li><li><p>modify scheduler: move around w_satp, errors occur</p><p>-&gt; scheduler goes wrong</p></li></ol><p>Problem 1: how scheduler goes wrong?</p><p>Key point: context switching. A fixed version <a href="https://github.com/sgzerolc/xv6-os/commit/a1c15ec80eea1d0006099fbaf74003bb0d8493b8#diff-f06ba4e6ae5b13cb787bad05af2c231bcf826410f25bfd78b18774115f0d20a8L481-R510">here</a>.(thanks to @GuoZhi)</p><p><code>pit</code>: Problem 2: why truncate2 OK but truncate3 not?</p><p>We shouldn’t be worried if we can get grade part ok. And it’s time to move to real problem.</p><p>aside: Problem 3: lost some freepages in kernmem</p><p>Predictions:</p><p>Observations:</p><ol><li>Allocproc sets up one process’s kernel stack</li></ol><h3 id="Exp-copyin"><a class="header-anchor" href="#Exp-copyin">¶</a>Exp: copyin</h3><p>Task: add user mappings to user process’s kernel page table</p><p>Problem:</p><ol><li>when user mappings  are changed in <code>exec</code> ? what should be done in <code>exec</code> ?</li></ol><p>Hypothesis:</p><p>Experiment:</p><ol><li><code>pit</code>: no need to change copyin_new yet. The task is to make it work.</li></ol><p>Predictions:</p><p>Observations:</p><h2 id="Lab4"><a class="header-anchor" href="#Lab4">¶</a>Lab4</h2><h2 id="Lab5"><a class="header-anchor" href="#Lab5">¶</a>Lab5</h2><h2 id="Lab6"><a class="header-anchor" href="#Lab6">¶</a>Lab6</h2><h2 id="Lab7"><a class="header-anchor" href="#Lab7">¶</a>Lab7</h2><h2 id="Lab8"><a class="header-anchor" href="#Lab8">¶</a>Lab8</h2><h2 id="Tool"><a class="header-anchor" href="#Tool">¶</a>Tool</h2><p>Qemu 5.1<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, Mac m1, Riscv-toolchain 10.1</p><p>6.s081 20fall labs</p><img src="/sg/2022/05/20/os_xv6/step-by-step-debugging.png" class="" title="step-by-step-debugging"><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>stuck for a long time due to not very familiar with C in 21/03/20 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>build from source. Configure prefix to /opt/qemu. More can be found <a href="https://github.com/BASARANOMO/xv6-labs-2020/issues/1">here</a>. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.s081 operating systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
            <tag> 6.s081 operating systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Programming Lab Reports</title>
      <link href="/sg/2022/05/14/ex-python/"/>
      <url>/sg/2022/05/14/ex-python/</url>
      
        <content type="html"><![CDATA[<p>goal: design and implement data structures in labs and practice python programming</p><h2 id="Lab1"><a class="header-anchor" href="#Lab1">¶</a>Lab1</h2><p>Problem: correlation</p><h2 id="Lab-2-snekoban"><a class="header-anchor" href="#Lab-2-snekoban">¶</a>Lab 2 snekoban</h2><p>Problem 0: why assertion in test fails while it can run correctly in the GUI?</p><p>Answer: do not modify the input game.</p><p>time: stuck for one hour</p><p>where (goes wrong): Figured out in assertionErrors in vscode: somehow the pytest in pycharm lost the critical information: modify the input game type</p><p>Experiment 1: disable the assertions for checking modifications</p><p>Result: passed all the basic tests.</p><p>Experiment 2: is dict deep copied?</p><p>Result: no. It turns out that dict(some_dict) or some_dict.copy() is shallow copy. Deep copy should use copy.deepcopy(some_dict) or be a lamb :) to copy every element in the dict.</p><p>Thus it solves the problem.</p>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
          <category> 6.009 programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
            <tag> 6.009 programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flash SSD Operations</title>
      <link href="/sg/2022/04/28/storages_ssd/"/>
      <url>/sg/2022/04/28/storages_ssd/</url>
      
        <content type="html"><![CDATA[<h2 id="Readings"><a class="header-anchor" href="#Readings">¶</a>Readings</h2><h3 id="basics"><a class="header-anchor" href="#basics">¶</a>basics</h3><ol><li><p>Terminology in flash: banks consist of blocks; and blocks consist of pages.</p><ul><li>banks/planes: consist of a large number of cells</li><li>blocks: size 128 KB or 256 KB</li><li>pages: size 4 KB</li><li>cell level<ul><li>one level: store a single bit into a transistor(1/0)</li><li>multi-level: store two bits into different levels of charge(00/01/10/11)… etc</li></ul></li></ul><img src="/sg/2022/04/28/storages_ssd/Screenshot-2751756.png" class="" title="Screenshot-2751756"><ul><li><p>Flash-based SSDs</p><ul><li>Flash translation layer(FTL)</li><li>Logical block address(LBA)</li></ul><img src="/sg/2022/04/28/storages_ssd/Screenshot-2753619.png" class="" title="Screenshot-2753619"></li></ul></li><li><p>basic flash operations</p><ul><li>Read(a page)</li><li>Erase(a block)</li><li>Program(a page)</li></ul></li><li><p>Page has state: <code>INVALID</code>, <code>ERASED</code>, <code>VALID</code></p></li><li><p>raw flash performance</p><ul><li>device property: <strong>a page can be written until the entire block first be erased.</strong></li><li>Given above property: program-erase cycle<ol><li>latency: we should move data that is about to be erased to another place.</li><li>Problem of reliability: wear out</li></ol></li></ul><img src="/sg/2022/04/28/storages_ssd/Screenshot-2752855.png" class="" title="Screenshot-2752855"></li><li><p>FTL organization</p><ul><li>direct mapped: an operation to logical page N is mapped to physical page N.<ul><li>Bad: causing the flash constantly overwritten and worn out eventually</li></ul></li><li>log structured: in-memory mapping table<ul><li>Good:use logging to speedup recovery</li></ul></li></ul></li></ol><h3 id="performance"><a class="header-anchor" href="#performance">¶</a>performance</h3><p>Performance problem:</p><ol><li><p>Flash operation: erase &gt;&gt; program(10*) &gt;&gt; read (10*)</p><ul><li>How to improve:<ol><li>parallel</li><li>reduce write amplification</li></ol></li></ul></li><li><p><u>garbage collection</u>(Log-structured FTL): old versions of data takes over the space.</p><p>Overwritten -&gt; garbage data -&gt; data migration</p></li><li><p>high cost of in-memory <u>mapping table</u>(Log-structured FTL)</p></li></ol><p>Riliability problem:</p><ol><li><p>Wear out</p><p>(Head crash in mechanical disk in contrast)</p><ul><li><u>wear leveling</u>: spread writes across the blocks evenly</li></ul></li><li><p>Disturbance: When accessing a page within a flash, some bits can get flipped in neighboring pages.</p><ul><li>sequential programming: write pages in order can reduce the disturbance.</li></ul></li></ol><h3 id="garbage-collection-v2"><a class="header-anchor" href="#garbage-collection-v2">¶</a>garbage collection</h3><h3 id="mapping-table"><a class="header-anchor" href="#mapping-table">¶</a>mapping table</h3><h3 id="wear-leveling"><a class="header-anchor" href="#wear-leveling">¶</a>wear leveling</h3>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> storage systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storage systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Programming Excercises in CSAPP</title>
      <link href="/sg/2022/04/23/ex-cpp/"/>
      <url>/sg/2022/04/23/ex-cpp/</url>
      
        <content type="html"><![CDATA[<p>Goal: CSAPP exercises</p><h2 id="Ps0"><a class="header-anchor" href="#Ps0">¶</a>Ps0</h2><p>seems nice.</p><h2 id="Sec-1"><a class="header-anchor" href="#Sec-1">¶</a>Sec 1</h2><ol><li><p>can’t call ++it when it == container.end(), otherwise segmentation fault.</p></li><li><p>Prefer ++i than i++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span>;</span><br><span class="line">j = ++i; <span class="comment">//(i is 2, j is 2)</span></span><br><span class="line">   </span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">j = i++; <span class="comment">// (i is 2, j is 1)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Ps1-a-debugging-memory-allocator"><a class="header-anchor" href="#Ps1-a-debugging-memory-allocator">¶</a>Ps1: a debugging memory allocator</h2><p>Context:</p><ol><li>malloc is not perfect and can fail due to various reasons such as size was too big/memory is exhausted/…</li><li>undefined behavior: any program that invokes undefined behavior has no meaning.</li></ol><p>Syntax:</p><ol><li><p>const</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const pointer point to const member function which takes const pointer </span></span><br><span class="line"><span class="comment">// to a const int. The last const means this is a const member function</span></span><br><span class="line"><span class="comment">// (can&#x27;t modify variables of the this instance)</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> <span class="title">myClassMethod</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>* <span class="keyword">const</span> &amp; param)</span> <span class="keyword">const</span></span>; </span><br></pre></td></tr></table></figure></li><li><p>type casting</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// internal metadata</span></span><br><span class="line">std::unordered_map&lt;<span class="keyword">uintptr_t</span>, <span class="keyword">size_t</span>&gt; payload;</span><br><span class="line">payload.<span class="built_in">insert</span>(&#123;(<span class="keyword">uintptr_t</span>)ptr, sz&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>Problem:</p><ol><li>How to count the allocations?<ul><li>augmentation</li></ul></li><li>When will allocation fail?<ul><li>Stuck for two hours. I thought I could not modify funcation signature(return type). Therefore I overlooked the right direction.</li><li><s>?relation in heap max address and failed allocations.</s> Answer: when malloc fails, base_alloc(malloc) will return a nullptr, which is the usual case.</li></ul></li><li>allocated address of heap: overlap with other regions<ul><li>Key: heap_first</li><li>Answer: should set heap_min only once</li></ul></li></ol><p>Design:</p><ol><li>Basic version:<ul><li>use hash table(pointer value/address: size)</li><li>bounded metadata: last N freed allocations, and set N = 10.<ul><li>should check size once updates data</li></ul></li></ul></li><li>augmentation: use a struct</li></ol><img src="/sg/2022/04/23/ex-cpp/Screenshot-3286619.png" class="" title="Screenshot-3286619"><p>Problem:</p><ol><li>where to put metadata?<ul><li>global use</li></ul></li><li>How to bound metadata?<ul><li>First, what is bounded metadata?<ul><li>ex: a <em>bounded</em> amount of metadata about freed allocations, such as statistics or a list of the last N freed allocations.</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
          <category> cs 61 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cs 61 </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Begginner&#39;s Guide to Setting up QEMU Devel Env</title>
      <link href="/sg/2022/04/15/qemu-develop/"/>
      <url>/sg/2022/04/15/qemu-develop/</url>
      
        <content type="html"><![CDATA[<p>Example: test io_uring.c in QEMU</p><p>Environment: Fedora 35</p><p>It requires a host<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> os having a new kernel, QEMU and liburing.git(one specific version).</p><p><strong>build the kernel from source</strong>:</p><p>various mistakes can arrive when installing new kernel from source. However, there are certain steps requiring more attention.</p><p>When I found a seemly <a href="https://www.cyberciti.biz/tips/compiling-linux-kernel-26.html">good tutorial</a> and tried it: Read error message to know which type of error and google it.</p><ol><li><p>security check in config file(this part is literally killing me :): you can disable security check by <a href="https://askubuntu.com/questions/1329538/compiling-the-kernel-5-11-11">modifying config file</a>.</p><p>If you meet a SSL error when <code>make modules_install</code> like me after disabling the security check above and discover that <a href="https://askubuntu.com/questions/820883/how-to-resolve-ssl-error-during-make-modules-install-command">sign file missing</a>, you may check  <code>CONFIG_SYSTEM_TRUSTED_KEYS='certs/signing_key.pem'</code> and remake again.</p></li><li><p>Orders of make commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line">make -j 8</span><br><span class="line">make modules</span><br><span class="line">make bzImage</span><br><span class="line">sudo make modules_install</span><br><span class="line">sudo make install</span><br><span class="line">sudo kernel-install add &lt;version&gt; /boot/vmlinuz-&lt;version&gt;  <span class="comment"># Fedora linux</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>build a QEMU from source</strong>: Follow the documentation</p><p><strong>build liburing from source:</strong> After this step, liburing support can be found in config with version 2.2 and QEMU should run correctly.</p><ol><li><p>check a few things before <code>make install</code>:</p><ul><li><p>right kernel version:  <code>uname -ra</code> -&gt; <code>5.17-rc7</code></p></li><li><p>No liburing package(liburing and liburing-devel) installed</p></li></ul></li><li><p>Orders of commands: configure it first</p><p>after fetching liburing.git:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --libdir=/usr/lib64 --libdevdir=/usr/lib64  <span class="comment"># /usr/lib for Ubuntu Linux</span></span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></li></ol><p>It should work by now.</p><p><strong>Qemu:</strong></p><p>it is better to know common commands to trace, debug, test.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default setting:</span></span><br><span class="line">x86_64-softmmu/qemu-system-x86_64 -m 512 --enable-kvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># create img:</span></span><br><span class="line">./qemu-img create -f qcow2 test.qcow2 16G</span><br><span class="line">./qemu-img create test.img 2G</span><br><span class="line"></span><br><span class="line"><span class="comment"># add test</span></span><br><span class="line">path/to/qemu-system-x86_64 -m 1024 -enable-kvm -drive <span class="keyword">if</span>=virtio,file=path/to/test.img,format=raw,aio=io_uring,cache=none</span><br><span class="line"></span><br><span class="line"><span class="comment"># trace</span></span><br><span class="line"><span class="comment"># want to trace: ioq_*, luring_*, qemu_luring_* and write into txt files.</span></span><br><span class="line">./configure --target-list=x86_64-softmmu --enable-kvm --enable-debug --enable-trace-backends=simple</span><br><span class="line"><span class="comment"># in qemu dir:</span></span><br><span class="line">path/to/qemu-system-x86_64 -m 1024 -enable-kvm -drive <span class="keyword">if</span>=virtio,file=path/to/test.img,format=raw,aio=io_uring,cache=none --trace events=reach.txt</span><br><span class="line"><span class="comment"># gdb</span></span><br><span class="line">gdb -q --args path/to/qemu-system-x86_64 -drive file=test.img,<span class="keyword">if</span>=virtio,aio=io_uring --enable-kvm -smp 2 -m 1G</span><br></pre></td></tr></table></figure><p><strong>Err log:</strong></p><p>I have met a lot of issues<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> when setting up the enviroument. Luckily, mentors of QEMU are very good and patient to go through this with me.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>it should be noticed that the host and guest in QEMU stand for. QEMU host is where QEMU runs and guest is to run on QEMU. In QEMU’s term, “–enable-kvm” ensures QEMU is running on the host and “-kernel” implies a guest os running. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Attach a <a href="https://gist.github.com/sgzerolc/9a142bcc544fa13819db523397898685">log</a> here. I will reorganize it when outreachy application term finishes. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> environment </tag>
            
            <tag> QEMU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《孙子兵法译注》——读记</title>
      <link href="/sg/2022/04/15/read_art_of_war/"/>
      <url>/sg/2022/04/15/read_art_of_war/</url>
      
        <content type="html"><![CDATA[<blockquote><p>知彼知己，百战不殆；不知彼而知己，一胜一负；不知彼，不知己，每战必殆。 （3，20）</p></blockquote><p>know yourself 不管在哪都是永恒的话题。</p><blockquote><p>昔之善战者，先为不可胜，以待敌之可胜。不可胜在己，可胜在敌。</p><p>故善战者，能为不可胜，不能使敌之必可胜。</p><p>故曰：胜可知，而不可为。</p><p>不可胜者，守也；可胜者，攻也。守则不足，攻则有余。</p><p>善守者，藏于九地之下。善攻者，藏于九天之上。</p><p>故能自保而全胜也。   （4，21）</p></blockquote><p>攻守是根据自己的强弱决定的。不过战争和决策不同的是，战争要减少损伤，而决策的成本相对更低。所以战争要全胜，而决策要考虑结果的重要性。</p><blockquote><p>古之所谓善战者，胜于易胜者也。故善战者之胜也，无智名，无勇功。故其战胜不忒。</p><p>不忒者，其所措必胜，胜已败者也。</p><p>故善战者，立于不败之地，而不失敌之败也。</p><p>是故胜兵先胜而后求战，败兵先战而后求胜。（4，22）</p></blockquote><p>这里是说要先有取胜的形，而形来自于战前部署。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>io_uring&#39;s API and implementation in qemu</title>
      <link href="/sg/2022/04/08/qemu_io/"/>
      <url>/sg/2022/04/08/qemu_io/</url>
      
        <content type="html"><![CDATA[<h2 id="Qemu-structures"><a class="header-anchor" href="#Qemu-structures">¶</a>Qemu structures</h2><table><thead><tr><th>Terminology</th><th>details</th></tr></thead><tbody><tr><td>Host formats</td><td>raw, qcow2, qed, vhdx</td></tr><tr><td>Protocols</td><td>file system, block device, NBD, Ceph, gluster</td></tr><tr><td>virtio</td><td>behave like a memory-mapped register bank, different register layout</td></tr><tr><td>Network cards</td><td>e1000 card on the PCI bus</td></tr></tbody></table><ol><li><p>what is qemu?</p><p>Qemu is a virtual machine trying to emulate OS without actual hw so as to run multiple OS in single machine.</p></li><li><p>why qemu?</p><p>The general purpose of virtual machine is to trick the guest os that it is running on the real host os. Qemu is designed to manage this big memory to achieve better formance in emulation.</p></li><li><p>How?</p><ul><li>“Accelerator”: Trap and emulate</li><li>“Paravirtualization”: tradeoff between virtualization in os and emulation in devices -&gt; virtio</li></ul></li></ol><img src="/sg/2022/04/08/qemu_io/Screenshot.png" class="" title="Screenshot"><p>I/O path in VM<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>: host view of qemu is like additional RAM(a big chunk of memory and that’s it)</p><img src="/sg/2022/04/08/qemu_io/Screenshot-9477410.png" class="" title="Screenshot-9477410"><h2 id="brief-introducation"><a class="header-anchor" href="#brief-introducation">¶</a>brief introducation</h2><p>Terminology in QEMU’s event loop:</p><table><thead><tr><th>Event sources</th><th>Abbr</th><th>Usage</th></tr></thead><tbody><tr><td>Bottom-halves</td><td>BHs</td><td>Invoke a function in another thread or deferring a func call to avoid reentrancy</td></tr><tr><td>Asynchronous I/O context</td><td>aio_ctx</td><td>Event loop</td></tr></tbody></table><ol><li><p>Io_uring is a kernel ring buffer for asynchronous communication with kernel.</p><ul><li>Current integration into qemu: use epoll for completion check; use io_uring_enter() for submission; check completion on irq</li><li>Improvement: want to use fd registration</li></ul></li><li><p>Two ways to solve blocking mode problems(blocked processes are suspended): nonblocking mode, I/O multiplexing syscalls(async IO).</p><p>Async IO syscalls like select, poll, epoll</p><ol><li>Scenario: server wants to know if new input comes. Run program to know states -&gt; Ask Linux kernel which file changes -&gt; monitor file descriptors</li><li>poll: choose specific fds to monitor. Select:choose a range of fds to monitor.</li><li>Poll and select need kernel to check fds whether are available for writing, which takes a lot of time. Epoll(not for regular files) avoids the problem: create, control<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, wait</li></ol></li><li><p>Coroutines in qemu: write multiple processes in a sequential way compared to callback<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> for correct order in scheduling.</p><ol><li><p>rules of scheduling:</p><ul><li>Explicit: other cpu sees coroutines.</li><li>only one coroutine executes at a time; can’t be interrupted</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># using callbacks: the list can go on and on</span><br><span class="line">start():</span><br><span class="line">send(&quot;ask&quot;,step1)</span><br><span class="line">step1():</span><br><span class="line">read(step2)</span><br><span class="line">step2():</span><br><span class="line">send(&quot;hi, %s&quot;,name, step3)</span><br><span class="line">step3():</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># using coroutines</span><br><span class="line">coroutine_say_hi():</span><br><span class="line">co_send(&quot;ask&quot;)</span><br><span class="line">name = co_read()</span><br><span class="line">co_send(&quot;hi, %s&quot;, name)</span><br><span class="line"># done here</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>API<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><p>Struct: coroutine</p><p>Transfer of control: enter, yield</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">void</span> coroutine_fn <span class="title">CoroutineEntry</span><span class="params">(<span class="keyword">void</span> *opaque)</span></span>;</span><br><span class="line"><span class="function">Coroutine *<span class="title">qemu_coroutine_create</span><span class="params">(CoroutineEntry *entry, <span class="keyword">void</span> *opaque)</span></span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>event loop in QEMU</p><p>two stucts appear in io_uring: AioContext, BH.</p><p>common APIs<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> in even loop are: aio_set_fd_handler(),  aio_set_event_handler(), aio_timer_init(), aio_bh_new()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUBH</span> &#123;</span></span><br><span class="line">    AioContext *ctx;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    QEMUBHFunc *cb;</span><br><span class="line">    <span class="keyword">void</span> *opaque;</span><br><span class="line">    QSLIST_ENTRY(QEMUBH) next; <span class="comment">// point to next eleent</span></span><br><span class="line">    <span class="keyword">unsigned</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AioContext</span> &#123;</span></span><br><span class="line">    BHList bh_list;</span><br><span class="line">    QSIMPLEQ_HEAD(, BHListSlice) bh_slice_list;</span><br><span class="line">...</span><br><span class="line">    QSLIST_HEAD(, Coroutine) scheduled_coroutines;</span><br><span class="line">    QEMUBH *co_schedule_bh;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadPool</span> *<span class="title">thread_pool</span>;</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="API"><a class="header-anchor" href="#API">¶</a>API</h2><img src="/sg/2022/04/08/qemu_io/Screenshot-0192659.png" class="" title="Screenshot"><h2 id="Implementation"><a class="header-anchor" href="#Implementation">¶</a>Implementation</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://archive.fosdem.org/2020/schedule/event/vai_io_uring_in_qemu/attachments/slides/4145/export/events/attachments/vai_io_uring_in_qemu/slides/4145/io_uring_fosdem.pdf">Io_uring in qemu</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.com/torvalds/linux/blob/v4.10/fs/eventpoll.c#L1849">linux/eventpoll.c</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Callback function is reentrant code meaning it can be called even while a call to it is underway. Like recv(pkt, via_ron), it is called when a packet arrives for the client program. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/qemu/qemu/blob/master/include/qemu/coroutine.h#L58">qemu/include/qemu/coroutine.h</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/qemu/qemu/blob/master/include/block/aio.h#L466">qemu/include/block/aio.h</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QEMU </tag>
            
            <tag> code reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>os virtual machine</title>
      <link href="/sg/2022/04/06/os_virtual_machine/"/>
      <url>/sg/2022/04/06/os_virtual_machine/</url>
      
        <content type="html"><![CDATA[<p>After taking a glance at QEMU, I decide to review this lecture to gain more understandings of virtual machine.</p><h2 id="what-and-why"><a class="header-anchor" href="#what-and-why">¶</a>what and why</h2><ol><li>Virtual machine: simulation of a computer</li><li>Why: we want run lots of guest service in one physical machine</li></ol><h2 id="Trap-and-emulate"><a class="header-anchor" href="#Trap-and-emulate">¶</a>Trap and emulate</h2><h3 id="procedure"><a class="header-anchor" href="#procedure">¶</a>procedure</h3><img src="/sg/2022/04/06/os_virtual_machine/Screenshot-9333584.png" class="" title="Screenshot-9333584"><h3 id="Page-table"><a class="header-anchor" href="#Page-table">¶</a>Page table</h3><p>Shadow page table in VMM</p><img src="/sg/2022/04/06/os_virtual_machine/Screenshot-9334514.png" class="" title="Screenshot-9334514"><p>Problem: It can’t be allowed that guest pgtbl satp escapes and modifies host pgtbl</p><p>To prevent guest escaping from VMM, guest can’t run in host supervisor mode. VMM will modify virtual state to provide illusions for guests.</p><h3 id="device"><a class="header-anchor" href="#device">¶</a>device</h3><ol><li>emulation: trap and emulate</li><li>Virtual device: device interface is designed to decrease trap times, which saves houndreds of CPU cycles</li><li>Pass-through: NIC</li></ol><h2 id="hardware-support"><a class="header-anchor" href="#hardware-support">¶</a>hardware support</h2><img src="/sg/2022/04/06/os_virtual_machine/hs.png" class="" title="hardware_support"><h2 id="Paper-view"><a class="header-anchor" href="#Paper-view">¶</a>Paper view</h2><p>Paper: <a href="https://pdos.csail.mit.edu/6.828/2020/readings/belay-dune.pdf">Dune: Safe User-level Access to Privileged CPU Features</a></p><p>what</p><img src="/sg/2022/04/06/os_virtual_machine/Screenshot.png" class="" title="Screenshot"><img src="/sg/2022/04/06/os_virtual_machine/vm.png" class="" title="vm"><p>how</p><p>why</p>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.s081 operating systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.s081 operating systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>intro to xv6</title>
      <link href="/sg/2022/04/01/os_basics/"/>
      <url>/sg/2022/04/01/os_basics/</url>
      
        <content type="html"><![CDATA[<h2 id="OS-organizations"><a class="header-anchor" href="#OS-organizations">¶</a>OS organizations</h2><h3 id="usercall-syscall"><a class="header-anchor" href="#usercall-syscall">¶</a>usercall&amp;syscall</h3><p>System calls: applications see the OS via system calls.</p><h3 id="trap"><a class="header-anchor" href="#trap">¶</a>trap</h3><p>Xv6 interacts with the devices directly, not the RAM.</p><h3 id="risc-v"><a class="header-anchor" href="#risc-v">¶</a>risc-v</h3><h3 id="kernel-HLL"><a class="header-anchor" href="#kernel-HLL">¶</a>kernel?HLL</h3><h2 id="virtual-memory"><a class="header-anchor" href="#virtual-memory">¶</a>virtual memory</h2><ol><li><p>os booting:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kinit();         <span class="comment">// physical page allocator</span></span><br><span class="line">kvminit();       <span class="comment">// create kernel page table</span></span><br><span class="line">kvminithart();   <span class="comment">// turn on paging</span></span><br><span class="line">procinit();      <span class="comment">// process table</span></span><br><span class="line">...</span><br><span class="line">virtio_disk_init(); <span class="comment">// emulated hard disk</span></span><br></pre></td></tr></table></figure></li><li><p>Memory allocation</p><p>Real allocator: dynamic allocation-&gt;small chunks</p><p>Xv6 allocator: allocate a big chunk of 4096-byte block</p></li></ol><h3 id="page-table"><a class="header-anchor" href="#page-table">¶</a>page table</h3><ol><li><p>address translation</p><p>RISC-V instructions manipulate virtual addresses; RAM, or physical memory is indexed with physical address. The RISC-V page table hardware provides mapping of virtual address to physical address.</p><img src="/sg/2022/04/01/os_basics/pt.png" class="" title="pt"></li><li><p>kernel address space:</p><ul><li>Xv6 maintains one page table per process(user address space) and single page table for the kernel address space.</li><li>Kernel uses <u>direct mapping</u> to get access to RAM and memory mapped devices.</li><li>Not direct mapped: high-memory mapping<ul><li>trampoline page</li><li>kernel stack pages: have an unmapped guard page with PTE invalid.</li></ul></li></ul><img src="/sg/2022/04/01/os_basics/kvm.png" class="" title="kvm"></li><li><p>user address space</p></li></ol><img src="/sg/2022/04/01/os_basics/Screenshot-8963182.png" class="" title="Screenshot-8963182"><ol start="4"><li><p>process of vm setup</p><ul><li>physical memory allocation: free pages are stored in the linked list.</li><li>Syscall<ul><li>sbrk: grow/shrink the memory</li><li>exec: create the user part of an address space</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># creating an address space</span><br><span class="line">main()</span><br><span class="line">-&gt; kvminit()</span><br><span class="line">-&gt; kvmmap()</span><br><span class="line">-&gt; mappages()</span><br><span class="line">-&gt; walk()</span><br><span class="line">-&gt; kvminithart()</span><br><span class="line">-&gt; satp/sfence.vma</span><br><span class="line">-&gt; procinit()</span><br><span class="line">-&gt; kvminithart()</span><br><span class="line"></span><br><span class="line"># physical memory allocator</span><br><span class="line">kinit()</span><br><span class="line">-&gt; freerange()</span><br><span class="line">-&gt; kfree()</span><br><span class="line">kalloc()</span><br><span class="line"></span><br><span class="line"># sbrk</span><br><span class="line">growproc()</span><br><span class="line">-&gt; uvmalloc()</span><br><span class="line">-&gt; kalloc()</span><br><span class="line">-&gt; mappages()</span><br><span class="line">-&gt; uvmdealloc()</span><br><span class="line">-&gt; uvmunmap()</span><br><span class="line"></span><br><span class="line"># exec</span><br><span class="line">exec()</span><br><span class="line">-&gt; proc_pagetable()</span><br><span class="line">-&gt; uvmalloc()</span><br><span class="line">-&gt; loadseg()</span><br><span class="line">-&gt; walkaddr()</span><br><span class="line">-&gt; readi()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="page-fault"><a class="header-anchor" href="#page-fault">¶</a>page fault</h3><ol><li>lazy allocation</li><li>Copy-on-write</li><li>demand paging</li><li>memory mapped file</li></ol><h3 id="interrupts"><a class="header-anchor" href="#interrupts">¶</a>interrupts</h3><ol><li><p>Drivers’s data structures can divide into two parts, top/bottom.</p><ul><li><p>Top: user process or interface of kernel’s other part’s call, like read/write()</p></li><li><p>Bottom: interrupt handler</p></li></ul></li><li><p>Driver is programmed by memory mapped I/O.</p></li><li><p>How xv6 displays “$” in console?</p><p>device -&gt; (uart-&gt;interrupt -&gt;) console</p></li><li><p>How xv6 displays “ls” in console?</p><p>key stroke -&gt; keyboard -&gt; (uart input -&gt; merge to byte -&gt; interrupt)-&gt;interrupt handler</p></li><li><p>Riscv interrupts related registers:</p><ul><li>SIE(supervisor interrupt enable),</li><li>SSTATUS(supervisor status)</li><li>SIP(supervisor interrupt pending)</li><li>SCAUSE: means interrupts</li><li>STVEC: program counter of user program that cpu runs when trap/interrupts/page faults occur</li></ul></li></ol><h3 id="VM-for-applications"><a class="header-anchor" href="#VM-for-applications">¶</a>VM for applications</h3><h2 id="Parallelism"><a class="header-anchor" href="#Parallelism">¶</a>Parallelism</h2><p>topic: lock in kernel</p><h3 id="lock"><a class="header-anchor" href="#lock">¶</a>lock</h3><p>what is lock: lock in xv6 guarantees atomicity in critical section.</p><p>why locks: one data stucture are accessed by multiple processes -&gt; race condition</p><p><strong>how to lock?</strong></p><p>Scenario 1: race condition in kfree()</p><p>Attempt 1: corse-grain locking/two processs are accessing one sharing data structure and one of them updates the data.</p><p>scenario 2: rename files: rename(“d1/x”, “d2/y”)</p><p>Attempt 2: lock operations not data structures.</p><p>Problem : system designers should define orders of locks for the purpose of performance and correctness</p><p>details of spinlock:</p><ol><li>disable interrupts: if a lock can be interruptted, then the interrupt acquires the same lock that is being used which leads to dead lock.  -&gt; concurrency in same CPU</li><li>sw vs atomic_swap: sw differs in different CPU settings. It may have one more instruction which disables the atomicity. -&gt; concurrency in different CPU</li><li></li></ol><p>Terminology:</p><ol><li>Lock-free program: to achive more parallelism</li><li>Deadlock: unlocking A requires B, unlocking B requires A, A and B are locked. example: deadly embrace</li><li></li></ol><h3 id="thread-switching"><a class="header-anchor" href="#thread-switching">¶</a>thread switching</h3><p>Scheduling:</p><h3 id="Sleep-wake-up"><a class="header-anchor" href="#Sleep-wake-up">¶</a>Sleep&amp;wake up</h3><h3 id="RCU"><a class="header-anchor" href="#RCU">¶</a>RCU</h3><h2 id="file-systems"><a class="header-anchor" href="#file-systems">¶</a>file systems</h2><h3 id="xv6"><a class="header-anchor" href="#xv6">¶</a>xv6</h3><img src="/sg/2022/04/01/os_basics/Screenshot-9574783.png" class="" title="Screenshot-9574783"><h3 id="linux"><a class="header-anchor" href="#linux">¶</a>linux</h3><h2 id="Network-stack"><a class="header-anchor" href="#Network-stack">¶</a>Network stack</h2><h2 id="Security"><a class="header-anchor" href="#Security">¶</a>Security</h2>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.s081 operating systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.s081 operating systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>db concurrency control</title>
      <link href="/sg/2022/03/17/db_concurrency/"/>
      <url>/sg/2022/03/17/db_concurrency/</url>
      
        <content type="html"><![CDATA[<h2 id="Transactions"><a class="header-anchor" href="#Transactions">¶</a>Transactions</h2><p>I have seen this topic in 6.033</p><h2 id="2PL"><a class="header-anchor" href="#2PL">¶</a>2PL</h2><h2 id="T-OCC"><a class="header-anchor" href="#T-OCC">¶</a>T/OCC</h2><p>Timestamp ordering concurrency control</p><h2 id="MVCC"><a class="header-anchor" href="#MVCC">¶</a>MVCC</h2><p>multi-version concurrency control</p><h3 id="version-storage"><a class="header-anchor" href="#version-storage">¶</a>version storage</h3><h3 id="garbage-collection"><a class="header-anchor" href="#garbage-collection">¶</a>garbage collection</h3><h3 id="index-management"><a class="header-anchor" href="#index-management">¶</a>index management</h3><h2 id="Logging-schemes"><a class="header-anchor" href="#Logging-schemes">¶</a>Logging schemes</h2><h3 id="WAL"><a class="header-anchor" href="#WAL">¶</a>WAL</h3><h2 id="crash-recovery"><a class="header-anchor" href="#crash-recovery">¶</a>crash recovery</h2><h3 id="ARIES"><a class="header-anchor" href="#ARIES">¶</a>ARIES</h3>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-445 database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 15-445 database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>db execution</title>
      <link href="/sg/2022/03/17/db_execution/"/>
      <url>/sg/2022/03/17/db_execution/</url>
      
        <content type="html"><![CDATA[<p>Execution process: the operators are arranged in a tree.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7600728.png" class="" title="Screenshot-7600728"><h2 id="sorting"><a class="header-anchor" href="#sorting">¶</a>sorting</h2><p>supported feature: ORDER BY, DISTINCT, GROUP BY</p><p>Problem: can’t guarantee sorting data to fit in memory</p><p>Approach: external merge sort: splits the data set into separate runs, sorts them individually, and then combine into larger sorted runs.</p><ol><li>run: a list of key/value pairs.<ul><li>Key: attributes to compare</li><li>Value: record id/tuple</li></ul></li></ol><img src="/sg/2022/03/17/db_execution/Screenshot-7652824.png" class="" title="Screenshot-7652824"><ol start="2"><li><p>Procedure</p><ul><li><p>Sorting: sort in memory and then write back to a file on disk</p></li><li><p>Merging: combine sorted sub-files into single file</p></li></ul></li><li><p>2-way external merge sort</p><ul><li><p>data set = N pages, buffer pool = B pages</p></li><li><p>Pass:read and write each page in file.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7653767.png" class="" title="Screenshot-7653767"></li><li><p>Number of passes = 1 + log<sub>2</sub><sup>N</sup></p><ul><li><p>1 represents pass 0 which reads every B pages of the table into buffer pool(memory).</p></li><li><p>In this case, B &gt;= 3(2I, 1O).</p></li></ul></li><li><p>totoal I/O cost: 2N*(# of passes)</p><img src="/sg/2022/03/17/db_execution/Screenshot-7653299.png" class="" title="Screenshot-7653299"></li><li><p><u>Problem</u>:  the worker blocks on disk I/O -&gt; more buffer pages won’t help in this case</p><ul><li>Approach:<strong>double buffering optimazation</strong>: <strong>prefetching</strong> the next run in the background and storing it in a second buffer while the system is processing the current run.</li><li>pro: reduce the wait time for I/O requests</li><li>Multi-thread env</li></ul></li></ul></li><li><p>General(k-way) merge sort</p><p>let k = B -1, #of runs = N/B * B</p><p>#of sorted runs = N/B, merge k runs</p><p>#of passes = 1 + log<sub>B-1</sub><sup>(N/B)</sup>   , total I/O cost = 2N*(# of passes)</p></li><li><p>optimize sorting by using b+ tree: Retrieve tuples in desired sort order by simply traversing the leaf pages of the tree.</p><p>The point is <strong># of I/O access</strong>.</p><p>Case 1: clustered b+ tree: if the index is a clustered index, traverse the tree</p><img src="/sg/2022/03/17/db_execution/Screenshot-7655087.png" class="" title="Screenshot-7655087"><p>case 2: unclustered b+ tree: else, don’t do it.</p></li></ol><h2 id="aggregations"><a class="header-anchor" href="#aggregations">¶</a>aggregations</h2><ol><li><p>Aggregations: Collapse values for a single attribute from multiple tuples into a single scalar value.</p><ul><li>two approaches for implementations: sorting, hashing</li><li>-&gt; GROUP BY, DISTINCT</li></ul></li><li><p>Sorting -&gt; ordering query</p><p>optimization: perform filter first: reduce the amount of data requiring to be sorted.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7657643.png" class="" title="Screenshot-7657643"></li><li><p>Hashing -&gt; no ordering</p><p>Like sorting algorithms, DBMS spills data to disk when data doesn’t fit in memory. Two phases for external hashing aggregate: partition, rehash.</p><p>The point is the location of operations given context.</p><ul><li><p>problem 1: what to split?</p><ol><li>partition: one or more pages that contain the set of keys with the same hash value.</li></ol></li><li><p>problem 2 : how to split?</p><ol><li><p>hash function: used to split tuples into partitions on disk</p><img src="/sg/2022/03/17/db_execution/Screenshot-7658353.png" class="" title="Screenshot-7658353"></li><li><p>rehash: Build <strong>in-memory hash table</strong> for each partition and compute the aggregation</p><p>Assume: each partition fits in memory.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7658396.png" class="" title="Screenshot-7658396"></li></ol></li><li><p>summarization: result form: (GroupKey -&gt; RunningVal)</p><p>scenario: Insert new tuples(G’, R’) into the hash table</p><ul><li>like dictionary insertion: G’ existed, update R to R’; G’ not existed, insert (G’, R’)</li></ul></li></ul></li></ol><h2 id="joins"><a class="header-anchor" href="#joins">¶</a>joins</h2><ol><li><p>inner equijoin algorithm: joins tables where keys are equal.</p></li><li><p>goal: minimize repetitions</p></li><li><p>Join operators: choose what to join and smart joins</p></li><li><p>operator output: For a tuple r ∈ R and a tuple s ∈ S that match on join attributes, the join operator concatenates r and s together into a new output tuple.</p><ul><li><p>early materialization(data): Copy the values for the attributes in outer and inner tuples into a new output tuple. -&gt; no need to go back in the query plan</p><img src="/sg/2022/03/17/db_execution/Screenshot-7661256.png" class="" title="Screenshot-7661256"></li><li><p>late materialization( record ids): Only copy the joins keys along with the record ids of the matching tuples -&gt; suits for column store</p><img src="/sg/2022/03/17/db_execution/Screenshot-7661462.png" class="" title="Screenshot-7661462"></li></ul></li><li><p>cost analysis criteria: # of disk I/Os used to compute join</p><p>Only count input costs. Because outputs depend on the date computed afterwards.</p><p>The point is to find appropriate algorithms in certain scenario.</p></li><li><p>Variables used in this lecture:</p><ul><li>M pages in table R (Outer Table), m tuples total</li><li>N pages in table S (Inner Table), n tuples total</li></ul></li></ol><h3 id="Nested-loop-join"><a class="header-anchor" href="#Nested-loop-join">¶</a>Nested loop join</h3><ol><li><p>Nested loop join: two nested FOR loops that iterate over the tuples in both tables and compares each unique of them.</p><ul><li><p>locality:DBMS uses smaller table as the outer table and buffers it in memory.</p></li><li><p>Index: find matches</p></li></ul></li><li><p>Stupid/Simple NLJ:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foreach tuple r ∈ R:</span><br><span class="line">foreach tuple s ∈ S:</span><br><span class="line">emit, if r and s match</span><br></pre></td></tr></table></figure></li><li><p>Block NLJ:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foreach block B_R ∈ R:</span><br><span class="line">foreach block B_S ∈ S:</span><br><span class="line">foreach tuple r ∈ B_R: </span><br><span class="line">foreach tuple s ∈ B_s:</span><br><span class="line">emit, if r and s match</span><br></pre></td></tr></table></figure></li><li><p>Index NLJ</p></li></ol><h3 id="Sort-merge-join"><a class="header-anchor" href="#Sort-merge-join">¶</a>Sort-merge join</h3><ol><li><p>Sort-merge join: sorts the two tables on their join key(s)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sort R,S on join keys</span><br><span class="line">cursorR ← Rsorted, cursorS ← Ssorted</span><br><span class="line">while cursorR and cursorS:</span><br><span class="line">if cursorR &gt; cursorS:</span><br><span class="line">increment cursorS</span><br><span class="line">if cursorR &lt; cursorS:</span><br><span class="line">increment cursorR</span><br><span class="line">elif cursorR and cursorS match:</span><br><span class="line">emit</span><br><span class="line">increment cursorS</span><br></pre></td></tr></table></figure></li><li><p>Cost analysis: sort + merge</p></li></ol><h3 id="Hash-join"><a class="header-anchor" href="#Hash-join">¶</a>Hash join</h3><ol><li>hash join: use a hash table to split up the tuples into smaller chunks based on their join attribute(s).</li><li>basic hash join</li><li>Grace hash join/Hybrid hash join</li></ol><h2 id="Query-plan"><a class="header-anchor" href="#Query-plan">¶</a>Query plan</h2><h3 id="processing-models"><a class="header-anchor" href="#processing-models">¶</a>processing models</h3><ol><li>processing model: defines how the system executes a query plan.</li><li>iterator model</li><li>materialization model</li><li>Vectorized/batch model</li></ol><h3 id="access-methods"><a class="header-anchor" href="#access-methods">¶</a>access methods</h3><h3 id="modification-queries"><a class="header-anchor" href="#modification-queries">¶</a>modification queries</h3><h3 id="expression-evaluation"><a class="header-anchor" href="#expression-evaluation">¶</a>expression evaluation</h3><h3 id="relational-algebra-equivalence"><a class="header-anchor" href="#relational-algebra-equivalence">¶</a>relational algebra equivalence</h3><h2 id="Parallel-execution"><a class="header-anchor" href="#Parallel-execution">¶</a>Parallel execution</h2><h2 id="Optimization"><a class="header-anchor" href="#Optimization">¶</a>Optimization</h2><h3 id="Cost-estimations"><a class="header-anchor" href="#Cost-estimations">¶</a>Cost estimations</h3><h3 id="Histograms"><a class="header-anchor" href="#Histograms">¶</a>Histograms</h3><h2 id="Sampling"><a class="header-anchor" href="#Sampling">¶</a>Sampling</h2><h3 id="plan-enumeration"><a class="header-anchor" href="#plan-enumeration">¶</a>plan enumeration</h3>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-445 database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 15-445 database </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>db index</title>
      <link href="/sg/2022/03/05/db_index/"/>
      <url>/sg/2022/03/05/db_index/</url>
      
        <content type="html"><![CDATA[<p>DBMS’s execution engine needs to access pages before doing operation on those.</p><p>Design decisions when implementing data structures for the DBMS:</p><ol><li>Data organization: memory layout and information to store -&gt; access</li><li>Concurrency: multiple threads to access without causing problems -&gt; efficient access</li></ol><p>There are two types of data structures:hash table, trees.</p><h2 id="hash-tables"><a class="header-anchor" href="#hash-tables">¶</a>hash tables</h2><ol><li><p>Complexity: space: O(n); runtime: amortized O(1) lookup</p></li><li><p>hash tables implementations:</p><ul><li><p>hashing functions: collision rate</p></li><li><p>schemes: <em>handle key collisions</em> after hashing</p></li></ul></li></ol><h3 id="Static-hashing-schema"><a class="header-anchor" href="#Static-hashing-schema">¶</a>Static hashing schema</h3><p>The size of the hash table is fixed. DBMS has to rebuild a larger hash tables if it runs out of storage space.</p><p>Assume: knowing the number of elements it wants to store.</p><ol><li><p>Linear probe hashing</p><ul><li><p>collision: linearly seach the adjacent slots until an open one is found</p><img src="/sg/2022/03/05/db_index/Screenshot-7503728.png" class="" title="Screenshot-7503728"></li><li><p>Non-unique keys: the same key may be associated with multiple different values or tuples</p><ul><li>approach 1: separate linked list</li><li>approach 2: redundant keys: store the same key multiple times in the table</li></ul></li><li><p>deletion: removing the entry from the slot -&gt; can’t find the slots having collisions with the deleted one.</p><ul><li><p>approach 1: tombstone: instead of deletion, replace it with magic entry indicating to keep scanning for future lookups.</p><img src="/sg/2022/03/05/db_index/Screenshot-7504450.png" class="" title="Screenshot-7504450"></li><li><p>Approach 2: movement:  shift the adjacent data after deleting an entry to fill the now empty slot.</p><img src="/sg/2022/03/05/db_index/Screenshot-7504407.png" class="" title="Screenshot-7504407"></li></ul></li></ul></li><li><p>Robin Hood Hashing: steals slots from “rich” keys and give them to “poor” keys</p><p>Each key tracks the number of positions they are from where its <em>optimal position</em> in the table</p><img src="/sg/2022/03/05/db_index/Screenshot-7509790.png" class="" title="Screenshot-7509790"></li><li><p>Cuckoo Hashing: Use multiple hash tables with different hash function seeds.</p><img src="/sg/2022/03/05/db_index/Screenshot-7510112.png" class="" title="Screenshot-7510112"><img src="/sg/2022/03/05/db_index/Screenshot-7510099.png" class="" title="Screenshot-7510099"></li></ol><h3 id="Dynamic-hashing-schema"><a class="header-anchor" href="#Dynamic-hashing-schema">¶</a>Dynamic hashing schema</h3><p>property: Dynamic hash tables resize themselves on demand</p><ol><li><p>Chained hashing: linked list to handle collisions</p><img src="/sg/2022/03/05/db_index/Screenshot-7510352.png" class="" title="Screenshot-7510352"></li><li><p>extendible hashing: splits buckets in case of letting chains to grow forever</p><p>Local/global depth bit: track slots</p><p>problem 1: what to split: data movement: move data within the buckets of the <em>split chain</em>; all other buckets are left untouched.</p><p>problem 2: when to split: if the bucket is full, splits the bucket and reshuffle its elements.</p><p>observe: the changed pointers to slots are on the split chain.</p><img src="/sg/2022/03/05/db_index/Screenshot-7510635.png" class="" title="Screenshot-7510635"><img src="/sg/2022/03/05/db_index/Screenshot-7510667.png" class="" title="Screenshot-7510667"></li><li><p>linear hashing: maintains a split pointer that keeps track of the next bucket to split instead of immediately splitting a bucket when it overflows.</p><p>Procedures:</p><ol><li>Add a new slot in split pointers, and create a new hash function</li><li>Decide whether to apply the new hash fuction on new query index.</li><li>Delete original hash function and replace with new hash function when run out of slots.</li></ol><ul><li><p>Insertion -&gt; when buckets are full</p></li><li><p>Deletion: reverse of insertion: pointers move backwards -&gt; when buckets are empty</p><img src="/sg/2022/03/05/db_index/Screenshot-7511632.png" class="" title="Screenshot-7511632"><img src="/sg/2022/03/05/db_index/Screenshot-7513367.png" class="" title="Screenshot-7513367"></li></ul></li></ol><p>​</p><h2 id="b-tree"><a class="header-anchor" href="#b-tree">¶</a>b+ tree</h2><ol><li>table index: index of a table’s attributes. The table is stored in the sort order specified by the primary key. Can be either heap- or index-organized storage</li><li>Trade-off on the number of indexes to create per database: storage overhead Vs. maintenance overhead</li></ol><h3 id="Overview"><a class="header-anchor" href="#Overview">¶</a>Overview</h3><ol><li><p>b+ tree: a self-balancing tree data structure that keeps data sorted and allows searches, sequential access, insertion, and deletions in O(log(n)). Good at read/write large blocks of data.</p><img src="/sg/2022/03/05/db_index/Screenshot-7514359.png" class="" title="Screenshot-7514359"></li><li><p>difference with b tree: b+ tree stores values only in leaf nodes; b tree store values in all nodes.</p></li></ol><p><strong>Structure:</strong></p><ol><li><p>Key-value pair: inner node: store pointers; leaf node: values.</p><img src="/sg/2022/03/05/db_index/Screenshot-7515275.png" class="" title="Screenshot-7515275"><ul><li>Leaf node values have two approaches: 1) record IDs: pointers to the location of tuple; 2) tuple data: store the actual contents of the tuple in each node</li></ul></li><li><p>node: Arrays at every node are sorted by the keys.</p></li></ol><p><strong>Operations:</strong></p><ol><li><p>Insertion:</p><p>Split leaves when the tree got too full</p><ul><li>Leaf node: copy up middle key</li><li>inner node: push up middle key</li></ul></li><li><p>deletion</p><p>Redistribute by borrowing from sibling when lead is not half full; Merge nodes when redistribution fails.</p><ul><li>Leaf node: delete the key</li><li>Inner node: delete entry in parent pointing to the key</li></ul></li><li><p>selection conditions: Support search provides <em>any</em> of the attributes of the search key.</p><p>-&gt; Hash index requires <em>all</em> attributes in the search key.</p></li><li><p>Non-unique indexes</p><p>like hash tables: 1) duplicate keys, 2)store value lists.</p><img src="/sg/2022/03/05/db_index/Screenshot-7517327.png" class="" title="Screenshot-7517327"></li><li><p>duplicate keys approaches</p><ul><li><p>Append record IDs</p><img src="/sg/2022/03/05/db_index/Screenshot-7517457.png" class="" title="Screenshot-7517457"></li><li><p>overflow leafnodes: Allow leaf nodes to spill into overflow nodes that contain<br>the duplicate keys.</p><ul><li>complex to maintain</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7517477.png" class="" title="Screenshot-7517477"></li></ul></li><li><p>Clustered indexes: If a table does not contain a primary key, the DBMS will automatically make a hidden row id primary key</p><p>(think about VEB tree)</p><img src="/sg/2022/03/05/db_index/Screenshot-7517887.png" class="" title="Screenshot-7517887"><p>Sorting:</p><ol><li>heap clustering: tuples are sorted in the heap’s pages using the order specified by a clustering index. DBMS can jump directly to the pages if clustering index’s attributes are used to access tuples</li></ol><img src="/sg/2022/03/05/db_index/Screenshot-7517956.png" class="" title="Screenshot-7517956"><ol start="2"><li>index scan page sorting: sort all the tuples that it needs based on their page id.</li></ol><img src="/sg/2022/03/05/db_index/Screenshot-7517996.png" class="" title="Screenshot-7517996"></li></ol><h3 id="disign-choices"><a class="header-anchor" href="#disign-choices">¶</a>disign choices</h3><ol><li><p>node size</p><ul><li><p>~ storage device: the faster the storage device is, the smaller the node size is. Because we want to reduce the number of accesses in slower device like HDD compared with RAM. And the amortized runtime of read over large chunk of data is more optimal.</p></li><li><p>~ workload: there are two types of workload: point query; sequential scan. A point query would prefer small pages to reduce extra info while sequential scan likes large pages to reduce the number of fetches.</p></li></ul></li><li><p>merge threshold</p><ul><li>like lazy allocation in os</li><li>Delaying merge to reduce the amount of reorganization like expensive write latches.</li></ul></li><li><p>variable length keys</p><ul><li><p>good in a way: 1)space saving: reduce a small subset of large keys lead to lot of wasted space</p></li><li><p>approach 1: pointers  -&gt; embedded devices: registers, cache</p><p>Store the keys as pointers to the tuple’s attribute</p></li><li><p>approach 2: Variable Length Nodes -&gt; infeasible: large memory management overhead</p><p>allow nodes to have variable length.</p></li><li><p>approach 3: padding -&gt; infeasible: big waste of memory</p><p>Set each key’s size to the size of the max key and pad out all the shorter keys.</p></li><li><p>approach 4: key map/indirection</p><p>Embed an array of pointers that map to the key + value list within the node. Place prefix of each key alongside the index.</p><ul><li>unlike approach 1, a4 stores the dictionary index that needs small space not the key pointers, which allows storing prefix alongside of the index.</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7569559.png" class="" title="Screenshot-7569559"></li></ul></li><li><p>Intra-node search: search within the node</p><ul><li><p>A1: linear: Scan node keys from beginning to end.</p></li><li><p>A2: binary: Jump to middle key, pivot left/right depending on comparison</p></li><li><p>A3: interpolation: Approximate location of desired key based on known distribution of keys -&gt; infeasible: limited applicability to keys with certain properties and complexity, only seen in academic use</p><p>take advantage of metadata(max, min ,avg …) and infer approximate location</p><img src="/sg/2022/03/05/db_index/Screenshot-7578914.png" class="" title="Screenshot-7578914"></li></ul></li></ol><h3 id="optimizations"><a class="header-anchor" href="#optimizations">¶</a>optimizations</h3><ol><li><p>Prefix compression: extract prefix and store unique suffix for each key -&gt; keys in the same node have overlapping prefix</p><img src="/sg/2022/03/05/db_index/Screenshot-7578988.png" class="" title="Screenshot-7578988"></li><li><p>duplication: write key once and maintain a list of record ids with the key -&gt; non-unique keys</p><p>~ MVCC</p><img src="/sg/2022/03/05/db_index/Screenshot-7579194.png" class="" title="Screenshot-7579194"></li><li><p>suffix truncation:  only storing the minimum differentiating prefix of each key at a given inner node.  -&gt; No need to search the entire key</p><ul><li>leave few redundant digits: fault tolerance -&gt; indeterminable insertion/deletion  due to an identical prefix</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7579249.png" class="" title="Screenshot-7579249"></li><li><p>bulk insert: sort the keys and build the index from the bottom up -&gt; fastest way to build a new b+ tree</p><ul><li>Trade-off: leaving vacancy or not when packing the leaves depends on context</li></ul><p>Keys: 3, 7, 9, 13, 6, 1; sorted keys: 1, 3, 6, 7, 9, 13</p><img src="/sg/2022/03/05/db_index/Screenshot-7579810.png" class="" title="Screenshot-7579810"></li><li><p>Pointer swizzling: store raw pointers instead of page ids for pinned page in the buffer pool  -&gt; reduce expensive buffer pool fetches</p><img src="/sg/2022/03/05/db_index/Screenshot-7580430.png" class="" title="Screenshot-7580430"></li></ol><h2 id="Index"><a class="header-anchor" href="#Index">¶</a>Index</h2><ol><li><p>what is index: provide fast access to data items.</p></li><li><p>methods</p><ul><li><p>implicit indexes: provide primary key with integerity constraints</p></li><li><p>partial indexes: Create an index on a subset of the entire table. -&gt; reduce full page fetches overhead</p><img src="/sg/2022/03/05/db_index/Screenshot-7581006.png" class="" title="Screenshot-7581006"></li><li><p>covering indexes(index-only scans): locate data records in the table and not to return data -&gt; reduces contention on the DBMS’s buffer pool resources</p><img src="/sg/2022/03/05/db_index/Screenshot-7581138.png" class="" title="Screenshot-7581138"></li><li><p>index include columns: Embed additional columns in indexes<br>to support index-only queries.</p><ul><li>Extra columns are only stored in the leaf nodes and are not part of the search key</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7581440.png" class="" title="Screenshot-7581440"></li><li><p>Function/expression indexes: use expressions when declaring an index. store the output of a function or expression as the key instead of the original value. -&gt; ? which queries can use that index</p><img src="/sg/2022/03/05/db_index/Screenshot-7581987.png" class="" title="Screenshot-7581987"></li></ul></li></ol><h3 id="Trie-index"><a class="header-anchor" href="#Trie-index">¶</a>Trie index</h3><ol><li><p>make oberservations: the inner node keys in a B+Tree cannot tell you whether or not a key exists in the index -&gt; at least one buffer pool page miss per level in the tree</p></li><li><p>approach: trie index</p><ul><li><p>Properties: complexity in operations and space</p></li><li><p>trie key span: digital representation of keys</p><ul><li><p>Fan-out of node, height of tree</p><p>图中：空表示该值不存在，指针指向下一个位置，使用0/1的二进制表示</p><img src="/sg/2022/03/05/db_index/Screenshot-7584309.png" class="" title="Screenshot-7584309"></li></ul></li></ul></li></ol><h3 id="radix-tree"><a class="header-anchor" href="#radix-tree">¶</a>radix tree</h3><p>variant of trie index. Omit all nodes with only a single child.</p><img src="/sg/2022/03/05/db_index/Screenshot-7584321.png" class="" title="Screenshot-7584321"><img src="/sg/2022/03/05/db_index/Screenshot-7584401.png" class="" title="Screenshot-7584401"><h3 id="inverted-index"><a class="header-anchor" href="#inverted-index">¶</a>inverted index</h3><ol><li><p>make observations: Tree indexs above are useful for point and range queries; not good for keyword searches</p></li><li><p>Approach: inverted index(full-text search index) -&gt; keyword search</p><p>stores a mapping of words to records that contain those words in the target attribute.</p></li><li><p>supported query type:</p><ul><li>phrase searches: records that contain a list of words in the given order</li><li>proximity searches: two words occur within n words of each other</li><li>wildcard searches:words that match some pattern (e.g., regular expression).</li></ul></li><li><p>design decisions</p><ul><li>decision 1: what to store: depend on the context</li><li>decision 2: when to update: update is expensive. So stage updates and then update in batches</li></ul></li></ol><h2 id="concurrency-control"><a class="header-anchor" href="#concurrency-control">¶</a>concurrency control</h2><ol><li>make observations: multi-threads world means that cpu cores and disk I/O stalls matters.</li><li>come up with a protocol: a protocol needs criteria<ul><li><em>logical correctness</em>: thread view</li><li>Physical correctness: internal representation of object soundness -&gt; memory leak</li></ul></li></ol><h3 id="Locks-vs-latches"><a class="header-anchor" href="#Locks-vs-latches">¶</a>Locks vs. latches</h3><ol><li>Locks: protects the contents of a database (e.g., tuples, tables, databases) from other transactions -&gt; object view</li><li>Latches: protects critical sections the DBMS’s internal data structures (e.g., data structure, regions of memory) from other threads -&gt; operation view<ul><li>Read mode: Multiple threads are allowed to read the same item at the same time</li><li>write mode: Only one thread is allowed to access the item.</li></ul></li></ol><h3 id="Latch-designs"><a class="header-anchor" href="#Latch-designs">¶</a>Latch designs</h3><p>latch takes advantage of CPU’s atomic compare-and-swap(CAS) instruction. A thread can check the contents of a memory location to see whether it has a certain value.</p><p>Definition: <a href="https://stackoverflow.com/questions/15059958/what-is-a-scalable-lock">scalability</a> of latches means if latches perform well when there is a lot of contention.</p><p>Approaches:</p><ol><li><p>Blocking OS mutex: os build-in mutex infra.</p><p>User space -&gt; kernel space -&gt; fail/blocked -&gt; descheduled</p><ul><li><p>Pro: no extra work for DBMS</p></li><li><p>Con: ~ os scheduling: Non-scalable (about 25ns per lock/unlock invocation)</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::mutex m;</span><br><span class="line">m.<span class="built_in">lock</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">m.<span class="built_in">unlock</span>();</span><br></pre></td></tr></table></figure></li><li><p>Test-and-set spin latch(TAS)</p><p>use CAS to update value -&gt; fail -&gt; DBMS’s choice now(keep trying/descheduled)</p><ul><li>Spin latch: a location in memory that  threads try to update.</li><li>pro: efficient operations</li><li>con: not scalable nor cache-friendly</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ex: std::atomic&lt;T&gt;</span></span><br><span class="line">std::atomic_flag latch;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (latch.<span class="built_in">test_and_set</span>(...))&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Reader-writer locks</p><p>based on two modes of latches, keep track of reads and writes.</p><img src="/sg/2022/03/05/db_index/Screenshot-7590990.png" class="" title="Screenshot-7590990"><ul><li><p>pro: concurrent reads</p></li><li><p>con: extra work for DBMS management; larger storage overhead</p></li></ul></li></ol><h3 id="Practice"><a class="header-anchor" href="#Practice">¶</a>Practice</h3><ol><li><p>Hash table</p><ul><li><p><strong>observation 1: Limited ways threads access the data structure（top-down)</strong> -&gt; no deadlock problem -&gt; global latch</p></li><li><p>Trade-off: Parallelism vs. storage, computational overhead of accessing the table, efficiency</p></li><li><p>approach 1: page latches</p><img src="/sg/2022/03/05/db_index/Screenshot-7591456.png" class="" title="Screenshot-7591456"><img src="/sg/2022/03/05/db_index/Screenshot-7591517.png" class="" title="Screenshot-7591517"></li><li><p>approach 2: slot latches</p><img src="/sg/2022/03/05/db_index/Screenshot-7591600.png" class="" title="Screenshot-7591600"></li></ul></li><li><p>b+tree</p><p>Observation 1: several way to access b+ tree(top-down/sibling pointers/…) -&gt; come up with a protocol to allow multiple threads to read and update a b+ tree</p><p>Problem 1: modify same node at the same time</p><p><u>Problem 2</u>: one thread traversing the tree while another thread splits/merges nodes</p><img src="/sg/2022/03/05/db_index/Screenshot-7594900.png" class="" title="Screenshot-7594900"><ul><li><p>Solution: latch crabbing/coupling protocol -&gt; top-down direction</p><ul><li>define safe node: A “safe” node is one that will not split or merge when updated (not full on insertion or more than half full on deletion -&gt; write view(insert/delete)</li><li>Procedures:<ol><li>get latch for the parent</li><li>get latch for the child</li><li>release latch for the parent if it is deemed “safe”</li></ol></li></ul></li><li><p>Basic latch crabbing protocol for operations</p><ul><li><p>Search: top-down</p></li><li><p>Insert/delete: If latched child is safe, release latches on all its ancestors</p><p>Delete 38:<img src="/sg/2022/03/05/db_index/Screenshot-7595740.png" class="" title="Screenshot-7595740"></p><p>Insert 25:<img src="/sg/2022/03/05/db_index/Screenshot-7595952.png" class="" title="Screenshot-7595952"></p></li></ul></li><li><p>observation 2: first step of all the updates on the b+tree is <strong>taking a write latch on the root.</strong> -&gt; <strong>bottleneck with higher concurrency</strong></p><ul><li>No need to acquire write latch on the safe node update.</li></ul></li><li><p>Better latching algorithm: assume the target leaf node is safe, use READ latches on the way. If it the node is not safe, apply the old method(WRITE latch on the root)</p></li></ul><p><u>Problem 3</u>: leaf node scan -&gt; dead lock</p><ul><li><p>observation: threads acquire locks in two directions at the same time</p><img src="/sg/2022/03/05/db_index/Screenshot-7597088.png" class="" title="Screenshot-7597088"></li></ul><p>Problem 4: delayed parent updates</p><p>Problem 5: versioned latch coupling</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-445 database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 15-445 database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hw3 dynamic programming</title>
      <link href="/sg/2022/03/05/hw3_dp/"/>
      <url>/sg/2022/03/05/hw3_dp/</url>
      
        <content type="html"><![CDATA[<p>key word: state, dependency</p><h2 id="ps8"><a class="header-anchor" href="#ps8">¶</a>ps8</h2><ol><li><p>Problem 1: reduce state? We can easily think of at lease one state in this case which is the number of peppers Peter can pick.</p></li><li><p>(Rethink dp problem in a week)</p><ul><li><p>Problem 1.1: in which way sorting affect the results?</p><p>-&gt; data structures/algorithms</p></li><li><p>problem 2: how to make it acyclic?</p><p>in building block problem, the key problem is pre-processing part.</p></li></ul></li><li><p>princess plum: define subproblems?</p><p>a bottom-up way:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_paths</span>(<span class="params">F</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Input:  F | size-n direct access array of size-n direct access arrays</span></span><br><span class="line"><span class="string">              | each F[i][j] is either &#x27;t&#x27;, &#x27;m&#x27;, or &#x27;x&#x27;</span></span><br><span class="line"><span class="string">              | for tree, mushroom, empty respectively</span></span><br><span class="line"><span class="string">    Output: m | the number of distinct optimal paths in F</span></span><br><span class="line"><span class="string">              | starting from (0,0) and ending at (n-1,n-1)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    n = <span class="built_in">len</span>(F)</span><br><span class="line">    K = [[-<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    X = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> F[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">and</span> j == <span class="number">1</span>:</span><br><span class="line">                K[<span class="number">1</span>][<span class="number">1</span>], X[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> F[i - <span class="number">1</span>][ j - <span class="number">1</span>] == <span class="string">&#x27;m&#x27;</span>: m = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: m = <span class="number">0</span></span><br><span class="line">            K[i][j] = <span class="built_in">max</span>(K[i-<span class="number">1</span>][j], K[i][j-<span class="number">1</span>]) + m</span><br><span class="line">            <span class="keyword">if</span> K[i][j-<span class="number">1</span>] + m == K[i][j]: X[i][j] += X[i][j-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> K[i-<span class="number">1</span>][j] + m == K[i][j]: X[i][j] += X[i-<span class="number">1</span>][j]</span><br><span class="line">    <span class="keyword">return</span> X[n][n]</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps9"><a class="header-anchor" href="#ps9">¶</a>ps9</h2><h2 id="reminder-v2"><a class="header-anchor" href="#reminder-v2">¶</a>reminder</h2><p>Techniques:</p><ol><li>store parent pointers to track info.</li></ol><h2 id="recitation-v2"><a class="header-anchor" href="#recitation-v2">¶</a>recitation</h2><p>Problem: <strong>state</strong>, dependency?</p><ol><li>longest increasing subsequence</li></ol><h3 id="Iterative-recursive"><a class="header-anchor" href="#Iterative-recursive">¶</a>Iterative / recursive</h3><p>a Fibonaccci example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">    a0 = <span class="number">0</span></span><br><span class="line">    a1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(a0)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(a1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">sum</span> = a0 + a1</span><br><span class="line">            a0 = a1</span><br><span class="line">            a1 = <span class="built_in">sum</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">n</span>):</span></span><br><span class="line">  <span class="comment"># without memoization recursive version</span></span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="Partitions"><a class="header-anchor" href="#Partitions">¶</a>Partitions</h3><ol><li>subset sum: solve with dp in O(nS) time</li></ol><h3 id="Complexity"><a class="header-anchor" href="#Complexity">¶</a>Complexity</h3><p>problem: how does running time compare to input?</p><ol><li>Decision problems: assignment of inputs to No (0) or Yes (1).<ul><li>Classes: R, EXP, P(focus in this class)</li></ul></li><li>Decidablilitiy: problem is decidable if runtime of existing program is finite.</li><li>Reductions: solve problem A -&gt; by solving problem B we know how to solve</li></ol><h2 id="Olc"><a class="header-anchor" href="#Olc">¶</a>Olc</h2>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.006 algorithms </tag>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《那不勒斯四部曲》—— 真实的虚构</title>
      <link href="/sg/2022/03/03/elena/"/>
      <url>/sg/2022/03/03/elena/</url>
      
        <content type="html"><![CDATA[<p>最初接触到这套书还是18年时，断断续续地今天才算看完。我一直对讲述地过于真实的书不忍卒读，这本书把两位主人公莱农（格雷科），莉拉（赛鲁罗）间复杂的友谊刻画地非常有亲切感，我在看这套书时总会发现自己既有莱农的一些特质也有莉拉的一面，书中的文字让我反思这些特点是怎样影响我的世界观的。不仅如此，这套书讲述了一个残酷的关于女性的真相，穿杂的情节即使在现实中发生也不会突兀。那就是女性受到的系统性偏见不会由于阶级的提升而发生改变，无论这个女人是工人阶级，中产阶级还是上流社会，都不可避免地陷入一些特殊的牢笼中，比如教育，生育，家庭暴力，情感关系等。由于我对现实生活中中产阶级及以上的家庭模式不太了解，所以本文的讨论仅限于此书发生的地点年代设想，尽管我怀疑现实中的模式并不会偏离太多。</p><h2 id="背景"><a class="header-anchor" href="#背景">¶</a>背景</h2><p>主人公出生的地方是二十世纪三四十年代那不勒斯一个破败的社区，所在的家庭都在生存线上挣扎。莱农是家中长女，有一个妹妹，两个弟弟，父亲在市政府做门房。莉拉有个哥哥，父亲是个鞋匠。社区中大多都是这样的家庭，除了卡拉奇家和索拉拉家。卡拉奇家开了肉食店在早期很赚钱，而索拉拉家通过放高利贷和一些灰色产业在整个那不勒斯都横行霸道。</p><img src="/sg/2022/03/03/elena/Screenshot-6311043.png" class="" title="Screenshot-6311043"><p>她们的友谊互相支撑着彼此走过了很艰难的时刻。尝试着写了几遍但感觉自己的文笔写不出她们之间深刻而充满矛盾的关系，就作罢了。</p><h2 id="教育"><a class="header-anchor" href="#教育">¶</a>教育</h2><p>我认为教育和家庭是人生中最重要的东西，这一点是受苏姿丰那篇演讲的影响也是个人在实践中的体会。然而教育不只代表着学校的教育，我认为教育中最重要的一部分就是自我教育，如果不知道最后的目标具体是什么，那么现在又能有什么支点呢？书中莉拉和莱农接受到的教育是明显不同的，莱农凭借努力考上了当时最有名的学府之一比萨高师，是经过规范训练的大学生；而莉拉小学辍学后就再也没有受到任何正规的教育。我非常敬佩两位主人公的求知欲，莉拉在知道不能在上学后没有自暴自弃而是到社区里唯一一家图书馆用一家四口人的名字借书，之后也陆续学习了拉丁语和希腊语，因为莱农告诉过她初中高中就学这些东西。而在失败的婚姻结束后，她迷上了计算机知识，于是开始学习函授的计算机课程，最后通过技术改变了自己的生活，创立了一家相关的公司。而莱农尽管没有像同学一样显赫的家世，但她一直努力学习着自己欠缺的有力的语言表达能力，思考怎样去有力地组织语言。在父母不同意她去上大学浪费钱时，她坚定地表明了自己的观点。</p><p>然而城区的同龄人并没有这样的幸运，大多数人都是早早辍学。和她们一起长大的女生没能够得到改变的机会，在后来的很多事上只能任人摆布，动辄打骂。当时的索拉拉兄弟经常开着车在城区里找青春期的女生，有女生甚至会羡慕被欺凌的拖进车里的人。只有莉拉知道他们到底会对那个女孩做什么事，并告诉莱农如果她被这么对待一定要叫她。她会划破索拉拉兄弟的喉咙。性教育在社会中普遍是个难以启齿的话题，本来只是了解一些正常的生理常识和手段，但却未能受到家长和学校的重视。想到林奕含发生的悲剧，我至今也没能读完她写的那本书。</p><img src="/sg/2022/03/03/elena/IMG_0236.PNG" class="" title="IMG_0236"><img src="/sg/2022/03/03/elena/IMG_0237-6316928.PNG" class="" title="IMG_0237"><h2 id="婚姻-生育-离婚"><a class="header-anchor" href="#婚姻-生育-离婚">¶</a>婚姻/生育/离婚</h2><p>婚姻的本质是一种契约关系，包含权利和义务，虽然社会上常以爱情来矫饰它。我认为没有爱情缔结这样的关系是非常不可靠的，我还认为爱情是一种流动的状态，并不能被婚姻所包括。</p><p>主人公的婚姻都是不同方向的悲剧。莉拉在结婚当天发现温和外表的丈夫下的伪善和暴力，并被婚内强暴，经历了漫长时间的折磨终于抛下一切离开了丈夫。莱农的婚姻或许更常见的被看成一个幸福的婚姻吧。莱农嫁给了一个学阀家族的儿子，离开了破旧的老城区到比萨生活，有独栋房子，丈夫有丰厚的收入。然而事实是她在温吞如水的生活中被母职困住，每天忙着做各种家务事。生孩子养孩子几乎都是莱农一个人在忙，丈夫没有帮助她任何事情，失去了学习和写作的自由。她于是想难道自己上了大学那么多年就是为了做这些事请吗？莱农虽然表面上有精致的生活，有权势大的婆家，有大学教授的丈夫，但是她在繁杂的琐碎家务事中无法做想做的事情。丈夫在小孩刚出生时完全不管，只顾着自己写作看书学习，孩子哭了只能莱农去哄和照顾。这样在如死水的环境里过了很多年。</p><h2 id="独立和工作"><a class="header-anchor" href="#独立和工作">¶</a>独立和工作</h2><p>我一直认为现代女性最重要的一点就是要独立。独立不是指孤立，是指不用依附任何人，在生活中以平等合作的态度对人。而独立离不开工作，工作能产生个人价值，给人一个支点前进。</p><p>莉拉没离开丈夫前只能依附着丈夫存在，直到她离开后找到了一份肉食厂工作她才觉得自己找到了一种长久失去的自由。而莱农长久被困在家庭中不能够继续写作，所写的文字丈夫从来都不会看只是敷衍了事，直到重新开始写作后才理顺了自己的想法，有了更近一步的思考。她们都在生活中逐渐找到了自己的位置，然后开始发明创造。</p><h2 id="情感关系"><a class="header-anchor" href="#情感关系">¶</a>情感关系</h2><p>书中一个很争议的人物就是尼诺。尼诺的虚伪的不同在于他伪装自己成一个关心女性，赞美女性，鼓励女性摆脱压迫的人，实际上他对妻子也是和大多数男性同样的方式。书中和剧里尼诺都展现出帅气有魅力学识的人，但实际上他只是个和他父亲一般虚伪自私的人。书中形容他的才华是没有根基的，他相信权威，是个追名逐利的技术官僚。他可以对任何一个女人——对他有利的——说爱她，然后转头离开后就不闻不问，直到自己哪天需要借用她的帮助再回来。他抛弃过莉拉——当时莉拉以为他们是真心相爱，互相帮助学习的——留下怀孕的莉拉在偏僻的住处里无人问津，他抛弃过一个迷恋他才华的女学生——后来有了一个小孩——之后就完全抛诸脑后了…</p><p>（改天再写）</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>recitation ds</title>
      <link href="/sg/2022/03/01/recitation_ds/"/>
      <url>/sg/2022/03/01/recitation_ds/</url>
      
        <content type="html"><![CDATA[<p>虽然去年11月学了6.033 3/4 的部分，但当时浅尝辄止，没能够结合不同场景思考。为此，本文会主要记录对分布式系统部分的设计细节和实现部分相关问题的想法。</p><h2 id="GFS"><a class="header-anchor" href="#GFS">¶</a>GFS</h2><p>GFS: machine failures</p><p>简单来说，GFS是一个使用拷贝的文件系统，它的结构包含controller, chunk server, client。这些角色的交互来完成拷贝的功能，以防止大集群中某个机器的崩溃。它和unix文件系统的区别在于，GFS更能适用有很大工作量写入写出读入读出的情况（有数百TB计的存储量的数千磁盘在数千机器上的大集群收到数百用户并行的访问）</p><h2 id="Mapreduce"><a class="header-anchor" href="#Mapreduce">¶</a>Mapreduce</h2><h2 id="ZFS"><a class="header-anchor" href="#ZFS">¶</a>ZFS</h2><h2 id="consistency-guarantees"><a class="header-anchor" href="#consistency-guarantees">¶</a>consistency guarantees</h2><p>What: Consistency guarantee is a contract between the data provider and clients. It can affect a system in three aspects: consistency, performance and availability.</p><p>How: A system designer should understand the particular kind of need of clients and how the system operates to decide which consistency guarantee.</p><p>Why: It matters because the system can be the best version for client’s needs, faster without loss of correctness.</p><img src="/sg/2022/03/01/recitation_ds/Screenshot-6119783-6131431.png" class="" title="Screenshot-6119783"><h3 id="Design-process"><a class="header-anchor" href="#Design-process">¶</a>Design process</h3><blockquote><p>Data availability is a term used by computer storage manufacturers and storage service providers to describe <strong>how data should be available at a required level of performance in situations ranging from normal through disastrous</strong>.</p></blockquote><p>The paper describes four intermediate consistency protocols between strong consistency and eventual consistency, which gives more flexibility while preserving correctness. Giving the example of baseball game, it lists six peoples to use the data store for different purposes. Here, I will give the reasoning process to the table 2.</p><p>The consitency and performance have inverse correlation. In other words, if the data is more consistent, it means the server which updates the data needs to pass on the new data to every other servers. One server crashed would cause the wrong data got transferred. Therefore strong consistency model has excellent consistency and poor permanence and vice versa.</p><p>The four intermediate consistency models can get higher performance than strong consistency due to partial correctness of the data. They don’t need the data in every server is consistent at the same time giving the specific applications providing. Bounded staleness has poor availability as the strong consistency for the same reason of requiremet for time. The server can not guarantee the correctness in specific time.</p><img src="/sg/2022/03/01/recitation_ds/Screenshot-6115963.png" class="" title="Screenshot-6115963"><h3 id="Baseball-example"><a class="header-anchor" href="#Baseball-example">¶</a>Baseball example</h3><p>A baseball game example: minimal consistency of read operation in a simple data store(replicated storage systems) containing only two teams’ scores.</p><ol><li>Official scorekeeper: the scorekeep is the only person to write the data. They need the most updated scores so that strong consistency seems the appropriate one. However they are the only server to write the data and pass on to others. Therefore read my writes would be sufficient.</li><li>umpire: strong consistency. They can’t provide wrong scores because it’s a fair game.</li><li>Radio reporter: They need tell the audience a more updated scores than before. Consistent prefix is not enough because they are using scorekeeper’s data and old scores can emerge later than new ones. Therefore it have to maintain the monotonic reads at the same time. Alternatively, monotonic reads with bounded staleness can achieve the same goal.</li><li>sportswriter: bounded staleness. They need the most updated scores but not in a hurry. So they can wait for the final score at least it is correct one.</li><li>statistician: for one team’s score, they need strong consistency; for one season’s score, they need read my writes for the same reason as scorekeeper.</li><li>stat watcher: eventual consistency. It’s ok to provide out-of-date data.</li></ol><img src="/sg/2022/03/01/recitation_ds/Screenshot-6121625-6131431.png" class="" title="Screenshot-6121625"><img src="/sg/2022/03/01/recitation_ds/Screenshot-6121560-6131431.png" class="" title="Screenshot-6121560"><h3 id="Some-thinking"><a class="header-anchor" href="#Some-thinking">¶</a>Some thinking</h3><ol><li><p>?? What systems need weaker consistency</p></li><li><p>I think understandability is a worthy design goal. If even the developers can hardly understand the protocol, how can they make improvements based on the customer needs and develop relevent features on top of it.</p></li><li><p>To decide on a particular consistency model, I think it requires a thorough study of current target customers and future costs it may bring giving the current design goal. Different cloud storage providers have made different decisions. Amazon S3 uses eventual consistency to improve the performance and availibility. It gains more availibility with the proliferation of geo-replicated services.  However Azure aims for specific organizations which needs strong consistency for correctness. I think they are targeting different customer bases.</p></li></ol><h3 id="Reference"><a class="header-anchor" href="#Reference">¶</a>Reference</h3><p>[1] :   <a href="https://stackshare.io/stackups/amazon-s3-vs-microsoft-azure#:~:text=Amazon%20S3%20belongs%20to%20%22Cloud,you%20can%20store%20is%20unlimited.">Amazon S3 vs Microsoft Azure</a></p><h2 id="Raft"><a class="header-anchor" href="#Raft">¶</a>Raft</h2>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《文明6》——看不见的世界</title>
      <link href="/sg/2022/02/17/civilization/"/>
      <url>/sg/2022/02/17/civilization/</url>
      
        <content type="html"><![CDATA[<p>文明6是个回合制策略游戏，在寒假70个小时左右的时间里我开了几局存档了十几次，最后只赢了两局。虽然文明用了相对简化的形式展现，文明的发展过程和人对世界的探索有相通之处，这也是吸引我的地方之一。本文主要记录对游戏玩法的思考过程以及一些天马行空的想法。</p><img src="/sg/2022/02/17/civilization/imag.png" class="" title="imag"><h2 id="世界观"><a class="header-anchor" href="#世界观">¶</a>世界观</h2><p>文明有四种胜利的方式，科技，文化，宗教，统治，如果设定的回合数结束了仍没有任何一方达成胜利，那么分数最高的玩家赢。</p><p>文明的发展分成科技树和市政树，对应的历史发展的不同时期，从氏族，农耕文明，中世纪，文艺复兴，现代，原子能时代到信息时代，不同的科技和市政有相应的前置，达成能够解锁下一步行动。</p><p>玩家选择难度和地图开局。</p><h2 id="时间就是金币"><a class="header-anchor" href="#时间就是金币">¶</a>时间就是金币</h2><p>生产力决定建筑完成的回合数，当解锁了主要建筑后，可以用时间或者金币来获得附加建筑。文明里我认为最重要的就是金币，其次是资源。金币可以换取时间，任何能够换得时间的行动都应该采取。</p><p>科技树相比 breadth-first search 采用 depth-first search 最好，在确定目标的情况下这能最大程度的增加科技点。在给定的时期内找到能够有最快发展速度的可能方法，这需要知道可能性大的方式，并且确保走的下一步能够换得更宽的路。</p><h2 id="伟人的帮助"><a class="header-anchor" href="#伟人的帮助">¶</a>伟人的帮助</h2><p>世界是复杂的，单一方式的想法不能够解决问题。</p><p>文明中伟人的存在能够根据其类别能够给予不同加成，但这种加成是因人而异的。原本我以为只要有大科学家的帮助，那么科技发展就不成问题了。于是某一局里我给所有城市都建了学院，以及附加的建筑，可是其他类别的建筑受到生产力的限制都没能得到很好的发展。而这又影响到了学院的建设，进入恶性循环，数不清多少次都止步于工业时期。</p><p>很高兴的是我最新赢的这局终于获得了图灵。</p><img src="/sg/2022/02/17/civilization/ima.png" class="" title="ima"><p>虽然文明最强的 buff 是信息时代的大科学家萨拉姆，能够给信息时代所有的科技启动尤里卡时刻。</p><img src="/sg/2022/02/17/civilization/image.png" class="" title="image"><h2 id="因势利导"><a class="header-anchor" href="#因势利导">¶</a>因势利导</h2><p>文明的基础在于城市发展，城市发展繁荣才能获得更多金币，带来更多别的选择。获得新城市的方式有两个，军事掠夺和开拓者自建。从文明发展开始获取新城市是最好的，因为城市够多发展商会和建立贸易路线才能获得更多的金币。每局能够获得500金币左右的加成就算比较好的发展趋势了，这一般需要10个城市左右。我输的几局里城市的数量相对都较少，只有6个城市，发展速度也不行。</p><p>城市自建取决于当前人士的人口和未开发的土地资源。建筑获得有人口数量要求，开拓者会减少一个人口，如果城市发展速度不足那么当前城市发展就会停滞。而军事掠夺只要有比目标城市够强的军队就行。文明里战争设置的难度不高，只有玩家能够选择多个城市打击，而其余电脑用户玩家只有在邻国的军队已经到或过了边界才会攻击（或许之后能找到朋友一起玩）。</p><p>我最新玩的一局选择的是实际地球地图模拟，随机市政科技模式，随机君主是西班牙菲利普三世。他的天赋主要是金币，生产力和宗教。发展重商主义能够获得更多的金币和生产力，而宗教信仰与敌人不同能够使军队获得更多战斗力。玩到中间我觉得通过战争掠夺能够获得更多科技点，于是选择和科技发展第一的邻国刚果（非洲）发动战争。当时军队都在欧洲南部，宣战过后北非最接近刚果的城市在边界就受到了攻击，而大量军队经过五个回合左右到了边界就直接被科技等级更高的刚果打败了，文明等级对战争的直接影响很大。</p><img src="/sg/2022/02/17/civilization/i.png" class="" title="i"><h3 id="观察世界"><a class="header-anchor" href="#观察世界">¶</a>观察世界</h3><p>我认为文明里任何的单一因素都对结果没有绝对作用，所以不用在意一时一地的得失。侦察兵去探索其它地方遇到别的文明是必要的，但是基础的是城市发展，周围邻国的发展情况比远方的世界更重要。西班牙所处的地方靠近海但首都马德里并不在海岸，而不能出海就限制了新大陆城市的开拓，所以在最开始我就想办法先发展航海业，同时宁愿花金币扩大边境也不能在某条路上卡死了。</p><p>周边国家可以发动战争的处于同一层次的文明主要有英国，德国，罗马。罗马科技水平比我略高。由于法国君主关系和我不大好，经常谴责我（？），巴黎也阻碍了我往英德那边跑，所以最开始我就占领了巴黎，这导致我的军队主要集中在欧洲。在打刚果失败后，我的打算是通过掠夺英国将军队从火枪手发展到步兵。于是我读取存档到打刚果前，占领了英国两座城市。占领英国后我发现德国的边界线已经被周边国家锁死了，而德国文明还未发展出航海术，相比世界其它国家基本停滞不前于是我又占领了德国，没想到德国只有这一座城市，他们一直被边界锁住没有开拓新的城市。这时候我的军队已经发展到了线列步兵，比步兵低一个等级。</p><p>文明我更倾向的胜利方式一直都是科技胜利，毕竟是个理工生😼。战争掠夺的主要目的也是发展科技。由于军队发展水平仍比不上科技更高的刚果，也为了打开通往别的国家的大门我又占领了相邻的罗马两个城市。这时候军队发展到了步兵程度，城市能够建立机场，贸易路线也开拓得够多，每回合加成300金币左右。同时我发现在世界排名中我最领先的胜利方式是统治胜利，并且统治胜利的程度比三种其它君主领先的方式要高。所以我选定了统治胜利的方式，这才发现需要占领其它所有国家的首都。</p><p>在后来发展过程中刚果的文化胜利程度有一段时间和我的统治胜利程度差不多。由于奇观能带来文化加成，我选择了刚果两座奇观最多的城市作为战略目标。轰炸机和战斗机的出现和文明难度不高的战争模式使西班牙一步步占领了刚果，中国和日本的首都。这时候我确定自己基本上能赢了，剩下的只是时间问题。</p><p>阿兹特克由于在其它大陆，我派出了两艘战舰和两支机械化步兵确定它首都的位置，然后布置飞机在疆域东侧空袭。最后一个首都反而花了额外的时间，虽然之前掠夺过挪威的城市但我忘记自己并未占领它的首都，查看世界排名面板后我才发现有漏网之鱼，确定了最后一个战略目标。攻下后到这里终于获得了统治胜利。</p><img src="/sg/2022/02/17/civilization/m.png" class="" title="m"><h3 id="节点存档"><a class="header-anchor" href="#节点存档">¶</a>节点存档</h3><p>游戏能够存档，人生却不能重来。今后我也会遇到更多失败。只要不自己认输，任何事情都有转机。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘录</title>
      <link href="/sg/2022/01/11/algernon/"/>
      <url>/sg/2022/01/11/algernon/</url>
      
        <content type="html"><![CDATA[<h3 id="Flowers-for-Algernon"><a class="header-anchor" href="#Flowers-for-Algernon">¶</a>Flowers for Algernon</h3><p>“Any one who has common sense will remember that the bewilderments of the eyes are of two kinds, and arise from two causes, either from coming out of the light or from going into the light, which is true of the mind’s eye, quite as much as of the bodily eye; and he who remembers this when he sees any one whose vision is perplexed and weak, will not be too ready to laugh; he will first ask whether that soul of man has come out of the brighter life, and is unable to see because unaccustomed to the dark, or having turned from darkness to the day is dazzled by excess of light. And he will count the one happy in his condition and state of being, and he will pity the other; or, if he have a mind to laugh at the soul which comes from below into the light, there will be more reason in this than in the laugh which greets him who returns from above out of the light into the den.” (Plato, The Republic)</p><p>有些常识的人都会记得，眼睛的困惑有两种，也来自两种起因，不是因为走出光明，就是因为走进光明所致，不论是人体的眼睛或心灵的眼睛，都是如此。记得这件事的人，当他们看到别人迷茫、虛弱的眼神，他们不会任意嘲笑，而会先询问这个人的灵魂是否刚从更明亮的生命走出来，因为不适应黑暗而无法看清周遭；或是他刚从黑暗走入光明，因为过多的光芒而目眩。他会认为其中一个人的情况与心境是快乐的，并对另一个人产生怜悯。或是，他可能想嘲笑从幽冥走进光明的灵魂，但这总比嘲笑从光明世界回到黑暗洞穴的人更有道理。</p><h3 id="Dead-Poets-Society"><a class="header-anchor" href="#Dead-Poets-Society">¶</a>Dead Poets Society</h3><p>I went to the woods because I wished to live deliberately, to front only the essential facts of life, and see if I could not learn what it had to teach, and not, when I came to die, discover that I had not lived. I did not wish to live what was not life, living is so dear; nor did I wish to practise resignation, unless it was quite necessary. I wanted to live deep and suck out all the marrow of life, to live so sturdily and Spartan-like as to put to rout all that was not life, to cut a broad swath and shave close, to drive life into a corner, and reduce it to its lowest terms, and, if it proved to be mean, why then to get the whole and genuine meanness of it, and publish its meanness to the world; or if it were sublime, to know it by experience, and be able to give a true account of it in my next excursion. For most men, it appears to me, are in a strange uncertainty about it, whether it is of the devil or of God, and have somewhat hastily concluded that it is the chief end of man here to “glorify God and enjoy him forever.”</p><p>我到林中去，因为我希望谨慎地生活，只面对生活的基本事实，看看我是否学得到生活要教育我的东西，免得到了临死的时候，才发现我根本就没有生活过。我不希望度过非生活的生活，生活是那样的可爱；我却也不愿意去修行过隐逸的生活，除非是万不得已。我要生活得深深地把生命的精髓都吸到，要生活得稳稳当当，生活得斯巴达式的，以便根除一切非生活的东西，划出一块刈割的面积来，细细地刈割或修剪，把生活压缩到一个角隅里去，把它缩小到最低的条件中，如果它被证明是卑微的，那么就把那真正的卑微全部认识到，并把它的卑微之处公布于世界；或者，如果它是崇高的，就用切身的经历来体会它，在我下一次远游时，也可以作出一个真实的报道。因为，我看，大多数人还确定不了他们的生活是属于魔鬼的，还是属于上帝的呢，然而又多少有点轻率地下了判断，认为人生的主要目标是“归荣耀于神，并永远从神那里得到喜悦”。（徐迟译）</p><h3 id="我们内心的冲突"><a class="header-anchor" href="#我们内心的冲突">¶</a>我们内心的冲突</h3><p>有意识地去体验痛苦，虽然令人痛苦，却可以成为一项非常宝贵的资本。我们越去面对冲突，越去寻求自己的解决途径，我们的内心就越自由，越能得到更多的力量。唯有我们自愿去接受正面冲击时，才可能接近我们的理想，做自己人生的船长。而那种由内心迟钝而带来的，形是而实非的所谓安宁，根本不值得羡慕，它会使我们变弱，使我们轻易沦为太多影响的牺牲品。(卡尔·霍尼)</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3 processors</title>
      <link href="/sg/2021/12/31/6.004_processor/"/>
      <url>/sg/2021/12/31/6.004_processor/</url>
      
        <content type="html"><![CDATA[<h2 id="9-Pipelining"><a class="header-anchor" href="#9-Pipelining">¶</a>9 Pipelining</h2><h2 id="10-Design-Tradeoffs-in-Sequential-Circuits"><a class="header-anchor" href="#10-Design-Tradeoffs-in-Sequential-Circuits">¶</a>10 Design Tradeoffs in Sequential Circuits</h2><h2 id="11-RISCV-Processor"><a class="header-anchor" href="#11-RISCV-Processor">¶</a>11 RISCV-Processor</h2><h2 id="12-Pipelined-Processors"><a class="header-anchor" href="#12-Pipelined-Processors">¶</a>12 Pipelined Processors</h2><h2 id="13-Data-and-Control-Hazards-in-Pipelined-Processors"><a class="header-anchor" href="#13-Data-and-Control-Hazards-in-Pipelined-Processors">¶</a>13 Data and Control Hazards in Pipelined Processors</h2><h2 id="14-the-memory-hierarchy"><a class="header-anchor" href="#14-the-memory-hierarchy">¶</a>14 the memory hierarchy</h2><h2 id="15-Cache"><a class="header-anchor" href="#15-Cache">¶</a>15 Cache</h2><p>Goal: minimize the average memory access time by building a hierarchical memory system that had both low latency and high capacity.</p><p>Choice: block size -&gt; replacement policy -&gt; write policy</p><h3 id="Direct-mapped-cache-problem-conflict-misses"><a class="header-anchor" href="#Direct-mapped-cache-problem-conflict-misses">¶</a>Direct-mapped cache problem: conflict misses</h3><blockquote><p>Assuming a 1024-line DM cache with a block size of 1:</p><p>Consider running the 3-instruction LOOP A code with the instructions located starting at word address 1024 and the data starting at word address 2048 where the program is making alternating accesses to instruction and data, <em>e.g.</em>, a loop of LD instructions.</p><p>Address conflict will cause the current resident of a cache line to be evicted in favor of the new request.</p></blockquote><p>Conflict misses occur when two address call from cpu reflects to the same cache line.</p><p>If we use fully-associative cache instead, there will be no conflict misses since every address call reflects to different cache line at the high cost of specs/time.</p><p>To fix above problem,  it required a cache that could hold two 3-word blocks in DM cache while FA cache needs two of its cache lines and achieve a 100% hit ratio.</p><h3 id="N-way-set-associative-cache-N-DM-cache"><a class="header-anchor" href="#N-way-set-associative-cache-N-DM-cache">¶</a>N-way set-associative cache = N DM cache</h3><p>improvements compared to DM cache: reduce confilcting addresses</p><blockquote><p>N-way SA cache can accommodate up to N blocks whose addresses map to the same cache index.</p></blockquote><p>Associativitity: increase the number of cache locations checked on each access.</p><p>similar to how big the block size to achieve higher hit ratio, how many ways do we need to avoid the cache line conflicts in DM cache?</p><p>这里的way主要指cache中有多少条线路能够同时进行tag查询。</p><blockquote><p>The mapping from addresses to cache lines is designed to avoid conflicts between neighboring locations.</p></blockquote><p>we only need to worry about conflicts between the different regions: code, stack and data.</p><blockquote><p>Associativity tradeoffs: there’s little additional impact on the miss ratio beyond 4 to 8 ways.</p></blockquote><h3 id="Associativity-implies-choices"><a class="header-anchor" href="#Associativity-implies-choices">¶</a>Associativity implies choices</h3><p>when conflict misses occur, which location in cache to store new data fetched from main memory? This question leads to the replacement policies with the goal of minimizing the impact on the hit ration in the future.</p><blockquote><p>Idea: If a block has not been recently accessed, it’s less likely to be accessed in the near future. (Principle of locality)</p></blockquote><p>LRU replacement policy: replace the block that was accessed furthest in the past.</p><p>Except random policy and LRU, other strategies will occasionally cause a particular program to execute much more slowly than expected.</p><h3 id="Write-policy"><a class="header-anchor" href="#Write-policy">¶</a>Write policy</h3><p>How to handle memory writes in the cache when updating main memory with the new data?</p><ul><li><p>write-through: whenever the CPU sends a write request to the cache, the cache then performs the same write to main memory.</p><ul><li>pro:CPU locations: up-to-date value</li><li>Con:DRAM write is slow: bottleneck could be</li></ul><blockquote><p>what if the program is constantly writing a particular memory location, <em>e.g.</em>, updating the value of a local variable in the current stack frame?</p></blockquote></li><li><p>Write-behind: let the CPU continue execution while the cache waits for the write to main memory to complete</p><blockquote><p>if there’s another cache miss while the write is still pending, everything will have to wait at that point until both the write and subsequent refill read finish, since the CPU can’t proceed until the cache miss is resolved.</p></blockquote></li><li><p>Write-back(best write policy):  the contents of the cache are updated and the CPU continues execution immediately.</p><blockquote><p>The updated cache value is only written to main memory when the cache line is chosen as the replacement line for a cache miss.</p></blockquote></li></ul><p>write-back minimizes the number of accesses to main memory, preserving the memory bandwidth for other operations.</p><p>Implementation:</p><ul><li>how to replace a cache line?</li></ul><p>We can avoid unnecessary write-backs by adding another state bit to each cache line: the <em>dirty</em> bit. The dirty bit is set to 0 when a cache line is filled during a cache miss.</p><h2 id="16-Cache-Coherence"><a class="header-anchor" href="#16-Cache-Coherence">¶</a>16 Cache Coherence</h2>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.004 computation structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hw2 graph</title>
      <link href="/sg/2021/12/30/hw2_graph/"/>
      <url>/sg/2021/12/30/hw2_graph/</url>
      
        <content type="html"><![CDATA[<h2 id="ps5"><a class="header-anchor" href="#ps5">¶</a>ps5</h2><p>bfs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bfs</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bfs</span>(<span class="params">Adj, s</span>):</span></span><br><span class="line">    parent = [<span class="literal">None</span> <span class="keyword">for</span> v <span class="keyword">in</span> Adj]</span><br><span class="line">    parent[s] = s</span><br><span class="line">    level = [[s]]</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; <span class="built_in">len</span>(level[-<span class="number">1</span>]):</span><br><span class="line">        level.append([])</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> level[-<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> Adj[u]:</span><br><span class="line">                <span class="keyword">if</span> parent[v] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    parent[v] = u</span><br><span class="line">                    level[-<span class="number">1</span>].append(v)</span><br><span class="line">    <span class="keyword">return</span> parent</span><br></pre></td></tr></table></figure><p>Analysis:</p><ol><li><p>overall runtime of this bfs: O(|V| + |E|) or O(|E|)</p><ul><li>inner loop takes O(|E|) time: it cycles through all deg(v) outgoing edges from vertex v.</li><li>Parent has length |V|</li></ul></li><li><p>Graph radius</p></li><li><p>network</p><p>Approach: construct a graph.</p><p>Idea: add an additional node s (a super node) to the graph with an edge to every entry point.</p></li><li><p>search for connected components</p></li></ol><h2 id="ps6"><a class="header-anchor" href="#ps6">¶</a>ps6</h2><p>dfs</p><ol><li><p>topological sort: DAG</p><ul><li>Simple graph has no self-loops, DAG has no loops</li></ul></li><li><p>relaxation</p><ul><li>Tree: In a tree, there is a unique simple path between any pair of vertices, as two distinct simple paths could be used to construct a cycle.</li></ul></li><li><p>DAG relaxation</p></li><li><p>Bellman ford: detect loops and negative weight</p></li><li><p>Input</p></li><li><p>DAG problem</p><ul><li><p>Use DFS to check visiting order is the particular topological order</p></li><li><p>Topological tree has no backward edges/loops.</p></li><li><p>Auxiliary information: index</p></li></ul></li></ol><h2 id="ps7"><a class="header-anchor" href="#ps7">¶</a>ps7</h2><ol><li>Feel smooth when thinking it as water flow.<ul><li>How pq breaks ties may change the visiting order</li><li>It should be clear how to implement operations.</li><li>think about connected components （这个图的减小的方式是通过扔掉已经确定是最短路径的点来进行的</li></ul></li><li>negitive weights: detect negative loops<ul><li>connected component C: one vertex can reach any vertex<ul><li>we don’t know if the graph is connected. Likewise, it should be considered if a graph is a DAG/connected/weighted/…(graph’s property)</li><li>how to find a connected component: considering it is a undirected graph, use DFS/BFS to find C.</li></ul></li><li>Whether has negative loops<ul><li>Yes, V in C is -inf, V not in C is inf</li><li>No, use Dijkstra</li></ul></li></ul></li></ol><h2 id="reminder"><a class="header-anchor" href="#reminder">¶</a>reminder</h2><ol><li><p>python lambda expression</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>Why doesn’t  Dijkstra’s algorithm work with non-negative edge weights?</p><p>I think the tight bound is Dijkstra not allowing negative loops that will destroy its minimal property.</p></li></ol><h2 id="Recitation"><a class="header-anchor" href="#Recitation">¶</a>Recitation</h2><p>The problem solving process: transform raw input to IN, apply the algorithm we are familiar with, read raw output to OUT.</p><p>Then calculate the runtime and prove for correctness and efficiency.</p><img src="/sg/2021/12/30/hw2_graph/Screenshot-7934843.png" class="" title="Screenshot-7934843"><h3 id="Bfs"><a class="header-anchor" href="#Bfs">¶</a>Bfs</h3><p>connected components</p><h3 id="Dfs"><a class="header-anchor" href="#Dfs">¶</a>Dfs</h3><p><u>the important part is reasoning process so that we can reason by ourselves to get the answer</u></p><p>edge classification</p><ul><li>tree edge(dfs traverse)</li><li>not tree edge<ul><li>Back/forward/cross edge</li></ul></li></ul><p>Problem 1: how this concept relates to dfs?</p><p>Problem 1.1: how that defers to undirected graph compared with directed graph?</p><p>topological sort -&gt; directed, acyclic, graph</p><p>Problem 2: how this concept relates to topological sort?</p><h3 id="weighted-graph"><a class="header-anchor" href="#weighted-graph">¶</a>weighted graph</h3><p>problem 0: how to build a shortest path algorithm?</p><p>simple case: take an edge, split it up, put in fake nodes. Then use bfs</p><p>Problem 1: shortest path with odd edges?</p><p>比较有趣的是可以把两个状态看成两个平面。</p><p>Idea: track state during path building</p><p>problem 2: fast way, least fuel. An edge has fixed fuel cost, varying time cost depenTime table Tc (minutes): M = 24*60</p><p>Idea: choose a more reasonable state to track and reason carefully.</p><h4 id="Bellman-ford"><a class="header-anchor" href="#Bellman-ford">¶</a>Bellman-ford</h4><p>Notice: negative weight</p><p>-&gt; detect loops</p><h4 id="Dijkstra"><a class="header-anchor" href="#Dijkstra">¶</a>Dijkstra</h4><p>Notice: non-negative weight</p><p>讲义中分成两部分来看这个算法。整体上看： Dijkstra 像一个流动的水龙头阀门，水流从起点匀速地流动到下一个开关。算法把连续的过程通过 edge relaxation 离散的表示。</p><ol><li><p>Edge relaxation: priority queue -&gt; extract_min/insert/delete</p></li><li><p>算法的运行时长与 pq 的具体实现有关。可以从三种角度看：</p><p>存一对 (key, value)， 需要实现三个操作。</p><ul><li>当图的点密集时：|E| = Ω(|V|^2) ; direct_access_array; T = O(|V|^2+ |E|)</li><li>当图的点稀疏时：|E| = O(|V|) ; heap; T = O((|V |+ |E|) log |V |)</li><li>介于两者之间：binary heap; T = O(|V |log |V |+ |E|)</li></ul></li></ol><h3 id="All-pairs-shortest-paths"><a class="header-anchor" href="#All-pairs-shortest-paths">¶</a>All pairs shortest paths</h3><p>Runtime: at least O(V^2), because we need find all pairs’ path</p><p>naive approach: use n * SSSP algorithms:</p><ul><li>Using dijkstra for each vertices so as to solve APSP is easy to think but has details to rethink.</li></ul><p><strong>Better:</strong></p><p>tricky part: how to deal with negative weights?</p><ol><li><p>adgusting edge weights</p><p>problem 1: Are shortest paths still shortest paths?</p><ul><li>it’s easy to think of adjusting edge weights by adding a large number to each edge weight. But it will base paths with fewer edges.</li><li>Idea: pick a node u, add 10 to its incoming edges, and subtract 10 from its outgoing edges.</li></ul><p>Problem 2: it’s hard to think a general reweighting functions.</p></li><li><p>making all wights nonnegative</p><p>Clever choice of reweighting function: Add a new node X with weight-0 directed edges (X, v) for each v ∈V , and choose h(v) = d(X, v).</p></li><li><p>Johnson’s algorithm is basically two parts: reweighting function then n * dijkstra.</p><ul><li><p>the essense is the way to construct a new graph G’ with nonnegative weights:</p><p>Add new vertex X and weight-0 edges (X, v) for all v ∈V as above, and run Bellman-Ford from X to compute h(v) = d(X, v)</p></li><li><p>make sure changing back to G.</p><p>The correct d values in G are d(u, v) = d′(u, v) + h(v) −h(u), and the shortest path trees in G′are also shortest path trees in G</p></li></ul></li></ol><h2 id="olc-v2"><a class="header-anchor" href="#olc-v2">¶</a>olc</h2><ol><li><p>I think the basic idea is date transformation and build intuition about the problems.</p></li><li><p>why should we know about edge classification…?  because it would help to understand the problem better.</p></li><li><p>Lec 14 notes(19fall) about APSP is worthy reading.</p></li><li><p>Relaxation: it checks for (u,v) in constructing graph</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.006 algorithms </tag>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lab RISC-V</title>
      <link href="/sg/2021/12/30/lab_riscv/"/>
      <url>/sg/2021/12/30/lab_riscv/</url>
      
        <content type="html"><![CDATA[<h2 id="L1"><a class="header-anchor" href="#L1">¶</a>L1</h2><p><u>Problem</u>: (N-bit)two’s complement convert to decimal</p><p>In two’s complement notation the highest-order bit represents -2^(n-1) instead of +2^(n-1)</p><p>Notice 1: high-order bit of the N-bit repre has negative weight.</p><p>Notice 1.1: all numbers with MSB of 1 are negative</p><p>Notice 1.2: most negative/positive number, range</p><ul><li>Unsigned: 2 ** N - 1;</li><li>2’s complement: 2 ** (N-1) - 1</li></ul><img src="/sg/2021/12/30/lab_riscv/sc.png" class="" title="hex"><p><u>Problem</u>: addition</p><p>reason the correctness of the result by performing the addition(mod N) and compare the sign bit of the result to the sign bit of one of the addends when the sign bits of the addends are the same.</p><p>Notice 2: overflow when it is needed to drop extra digits.</p><blockquote><p>remark: Note that if you are only given a sequence of bits, you don’t actually know what number they<br>represent.  You also need be told how to interpret those bits: as an unsigned number or as a<br>signed number stored in two’s complement representation.</p></blockquote><p>try to prove:</p><p>Example: Given an unsigned n-bit binary integer = 𝒃𝒏*𝟏… 𝒃𝟏𝒃𝟎 , prove that 𝒗 is a multiple of 4 if and<br>only if 𝒃𝟎= 𝟎 and 𝒃𝟏= 𝟎.</p><h2 id="L2"><a class="header-anchor" href="#L2">¶</a>L2</h2><blockquote><p>Fact: <strong>Logical shift</strong> correspond to (left-shift) multiplication by 2, (right-shift) integer division by 2.</p><p><strong>Arithmetic shift</strong> is something related to 2’s-complement representation of signed numbers. In this representation, the sign is the leftmost bit, then arithmetic shift preserves the sign (this is called sign extension).</p></blockquote><ol><li><p>Load/store word instructions are related to address</p><p>sw x4, 4(x3): if register x3 contains 0x2000 and register x4 contains 0x3, the instruction “<u>sw x4, 4(x3)</u>” will store the value 0x3 into the memory location 0x2004.</p><p>lw x2, 8(x1): If register x1 contains 0x1000, then “<u>lw x2, 8(x1)</u> will find the memory address 0x1008 and copy its contents into register x2.</p></li><li><p>computation instructions are related to what is stored in the address/reg</p></li><li><p>Simple computation structure</p><p>1)Load a,b,c with LW</p><p>2)Perform operation</p><p>3)Store result with SW</p></li><li><p>Register -&gt; binary encoding: 5 bit, 32 registers(x0-x31)</p></li><li><p>example of fib logic: mv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// x1 = n </span><br><span class="line">// x2 = final result </span><br><span class="line">bne x1, x0, start // branch if n!=0 </span><br><span class="line">li x2, 0 </span><br><span class="line">j end             // pseudo instruction for jal x0, end </span><br><span class="line">start: </span><br><span class="line">addi x1, x1, -1   // n = n - 1 </span><br><span class="line">li x3, 0          // x = 0 </span><br><span class="line">li x2, 1                      // y = 1 (you&#x27;re returning y at the end, so use x2 to hold y) </span><br><span class="line">loop: </span><br><span class="line">bge x0, x1, end   // stop loop if 0 &gt;= n </span><br><span class="line">addi x5, x3, x2   // tmp = x + y </span><br><span class="line">mv x3, x2         // x = y (pseudo instruction for addi x3, x2, 0) </span><br><span class="line">mv x2, x5         // y = tmp (pseudo instruction for addi x2, x5, 0) </span><br><span class="line">addi x1, x1, -1   // n = n - 1 </span><br><span class="line">j loop            // pseudo instruction for jal x0, loop </span><br><span class="line">end:</span><br></pre></td></tr></table></figure></li></ol><h2 id="Riscv-lab"><a class="header-anchor" href="#Riscv-lab">¶</a>Riscv lab</h2><blockquote><p>An architecture, or more sp ecically an instruction set architecture, is the interface b etween software and hardware. The instruction set architecture precisely sp ecies the resources of the machine and the way programs can access and use them.</p></blockquote><ol><li><p>Convert loop into branches and jumps</p><ul><li><p>Condition at bottom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">maximum:</span><br><span class="line">li a2, 0 // load immediate 0 into a2 (largest_so_far)</span><br><span class="line">loop:</span><br><span class="line">lw a3, 0(a0) // load word at [[address stored in a0] + 0] into a3 (w)</span><br><span class="line">ble a3, a2, continue // skip next instruction if a3 (w) ≤ a2 (largest_so_far)</span><br><span class="line">...</span><br><span class="line">continue:</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">bnez a1, loop // go to top of lo op if a1 (n) 6= 0</span><br><span class="line">done:</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>Condition at top</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">maximum:</span><br><span class="line">li a2, 0 // load immediate 0 into a2 (largest_so_far)</span><br><span class="line">loop:</span><br><span class="line">beqz a1, done // go to &lt;done&gt; if a1 (n) = 0</span><br><span class="line">lw a3, 0(a0) // load word at [[address stored in a0] + 0] into a3 (w)</span><br><span class="line">ble a3, a2, continue // skip next instruction if a3 (w) ≤ a2 (largest_so_far)</span><br><span class="line">...</span><br><span class="line">continue:</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">j loop // go to top of lo op</span><br><span class="line">done:</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li><li><p>interacting with main memory: lw, sw</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lw rd, imm(rs) # we can load the word at address (n+imm) in memory into register rd.</span><br><span class="line">sw rs2, imm(rs1) # we can save the content of rs2 into memory at address (content of rs1 + imm)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.004 computation structures </tag>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 digital abstraction</title>
      <link href="/sg/2021/12/29/6-004-digit/"/>
      <url>/sg/2021/12/29/6-004-digit/</url>
      
        <content type="html"><![CDATA[<p>Goal: constraints exist in design and what makes our systems most efficient.</p><h2 id="4-digital-abstraction"><a class="header-anchor" href="#4-digital-abstraction">¶</a>4 digital abstraction</h2><p>goal: we want  to build a system for storing and processing information.</p><p>Background: analog systems and digital systems serve different direction.</p><p>design goal: the system should tolerate noise</p><p><u>problem</u>: how to represent 0 and 1 using voltage?</p><ul><li><p>naive approach: set one threshold V_T</p></li><li><p>Improvement 1: set two threshold V_L, V_H</p><ul><li>still have the issue dealing with the noise around threshold.</li></ul></li><li><p>improvement 2: divide signals range into input and output area. V_OL &lt; V_IL &lt; V_IH &lt; V_OH.</p><ul><li>an output of a 0 or 1 from some device won’t turn into an undefined or opposite bit when it is read into another input device.</li></ul></li></ul><p>Analysis: analog systems accumulate noise, while digital systems can manage to solve the problem mostly, so that the noise will be canceled at each stage in digital systems.</p><ol><li>Problem: buffer: copy one bit(input-&gt;output)<ul><li>Voltage transfer characteristics: Active components(gain &gt; 1)<img src="/sg/2021/12/29/6-004-digit/test.png" class="" title="test"></li></ul></li><li>digital circuits: two kinds, combinational circuits and sequential circuits.</li></ol><h2 id="5-CMOs"><a class="header-anchor" href="#5-CMOs">¶</a>5 CMOs</h2><p>Problem: how the gates are built?</p><ol><li><p>CMOs technology(Complementary metal-oxide semiconductor): packaged chip, silicon die, transistors as voltage-controlled switches</p></li><li><p>field effect transistor(FET) has three terminals: gate, source, drain.</p><ul><li><p>Two types: nFETs, pFETs</p><img src="/sg/2021/12/29/6-004-digit/test1.png" class="" title="t2"></li><li><p>Two examples to explain the behavior</p><ul><li>NOT gate: threshold V_TH, range(if V_IN &lt; V_TH, on; if V_IN &gt; V_DD - V_TH, off)</li><li>NAND gate</li></ul></li></ul></li><li><p><strong>functional behavior of transistors for building logic gates</strong></p><ul><li>complementary behavior: the pullup and pulldown networks are related in a complementary way, so that the pullup is on when the pulldown is off, and vice versa.</li><li>Two problem case<ul><li>Power supply and ground are both connected to the output -&gt; burn the circuit(driven X)</li><li>Output is disconnected</li></ul></li><li>Convention: In CMOS, we always use pFETs to implement the pullup network and nFETs to implement the pulldown network.</li><li>Fact:  individual CMOS gates cannot implement arbitrary Boolean functions.<ul><li>reason: CMOS gates are inverting</li></ul></li></ul><img src="/sg/2021/12/29/6-004-digit/test2.png" class="" title="t3"></li><li><p>physical design:p-n juctions, capacitor, gate delay…</p></li><li><p>power dissipation for our CMOS gates</p><ul><li>Dissipation comes in two parts: dynamic power, static power</li><li>they are extremely good at having low power consumption.</li></ul></li></ol><h2 id="6-combinational-logic"><a class="header-anchor" href="#6-combinational-logic">¶</a>6 combinational logic</h2><h3 id="introduction"><a class="header-anchor" href="#introduction">¶</a>introduction</h3><ol><li><p>combinational logic has two part: function spec and timing spec</p><ul><li>Function has two part: truth table and boolean expression.<ul><li>Fact: all combinational functions can be specified with boolean expressions.</li></ul></li><li>Timing: propagation delay</li></ul></li><li><p>static discipline: what is a combinational device</p></li><li><p>problem: how fast are circuits?</p><ul><li>measurement: clock periods, clock frequencies</li></ul><p>processor will change the inputs into our system and read the outputs. So we need to read the inputs correctly before it is changed later.</p><p>Problem 1: we need an upper bound to ensure that we can get the input in the worst-case.</p><p>idea: combinational contract</p><ul><li>Measurement: contamination delay(lower bound)</li></ul></li><li><p>Boolean algebra</p><ul><li><p>Any Boolean algebra can be derived from AND, OR, NOT</p></li><li><p>duality principle holds for all expressions</p></li><li><p>Properties: commutativity, associativity, distributivity…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + (b * c) = (a + b) * (a + c) # distributivity</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Truth table =&gt; boolean expressions</p><ul><li><p>construct a normal form: sum of products</p></li><li><p>Simplify: minimal sum-of-products -&gt; use algebraic manipulation(reduction, complements…)</p><ul><li><p>to reduce the number of gates</p></li><li><p>Tradeoff: more gates or increase levels leading to increase propagation delay</p><p>(in this class, minispec takes care for us.)</p></li><li><p>remark: synthesizing optimized circuits is a very hard problem</p></li></ul></li></ul></li><li><p>boolean expressions =&gt; circuits: logic synthesis</p><ul><li>Term: logic gate, logic diagram</li></ul></li><li><p>cell library:  xor, nand, nor,xnor</p></li></ol><h2 id="7-Sequential-Circuits"><a class="header-anchor" href="#7-Sequential-Circuits">¶</a>7 Sequential Circuits</h2><h2 id="8-Circuits-logic-in-Minispec"><a class="header-anchor" href="#8-Circuits-logic-in-Minispec">¶</a>8 Circuits logic in Minispec</h2>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.004 computation structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>blog building log</title>
      <link href="/sg/2021/12/29/blog/"/>
      <url>/sg/2021/12/29/blog/</url>
      
        <content type="html"><![CDATA[<p>前言：虽然之前也草草弄过几次博客页面，但都不怎么满意当时选用的风格，也没必要自己从头写一个，于是今天花时间寻找了自己喜欢的风格。(10.30)</p><p>我需要的功能是有二级索引，极简风，可读性高，支持markdown以及部署简单。最后选择的是<a href="https://github.com/probberechts/hexo-theme-cactus">cactus</a>风格，用hexo+github pages部署。</p><h3 id="操作"><a class="header-anchor" href="#操作">¶</a>操作</h3><p>同时参考了<a href="https://zhuanlan.zhihu.com/p/35668237">这篇文章</a>。遇到的坑是刚开始只看选用主题的安装说明不清楚hexo需要先init然后再将风格文件复制到init后的当前文件的theme文件夹下。</p><h4 id="产生新页"><a class="header-anchor" href="#产生新页">¶</a>产生新页</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about //产生一个新的分页about</span><br><span class="line">hexo new post &quot;hello world&quot; //产生一篇新的博客&quot;hello world&quot;到source/_posts中</span><br></pre></td></tr></table></figure><h4 id="发布"><a class="header-anchor" href="#发布">¶</a>发布</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="文件结构"><a class="header-anchor" href="#文件结构">¶</a>文件结构</h3><p>每篇文章都包含这个文件的基本信息。</p><p>12.30: 想了下还是使用了这样的分类格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: name</span><br><span class="line">date: 自动生成</span><br><span class="line">tags:</span><br><span class="line">- 子类（课程名）</span><br><span class="line">- 子类（属性）</span><br><span class="line">categories: </span><br><span class="line">- 主类</span><br><span class="line">- 子类</span><br></pre></td></tr></table></figure><h4 id="themes"><a class="header-anchor" href="#themes">¶</a>themes</h4><ul><li>color: classic,dart,light,white</li><li><s>tag和catagories是两个独立的分页</s> categories 和 search 是独立的分页</li><li>Markdown 采用两级索引（二，三），最多三级。在第三级前加&quot;&gt;&quot;。否则排版不能表示出分级差异。</li><li>还有很多别的功能，但我不需要这些就没有再弄了。</li></ul><h4 id="images"><a class="header-anchor" href="#images">¶</a>images</h4><p><s>图不知道为什么在这个主题下不能用mark down语法的相对路径上传。使用额外的图床有些把问题弄得复杂了，所以博文我会只使用文字，本地笔记文件才会附加图作为提示。（不过传图好麻烦，我选择放弃。本地笔记文件上有图就行了(12.7)。</s></p><p>需求：markdown相对路径引用</p><p>限定：文章/文件的名称不能含空格/中文，否则无法解析。（而我经常用空格在文章名里🙂️</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">&#x27;s/ /_/g&#x27;</span> *  <span class="comment"># 将所有文件名的空格替换为下划线</span></span><br></pre></td></tr></table></figure><ol><li><p>选择图片引用插件：<s>经过测试后选择：<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>, 而不是hexo-asset-…（长时间没有更新，并且只支持绝对路径引用，不符合我需要的条件）</s> 使用 hexo-renderer-mared-it, 支持更多的功能比如：footnote<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, 上标，下标</p></li><li><p>更改typora设置</p><img src="/sg/2021/12/29/blog/test0.png" class="" title="Screenshot2021-12-29 PM 11.01.52"></li><li><p>如果是mac用户，将截屏格式修改成全英文</p><ul><li><p>这个插件根据测试不支持中文名图片</p></li><li><p>后缀不支持时间日期格式</p><ul><li><a href="https://www.idownloadblog.com/2015/04/15/how-to-remove-date-time-screenshots-mac/">更改截屏格式</a>：名称，后缀</li></ul></li></ul></li></ol><p>问题分析：test-first-programming</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>footnote grammar: <code>[^1]</code> , <code>[^1]:</code> , without blank. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> toolbox </category>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1 assembly</title>
      <link href="/sg/2021/12/28/6.004_assembly/"/>
      <url>/sg/2021/12/28/6.004_assembly/</url>
      
        <content type="html"><![CDATA[<p>with great amounts of help from Andrew Lin’s 20fall 6.004 class notes, I’ve recently reviewed the course.</p><h2 id="0-introduction"><a class="header-anchor" href="#0-introduction">¶</a>0 introduction</h2><p>Goal: how to physically implement computation?</p><h2 id="1-binary-representation"><a class="header-anchor" href="#1-binary-representation">¶</a>1 binary representation</h2><ol><li>binary representations</li><li>modular arithmetic idea: wheel modulo 2**N</li><li>binary encoding</li><li>two’s complement</li></ol><h2 id="2-assembly"><a class="header-anchor" href="#2-assembly">¶</a>2 assembly</h2><ol><li>microprocessor: comprised of: register file, ALU(computation), main memory</li><li>Assembly: comprised of: computation(arithmetic, comparison, logical, shift), load/store, control transfer</li><li>Three-address instructions: reg-imm instructions, reg-reg instructions,…</li><li>see the pattern behind these instructions</li></ol><h2 id="3-procedures"><a class="header-anchor" href="#3-procedures">¶</a>3 procedures</h2><p>Problem: hotw to translate high-level program to RISC-V?</p><ol><li><p>Pseudoinstructions: mv, lui, li…</p></li><li><p>Schema</p><ul><li><p>compiling simple expressions into RISC-V code</p><ul><li>Assign variables to regs</li><li>tranlate operators into computational instructions</li><li>use reg-imm instructions</li></ul></li><li><p>conditional statements</p><ul><li><p>if</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># if (expression), then execute (if-body)</span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">beqz xN, endif</span><br><span class="line">compile (if-body) here</span><br><span class="line">endif:</span><br></pre></td></tr></table></figure></li><li><p>if-else</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># if (expression), then execute (if-body), otherwise execute (else-body)</span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">beqz xN, else</span><br><span class="line">compile (if-body) here</span><br><span class="line">j endif (that is, jump straight to endif)</span><br><span class="line">else:</span><br><span class="line">compile (else-body) here</span><br><span class="line">endif</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># do (while-body) while (expression) </span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">beqz xN, endwhile</span><br><span class="line">compile (while-body) here</span><br><span class="line">j while</span><br><span class="line">endwhile</span><br><span class="line"></span><br><span class="line"># reduce branched by putting the comparison at the end instead</span><br><span class="line">j compare (ensuring that we still check the (expression) condition first)</span><br><span class="line">loop:</span><br><span class="line">compile (while-body) here</span><br><span class="line">compare:</span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">bnez xN, loop.</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>calling convention</p><p><u>Problem 1</u>: how to call procedures multiple times without corrupting code?</p><p>Example: set function argument registers: x10-x17</p><p><u>Problem 2</u>: how to go back to place wherever we were at in our main code even calling same function multiple times?</p><p>Example: remember the return address-&gt; RA register</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jal ra, label # ra = 4 + procedure call address</span><br></pre></td></tr></table></figure><p><u>Problem 3</u>: save registers for nested procedures</p><p>Sol: callee, caller, local storage component(activation record, stack)</p><p><u>Fact</u>: This distinction between caller-saved and callee-saved registers is important to keep in mind – the former is not preserved across function calls, but the latter is, so certain arguments must be saved on the stack to preserve values</p></li><li><p>program counter(reg)</p></li><li><p>Problem: how the instructions look like?</p><p>activation records, stack structure(last-in-first-out)</p><p><strong>the memory is always available to us, but we need to return it the way that we found it.</strong></p><p>-&gt; Caller-saved register, not preserved across calls</p><p>-&gt; callee-saved register, preserved</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># push</span><br><span class="line">addi sp, sp, -4</span><br><span class="line">sw a1, 0(sp)</span><br><span class="line"></span><br><span class="line"># pop</span><br><span class="line">lw a1, 0(sp)</span><br><span class="line">addi sp, sp, 4</span><br></pre></td></tr></table></figure></li><li><p>nested procedures: use calling conventions</p><p>Related reg: call func, ret</p></li><li><p>Fact: data structures are implemented with blocks of memory with words that refer to various addresses.</p><p>fact 1: most languages use several distinct memory regions for data: stack, static, heap, text(there is no need to memory it.)</p><p>fact 2: In RISC-V, we put the text, static, and heap regions in memory consecutively, starting from the smallest address 0x0; in contrast, the stack starts from the highest address 0xFF…F and grows towards lower addresses</p><p>Specific pointers: stack pointer, global pointer(static), program counter(current line of code executing)</p><p>Problem: how this related to inputs and outputs?</p></li><li><p>memory mapped IO(MMIO): special dedicated address</p><p>some issues remained? waiting for labs</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.004 computation structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSY sleep</title>
      <link href="/sg/2021/12/28/psy_sleep/"/>
      <url>/sg/2021/12/28/psy_sleep/</url>
      
        <content type="html"><![CDATA[<p><u>问题</u>：失眠。</p><p>焦虑和压力导致我的作息紊乱到了极点，尤其是这周几乎到中午才到图书馆。通过分析近一个月的睡眠记录，我没有能在1点以前入睡的情况，通常在1:30-2:00入睡，但2:00以后到3:00, 4:00, 5:00的情况也有不少，而我其实基本上不熬夜学习，1点差不多就准备睡了。</p><p>今天从2:00睡到11:00左右后的感觉非常糟糕和自责，觉得自己睡多了，情绪也受到了影响。带着这样的问题我去看了积极心理学关于睡眠的部分。</p><ol><li><p>permission to be human</p><p>受到失眠的困扰是非常正常的。Tal以自己失眠为例，与其告诉自己“我要睡觉，我要睡觉…“，不如接受这样的情况，”🤔这是一个很好的反思今天所做的事的机会“，通常他觉得太无聊然后就睡着了。</p></li><li><p>average sleep time of adults; care about your sleep rhythm</p><p>一天睡够8小时。一个正常人平均需要的睡眠时间在8小时左右，然后看看自己在哪段时间更容易入睡。当偶尔睡到9小时，10小时，那大概是由于你正需要这样长的睡眠时间，可能是你正经历艰难的时期或者遇到了其他的困难或者什么事也没有发生。（没有必要觉得自责。</p></li><li><p>enough sleep is a good investment</p><p>足够的睡眠是很好的投资，不管是智力上的，还是健康上。它可以帮助我们解决内心的冲突，学习中卡住的难题，它可以鼓励创造性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> positive psychology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指环王——责任/自由</title>
      <link href="/sg/2021/12/25/ring/"/>
      <url>/sg/2021/12/25/ring/</url>
      
        <content type="html"><![CDATA[<p>前言：上一次看指环王三部曲还是初中刚毕业的暑假，那时的我尚且不知道世界的基本概念，连自己也不甚了解。在那时看来，指环王不过是一部经典的好莱坞式电影，有着华丽的场景和英勇的主人公们。</p><p>第一印象太容易误导人了。初中时看我以为弗罗多是很惨的主角，被迫接受了一个根本不在自己责任范围内的任务；阿拉贡是个闲散的江湖人士，因为血缘继承王位还娶了精灵作为妻子；弗罗多的伙伴则是不务正业的小混混，只会嬉笑打闹；莱格拉斯像是个外出游历的贵公子；甘道夫刚开始很弱，后来变成白袍巫师后很强；咕噜是个总喜欢说&quot;my precious&quot;的怪物…其他的角色就没有太深的印象了。</p><p>事实上，指环王里的人物每个都有自己的内在精神，他们遇到问题的挣扎和行动映射出了现实的复杂。小时候只知道好人和坏人，黑与白，但现实远比此复杂。有时候正是一些在模糊不清的东西上的选择塑造了一个人的样子。</p><h2 id="小人物的责任"><a class="header-anchor" href="#小人物的责任">¶</a>小人物的责任</h2><p>弗罗多是我误解最深的人物，他的存在表示即使是小人物也可以承担责任，也能够改变现实。他并不是从一开始就决意要承担魔戒的责任，只是因为答应了甘道夫要将戒指带到跃马酒店给他而坚定地执行了这个任务，即使遇到了戒灵穷追不舍的刺杀。而他在戒灵的剑下侥幸得存后，在精灵，矮人，人类，巫师等种族争论魔戒的归属时挺身而出，主动承担了将魔戒送往发源地魔多摧毁的任务，即使他甚至不知道魔多在哪儿。</p><p>而没有萨姆就没有弗罗多。前往魔多的旅程是如此困难和孤独，尽管弗罗多在旅程的最后决定自己一个人继续前行，萨姆仍然不离不弃。在魔戒的暗暗影响和咕噜的挑拨离间中，弗罗多能够活着不能缺少萨姆坚定的支持，即使在弗罗多因误解而勒令萨姆离开后。</p><p>梅里和皮平这对活宝也在乱世中承担起了自己的责任。他们在讨论中意识到如果不能够打败魔多和萨鲁曼，那么他们的家乡——夏尔——也将不复存在。所谓的回到夏尔只是一个遥远的梦，而兽人的铁骑正在肆虐这片土地。因此他们才能让本来不想开战的树人意识到这场战争的不可避免。每个人在这样混乱的局面中都被裹挟着，他们也只能面对现实，无论这现实多么残酷痛苦。</p><p>咕噜则显得悲情了很多。咕噜就如同我们自己，他本来只是个普通人，没能抵抗住魔戒的诱惑杀了人后过着离群索居的生活，被魔戒折磨成了一个没有正常生活的怪物。我大概能够理解魔戒对咕噜的诱惑，那些遥远的美好的梦仿佛只要不停地去想这个梦就会变成现实，或许魔戒对咕噜的诱惑就是表示着他失去的生活的补偿。但是原本就不是我们所想要的，即使它再好又和我们有什么关系呢？</p><h2 id="信念和行动"><a class="header-anchor" href="#信念和行动">¶</a>信念和行动</h2><blockquote><p>You shall not pass!</p></blockquote><p>甘道夫和炎魔的战斗的精彩不在于打斗的绚丽，而是甘道夫其实论实力应该是不及炎魔的，但仍然在阻挡炎魔时站在了最前面。在指环王中这样的场景并不少见，因为有坚定的信念，尽管自己算不上强，但仍然要勉力一试。阿拉贡在最后带领人类军队主动出击像魔多宣战不是因为打赢了刚铎的战役而趁胜追击，而是在兵力不足远小于魔多驻扎的半兽人军队时为了给弗罗多争取时间。坚定的信念让他们在遇到艰难的抉择时不一定做出了正确的行动，但是让他们做出了听从了内心选择的行动。</p><p>我认为能听到内心的声音是很难得的事情。我曾经独处了三年，从来没有听到过内心的声音，不知道自己想要什么，一些所谓的考上某所大学不过是空虚的口号，根本不能够支撑起当下。到现在我也只听到过两次内心的声音。第一次是第一次高考结束我告诉自己&quot;I’m better than this&quot;，然后跑去了复读。还有一次就是现在徘徊着的声音“你在干什么”。我相信如果不把课程计划扎实地学完，这个声音将不会停止。</p><h2 id="万物生灵"><a class="header-anchor" href="#万物生灵">¶</a>万物生灵</h2><p>中土世界滋养里各种各样的生灵，和甘道夫交好的🦅鹰族，迷雾森林里的大蜘蛛，被萨鲁曼砍倒的巨树，通人性的马🐎，魔王的爪牙乌鸦，精灵领地上的溪流…我最喜欢还是树人，恩特人平时深居简出，隐藏在森林深处；在关键时刻才会聚集起来，开一天的会说早上好，然后继续开会。感觉电影里的Treebeard很可爱，偷偷观察梅里和皮平抽烟，打招呼的样子也很特别。</p><h2 id="后记"><a class="header-anchor" href="#后记">¶</a>后记</h2><p>有时间还是得读一遍原著的。真希望熬过这段最艰难的时间。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑客帝国——自由的边境</title>
      <link href="/sg/2021/12/24/matrix/"/>
      <url>/sg/2021/12/24/matrix/</url>
      
        <content type="html"><![CDATA[<p>想到黑客帝国会想到什么呢？</p><p>比如一个循环，机器奴役人类-&gt;人类开始反抗，形成根据地Zion-&gt;找到救世主-&gt;和工程师谈判，救世主牺牲，Zion留存部分-&gt;系统更新，机器继续奴役人类。比如在现实和虚拟间的难以抉择，是真实的存在在一个非常糟糕的世界还是沉浸在美好的虚拟现实中享受幸福人生？比如在先知门前的一句话，Know yourself以及延伸出的Nothing in excess。</p><p>我以前不明白史密斯存在的意义，作为黑客帝国的最大反派角色，他存在只是因为是the one的对立吗？我也没看懂火车旁的那对工程师父女和最后Neo和Trinity前往机器大帝时的不顾一切。这些影像显得非常模糊，毕竟距离上一次看黑客帝国已经有三四年了，但又有一些画面里的东西难以忘怀。</p><p>没有意义的程序应该存在吗？</p><blockquote><p>几十亿人没有自己真正的生活，他们却感觉不到。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dm graph</title>
      <link href="/sg/2021/12/18/dm_graph/"/>
      <url>/sg/2021/12/18/dm_graph/</url>
      
        <content type="html"><![CDATA[<h2 id="In-class-problems"><a class="header-anchor" href="#In-class-problems">¶</a>In-class problems</h2><h3 id="walks-and-paths"><a class="header-anchor" href="#walks-and-paths">¶</a>walks and paths</h3><p>problem: If you were trying to walk somewhere quickly, you’d know you were in trouble if you came to the same place twice.</p><p>Theorem 10.2.3. A shortest walk from one vertex to another is a path.</p><p>Question 1: tournament digraph.</p><ol><li><p>Prove: if a tournament diagraph is a DAG, then it has most one ranking.</p><p>A ranking is a path that includes all the players（也就是排名顺序）</p><p>proof 0: prove by contradiction…</p><p><u>Idea 1</u>: we should figure out which part could lead to contradiction</p><p>Hypothesis 1: the first two common vertices in two ranking(my idea)</p><p><s>方向反了，由于结构是DAG，两条同起点终点不同序的路不能证明circle的存在。</s></p><p><u>Hypothesis 2</u>: (u, v) (v, u) exist in two different rankings. -&gt; a closed walk from u to u that go through v.</p><p>有证明的可能。将u,v间的两条路合并起来，说明有circle的存在。</p><p>Loophole: 不能证明一定会经过v</p><ol><li><u>approach 1</u>: well ordering principle</li></ol><p>Lemma: The shortest positive length closed walk through a vertex is a cycle.</p><p>Proof 1: suppose <strong>w</strong> is a minimum positive length walk from u to u. we claim <strong>w</strong> is a cycle.</p><p>prove by contradiction: <strong>w</strong> is a cycle.</p><ul><li>case 1: u occurs more than two times in <strong>w</strong></li><li>Case 2: some vertex x != u occurs twice in <strong>w</strong></li></ul><p>2)approach 2: strengthen the hypothesis</p><p>把u-&gt;v和v-&gt;u合并会形成circle</p></li><li><p>Give an example of a tournament with a <u>countably infinite</u> number of players that has no ranking.</p><p>为什么这会影响ranking呢？我认为是因为总有更小的数存在，这会和当前的假设违背。</p></li></ol><h3 id="Walk-relation"><a class="header-anchor" href="#Walk-relation">¶</a>Walk relation</h3><p>problem: whether there is a way to get from one particular vertex to another.</p><p>binary relation,</p><p>我认为这只是符号证明（？）</p><h3 id="DAG-scheduling"><a class="header-anchor" href="#DAG-scheduling">¶</a>DAG &amp; scheduling</h3><p>problem: topological sort</p><h3 id="partial-orders"><a class="header-anchor" href="#partial-orders">¶</a>partial orders</h3><blockquote><p>Any digraph is formally the same as a binary relation whose domain and codomain are its vertices.</p><p>Definition 10.6.7. A relation that is transitive and irreflexive is called a strict partial order.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
          <category> 6.042 discrete math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.042 discrete math </tag>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hw1 data structures</title>
      <link href="/sg/2021/12/18/hw1_structure/"/>
      <url>/sg/2021/12/18/hw1_structure/</url>
      
        <content type="html"><![CDATA[<h2 id="ps2"><a class="header-anchor" href="#ps2">¶</a>ps2</h2><ol><li><p>看题：when all but one is special means only one is not special.</p></li><li><p>set view and sequence view of data structures</p><ul><li><p>Sequences maintain a collection of items in an extrinsic order, where each item stored has a rank. In the sequence, including a first item and a last item. That the first item is “first” is because some external party put it there.</p></li><li><p>By contrast, sets maintains a collection of items based on an intrinsic property involving what the items are, usually based on a unique key, x.key, associated with each item x.</p></li></ul><p>Set: hash table, binary search tree</p><p>Sequence: array, linked list, direct access array</p><p>That’s why sequence has insert/delete_at_somewhere operations while set has a loosen insert/delete items operation and supports order operations to find the items.</p></li><li><p>Merge_sort</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">Arr</span>):</span></span><br><span class="line">size = <span class="built_in">len</span>(Arr)</span><br><span class="line"><span class="keyword">if</span> size == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> Arr</span><br><span class="line">mid = size//<span class="number">2</span></span><br><span class="line">Left = merge_sort(Arr[:mid])</span><br><span class="line">Right = merge_sort(Arr[mid:])</span><br><span class="line">i,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">start = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> start &lt; size:</span><br><span class="line"><span class="keyword">if</span> j &gt;= <span class="built_in">len</span>(Right) <span class="keyword">or</span> (i &lt; <span class="built_in">len</span>(Left) <span class="keyword">and</span> Left[i] &lt; Right[j]): <span class="comment"># offbyone error</span></span><br><span class="line">Arr[start] = Left[i]</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">Arr[start] = Right[j]</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">start += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> Arr <span class="comment"># missing return value</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ps3"><a class="header-anchor" href="#ps3">¶</a>ps3</h2><ol><li><p>How to use hash tables(its set operations) to implementing sequence operations?</p><p>Read the problem. We are not storing things in order but storing in hash tables.</p><p>idea 1: assign key to each item as index</p><ul><li><p>Seq[key] = value</p></li><li><p>Seq-build(A): set-build(&lt;key, A[i].value&gt; for i = 0,1,2,… )</p></li><li><p>insert/delete_at: iterate all items, insert/delete one, rebuild</p></li><li><p>Insert_last: easy, however insert_first would take linear time</p></li></ul><p>Idea 2: have an extra varibles to track the original index</p><ul><li><p>How many index should we track at least?</p><p>one: First</p><ul><li><ul><li>Store variable <u>first</u> = key of first item(index 0)</li><li>Hashing(map negative index to positive)</li><li><img src="/sg/2021/12/18/hw1_structure/sc.png" class="" title="sc"></li></ul></li><li><p>Insert_first: decrement first, insert(&lt;key first, value x&gt;)</p></li><li><p>and make tiny fix to previous operations(ex: find(i+first))</p></li></ul></li></ul></li><li><p>best sorting algs: sort n objects by keys</p><p>nagative items: Increase a large enough number then sort. Decrease after sorting.</p><p>String: convert str to a unique number and use radix sort</p><p>Number of fignts fought: counting sort is enough. Or merge sort.</p><p>ratio w_i / f_i (w_i &lt; f_i): it’s a floating number. We need to consider the precision</p><p>Idea: mapping rational number/letters/negative integer to integer</p><p>runtime of radix sort is O(n + nlog_n_(u)), such that it can handle any polynomial u.</p><p>突然想到了data-oriented pattern</p></li><li><p>college construction</p><ol><li>naive approach: check for h - s_i for S_i, this would take O(n**2) time</li></ol><ul><li><p>problem: how to speed up to O(n)?</p><ul><li>use data structures: store the input S in hash table S’: we can search (h - s_i) in S’ for si in S, each find take O(1) time.</li></ul></li></ul><ol start="2"><li>h = 600*n**6, add two things up.</li></ol><p>Idea 1: radix sort</p><ul><li>naive approach: store S in sorted_array_set where sort method is implemented using radix sort. For any S_i, binary search for (h - S_i) in S(know as find_prev).<ul><li>It takes O(n*logn) time</li></ul></li></ul><p>Idea 2: two-finger algorithm</p><ul><li>Improvement 1: linear scan: any S_i greater than h is impossible. Rebuild S’ in the sorted_array_set where S’_i &lt; h.</li><li>Improvement 2:</li></ul></li><li><p>copy detection problem</p></li></ol><h2 id="ps4"><a class="header-anchor" href="#ps4">¶</a>ps4</h2><h3 id="binary-tree"><a class="header-anchor" href="#binary-tree">¶</a>binary tree</h3><p>Problem 1: why we need a binary tree to store items?</p><p>ans: Compared with linked list which takes O(n) time to traverse all the items, we use binary serach instead. The traverse now takes O(hight of the tree) = O(logn) time.</p><p>Design:</p><ol><li><p>We define the traverse order to meet our needs.</p><ul><li>we can use binary tree to implement sequence(order) or set…</li><li>property: represent binary relation in different way: left-aligned complete binary tree</li></ul></li><li><p>Navigation: first/last, walk down/up the tree</p></li><li><p>Dynamic operation: add or remove items in a binary tree</p><p>problem 2: maintain the tree balance while insertion/deletion</p><p>The logic is that if skew is not in the balance range(-1,0,1) in such condition it changes into (2,-2), we should rebalance the tree. First, we need to detect such conditions, then we should modify that by rebalance(namely, by rotations). After each rebalance operation, we need to update the subtree heigh to calculate update skew. Then we walk up the tree and maintain balance in each recursion step until there is none.</p><ul><li><p>Rotation</p><p>Problem 3: what will happen after rotations?</p><p>just draw the picture.</p><ul><li>Rotate right(D): D becomes its left child’s right child, and subtree_update</li><li>Rotate left(B): B becomes its right child’s left child, and subtree_update</li></ul></li></ul><p>觉得讲义上的insert B before A有点怪</p><p>Problem 3: BST and AVL have nuances in insertion/deletion.</p><p>这一点我看错了，我把插入节点的大小搞错了，这两个树结构的差异是由于AVL会维持树结构的平衡。</p><p>BST: deletion: swap down predecessor/successor</p></li></ol><p>the difference between BST and AVL is: AVL maintains balance: AVL will check skew of every node in the traverse order to decide rotation operations; BST mains binary search.(AVL can use binary search as well)</p><h3 id="heap"><a class="header-anchor" href="#heap">¶</a>heap</h3><p>Build heap in linear time:</p><ul><li><p>idea: walk up the heap.</p><p>-&gt; loop backward over array.</p><p>problem: the order of swapping</p></li></ul><img src="/sg/2021/12/18/hw1_structure/sc2.png" class="" title="sc2"><p>heap doesn’t support ordering.</p><h3 id="problem-set"><a class="header-anchor" href="#problem-set">¶</a>problem set</h3><ol><li><p>n items, k largest one list. O(logn) space to write, O(nlog(logn)) runnning time.</p><p>Problem 1: how is logn related to k?</p><p>这两个题目不一样😅，这道题根本没提到k。解法和我之前想的一样</p></li><li><p>SCLR: 设计一个数据结构满足：</p><p>new_bid(d,b), O(logn);</p><p>update_bid(d, b) O(logn);</p><p>get_revenue() O(1).</p><p>we should ask ourselves these questions before writing down the answer:</p><ul><li>what is stored in data structures? -&gt;</li><li>what is maintaining by operations? -&gt;</li><li>what is querying? -&gt;</li></ul><p>Idea 1: we should maintain a dictionary of (bidder ID, bid) for the update operations. Dictionary can be implemented by AVL tree set or hash table while the latter’s running time is amortized</p><p>Idea 2: we need data structures to preserve the priority we need</p><ul><li>naive approach: use binary heap/AVL tree</li><li>Store n items in one max-heap -&gt; <u>store k largest items in min-heap, n-k items in max-heap</u>, in which case it doesn’t need to use delete_max to find the minimal item in max-heap.</li></ul><p>Idea 3: we need to link two data structures to support fast find.</p><p>Approach: we want to find the bidder’s current bid quickly. -&gt; cross linking</p><ul><li>That’s why we don’t save bid directly in the dictionary, in which case we save the time in updating the dictionary every time we change the bidder’s bid.</li></ul><img src="/sg/2021/12/18/hw1_structure/sc3.png" class="" title="sc3"></li><li><p>It seems right but where goes wrong?</p><p>这部分看了又看,仍旧没发现错误在哪里。后来把问题定位到了一个测试进而找到了问题。忽略了max_temp是所在class的instance，所以在bug版第一个判断语句永远都会返回None.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bug</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtree_max_in_range</span>(<span class="params">A, d1, d2</span>):</span></span><br><span class="line">    max_temp = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># ------------------------------------ #</span></span><br><span class="line">    <span class="keyword">if</span> A.max_date &lt;= d2 <span class="keyword">and</span> A.min_date &gt;= d1:</span><br><span class="line">        <span class="keyword">return</span> A.max_temp</span><br><span class="line">    <span class="keyword">if</span> A.max_date &lt; d1 <span class="keyword">or</span> A.min_date &gt; d2:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> d1 &lt;= A.item.key &lt;= d2:</span><br><span class="line">        max_temp = A.item.temp</span><br><span class="line">    <span class="keyword">if</span> A.left:</span><br><span class="line">        l_temp = A.left.subtree_max_in_range(d1, d2)</span><br><span class="line">        <span class="keyword">if</span> l_temp:</span><br><span class="line">            <span class="keyword">if</span> max_temp:</span><br><span class="line">                max_temp = <span class="built_in">max</span>(l_temp, max_temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_temp = l_temp</span><br><span class="line">    <span class="keyword">if</span> A.right:</span><br><span class="line">        r_temp = A.right.subtree_max_in_range(d1, d2)</span><br><span class="line">        <span class="keyword">if</span> r_temp:</span><br><span class="line">            <span class="keyword">if</span> max_temp:</span><br><span class="line">                max_temp = <span class="built_in">max</span>(r_temp, max_temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mex_temp = r_temp</span><br><span class="line">    <span class="comment"># ------------------------------------ #</span></span><br><span class="line">    <span class="keyword">return</span> max_temp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fixed version</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtree_max_in_range</span>(<span class="params">A, d1, d2</span>):</span></span><br><span class="line">    temp = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># ------------------------------------ #</span></span><br><span class="line">    <span class="keyword">if</span> A.max_date &lt;= d2 <span class="keyword">and</span> A.min_date &gt;= d1:</span><br><span class="line">        <span class="keyword">return</span> A.max_temp</span><br><span class="line">    <span class="keyword">if</span> A.max_date &lt; d1 <span class="keyword">or</span> A.min_date &gt; d2:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> d1 &lt;= A.item.key &lt;= d2:</span><br><span class="line">        temp = A.item.temp</span><br><span class="line">    <span class="keyword">if</span> A.left:</span><br><span class="line">        l_temp = A.left.subtree_max_in_range(d1, d2)</span><br><span class="line">        <span class="keyword">if</span> l_temp:</span><br><span class="line">            <span class="keyword">if</span> temp:</span><br><span class="line">                temp = <span class="built_in">max</span>(l_temp, temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = l_temp</span><br><span class="line">    <span class="keyword">if</span> A.right:</span><br><span class="line">        r_temp = A.right.subtree_max_in_range(d1, d2)</span><br><span class="line">        <span class="keyword">if</span> r_temp:</span><br><span class="line">            <span class="keyword">if</span> temp:</span><br><span class="line">                temp = <span class="built_in">max</span>(r_temp, temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp = r_temp</span><br><span class="line">    <span class="comment"># ------------------------------------ #</span></span><br><span class="line">    <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure></li></ol><h2 id="recitation"><a class="header-anchor" href="#recitation">¶</a>recitation</h2><h3 id="AVL-tree"><a class="header-anchor" href="#AVL-tree">¶</a>AVL tree</h3><p>full binary tree guarantees the height of O(logn)</p><p>Build a AVL tree with fewer nodes as possible -&gt; prove h = O(logn)</p><p>why rotations -&gt; balance -&gt; tree search</p><p>Rotation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rotateRight(A):</span><br><span class="line"><span class="comment"># A&#x27;s original parent e; A could be e&#x27;s left/right child =&gt; B</span></span><br><span class="line">B.p = e</span><br><span class="line"><span class="keyword">if</span> e.r == A <span class="comment"># pointer comparison</span></span><br><span class="line">e.r = B</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">e.l = B</span><br><span class="line"><span class="comment"># A&#x27;s original left child B =&gt; A is B&#x27;s right child</span></span><br><span class="line">B.r = A</span><br><span class="line">(A.p = B)</span><br><span class="line"><span class="comment"># B&#x27;s original right child c =&gt; A&#x27;s left child</span></span><br><span class="line">A.l = c</span><br><span class="line">(c.p = A)</span><br></pre></td></tr></table></figure><h3 id="Principle-of-algorithm"><a class="header-anchor" href="#Principle-of-algorithm">¶</a>Principle of algorithm</h3><p><u>thghout process matters</u>: take 30-60 minutes to think about a problem</p><p><u>problem 0</u>: shifted array, find e in N sorted items shifted length of k,</p><ul><li>if k is defined</li><li>if k is undefined, find k =&gt; find min</li></ul><p>How to solve it?</p><ol><li>simplest solution: linear scan, O(N)</li><li>in another way? shift k + binary search, O(k + logN)</li><li>…</li></ol><p><u>Problem 1</u>: find kth smallest in N items in a min-heap, want O(K*logK)time</p><p>How to think about it?</p><ol><li><p>use min-heap: O(klogN), k times find_min in min-heap</p></li><li><p>Find an O(NlogK) algorithms:</p><p>Idea 1: cut out irrelevant layers. We have k levels of heap =&gt; O(k**2) time, given the height is O(k)</p><p>Problem 1.1: how to cut a heap into k elements?</p><p>Problem 1.2: how to split it up into k, (N - k) groups?</p><p>Idea 2: maintain a max-heap of k. Iterate all items and we can get what we want</p></li><li><p>think more about the process of finding the kth smallest items.</p><p>Idea: horizon.</p><p>Idea: augmentation: index of array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># initialize</span></span><br><span class="line">H, original <span class="built_in">min</span>-heap(array back-based)</span><br><span class="line">Z, horizon</span><br><span class="line">Z.insert(H[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> ith <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">  ith, j = Z.extract-<span class="built_in">min</span></span><br><span class="line">  Z.insert H[<span class="number">2j</span>], <span class="number">2j</span></span><br><span class="line">  Z,insert H[<span class="number">2j</span>+<span class="number">1</span>], <span class="number">2j</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> ith</span><br></pre></td></tr></table></figure></li></ol><p><u>Problem 2</u>: find min(e[i,…,j]), e is a list of N items, N = 2**k</p><p>Process: pre-process, then query</p><p>How to think about it?</p><ol><li><p>simple idea: hash into [i,…,j], we can get H[[i,…,j],…], N**2 pair; then take min in O(N) time in each pair</p><p>=&gt; O(N**3)time</p><p>Improve to O(N**2) time by comparing current pair result with previous result which takes O(1) time</p></li><li><p>how to spend time?</p><ul><li>in pre-process: O(N**2) | O(1)</li><li>in query: O(1) | O(N)</li></ul></li><li><p>binary search in two halves recursively</p><img src="/sg/2021/12/18/hw1_structure/sc4.png" class="" title="sc4"></li></ol><h2 id="Reminder"><a class="header-anchor" href="#Reminder">¶</a>Reminder</h2><ol><li><p>two-finger algorithm:</p></li><li><p>cross linking: by store pointers to another data structures.</p></li><li><p>Proximate sorting</p><blockquote><p>An array of distinct integers is k-proximate if every integer of the array is at most k places away from its place in the array after being sorted, i.e., if the ith integer of the unsorted input array is the jth largest integer contained in the array, then |i −j| ≤ k. In this problem, we will show how to sort a k-proximate array faster than Θ(n log n)</p></blockquote><p>这里关于insertion sort k-proximate array takes O(nk) time, heap sort takes O(nlogk)time的讨论还挺有意思的。</p></li><li><p>a general/naive approach and subsequent analysis</p></li><li><p>approriate description</p><ul><li><p>key with</p><p>example 1: in priority queue: Key each Revenger ri with opinion si on the pair (|si|, i) to make keys unique.</p></li></ul></li><li><p>Worst-case, expected, amortized(dynamic operations)</p></li></ol><h3 id="olc"><a class="header-anchor" href="#olc">¶</a>olc</h3><p>First we should decide which view:</p><ul><li>ordered or not -&gt; sequence/set view</li><li>does it have priority? -&gt; priority queue -&gt; binary heap/ binary tree</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.006 algorithms </tag>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSY belief</title>
      <link href="/sg/2021/12/12/psy_belief/"/>
      <url>/sg/2021/12/12/psy_belief/</url>
      
        <content type="html"><![CDATA[<p>Beliefs  -&gt; focus-&gt; change -&gt; goal setting</p><h2 id="Beliefs"><a class="header-anchor" href="#Beliefs">¶</a>Beliefs</h2><p>例子：Roger Bannister，首位历史上4分钟跑1英里的人。当时从医学/生物学上证明是不可能的。</p><p>信念为什么不是一种神秘主义？belief Vs. illusion</p><p>olc: 中学的失败刻骨铭心。</p><p>忽略事实的部分很容易，即使它就在我们面前。</p><h3 id="The-power-of-the-situation"><a class="header-anchor" href="#The-power-of-the-situation">¶</a>The power of the situation</h3><p>例子：斯坦福监狱实验: obdient to the authority</p><p><u>Question</u>: how to create a positive situation whether consciously or unconsciously to bring out the best of ourselves?</p><p>Ans: priming with positive words.</p><p>problem: is the message right? 常常言过其实，收效甚微，尽管看起来振奋人心（比如：“Whether you think you can or can’t—you are right”  Henry Ford）</p><ul><li>Coexist with hard work, persistence and failures.</li><li>Self efficacy: malleable</li><li>Self-esteem: belief in ourselves</li></ul><p>mind is powerful. 不是说外在因素没有影响，而是思想的力量同样很强大。</p><h3 id="Beliefs-become-self-fulfilling-prophecies"><a class="header-anchor" href="#Beliefs-become-self-fulfilling-prophecies">¶</a>Beliefs become self-fulfilling prophecies</h3><p>How beliefs impact our performance?</p><ul><li>Motivation inconsistency</li><li>理想和现实存在差距。</li><li>when there is discrepancy or inconsistency between reality and ideal?<ul><li>Update schema</li><li>Ignore/discard the information</li><li>actively seek confirmation</li><li>Create a new reality</li></ul></li><li>interpretation of performance</li></ul><p>olc: 实习选择存在太多偏差。</p><p>Learn to fail, or fail to learn. No short cuts.</p><img src="/sg/2021/12/12/psy_belief/sc.png" class="" title="sc"><h3 id="Optimism-Vs-pessimism"><a class="header-anchor" href="#Optimism-Vs-pessimism">¶</a>Optimism Vs. pessimism</h3><p>悲观者设定现实的短期目标和长期目标，乐观者设定期待过高的短期目标和现实的长期目标。悲观者在表现不好时说我的期待值本来就不高，这样就足够了；在表现好时说这只是碰运气。而乐观者虽然由于设定过高的不切实际的短期目标导致表现一直不好，但他会不断反思自己从过去的经历学到了什么重新设定下一次目标，增强自己的信念。而不管需要经过多久，有足够的尝试，努力工作，失败，坚持，乐观者终究会实现自己的信念。</p><p>乐观/悲观只是不同的解释生活的态度。乐观不是盲目的对一切事情表示乐观，而是对生活中挫折的解释。</p><ul><li><p>暂时的/永久的失败。例子：比如一份被一份想要的工作拒了，看成永久的失败——我之后永远也找不到工作了；暂时的失败——这只是暂时的挫折，我能从中学到什么？比如重新锁定求职范围，找到属于自己的理想位置。</p></li><li><p>普遍/特殊化的例子。</p></li></ul><p>learn to interpret things as optimist</p><p>olc: 我竟然属于乐观者…不过中学的我非常悲观。</p><h3 id="realistic-VS-unrealistic-belief"><a class="header-anchor" href="#realistic-VS-unrealistic-belief">¶</a>realistic VS. unrealistic belief</h3><p><u>question:</u> how to distinguish between realitic belief and unrealistic belief?</p><p>ans: Right evaluation of reality</p><p><u>question:</u> Do high expectations lead to disappointment?</p><ul><li>关心我们的人常常希望降低我们的期望，因为期待过高常意味着自尊受到打击的机会更大。</li><li>fact：基础幸福感的水平线是一定的，生活的起伏带来的幸福感水平总会回到这一水平</li></ul><h3 id="action"><a class="header-anchor" href="#action">¶</a>action</h3><p><u>Problem: how to raise the base level of happiness?</u></p><p>Coping Vs. avoidance</p><p>解决问题而不是逃不问题，允许自己去冒险，走出舒适区，承担失败的风险，去尝试做没做过的事情，去一个想去但在小的时候不敢去的地方。只有处理问题，解决问题能够改变现状。</p><p>我们评价自己所用的方式和评价他人一样，就是看他的行为。</p><p>事实：失败带来的痛苦其实远比想象中失败的痛苦要小的多，幸福感水平总会回到基准线附近。</p><p><u>problem:</u> how to become a optimist?</p><ol><li><p>Just do it! (action)</p><p>单纯的灌输积极信息，无论是从内还是从外都无助于改善现状除非采取行动。</p><p>失败是不可避免的，我们需要给自己失败的机会。但这不是说主动搞砸一件事，而是在一件事失败后不要有太多的负担。</p></li><li><p>Imagine that… (visualization)</p><p>Focus on journey and destination.</p><p>Mistake: focus not just on the destination.</p><p>例子：马丁路德金：我有一个梦想。</p><p>olc: 转专业面试之前我总想象着自己会流畅地度过整个流程，但结果就是支支吾吾地熬过了五分钟（这仅有的面试时间）。失败的原因是没有专门准备面试，人也不够自信，表达能力也欠缺等等，但当时开始停滞的最重要的原因是行动仍旧不够。6.009在大一下那时因为拖延症卡了一次，大二上因为基础不够又卡了一次，现在大三上的我一定要解决这门课程。</p></li><li><p>Cognitive therapy (rational thinking)</p><p>Event -&gt; thoughts(evaluation) -&gt; emotion</p></li></ol><p>误区1: magnify: 过度放大失败而不是把它当成进步的阶梯：one or nothing: perfectionism</p><p>误区2: minimize: tunnel vision-&gt;忽略非理性因素让自己能更理智地看待事情的全局变化</p><p>fact: emotion is personal evaluation of reality, which doesn’t reflect the reality.</p><p>Get real through the question we asked. Look out.</p><h3 id="Reminder-v3"><a class="header-anchor" href="#Reminder-v3">¶</a>Reminder</h3><ul><li>Optimism(believe in myself), passion(love what you do), hard work</li><li>learn to fail, or fail to learn</li></ul><p>有的时候沮丧让人甚至失去了行动能力，这就是我希望增强自己心理健康免疫系统的原因。</p><p>所有的一切都是为了transformation。如果只改变当前的态度，而改变后的态度却不能影响任何行动，那么所有的乐观解释不过是对过去生活的简单记录，没有任何意义。</p><h2 id="Focus"><a class="header-anchor" href="#Focus">¶</a>Focus</h2><p>How focus creates reality?</p><p>P8 32:00开始</p><h3 id="Adaption"><a class="header-anchor" href="#Adaption">¶</a>Adaption</h3><p>我们总是看到事物的反面的原因是我们适应于现有的生活，对好的事习以为常，而对发生的不好的事非常敏感。</p><p><u>Problem:</u> 能否适应糟糕的环境同时不对积极的事物习以为常？</p><p><u>Problem:</u> 是不是只有失去的时候才懂得珍惜？</p><p>Ans: learn to appreciate.</p><h3 id="Appreciation"><a class="header-anchor" href="#Appreciation">¶</a>Appreciation</h3><p>There is always something to appreciate in real. If we don’t appreciate the good things, they depreciates.</p><p><u>problem</u>: what I am grateful for?</p><ul><li>Be grateful for everythings. What we focus on appreciates.<ul><li>Chipping away negativity</li></ul></li><li>express gratitude to ourselves and others.</li></ul><p><u>Question</u> : how to express gratitude?</p><ul><li><p>Take time to reflect</p></li><li><p>Letter, phone, or in-person</p></li><li><p>Regularly (weekly, bi-weekly or monthly)</p></li><li><p>Writing helps even if letter not sent</p></li></ul><h2 id="Goal-setting"><a class="header-anchor" href="#Goal-setting">¶</a>Goal setting</h2><p>拖延症的解决方式。今年9月初开始调整状态，到现在（12月）已经没有了超过两天的拖延。不过仍然存在因为别的事而耽搁学习的情况。</p><p>Setting goal resolves internal conflicts.</p><p>olc: 当你知道你将去哪儿，那么就会获得内心的平静。</p><p>Job -&gt; career -&gt; calling</p><p>Problem: what is your calling?</p><p>Ans: Listen to the inner calls which guide your direction. When we pursue our passion, when we pursue a self-concordant goal and a self-concordant journey, that’s when we become alive.</p><p>这个答案会随着时间变化，可能过了两年又是不同的样子。但是我们打开了可能性，看到的事物的真实性和自己的职责和使命。</p><p>Tips for setting goal:</p><ol><li><p>writing down</p></li><li><p>set lifelines(not DDL): the date by which we want to achieve those certain goals</p></li><li><p>make it specific</p></li><li><p><u>Future goals as means; present experiences as ends.</u></p><p>设定目标的目的不是为了完成它，完成目标与否不应该影响我们情绪的好坏，更重要的是目标是为了激励我们去进行这项旅程。如果我们只关注结果而不关注过程，那么我们就不太可能取得成功。</p><p>常常出现这样的情形：设定了一个目标没有完成它，或者完成了一个目标后就没有新的目标设定。</p></li></ol><h3 id="Stress"><a class="header-anchor" href="#Stress">¶</a>Stress</h3><p>P13 58:24</p><p>Too much to do -&gt; stress(feeling overwhelmed ) -&gt; depression</p><p><u>question</u>: how to deal with distress?</p><p>Ans: take a time-out</p><p><u>problem</u>: Why are so many people stressed? -&gt;<u>What do those who are successful and able to lead a healthy and happy life do?</u></p><p>Ans: Stress is fine as long as we take recovery.</p><p>Solution: <strong>take a break</strong>.</p><ol><li>From marathon to sprint intervals.(sprint-&gt;recovery-&gt;sprint-&gt;recovery…)</li><li>Creating a ritual of both work and recovery: 60-120 minutes of work, 15+ minutes of recovery.</li><li>Maintaining flexibility. 合理安排杂事。</li><li>Take multi-level recovery.</li></ol><h3 id="Focus-v2"><a class="header-anchor" href="#Focus-v2">¶</a>Focus!</h3><p>The key is focus.</p><p>例子：当你放超过一首歌时，就产生了噪音。</p><p>当多件事重叠在一起，那么再好的事情都会变糟糕。</p><ul><li><p>Recovery: Quantity affects quality</p></li><li><p>Work: Reducing multi-tasking</p><ul><li>elimination is not possible.</li></ul></li></ul><p>这里的multi-task指的是在同一时间做超过一件事，比如在写作的时候关注着邮件或消息提示。</p><p>olc:在相同时间里我应该只开一项工作的网页然后关掉再开另一项工作的，之前总是开太多网页结果根本不可能在同一时间兼顾。</p><h3 id="Simplify"><a class="header-anchor" href="#Simplify">¶</a>Simplify!</h3><p>Do less things, the important one.</p><p><strong>Time affluence</strong></p><p><u>problem:</u> how to lead a life with fun and functionality?</p><p><u>Problem:</u> what do we really really really want to do?</p><h3 id="Reminder-v4"><a class="header-anchor" href="#Reminder-v4">¶</a>Reminder</h3><p>有趣的概念</p><ol><li><p>Self-concordant goal</p></li><li><p>加强性格优势对应的能力</p></li><li><p>Multi-level recovery:</p><ul><li>Micro (minutes, hours)</li><li>Mezzo (nights, days)</li><li>Macro (weeks, months)</li></ul></li><li><p>Optimum simplicity:找到一天最优的工作时间</p></li><li><p>可持续发展</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> positive psychology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSY perfection</title>
      <link href="/sg/2021/12/12/psy_perfection/"/>
      <url>/sg/2021/12/12/psy_perfection/</url>
      
        <content type="html"><![CDATA[<p>对我来说最重要的一节课。</p><h3 id="What-is-Perfectionism"><a class="header-anchor" href="#What-is-Perfectionism">¶</a>What is Perfectionism?</h3><p>例子1：（os:感觉教授在整人）Tal先让学生画一个正圆，不停地强调画出他的最好水平。然后画一个假如他三岁能画出的圆。再画一个假如他一岁能画出的圆。最后教授开始打分，给正圆打了勾，其他的歪歪扭扭的曲线打了叉。</p><p>Take away: 在画出一个完美的圆之前需要画很多个不完美的圆才能做到。</p><p>例子2：小婴儿在刚开始学走路总会摔跤很多次，在学会吃饭前总会弄得满嘴都是食物。</p><p>Take away: **Learn to fail or fail to learn.**There is no other way to learn, to grow.</p><p>例子3：进行了一项对医院医护人员犯错的调查问卷。结果反而和现实表现不同：在问卷上犯错较少的人在实际工作中的错误反而更多。实际上这是由于那些问卷上犯错较少的人隐瞒了犯的小错误，只有当错误太大不可隐瞒时才认为这是错误；而问卷上犯错较多的人如实记录下大的或小的错误，他们在工作中的表现也相对比另一类人更好。</p><p>Take away: 平时经历了更多失败的团队成功的概率更高。类似软件工程的fast fail</p><p><u>perfection Vs. excellence</u></p><blockquote><p>def: Perfectionism is an <strong>incapacitating</strong> fear of failure that permeates our lives, especially those areas that we <strong>care about most</strong>.</p><p>It is an approach, a cognitive and emotional schema, that we hold toward <strong>the journey</strong> of our lives, toward the process of getting from point A to point B.</p></blockquote><p>完美主义是一种对失败的失能性恐惧，尤其是对于我们最关心的事。</p><img src="/sg/2021/12/12/psy_perfection/sc.png" class="" title="sc"><p>olc: 震惊🤯这彻底改变了我对失败的看法。我总是以为事情应该像perfection那样完成，但却忽略了事物认知理解实现的曲线应该是曲折的。这不是说我们应该可以去弯弯绕绕地避开我们真实的目标，而是说即使在实现目标的过程中遇到了失败也是非常正常的，这正是理解和学习的唯一途径。</p><p>在遇到失败时，我没有问正确的问题。完美主义是我经常遇到的问题但我并不知道自己有这种倾向，对失败的恐惧导致我无法真正行动，阻碍了我的学习和成长。学编程最初我以为项目直接从头到尾写就写完了，但事实上是写一点儿，进行简单的测试，再写一点儿，然后继续测试。学离散数学也以为一道题就这么干想就想出来，而忽略了真正的学习过程需要从例题中寻找解法，忽视了recitation的学习。看到了优秀的人的成功，却没有看到他们遇到的失败和怎么去解决这样的失败。</p><h3 id="Characteristics"><a class="header-anchor" href="#Characteristics">¶</a>Characteristics</h3><p>追求perfection的人防御性很强，固执己见；而追求excellence的人对建议/批评保持开放的态度。</p><p>追求perfection的人只关注自己没有完成的一半；而追求excellence的人更关注已经完成的部分。</p><p>追求perfection的人过分概括当前的情况，把一次的失败看成所有事情的失败；而追求excellence的人认清现实，知道只是一次的失败。</p><p>追求perfection的人永远不能真正接受自己；而追求excellence的人对自己无条件接纳，这包括失败与成功。</p><p>追求perfection的人害怕失败，只专注结果/终点，认为事情是静态的，不会再发生变化，比如“他这么强，无论我再怎么努力我也无法赶上他”；而追求excellence的人知道把失败看成对自己的反馈，把关注放在结果/终点和旅程上，知道事情是动态变化的，把重心放在可以改变的部分。</p><h3 id="Consequences"><a class="header-anchor" href="#Consequences">¶</a>Consequences</h3><p>例子：Mr X. X先生从小学起就追求完美主义，他要上最好的中学所以在小学时就非常努力。当他去了最好的中学，他高兴了两周，然后又变得忧虑，这样还不够，他要上最好的大学，于是在中学时他参加各种课外活动，同时在学业成绩上的表现也非常好。当他去了最好的大学，他高兴了两个月，可以歇歇了么？不行，他需要有一份最好的工作，于是他积极参与课外互动，参加领导了三个社团，同时还参加了一个大公司的实习，这样总该休息了吧？X先生始终有一个更完美的目标需要完成，即使他能够短暂地休息两个月，两周，他总会回到那种焦虑失望的状态。在他老的时候，别人问了他一个问题：你想要的生活是什么样的？</p><p>完美主义导致的结果是：他总是只有暂时的轻松解脱；只能看到不可避免的失败；把发生的一些状况外的杂事看成浪费时间；有出现混乱/病症的倾向。由于只看到了失败，他的自尊受到打击，不再相信自己。而这会进一步影响他的人际关系，引起他的焦虑和压力和痛苦。</p><p>追求excellence的结果是：他总是有能够持续的满足感；对比不可避免的失败，他看到的是成功的可能性；对比看成浪费时间的杂事，他看到的是恰当的时间分配；他对焦虑和失落有健康的方法去解决。他看的是持续的改善和变化，而这时他能够成长。虽然他也会遇到焦虑紧张，但这变得可以控制。更少的痛苦同时更多的收益。</p><h3 id="Sources-of-Perfectionism"><a class="header-anchor" href="#Sources-of-Perfectionism">¶</a>Sources of Perfectionism</h3><blockquote><p>Destination = Reward = Acceptance</p><p>Journey = Unrewarded = Means Only</p></blockquote><p>完美主义的起源时永远只能看到目标，奖励结果。社会环境就是如此，只奖励成功的人。</p><p>但我们应该看到过程和结果，奖励过程，尽管有时失败了。顺应自己的天性，允许自己犯错，接纳自己的失败。</p><h3 id="Overcoming-Perfectionism"><a class="header-anchor" href="#Overcoming-Perfectionism">¶</a>Overcoming Perfectionism</h3><p><u>problem:</u> how to overcome this: living in the future, being afraid of the present because what if I fail?</p><ol><li><p>being aware of what I want to change? and what I want to maintain?</p></li><li><p>rewarding effort</p></li><li><p>Active acceptance</p><p>误区：用完美主义的方式解决完美主义的问题。</p><p>it’s ok to prone to perfection.</p><p>Accept it, then go ahead and change it</p></li><li><p>Behavior:open to criticism</p><p>putting myself on the line</p></li><li><p>Visualization: 想象自己像追求卓越的人一样行动</p></li><li><p>rough draft: Setting a liberating goal or vision</p><p>例子：直到我写出绝世佳作，其他的是草稿。</p><p>例子：20年后我会到最顶尖的学府教授积极心理学，在那之前都是准备。</p><p>解放自己，享受当下。重点是舍弃当下这种吹毛求疵，完美无缺的生活。</p></li><li><p>The Platinum Rule: have compassion for ourselves</p><p>accepting failures in the same way thatwe accept in others, in people we love.</p></li><li><p>how to help others?</p><p>改变不是从一夜就能完成的。</p><ul><li>By example: people do what you do, not what you say.</li><li>Tell stories about it.</li><li>Rewarding the journey/process/effort</li></ul></li></ol><p><u>Technique:</u></p><p>当面临生活的艰难时刻时，受到焦虑挫折打击时，</p><ol><li><p>Permission</p><ul><li><p>Acceptance</p></li><li><p>Respect for reality</p></li></ul></li><li><p>Positive: reframing question: what is the growth opportunity here?</p><ul><li><p>Benefit finding</p></li><li><p>Failure as opportunity:See the opportunity in failures.</p></li><li><p>Distracting</p><p>分散注意力是说当一种想法或感觉反复出现，而我们也与之做着西西弗斯式的对抗时。在这种情况下沉思反而会在同一种思路里越陷越深，得不到什么结果，同时又让人崩溃。最好的方法是分散自己的注意力。当被焦虑压垮的时候，用其他的事情分散注意力，跑步，听音乐，或者做别的。这和逃避问题不同，逃避是指之后不会再处理生活中的任何问题。</p></li></ul></li><li><p>Perspective</p><ul><li><p>Don’t sweat the small stuff… 别为小事抓狂。</p><p>olc: 比如我差点因为翘课被辅导员约谈。</p></li><li><p>Psychological maturity: willingly to shift perspective</p><blockquote><p>It’s the ability, when we want, to be immersed in the here and now in the present. It’s the ability, when we want, to take a step back, zoom out those in time and in space and ask the question in the big picture “is this gonna matter in one year?”</p></blockquote></li></ul></li></ol><p>例子：教授讲了一个他最近遇到崩溃时，怎么运用以上的技巧改变角度，并改善了生活。</p><p>这些技巧不是疫苗，而像药片。</p><h3 id="Reminder-v2"><a class="header-anchor" href="#Reminder-v2">¶</a>Reminder</h3><p>有趣的概念：</p><ul><li><p>Courage: courage is not about having no fears. Instead, it’s about having fear and go ahead anyway.</p></li><li><p>心理安全</p></li><li><p>flow experiences</p></li><li><p>80/20 Rule:一天20%的时间里干完了80%的事情。</p></li></ul><h3 id="olc-v4"><a class="header-anchor" href="#olc-v4">¶</a>olc</h3><p>听从内心的声音，那个声音是完成MIT 6-3 course plan。这是我现在生活的优先级。做完这个后我才会完成实习计划。</p>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> positive psychology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSY introduction</title>
      <link href="/sg/2021/12/09/psy_intro/"/>
      <url>/sg/2021/12/09/psy_intro/</url>
      
        <content type="html"><![CDATA[<p>这门课吸引我的点在于它是由理论和应用组合起来的。虽然之前就了解到有这么一门课，但是标题让我先入为主地认为这只不过是另一门鸡汤学。直到由于最近因为实习准备相关的事很沮丧今天给自己放了一天假，突然想到了这门课就打算随便看看。第一节introducation教授Tal就提到了学界虽然对积极心理学存在很多有意思的研究，但日常生活中不会有多少人去阅读专业的期刊，甚至可能听都没听过。而这门课的目的之一就是将积极心理学用大众能够理解的程度讲授出来，这门课的效用取决于学生能够多大程度地将课堂中的理论应用到日常生活中，而我也打算如此做来改变现在的境况。</p><p>我的笔记会包含问题，课堂觉得有趣的实用的概念/例子/观点，对一些忽略的事的提醒(Reminder of what we’ve already known)，我在实际生活中采取了的行动和效果等。这将成为我个人实验中的一部分。</p><h2 id="Introduction"><a class="header-anchor" href="#Introduction">¶</a>Introduction</h2><h3 id="transformation-vs-information"><a class="header-anchor" href="#transformation-vs-information">¶</a>transformation vs information</h3><p>Transformation：</p><ul><li>difference from information is about how to apply that knowledge in real life. Projects is one way of transformation in computer science study</li><li>interpretation and focus of life</li><li>information is not enough to change the world：Over-promising, under-delivering</li></ul><p>学习不是容纳信息，而是将信息根据实际情况应用。但这里不仅指如此，还在于如何去解释接收到的客观信息。当我们遇到问题，不同的态度会产生不同的想法。</p><p>Either Learn from experience thinking it as opportunity or disaster that you cannot recover from.</p><h3 id="subtraction"><a class="header-anchor" href="#subtraction">¶</a>subtraction</h3><p>做减法是指发现自身的天性，不要被外在多余的东西所束缚。</p><p>Chipping away the accessing stone as David:</p><ul><li>Perfectisim</li><li>Limitations,barrier</li></ul><p><u>problem</u>: how to apply it in practice: Introduce behavior,actual change in real life</p><h3 id="why-study-happiness-not-depression"><a class="header-anchor" href="#why-study-happiness-not-depression">¶</a>why study happiness not depression?</h3><p>Depression mentioned in course is something I can relate to. I’m familiar with that feeling of dwelling on past failures and not seeing the future. The course reminds me of I should see the positive side of problems and take actions after a right amount of time to feel bad about everything. The difference between active agent and passive victim is that active agent is always to make active move like to take active participation in course when you only write contents you understand or feel interested. Whereas the passive victims would feel sorry for themselves and start to complain about everything in life.</p><p>active participation: 不只是这节课，所有课程都该如此。学习不是教条主义，不是容纳而是理解，选择与接受。</p><p><u>problem</u>: If I don’t have much time, what I want to do?</p><ul><li>olc: the answer is finishing the course plan, design and implement useful things in my internship if there’s any.</li></ul><h4 id="1-focus-on-what-works"><a class="header-anchor" href="#1-focus-on-what-works">¶</a>1. focus on what works</h4><p>Nature inclination: what I’m good at? What I can be better at?</p><h4 id="2-Happiness-is-not-the-negation-of-unhappiness"><a class="header-anchor" href="#2-Happiness-is-not-the-negation-of-unhappiness">¶</a>2. Happiness is not the negation of unhappiness</h4><p>回避内心的冲突 vs pationate/engage in what we are doing：</p><p>摆脱痛苦并不代表立即获得幸福，而是一种麻木呆滞的状态。人际关系一直是我回避的问题，因为在中学时深受其害，我避免了几乎所有不必要的社交活动的建立，只和真正感兴趣的人相交。但我觉得这仍然不够，我只是回避了内心的冲突，忽视了真正存在的问题。</p><h4 id="3-Prevention-through-cultivating-capacity"><a class="header-anchor" href="#3-Prevention-through-cultivating-capacity">¶</a>3. Prevention through cultivating capacity</h4><p>Cultivate health/positive side/personal growth：</p><p>当一个人出现神经症时，说明他自身的成长和人际关系(relationship, personal growth)已经停滞不前，他没有关心自己的健康。</p><ul><li>We diminish ourselves, that’s where we become ill.</li><li>Focus your health, strengthen your health</li><li>systematically build competency</li></ul><h3 id="Resilience"><a class="header-anchor" href="#Resilience">¶</a>Resilience</h3><p>什么是克服问题的可习得的品质：</p><ul><li><p>identify the strength, set goal and future-oriented, role-model</p></li><li><p>Admit the weakness</p></li><li><p>Helping people is helping ourselves</p><ul><li>Appreciate the good(be grateful, to grow).</li></ul></li><li><p>?? Tough enough to seek for help</p></li><li><p>find the right community</p></li><li><p>social support-&gt;find the right people: If you ask help for them, they would help.</p></li><li><p>Experience: what I can do to make it meaningful?</p></li></ul><h3 id="Ask-the-right-question"><a class="header-anchor" href="#Ask-the-right-question">¶</a>Ask the right question!!!</h3><p>例子：30s内数一个图里有多少几何图形，然后再问图画的一些细节的简单问题。基本都没法回答那些简单问题，因为在看图时的重点放在了解决那个唯一问题上，而根本没注意细节。</p><p>工作中需要我们去问正确的问题，这往往就是事物的关键所在。但我们并不总是知道自己的问题是否正确，一个问题引发出去探索相应的领域，得到相应的解答。可这只是一部分的真实，而被我们忽略的事情的其他部分可能也同等重要。</p><p>在问正确的问题之前我们首先需要理解问题是什么。</p><h3 id="responsibility"><a class="header-anchor" href="#responsibility">¶</a>responsibility</h3><p>承担责任首先需要认识到没有人会为你解决问题。</p><p><u>Responsibility</u> = no one is coming</p><h3 id="reminder-v3"><a class="header-anchor" href="#reminder-v3">¶</a>reminder</h3><p>例子：</p><ol><li>讲了一个例子为什么在哈佛毕业的一届学生里一小群人远比别人更加成功，由于他们具备两种因素：自信，相信自己一定能做到；总是问问题，在自己的社会角色变迁的同时，向同事问问题，向导师问问题，向老板问问题…</li></ol><p>有趣的概念：</p><ol><li>Eduction: Question, find the right the question and quest</li><li>become happier，这门课的主要目标不是变得快乐，而是变得比之前快乐。</li><li>study ourselves</li><li>simple, simplicity extracts from otherside of complexity, not just simplicity</li><li>Stillness：安静的重要性。</li><li>best way to learn is to teach: Learn -&gt; do projects on your own -&gt; teach, this way is more reasonable to me.</li><li>Leadership: Be respectful and do the job</li><li>积极心理学：salutogenesis</li></ol><h3 id="olc-v3"><a class="header-anchor" href="#olc-v3">¶</a>olc</h3><p>我最近的问题是：通过实习面试。了解工业界级别的数据库在做什么事情，解决怎样的问题，我的位置在哪里。</p><p>现状：在实习前必须要满足的要求是写os,db,算法题。但大概三周前，又或者10月底的时候我就该做这些必要的事了。但是9-10月看了6.031的大部分内容以及6.004的系统部分的阅读，过了一遍数据结构；11月看6.033读系统方向的论文又看了三周左右基本看到了分布式系统（除了Raft还没看）。因为我觉得这些内容也很重要想在实习前搞定，这导致了我的课程项目差了很多没有做。</p><p>归纳的主要难点是：</p><ol><li>Os, db, 6.006应该作为优先级</li><li>把感兴趣的课程作业和实习会需要的课程项目分开，优先做系统相关的课程项目：(OS,DB-&gt;DS, network)</li></ol><p>（倒是没有特别拖延了🙂️）</p><h2 id="Premise"><a class="header-anchor" href="#Premise">¶</a>Premise</h2><p>五个前提和intro课作为这门课的基础。之后的内容都是在这个基础上的延伸。</p><h3 id="1-Bridge-building-Vs-Division-and-separation"><a class="header-anchor" href="#1-Bridge-building-Vs-Division-and-separation">¶</a>1. Bridge building Vs. Division and separation</h3><p>*Practical idealist：*People just see the stereotypes without seeing their desire of making a difference</p><ul><li><p>Bridge ivory tower to Main Street</p></li><li><p>sense of mission, desire to make a difference: How can I make this world a better place?</p></li><li><p>false stereotypes: accolades, prestige, money</p></li></ul><p><u>scenario</u>: fall short of what we are cable of doing with good intentions.</p><p>Problem 1: 为什么仍旧有人身处逆境仍然成功？</p><p>Problem 2: 为什么有良好的动机仍然不能够发挥自身的最大效能，甚至为此所害？</p><p>例子：研究表明conflict resolution: 让矛盾双方聚在一起共同讨论停止争端；但这在中东地区矛盾方接触后反而引起更大的冲突。因为后来发现这还需要矛盾双方有一个superordinate goal，才能在讨论中逐渐消除差异。</p><p>例子：无分辨的称赞别人常常会适得其反。</p><p>ans: 理想和好的动机并不够，研究和实践需要结合起来。你必须自己去发现和实践，承担责任和失败的后果。因为没有人会来为你解决问题，你想要的问题的答案需要你自己去找寻。</p><h3 id="2-Change-is-possible-Vs-Change-is-illusive"><a class="header-anchor" href="#2-Change-is-possible-Vs-Change-is-illusive">¶</a>2. Change is possible Vs. Change is illusive</h3><ol><li>这主要讲了积极心理学研究为什么合理。这门课的研究方向：Study what works -&gt; study what works the best -&gt; make a difference in practice</li></ol><ul><li><p>study also the extraordinary/exceptions as studying the average</p></li><li><p>Learn from the best: not only others’ best, but also personal best</p></li><li><p>How difficult to make a change? How is possible to make a change?</p></li></ul><ol start="2"><li><p>例子：一个干涉实验，对250个处于边缘的小孩进行干涉，250个不作干涉，（干涉指提供学业上的指导，解决家庭问题）经过40年的追踪，对照组和实验组在各个因素的表现都相差无几，而对照组在有些方面甚至表现得更好（比如在工作上的提升）。</p><p>这个例子说明了好的动机并不能够解决问题，改变的发生很难进行。</p></li><li><p>Exponential nature of social network/change/the power of one</p><p>问题是选择变化的方向。</p></li></ol><h3 id="3-internal-factors-Vs-external-factors"><a class="header-anchor" href="#3-internal-factors-Vs-external-factors">¶</a>3. internal factors Vs. external factors</h3><p>Internal factors primarily determine happiness Vs. Happiness is primarily a function of external circumstances</p><p>fact 1: Extrem external circumstances would make a difference in happiness. But in general, it would not affect the degree of our happiness.</p><p>fact 2:Right versus wrong expectations would affect our well-beings, not high versus low expectations.</p><p><u>problem</u>: What is the right expectation? Beliefs + transformation</p><ul><li>believe in change from within</li><li>Transformation: interpretation, preception,focus of the world</li></ul><h3 id="4-Human-nature-must-be-obeyed-Vs-perfected"><a class="header-anchor" href="#4-Human-nature-must-be-obeyed-Vs-perfected">¶</a>4. Human nature must be: obeyed Vs. perfected</h3><blockquote><p>Nature to be commanded must be obeyed.</p></blockquote><p>在心理学层面上，人们天性应该得到尊重，而不是尝试去完善它即使存在那么多的缺点。</p><p>例子：内向导致的在很多人面前讲话而紧张。Tal 以自己为例解释说自己非常内向，在五人以上的场合讲话会非常紧张，但与其告诉自己“不要紧张，不要紧张”不如接受这样的紧张的感觉。因为不要紧张反而会使人放大这种情绪使人更加紧张。</p><p><u>the permission to be a human</u>: it’s ok to experience these painful feelings.</p><ol><li><p>Active acceptance is not resignation(passive acceptance)</p><ul><li><p>Certain things can not change while certain things I can and ought to change</p></li><li><p>the wisdom to tell the difference between changeable  and unchangeable things.</p></li></ul></li><li><p>Distinction between ABC(affect-emotion, behavior-action, cognition-thoughts)</p><p>情绪，行为，想法可以分开来看。</p><ul><li>How to behave and act even with some emotion like jealousy/…</li></ul></li><li><p>建立心理免疫系统：</p><ul><li>how quickly to recover from the depression?</li><li>Strengthens when we give ourselves the permission to be a human</li></ul></li></ol><h3 id="5-Happiness-is-and-ought-to-be-the-ultimate-end-Vs-Happiness-should-be-a-secondary-pursuit"><a class="header-anchor" href="#5-Happiness-is-and-ought-to-be-the-ultimate-end-Vs-Happiness-should-be-a-secondary-pursuit">¶</a>5. Happiness is and ought to be the ultimate end Vs. Happiness should be a secondary pursuit</h3><p>理由：1. 对自己好；2.对周围的人好</p><p>情绪变化</p><p>Downward spiral: narrow and constrict -&gt; sad emotions</p><p>Upward spiral: build and broaden -&gt; positive emotions</p><ul><li>olc:这个情绪变化的循环我应该在中学时就见过，只是当时仍旧停留在理论上，不懂怎么产生积极情绪于是陷在长期的负面情绪里不可自拔。只知道这个循环仍旧不够，重点是如何改变。</li></ul><h3 id="reminder-v4"><a class="header-anchor" href="#reminder-v4">¶</a>reminder</h3><p>例子：Tal给出了几个做动作的指令并自己给出了示范，学生大多根据Tal的动作来做而不是他说的指令。</p><ul><li>leading by example: people do what you do, not what you say</li></ul><p>有趣的概念：</p><ol><li>Constrained view vs unconstrained view of human nature</li><li>pink elephant</li><li>过度思考负面情绪 Vs. 静心沉思</li><li>Be the change you want to see in the world.</li></ol>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> positive psychology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我们内心的冲突</title>
      <link href="/sg/2021/12/09/innerconflicts/"/>
      <url>/sg/2021/12/09/innerconflicts/</url>
      
        <content type="html"><![CDATA[<p>前言：我现在最喜欢的图形是一个螺旋上升的圆，人在生活中总是出现似曾相识的背景，不一样的故事内核都是一样的，只是我们在不同的阶段做出了怎样的选择，采取了怎样的行动，导致了怎样的结果。这本书我在20年暑假看完并做了笔记，当时的很多想法虽然意图良善，但是仍有些幼稚和过于情感化，不过笔记中的内容仍然留有很大的思考和行动空间。一个人要么沉浸在失败里，要么从失败中走出来。希望我采取的行动能够让我走出现在的谜团。</p><hr><p>我选取了相关度较高的章节阅读，包括对神经症冲突和处理的尝试的了解以及未解决冲突后果中的恐惧，人格萎缩和绝望部分。</p><p>这无疑是近年我所读到的对我影响最大的一本书。我不能断言自己是否是神经症的一员，但作者对内心冲突的细致分析（虽然她说只作为分析角度出发不一定能解决实际问题，但她明显为解决内心冲突提供了可能）让我明白对待内心冲突所应采取的态度和行动。</p><blockquote><p>而我的观点是，一个人愿意并且也有能力去发展他的潜能，努力成为一个更优秀的人。但是，如果他与别人、与自己的关系不断受到干扰，他的这种潜能可能就会丧失殆尽。我相信人是会改变的，人只要活着，就会不断地改变。而且，随着理解的不断深入，我对这一信念越发坚定。</p></blockquote><h2 id="神经症冲突和处理的尝试"><a class="header-anchor" href="#神经症冲突和处理的尝试">¶</a>神经症冲突和处理的尝试</h2><h3 id="神经症冲突的痛苦和基本冲突"><a class="header-anchor" href="#神经症冲突的痛苦和基本冲突">¶</a>神经症冲突的痛苦和基本冲突</h3><p>人人都有矛盾。根据矛盾做出决策的前提是对自己观念的清楚认知和意识到冲突时做出选择和为选择承担责任的意愿和能力。</p><p>神经症患者：指达到病态程度的人，对自己情感和愿望的意识非常弱，唯一能清晰体验到的情感就是恐惧和愤怒。在强迫性倾向的控制下，患者失去了决定方向，放弃决定和承担责任的能力。</p><p>神经症冲突使人痛苦的原因：它们难以识别，具有足够的破坏性。</p><p>为应对环境所采取的基本行动：亲近人，对抗人，回避人。分别反映了焦虑的某一个元素：无助，敌意，孤立。三种倾向必定都会出现。我们看到的只是其中占主导地位的倾向。正常人和神经症患者的区别在于这三种态度是否互相排斥。</p><blockquote><p>它的动力核心就是三种态度之间的基本冲突，即“亲近人”“对抗人”和“回避人”。患者一方面害怕自己出现分裂，另一方面又必须作为一个整体发挥功能，所以他便不顾一切地尝试处理冲突。尽管他可以制造出一种人为的平衡，但新的冲突不断产生，并不断要求采取进一步的补救措施。在这场追求整体性的斗争中，每一步都使神经症患者变得更加敌对，更加绝望，更加恐惧，更加疏远自己和他人。其结果便是，这些冲突造成的困难越来越多，真正的解决办法却越来越少。患者最终变得绝望，就试图在施虐行为中寻求补偿，而这反过来又增加了他的绝望，产生了新的冲突。</p></blockquote><p>这些态度从人际关系渗透到整个人格中，最终不仅支配着患者与别人的关系，而且控制着他与自己和整个生活的关系。</p><blockquote><p>冲突开始于我们与别人的关系，最终会影响我们的整个人格，这并不是偶然的。人际关系重要到能够塑造我们发展的品质，影响我们设定的目标，引导我们信仰的价值观。而 所有这一切，反过来又会作用于我们与别人的关系，它们是不可分割地交织在一起的。</p></blockquote><p>神经症的核心：由不相容的态度产生的冲突。神经症是人际关系紊乱的一种表现。</p><h3 id="四种尝试"><a class="header-anchor" href="#四种尝试">¶</a>四种尝试</h3><blockquote><p>第一种尝试是掩盖某一 部分冲突，并使其对立面占据主导地位。第二种尝试是“回避人”。我们现在对神经症孤 僻的功能有了新的认识。孤僻是基本冲突的一部分，也是一种对待别人的原始的矛盾态度；它同时也表现出处理冲突的意图，在自我和他人之间保持情感距离，使冲突停止运作。第 三种尝试在性质上有很大不同。神经症患者没有“回避人”，而是回避他自己。他的整个 现实自我在某种程度上对他来说是不真实的，他创造了一个理想化的自我形象来取代真实自我。在这个理想化的形象中，相互冲突的部分得到了美化，冲突不再表现为冲突，而像是一个丰富人格中的各个方面。这一概念帮助我们澄清了许多迄今为止无法理解并因此无 法治疗的神经症问题。它也使得起初难以融合的两种神经症倾向各归其位。现在看来，对完美的需求似乎就是患者为了达到这个理想化形象而做出的努力；而对被赞美的渴求可以 看作患者需要外界肯定他和他的理想化形象是一致的。从逻辑上讲，这种形象与现实的差 距越大，患者的需求就越难以满足。在所有处理冲突的尝试中，这种理想化的形象可能是最重要的，因为它对整个人格有着深远的影响。但反过来，它又产生了新的内心裂痕，因此需要进一步的修补。第四种尝试主要是为了消除这一裂痕，它也顺带消除了其他的冲突。通过我所称作的“外化作用”，患者在自我之外所发生的事件中体验他的内心活动。如果 说理想化形象意味着与真实自我只有一步之遥，那么外化作用则代表了与真实自我的彻底 叛离。它再次制造了新的冲突，或者更确切地说，大大增强了原有的冲突，即自我和外界之间的冲突。</p></blockquote><h3 id="回避人"><a class="header-anchor" href="#回避人">¶</a>回避人</h3><p>首先要意识到神经症性质的孤僻和儒家思想中的的独处的区别。只有在人际交往中出现了无法忍受的紧张，独处变成主要的逃避手段时，独处才是神经症孤僻的表现。</p><p>严重孤僻的人的表现：对别人的普遍疏远；与自我的疏远，对情感体验的麻木，对自己是谁，对自己的爱，恨，欲望，希望，恐惧，怨恨，信仰的不确定；他们内心需要与自己，与别人保持情感距离。</p><blockquote><p>他们对自己都持“旁观者”态度，一如他们对待生活的态度。他们往往是自己内心活动的出色观察员。一个突出的例子就是，他们经常对梦中的象征表现出惊人的理解力。</p></blockquote><p>孤僻型患者的需要：</p><ul><li><p>主要需求：不参与。表现的特征为对独立的需要。能做的事情不能做的事情都倾向于自己独立完成，永远不对任何人和事产生强烈的依恋以至其不可或缺。</p></li><li><p>其它需要：保护自己隐私；</p></li></ul><p>优越感，孤僻和优越的联系在于-&gt;如果不是真的特别强大和足智多谋，或者感觉自己出类拔萃，恐怕没有人能够忍受孤立。</p><p>孤僻者对优越感需求的独特性在于他讨厌竞争，不愿意付出努力去超越别人；另一种表现为他认为自己是独一无二的，拒不接受任何外来因素。</p><p>我认为这两点是我15岁开始停滞不前的主要原因，too young too naïve，少时自我没有太多内容，更多的只是一些浅显的概念。而由于对外在陌生环境的惧怕和无所适从，以及对这种不适应的掩饰逐步影响到人际关系。</p><blockquote><p>当孤僻型患者的优越感被暂时粉碎时，无论是因为具体的失败还是内心冲突的加剧，他都无法再去忍受孤独，而会疯狂地寻求关爱和保护。这种动荡在他的人生历程中会经常出现。在他十几岁或二十出头的时候，他可能有过一些不冷不热的友谊，但总体上过着相对孤立的生活，感觉自由自在。他经常幻想未来，自己会成就非凡的事业。但后来，这些梦想在现实的岩石上摔得粉碎。尽管在高中时，他无可争辩的是第一名，但在大学，他遇到了激烈的竞争并被击败。他的第一次恋爱也失败了。或者，随着年龄的增长，他意识到自己的梦想是难以实现的。然后，孤独离群变得令他难以忍受；在某种强迫性力量的驱动下，他开始渴求亲密关系、性关系以及婚姻。只要有人爱他，他宁愿卑躬屈膝。</p></blockquote><p>我认为自己确实存在与别人保持情感距离，以避免冲突或更加亲密；也确实希望尽可能单凭理性解决问题。可我不认为这种状态是不可改变的，最多只是在现在这一人生阶段持续着，也有可能因为某人或某事改变。不过这应该也属于作者对孤僻症患者有固有的情感倾向的范畴。作者说的孤僻者对独立有歇斯底里的态度，为此可做出任何牺牲，可以抛弃全部外在利益和内在价值。我对独立没有到这一极端的程度，独立和依赖在我看来也不是非此即彼的关系。这需要因人（所对待的人）而宜。</p><p>Update: 这段话即使是现在看也仍然很令人警醒。虽然我应该不是孤僻者，也没有优越感🙂️。</p><blockquote><p>孤僻型患者的情感生活并不像其他类型那样遵循严格的模式。这一类型的个体差异较大，主要是因为不同于其他两种类型有着积极的目标——顺从型追求喜欢、亲密和爱，攻击型追求生存、控制和成功——而孤僻型的目标是消极的：他不想参与其中，不需要任何人，不允许别人干涉或影响他。他们的情感状态依赖于在消极框架下形成和发展的特殊欲望，而且只会形成少量固有的倾向。</p></blockquote><p>每种态度都有积极价值。但在神经症的结构中出现并运作时，他们会变得相互排斥。</p><blockquote><p>作为众多创造虚假和谐的神经症方式之一，这是一种通过逃避来处理冲突的尝试。但这不是真正的解决之道，因为患者亲近、控制、利用和超越别人的强迫性需求仍然存在，在思维瘫痪之前，他将持续受其骚扰。最后，只要相互矛盾的价值观继续存在，他就永远不能实现真正的内心平静和自由。</p></blockquote><p>外化作用：通过把问题外化而忽略内心冲突的存在，无法把自己想象成个人生活中的积极推动者。患者与自我的疏远加剧了个人和外部世界之间的冲突。</p><p>虚假和谐：拆东墙补西墙。除非最初导致困难的条件被彻底改变否则就是无效的。</p><p>围绕基本冲突这一核心建立起来的防御机制：称为防护性结构。每种神经症都形成了一套防御系统，包含上述形式，活跃程度不同。</p><h2 id="未解决冲突的后果"><a class="header-anchor" href="#未解决冲突的后果">¶</a>未解决冲突的后果</h2><h3 id="恐惧"><a class="header-anchor" href="#恐惧">¶</a>恐惧</h3><blockquote><p>通过压抑、理想化和外化的过程，患者已经失去了大部分的自我；即使还没有真的变成影子，但他感觉自己就像一个无足轻重、毫无内涵的影子。 与此同时，他对别人的需要和恐惧，不仅使他们更加令人生畏，而且更加不可或缺。</p></blockquote><p>当时浑浑噩噩地白天睡觉，晚上刷剧的原因就是不知道如何面对周围环境的评价，索性采取了漠视的态度。印象比较深的场景时上课睡觉，当时应该在讲卷子我没写，然后被老师抓到了作为反面典型，顺便再评论了一下我之后的人生就只能这样了。</p><blockquote><p>这样做的后果是，患者过度看重别人对他的评价，而自我评价则变得无关紧要。这使得别人的意见对他具有一种压倒性的力量。</p></blockquote><p>虽然尚未到这种程度，但是这样的后果也足够惊骇了。</p><blockquote><p>一般来说，这种恐惧的后果就是使神经症患者远离别人，并对别人产生敌意。更重要的是，这种恐惧使受其折磨的人无法施展自己的才能。他们不敢对别人抱有期望，也不敢为自己设定远大理想。他们不敢接近那些看起来比自己优秀的人；他们不敢发表意见，即使自己可能很有见解；他们不敢运用自己的创造力，即使自己拥有这种能力；他们不敢让自己具有吸引力，不敢试图给人留下深刻印象，也不敢寻求更好的职位，等等。即使有时他们在这些方面跃跃欲试，但想到被人嘲笑的场景便望而却步，退回到自己的矜持和自尊中寻求慰藉。</p></blockquote><p>我想要：</p><blockquote><p>如果我们想要最终获得人格的整合，就必须把自己暴露在恐惧面前，所以它们也是我们直面自己所遇到的障碍。它们如同炼狱，我们必须在那里徘徊，最后才能得到救赎。</p></blockquote><h3 id="人格萎缩"><a class="header-anchor" href="#人格萎缩">¶</a>人格萎缩</h3><p><strong>压抑的部分基本冲突</strong>造成了个人精力的部分消耗。</p><p>造成的主要困扰有：犹豫不决；普遍的效率低下（开车的同时踩刹车）；普遍的惰性。</p><p>未解决的神经症冲突所浪费的精力是无法估量的。</p><blockquote><p>神经症患者可能认为，必须不懈地努力这一事实让他感到羞辱，这无异于表示他 不是他的理想化形象；一想到要付出世俗的努力，他宁愿什么也不做，整天在幻想中大展拳脚。自卑的折磨伴随着理想化形象，剥夺了他的自信，让他觉得自己做不了任何有价值的事，从而把所有的动力和乐趣都埋在流沙里。</p></blockquote><p>理想</p><blockquote><p>我断言他并没有认真对待自己的理想，意思是说这些理想对他的生活并没有约束力。当理想很容易实现或很有用的时候，他就会付诸行动，一旦时过境迁，他便束之高阁。而对认真对待理想的人来说，这种情况是很难想象的。<strong>如果这些理想是真实的，他们不可能轻易将其抛到一边。</strong></p></blockquote><p>责任</p><blockquote><p>我们说的承担责任，是指能够为我们认为正确的事情挺身而出，而且当我们的 行动或决定被证明是错误时，能够承担后果。</p></blockquote><h3 id="绝望"><a class="header-anchor" href="#绝望">¶</a>绝望</h3><p>注解说绝望来自于无法成为自己。我的程度应该没有这么深，丧是肯定的，但只有某些时刻才会有这样的感觉。15-16时存在某种理想化形象，不过就算是那个时候也是极其浅显的认知，衍生了很多无谓的幻想。不过我认为这种情况很难避免，由于对环境的不够完全的认知，个人又丢失了基本的行动力，停停走走，直到这个状态彻底不能维持下去。</p><blockquote><p>不仅如此，日常生活中的小意外在他头脑中都犹如大难临头。任何微小的失败都可能 使他陷入抑郁，因为这证明了他毫无价值——即使失败是由不可控的因素造成的。任何无伤大雅的批评都可能使他忧心忡忡或前思后想，如此等等。结果，他比一般人更不快乐、 更不满意，这当然是庸人自扰。</p></blockquote><p>绝望者的态度</p><blockquote><p>生命是一种永恒的负担，他们见怪不怪，也没有什么抱怨。但是，他们的情绪永远都 处于低谷的状态。</p></blockquote><blockquote><p>他一直处于自己极不满意的情境中，或许只要付出一点努力，拿出一点积极性，这种状况就可以得到改善。但是，他可能因为绝望而完全瘫痪，对他而言，正常的困难似乎都是不可逾越的障碍。</p></blockquote><p>从对待绝望态度到对待神经症态度：<br>绝望由内心冲突引起。这种境况十分困难，但真正使事情变得绝望的是患者态度。</p><blockquote><p>假如提供建议的是一 位优秀的分析师，他会说：“当然，这种境况十分困难。但真正使事情变得绝望的是你们 自己的态度。如果你们考虑改变自己对生活的要求，就不会再感到绝望了。</p></blockquote><blockquote><p>我认为神经症的强迫性倾向并非出自本能，而是来自人际关系的紊乱；当患者的人际关系得到改善时，这些倾向是可以改变的，发源于此的冲突也可以真正得到解决。</p></blockquote><blockquote><p>尽管每次遇到问题都必须从头处理，但只要患者认识到他真的可以改变，绝望对他的控制就会有所松动，他的动力也会随之增强。<strong>在分析开始时，这种动力可能仅限于他希望摆脱最令人不安的症状；但是，当患者越来越意识到他的枷锁，尝到了自由的滋味时，他的动力就会越来越强</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10下装子系统ubuntu20.04和设置工作区</title>
      <link href="/sg/2021/12/02/child/"/>
      <url>/sg/2021/12/02/child/</url>
      
        <content type="html"><![CDATA[<p>install linux on pc -&gt; set up proxy -&gt; install virtual machine -&gt; install vagrant -&gt; change keyboard mapping -&gt; change bash file setting -&gt; connect to GitHub via ssh</p><h2 id="安装子系统"><a class="header-anchor" href="#安装子系统">¶</a>安装子系统</h2><p>安装的是ubuntu20.04 amd版本。</p><p>安装步骤参考<a href="https://zhuanlan.zhihu.com/p/363640824">这篇文章</a></p><p>遇到的问题</p><ol><li><p>无法打开虚拟磁盘</p><p>搜一下改虚拟磁盘的启动项，记得要重启才能生效</p></li><li><p>开机出现grub</p><p>看到grub懵了，exit后也不能正常显示。后来参看了<a href="https://blog.csdn.net/luo617/article/details/81321721?spm=1001.2101.3001.6650.9&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7Eessearch%7Evector-9.essearch_pc_relevant&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7Eessearch%7Evector-9.essearch_pc_relevant">这篇文章</a></p></li><li><p>分区，c drive 15000MB, D drive 300000MB</p><p>先分逻辑区，后分主区。</p></li><li><p>安装的时候先不要联网，基本安装完后再联网更新</p></li></ol><h2 id="设置网络代理"><a class="header-anchor" href="#设置网络代理">¶</a>设置网络代理</h2><p>参考<a href="https://zhuanlan.zhihu.com/p/359755946">linux配置v2ray</a></p><p>遇到的问题</p><ol><li><p>设置代理后无法打开网页，导致http解析全部失败。然而我还没有意识到只有打开代理才能连接网络。</p><p>参考了<a href="https://blog.csdn.net/weixin_30413739/article/details/96381847">代理网页解决</a></p></li><li><p>这也是在安装虚拟机时出现的问题。最后通过1解决。</p><p>对应了6.031中说的排查问题范围的顺序。</p></li></ol><h2 id="软件安装"><a class="header-anchor" href="#软件安装">¶</a>软件安装</h2><h3 id="虚拟机"><a class="header-anchor" href="#虚拟机">¶</a>虚拟机</h3><h4 id="Virtual-box"><a class="header-anchor" href="#Virtual-box">¶</a>Virtual box</h4><p>刚开始照着官网教程安装（瞎搞），出现了各种问题，按步骤调了下，又出现一个http解析错误，试图改vagrantfile(瞎搞)，最后发现是网络问题。并且virtual box的安装应该只需要(虽然我安装了官网上的各种key认证，但我并不确定这是否是必需的步骤）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualbox</span><br></pre></td></tr></table></figure><p>瞎搞出现的问题</p><ol><li><p>更改sources.list并apt-get update后出现：不支持i386架构</p><p>通过<a href="https://qastack.cn/ubuntu/741410/skipping-acquire-of-configured-file-main-binary-i386-packages-as-repository-x">这篇文章</a>解决（？）。解释说因为有多种架构发生了混乱于是删除了32位架构。</p></li><li><p>瞎搞的<a href="http://www.4k8k.xyz/article/qq_41941875/99561458">步骤</a></p><p>中间wget一直报错：http解析错误。就是因为网络问题。</p></li><li><p>既然是瞎搞肯定会出现安装错误/不完整的情况，于是就需要<a href="https://askubuntu.com/questions/703746/how-to-completely-remove-virtualbox">完全删除</a>掉已安装的内容</p></li><li><p>Security boot: 出现UEFI安全错误，重启后按F2进入BIOS界面<a href="https://askubuntu.com/questions/1105710/installing-virtualbox-your-system-has-uefi-secure-boot-enabled-message">关掉了这个检查</a></p></li></ol><h4 id="Vagrant"><a class="header-anchor" href="#Vagrant">¶</a>Vagrant</h4><p>按<a href="https://www.vagrantup.com/downloads">官网</a>即可。</p><h3 id="IDE"><a class="header-anchor" href="#IDE">¶</a>IDE</h3><p>clion:下载一个包后解压缩，用命令行打开。可参考<a href="https://blog.csdn.net/feimeng116/article/details/105898892">安装clion</a></p><p>Code: 直接下载deb文件安装</p><h2 id="GitHub-连接"><a class="header-anchor" href="#GitHub-连接">¶</a>GitHub 连接</h2><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">ssh connection</a></p><p>照着提示进行就行了。出现的问题基本都是网络问题，而不是步骤哪错了。</p><h2 id="键盘映射"><a class="header-anchor" href="#键盘映射">¶</a>键盘映射</h2><p>查了几篇文章试了试，xmodmap不能很好的解决问题（可能是因为没有重启？？）。</p><p>于是用了<a href="https://askubuntu.com/questions/363346/how-to-permanently-switch-caps-lock-and-esc">deconf-tools</a>，由于在ubuntu20.04中不支持（？）然后找了<a href="https://askubuntu.com/questions/1248426/what-has-replaced-dconf-tools-for-ubuntu-20-04?noredirect=1&amp;lq=1">替代方案</a>。</p><h2 id="工作区设置"><a class="header-anchor" href="#工作区设置">¶</a>工作区设置</h2><p>主要就是为了解决网络课程写作业的问题。我觉得在mac m1环境下无论用哪种虚拟机都不能解决根本问题。而EC2也存在明显的缺陷。</p><p>而15-441和cs144默认的环境都是linux amd64，尽管在docker下也勉强能进行，但是如果中途出了错误就更难调试了。</p>]]></content>
      
      
      <categories>
          
          <category> toolbox </category>
          
          <category> environment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> environment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置AWS的EC2作为服务器和工作区</title>
      <link href="/sg/2021/12/01/server/"/>
      <url>/sg/2021/12/01/server/</url>
      
        <content type="html"><![CDATA[<h3 id="简要步骤"><a class="header-anchor" href="#简要步骤">¶</a>简要步骤</h3><h4 id="1-创建EC2虚拟机"><a class="header-anchor" href="#1-创建EC2虚拟机">¶</a>1 创建EC2虚拟机</h4><p>由于我也看不懂安全组，卷，实例这些，就按照默认设置了。</p><p>我设置的存储空间是16G（免费上限是30G）</p><h4 id="2-设置IP地址"><a class="header-anchor" href="#2-设置IP地址">¶</a>2 设置IP地址</h4><p>具体参考<a href="https://zhuanlan.zhihu.com/p/59125060">亚马逊AWS EC2免费服务器+域名配置教程</a>中的二到四步</p><h3 id="Amazon-cloud-定价"><a class="header-anchor" href="#Amazon-cloud-定价">¶</a>Amazon cloud 定价</h3><p>亚马逊云服务如果超出免费套餐收费很贵，收费规则也相对复杂。</p><p>归纳一下：开机/关机不足一小时（1s也算不足）按1小时计费。关机后，存储服务（EBS）仍要收费。只有清除后才不会再收取费用。</p><p>注意事项：</p><blockquote><p>如果在“Instances”页面看到多于一个instance，你一定要stop甚至terminate多于一个的，不然你将面临计费风险。aws提供的免费服务包中有其它的服务会自动开启Instance的，我关闭相关服务才关闭了我不需要的Instance。一个t1.micro，一个月是140多美元。</p><p>参考<a href="https://zhuanlan.zhihu.com/p/124102508">AWS收费</a></p></blockquote><ol><li>EC2<u>只开1个instance</u>。服务器的免费政策是720 <u>1个Instance</u>小时/月，开多个instance则需收费。</li><li>start/stop server: <a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/ec2-instance-hour-billing/">instance记时</a>是以1小时做单位的，如果一个小时之内start/stop 5次服务器的话，会被记5个小时</li><li>流量，I/O次数等等很多信息都有免费的上限</li><li>付款以美元记</li><li>免费期是12个月，12月之内一定要终止(terminate)你使用的aws服务，否则会被计费。</li><li><a href="https://docs.amazonaws.cn/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#eip-pricing">弹性IP地址</a>收费：为确保弹性IP 地址的有效使用，如果弹性IP 地址未与正在运行的实例关联，或者它已与停止的实例或未附加的网络接口关联，我们将强制收取小额的小时费用。 当您的实例正在运行时，您无需为与该实例关联的某个弹性IP 地址付费，但需为与该实例关联的所有其他弹性IP 地址付费。</li></ol><p>某案例：<a href="https://qastack.cn/programming/2549035/do-you-get-charged-for-a-stopped-instance-on-ec2">您是否需要为EC2上的“已停止”实例付费？</a></p><h3 id="设置工作区"><a class="header-anchor" href="#设置工作区">¶</a>设置工作区</h3><p>EC2中使用yum而不是apt-get</p><ul><li><p>install <a href="https://serverfault.com/questions/836198/how-to-install-docker-on-aws-ec2-instance-with-ami-ce-ee-update">docker</a></p></li><li><p><a href="https://stackoverflow.com/questions/61165009/how-to-install-devtoolset-8-gcc-8-on-amazon-linux-2">how to install devtoolset-8 / GCC 8 on Amazon Linux 2</a></p></li><li><p>install <a href="https://www.softwarecollections.org/en/scls/rhscl/llvm-toolset-7/">llvm 7</a>: 这里安装失败了</p></li></ul><h3 id="小结"><a class="header-anchor" href="#小结">¶</a>小结</h3><p>虽然aws功能强大，但是我对云服务的了解不多，很容易踩到坑。之后有时间再慢慢学习吧。</p>]]></content>
      
      
      <categories>
          
          <category> toolbox </category>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>recitation network</title>
      <link href="/sg/2021/11/29/recitation_network/"/>
      <url>/sg/2021/11/29/recitation_network/</url>
      
        <content type="html"><![CDATA[<h2 id="Paper-Ethernet"><a class="header-anchor" href="#Paper-Ethernet">¶</a>Paper:Ethernet</h2><p>Ethernet: Distributed Packet Switching for Local Computer Networks</p><h3 id="Background"><a class="header-anchor" href="#Background">¶</a>Background</h3><ol><li><p>demands of computer-computer interconnection grow</p><img src="/sg/2021/11/29/recitation_network/trans.png" class="" title="trans"></li><li><p>Reliability:</p><p>packets are delivered only with high probability.</p><ul><li>Fact: control is completely distributed among stations with packet transmissions coordinated through statistical arbitration.</li></ul></li></ol><h3 id="Design-choice"><a class="header-anchor" href="#Design-choice">¶</a>Design choice</h3><p>Problem 1: distribute control of the communications facility among the communicating computers</p><h4 id="Choice"><a class="header-anchor" href="#Choice">¶</a><strong>Choice</strong></h4><ol><li><p>Topology: an unrooted tree is better than a star network in distributed interconnections.</p></li><li><p>Control</p><p>Problem 2: collision: more than one packets are transmitted at the same time</p><ul><li>Retransmission: controller would adjust the mean retransmission interval in proportion to the frequency of collisions.</li><li>equity: cooperation among the stations is required. This equality rule is maintained by low-level software in each station</li></ul></li><li><p>Addressing : packet(source, destination)</p></li><li><p>Reliability : remove the responsibility for reliable communication from the <u>packet transport mechanism</u></p><p>从而把责任转移给应用层，更好地决定可靠性和恢复。</p><ul><li>error-free communication(reliable delivery of any single packet) is hard. Instead, we choose to support reliable transport where it can get both economy of transmission and high reliability averaged over many packets</li></ul></li><li><p>packet transport mechanism</p><p>Problem 3: reduce the probability and cost of losing a packet.</p><p>Fact: a station connects to the Ether with a tap and  transceiver.</p><p>There are five mechanisms: (1) carrier detection, (2) interference detection, (3) packet error detection, (4) truncated packet filtering, and (5) collision consensus enforcement.</p></li></ol><p><strong>Alternatives of design choice</strong></p><h3 id="Implementation-v2"><a class="header-anchor" href="#Implementation-v2">¶</a>Implementation</h3><img src="/sg/2021/11/29/recitation_network/ethernet.png" class="" title="ethernet"><img src="/sg/2021/11/29/recitation_network/cca.png" class="" title="cca"><h3 id="performance-measure"><a class="header-anchor" href="#performance-measure">¶</a>performance measure</h3><p>Acquisition probability, waiting time, efficiency</p><h3 id="protocols"><a class="header-anchor" href="#protocols">¶</a>protocols</h3><p>What does the term “layering” mean in the context of networking?</p><p>Why do we use a layered model?</p><p>How do you imagine that layered model is reflected in actual packets?</p><h2 id="Paper-RON"><a class="header-anchor" href="#Paper-RON">¶</a>Paper: RON</h2><blockquote><p>Resilient overlay networks: an application-layer overlay on top of the existing internet routing substrate.</p></blockquote><p>Problem 1: failure and latency</p><p>BGP 可扩展性同时造成的问题：端到端通信的容错性减少，导致网络延迟发生和延迟时间加长（几十分钟的程度）。这也让现有的网络非常脆弱，会由于各种问题而崩溃。</p><p>因为BGP出于可扩展性和政策执行的考虑，隐藏了许多拓扑细节，几乎没有关于交通状况的信息，并且在出现潜在问题时抑制路由更新以防止大规模振荡。</p><p>解决方法是在应用层上分布一层重叠的节点来完成连接。底层网络节点的变化不会扰动到上层，由此来解决可扩展性带来的问题。</p><h3 id="General-goal"><a class="header-anchor" href="#General-goal">¶</a>General goal</h3><ol><li><p>Main goal: enable a group of nodes to communicate in the face of problem1</p><p>what RON can do:</p><ul><li>检测问题快：whether the underlying internet path is the best one</li><li>交换交通信息</li><li>限制RON path的大小以避免过度占用网络带宽，减少网络延迟</li></ul></li><li><p>integrate <u>routing and path selection</u> with distributed applications more tightly</p><p>更针对性的建设网络通路</p><ul><li>consult <u>application-specific</u> metrics in selecting paths</li><li>incorporate application-specific notions of what network conditions constitute a “fault.”</li></ul></li><li><p>provide a <u>framework</u> for the implementation <u>of expressive routing policies</u>, which govern the choice of paths in the network</p></li></ol><h3 id="Design-goal"><a class="header-anchor" href="#Design-goal">¶</a>Design goal</h3><p>更准确的描述设计目标：</p><h4 id="1-Fast-failure-detection-and-recovery"><a class="header-anchor" href="#1-Fast-failure-detection-and-recovery">¶</a>1 Fast failure detection and recovery</h4><p>评估failure造成的影响。现有的BGP-4找到合适的线路通信经常会遇到failures。failure可以分为link failures和path failures。它们在应用中常表现为两种形式：outages or performance failures。outage对网络造成的影响能达到几个数量级（比如TCP degrades, average packet loss rate over a sustained period of several minutes）；而performance failures的影响则没有那么极端，仍在同等数量级下。</p><p>因此我们希望RON能够做到检测快和恢复快。</p><h4 id="2-Tighter-integration-with-applications"><a class="header-anchor" href="#2-Tighter-integration-with-applications">¶</a>2 Tighter integration with applications</h4><p>fact: Failures and faults are application-specific notions.</p><p>根据应用场景的不同而制定的标准（metrics）来选择合适的网络线路。理想的情况下，最合适的线路应该满足多种标准。</p><p>这里不同标准在实际应用之间的衡量（trade-offs）是设计考虑的重点。</p><h4 id="3-expressive-policy-routing"><a class="header-anchor" href="#3-expressive-policy-routing">¶</a>3 expressive policy routing</h4><p>RON’s powerful end-points allow fine-grained policy routing.</p><p>打个比方就就是地图精度更高了，路径规划也就越准确。</p><h3 id="Design"><a class="header-anchor" href="#Design">¶</a>Design</h3><img src="/sg/2021/11/29/recitation_network/ron.png" class="" title="ron"><h4 id="1-Software-architecture"><a class="header-anchor" href="#1-Software-architecture">¶</a>1 Software architecture</h4><ul><li><p>RON client: forwarder, conduits</p></li><li><p>RON: router, membership manager</p></li><li><p>forwarding service:</p><ul><li>IP paths</li><li>RON</li></ul></li><li><p><strong>forwarder</strong>: onduits access RON</p><ul><li>send(pkt, dst, via_ron): forward a packet to a destination RON</li><li>recv(pkt, via_ron): callback function that is called when a packet arrives for the client program</li></ul></li></ul><h4 id="2-routing-and-path-selection"><a class="header-anchor" href="#2-routing-and-path-selection">¶</a>2 routing and path selection</h4><ul><li><p>Routing = building up the forwarding tables -&gt; choose paths for packets</p></li><li><p>default metrics for selecting the path:</p><p>latency; packet loss rate; throughput</p><ul><li>RON clients: can override defaults</li><li>RON library: construct the table</li><li>Router: build up forwarding tables following the demands</li></ul></li></ul><ol><li>link-state dissemination</li></ol><ul><li>small size of RON allows fast propagation</li></ul><ol start="2"><li>path evaluation and selection</li></ol><ul><li><p>path evaluation is composed of combination of two links into a path and formula used to evaluate it.</p></li><li><p>Outage detection: whether the connection is still working?</p></li><li><p>Throughput path selection: avoid paths of low throughput when alternatives are available instead of an optimal one</p><p>为了避免performance failure，选择一条相对合适的路径而不是直接中断。</p><p>Problem:  how throughput-intensive applications handle traffic?</p><p>Solution:TCP or TCP-like congestion control</p></li></ul><ol start="3"><li><p>performance database</p><p>Demand:RON needs to know performance info</p><p>Consideration:</p><ol><li>Performance repository must be reliable and flexible</li><li>Measurement data : noisy, and many clients would want to use the data</li></ol><p>we conclude that the system needs a flexible summarization mechanism.</p><p>-&gt; each RON node or local group of nodes uses a separate performance database to store samples.</p></li></ol><img src="/sg/2021/11/29/recitation_network/pt.png" class="" title="pt"><h4 id="3-policy-routing"><a class="header-anchor" href="#3-policy-routing">¶</a>3 policy routing</h4><ol><li>Classification：查找信息</li><li>routing table formation：计算最短路径</li></ol><p>two policy mechanism :</p><ol><li><p>Exclusive cliques</p><p>比如校园网</p></li><li><p>general policies</p><p>更灵活地制定规则</p></li></ol><h4 id="4-data-forwarding"><a class="header-anchor" href="#4-data-forwarding">¶</a>4 data forwarding</h4><img src="/sg/2021/11/29/recitation_network/df1.png" class="" title="df1"><img src="/sg/2021/11/29/recitation_network/df2.png" class="" title="df2"><h4 id="5-Bootstrap-and-membership-management"><a class="header-anchor" href="#5-Bootstrap-and-membership-management">¶</a>5 Bootstrap and membership management</h4><h3 id="conclusion"><a class="header-anchor" href="#conclusion">¶</a>conclusion</h3><h2 id="Paper-DCTCP"><a class="header-anchor" href="#Paper-DCTCP">¶</a>Paper: DCTCP</h2><p>Goal: we want applications in datacencer network have these requirements:</p><ol><li>low latency for short flows</li><li>high burst tolerance</li><li>high utilization for long flows</li></ol><h2 id="Paper-end-to-end"><a class="header-anchor" href="#Paper-end-to-end">¶</a>Paper: end to end</h2>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC functional programming</title>
      <link href="/sg/2021/11/27/SC_functional_programming/"/>
      <url>/sg/2021/11/27/SC_functional_programming/</url>
      
        <content type="html"><![CDATA[<h2 id="R26-map-filter-reduce"><a class="header-anchor" href="#R26-map-filter-reduce">¶</a>R26: map, filter, reduce</h2><p>problems: write a method that finds all the words in the Java files in your project.</p><p>Approach 0:</p><p>Use recursion.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all the files in the filesystem subtree rooted at folder.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> folder root of subtree, requires folder.isDirectory() == true</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list of all ordinary files (not folders) that have folder as</span></span><br><span class="line"><span class="comment"> *         their ancestor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title">allFilesIn</span><span class="params">(File folder)</span> </span>&#123;</span><br><span class="line">    List&lt;File&gt; files = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (File f : folder.listFiles()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            files.addAll(allFilesIn(f));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">            files.add(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goal: design functions that operate over sequences of elements.</p><p>Approach 1: abstracting out control flow</p><p>Ex 1: Iterator abstraction</p><p>Without worrying about the data representations.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> ii = <span class="number">0</span>; ii &lt; files.size(); ii++) &#123;</span><br><span class="line">    File f = files.get(ii);</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;File&gt; iter = files.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    File f = iter.next();</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><strong>Ex 2: map/filter/reduce abstraction</strong></p><p>use streams to represent the entire sequence of elements.(java,cpp都有stream的datatype)</p><ul><li>map : Stream&lt;‍E&gt; × (E → F) → Stream&lt;‍F&gt;</li></ul><p>Approach 1.1 higher order functions: pass function in functions.</p><p>Java related: call chaining, method reference.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>).stream()</span><br><span class="line">    .map(x -&gt; Math.sqrt(x))</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>).stream()</span><br><span class="line">    .map(Math::sqrt)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Double,Double&gt; mySquareRoot = Math::sqrt;</span><br><span class="line">mySquareRoot.apply(<span class="number">16.0</span>); <span class="comment">// returns 4.0</span></span><br></pre></td></tr></table></figure><ul><li><p>filter : Stream&lt;‍E&gt; × (E → boolean) → Stream&lt;‍E&gt;</p></li><li><p>reduce : Stream&lt;‍E&gt; × E × (E × E → E) → E</p><p>Three design choices in the reduce operation.</p><ol><li><p>whether to require an initial value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).stream()</span><br><span class="line">    .reduce(<span class="number">0</span>, (x,y) -&gt; x+y)</span><br><span class="line"><span class="comment">// computes (((0+1)+2)+3) to produce the integer 6</span></span><br><span class="line">  </span><br><span class="line">List.of(<span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>).stream()</span><br><span class="line">    .reduce(Math::max)</span><br><span class="line"><span class="comment">// computes max(max(max(5,8),3),1) and returns an Optional&lt;Integer&gt; value containing 8</span></span><br></pre></td></tr></table></figure></li><li><p>the order in which the elements are accumulated.</p></li></ol><ul><li>Depends on the associativity. If non-associative, the order of combination changes.</li></ul><ol start="3"><li><p>reduction to another type</p><p>in java: reduce : Stream&lt;‍E&gt; × F × (F × E → F) × (F × F → F) → F</p><ul><li>an accumulator ⊙ : F × E → F that adds an element from the sequence (of type E) into the growing result (of type F)</li><li>a combiner ⊗ : F × F → F that combines two partial results, each accumulated from part of the sequence, into a growing result</li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD security</title>
      <link href="/sg/2021/11/27/SD_security/"/>
      <url>/sg/2021/11/27/SD_security/</url>
      
        <content type="html"><![CDATA[<p>We will look security problem from one single machine, network, server, multi-server.</p><blockquote><p>steps towards building a more secure system</p><ol><li>be clear about goals (policy)</li><li>be clear about assumptions (threat model)</li></ol></blockquote><h3 id="L20-authentication"><a class="header-anchor" href="#L20-authentication">¶</a>L20:authentication</h3><p><em>Concept</em></p><p>hash function: 一对一，从输出反推输入很难</p><hr><p>policy: provide authentication for users</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">check_password(username, inputted_password): </span><br><span class="line">    stored_password = accounts_table[username] </span><br><span class="line">    <span class="keyword">return</span> stored_password == inputted_password</span><br></pre></td></tr></table></figure><p>threat model: adversary has access to the entire stored table</p><p>Problem 1: the adversary (with access to the stored table) can just read the passwords directly.</p><p>Attempt 0: store plaintext passwords on server</p><p>Attempt 1: use hash function -&gt; store hashes of passwords on the server.</p><p>Problem 1.1 adversary can still have access to password by using the same hash function providing stored table</p><p>Attempt 2: add a random string -&gt; salt the hashes</p>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD communication skill</title>
      <link href="/sg/2021/11/21/SD_communication_skill/"/>
      <url>/sg/2021/11/21/SD_communication_skill/</url>
      
        <content type="html"><![CDATA[<p>genre, What-how-why</p><ul><li><p>good supplement</p></li><li><p>Consensus &amp; dissent: expert, agreement, diversity</p></li><li><p>stasis</p><ol><li>fact: who,what,when,where,how much</li><li>definition<ul><li>What kind of thing is this?</li><li>How should we use this term?</li></ul></li><li>causation<ul><li>How did this happen?</li><li>Why did this occur?</li><li>What will the effects be?</li></ul></li><li>value<ul><li>Why should we care?</li><li>How much does this matter?</li><li>How good or bad is it?</li></ul></li><li>outcome<ul><li>What should we do?</li><li>Which option or process should we choose?</li></ul></li></ol></li><li><p>Group work</p><ul><li>Organizations tend to work at three levels</li><li>shared values<ul><li>common purpose</li><li>establish and protect credibility</li></ul></li><li>Shared tasks:<ul><li>explain the day to day group actions</li><li>shaped by value and habits</li><li>Plan</li></ul></li><li>shared habits<ul><li>shared method of completing tasks</li><li>learned from experience</li><li>group rules</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD distributed system</title>
      <link href="/sg/2021/11/20/SD_ds/"/>
      <url>/sg/2021/11/20/SD_ds/</url>
      
        <content type="html"><![CDATA[<blockquote><p>our goal is to build reliable systems from unreliable components. we want to build systems that serve many clients, store a lot of data, perform well, all while keeping availability high.</p></blockquote><h3 id="L14-RAID-reliability-via-replication"><a class="header-anchor" href="#L14-RAID-reliability-via-replication">¶</a>L14:RAID:reliability via replication</h3><p>Question: how to build fault-tolerant/reliable systems?</p><p>The high-level process of dealing with failures is to identify the faults, detect/contain the faults, and handle the faults. in lecture, we will build a set of abstractions to make that process more manageable.</p><p>How to measure success?</p><ul><li>availability is one way to measure reliability. Reliability metrics differ from different systems.</li><li>Mean time to failure, mean time to repair, mean time between failures, availability</li></ul><p>Problem: single disk failures</p><blockquote><p>RAID is a data storage virtualization technology that combines multiple physical disk drive components into one or more logical units for the purposes of data redundancy, performance improvement, or both.</p></blockquote><p>Three effective approaches are as following:</p><ol><li>RAID 1: mirroring. Make a replica to store the same data inside.</li><li>RAID 4: make a dedicated parity disk. A xor B = C. We can induce the failed one no matter which one failed.</li><li>RAID 5:  intersperse the parity sectors amongst all N+1 disks to load balance writes.</li></ol><img src="/sg/2021/11/20/SD_ds/m.png" class="" title="截屏2021-11-21 上午9.29.05"><p>Review: RAID 不能解决现有的问题，因为现实中不会永远只是单个磁盘崩溃，需要更系统地处理方法。</p><h3 id="L15-Transactions-atomicity-isolation"><a class="header-anchor" href="#L15-Transactions-atomicity-isolation">¶</a>L15:Transactions: atomicity &amp; isolation</h3><p>problem: Possible crash in some point at thousand lines of code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transfer (bank_file, account_a, account_b, amount): </span><br><span class="line">    bank = read_accounts(bank_file) </span><br><span class="line">    bank[account_a] = bank[account_a] - amount </span><br><span class="line">    bank[account_b] = bank[account_b] + amount </span><br><span class="line">    write_accounts(tmp_file) </span><br><span class="line">    rename(tmp_file, bank_file)</span><br></pre></td></tr></table></figure><h4 id="Atomicity"><a class="header-anchor" href="#Atomicity">¶</a>Atomicity</h4><blockquote><p><strong>What is atomicity?</strong></p><ul><li><p>an action is atomic if it happens completely or not at all. if we can guarantee atomicity, it will be much easier to reason about failures.</p></li><li><p>Understanding that this code should be atomic comes from understanding what the application is <em>doing</em>. What actions need to be atomic depends on the application.</p></li></ul></blockquote><p>分析：为了实现文件读写的原子性，我们需要保证文件的数据不能因为某行程序崩溃而丢失。</p><p>Golden rule: never modify the only copy.</p><p>Attempt 1: 只用一个文件存储账户，账户的任何操作（读写，加载，更新）都在这个文件中直接修改，当修改完成，再从内存写回到磁盘中。</p><p>Attempt 2: <strong>shadow copy</strong>：创建一个复制的文件后再对原文件进行操作（比如rename). 这里需要一步重命名文件，以使能对failures更准确地推断。（在Example中详述）</p><p>summary of shadow copy: it meets our goal. However, it perform badly. Problems include requiring copying the entire file for even small changes…</p><p><strong>Example: file crash</strong></p><p>Problem1: a crash during rename() potentially leaves bank_file in an intermediate state.</p><p>Solution 1: make rename() atomic</p><ul><li>Single-sector writes are atomic</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rename(tmp_file, orig_file): </span><br><span class="line">    tmp_inode = lookup(tmp_file)   // = <span class="number">2</span> </span><br><span class="line">    orig_inode = lookup(orig_file) // = <span class="number">1</span> </span><br><span class="line">    orig_file dirent = tmp_inode &lt;- crash!</span><br><span class="line">    remove tmp_file dirent </span><br><span class="line">    decref(orig_inode)</span><br></pre></td></tr></table></figure><p>Problem2: rename happened, but refcounts wrong</p><p>Solution2: recover the disk after a crash.</p><p>如果在recover时crash，那么继续recover</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">recover(disk): </span><br><span class="line">    <span class="keyword">for</span> inode <span class="keyword">in</span> disk.inodes: </span><br><span class="line">        inode.refcount = find_all_refs(disk.root_dir, inode) </span><br><span class="line">    <span class="keyword">if</span> exists(tmp_file): </span><br><span class="line">        unlink(tmp_file)</span><br></pre></td></tr></table></figure><h4 id="isolation"><a class="header-anchor" href="#isolation">¶</a>isolation</h4><blockquote><p>isolation refers to how and when the effects of one action (A1) are visible to another (A2) where A1 and A2 appear to have executed serially, even if they are actually executed in parallel.</p></blockquote><p>Problem: how to use lock?</p><p>Problem: transactions are powerful abstraction that provides atomicity and isolation. How to implement transaction?</p><p>Example:</p><p>​  T1                         T2<br>​      begin                   begin<br>​      transfer(A, B, 20)       transfer(B, C, 5)<br>​      withdraw(B, 10)         deposit(A, 5)<br>​      end                      end</p><h3 id="L16-Logging-atomicity"><a class="header-anchor" href="#L16-Logging-atomicity">¶</a>L16:Logging(atomicity)</h3><p>Problem 0: how do systems guarantee atomicity and isolation?</p><p>Basic idea: Keep a log of all changes and whether a transaction commits.</p><p>changes include:</p><ol><li>begin(allocate new transaction ID),</li><li>write(append entry to log),</li><li>read(scan log to find last committed value),</li><li>commit(write commit record),</li><li>recover(doing nothing).</li></ol><p>Problem 1: which operation in(read, write, recovery) is slowest?</p><p>Answer: Read is slowest because it must scan entire log.</p><p>Improvement 1: use cell storage(non-volatile memory) to store data. Updates go to log and cell storage, then we can read from cell storage without scanning the entire log.</p><p>Changes with improvement 1:</p><ol><li><p>how to write?</p><p>Log before install. And the record helps to recover from a crash in between the two writes. (Write-ahead logging)</p></li><li><p>how to recover?</p><p>basically, scan the log entry requiring recovering</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">read(var): </span><br><span class="line">  <span class="keyword">return</span> cell_read(var)</span><br><span class="line">write(var, value): </span><br><span class="line">  log.append(current_tid, “UPDATE”, var, </span><br><span class="line">             read(var), value) </span><br><span class="line">  cell_write(var, value)</span><br><span class="line">recover(log):   </span><br><span class="line">  commits = [] </span><br><span class="line">  <span class="keyword">for</span> record r <span class="keyword">in</span> log[<span class="built_in">len</span>(log)-<span class="number">1</span>] .. log[<span class="number">0</span>]: </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == COMMIT: </span><br><span class="line">      commits.add(r.tid) </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == UPDATE <span class="keyword">and</span> r.tid <span class="keyword">not</span> <span class="keyword">in</span> commits: </span><br><span class="line">      cell_write(r.var, r.old_val) // undo</span><br></pre></td></tr></table></figure><p>problem 2: the changes made in problem 1 cause bad performance in recovery for it needs to scan the entire log.</p><p>Improvement 2: use a cache(volatile memory).</p><p>Problem 2.1: After crash, there may be updates that didn’t make it to cell storage (were in cache but not flushed)</p><p>Improvement 2.1: We need a redo phase in addition to an undo phase in our recovery (see slide for code)</p><p>Problem 2.2: recovery takes longer and longer as the log grows</p><p>Improvement 2.2: truncate the log</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">read(var): </span><br><span class="line">  <span class="keyword">if</span> var <span class="keyword">in</span> cache: </span><br><span class="line">    <span class="keyword">return</span> cache[var] </span><br><span class="line">  <span class="keyword">else</span>: </span><br><span class="line">    // may evict others <span class="keyword">from</span> cache to cell storage </span><br><span class="line">    cache[var] = cell_read(var) </span><br><span class="line">    <span class="keyword">return</span> cache[var]</span><br><span class="line">  </span><br><span class="line">write(var, value): </span><br><span class="line">  log.append(current_tid, update, var, </span><br><span class="line">             read(var), value) </span><br><span class="line">  cache[var] = value</span><br><span class="line">  </span><br><span class="line">flush(): // called “occasionally” </span><br><span class="line">  cell_write(var, cache[var]) <span class="keyword">for</span> each var</span><br><span class="line">  </span><br><span class="line">recover(log):   </span><br><span class="line">  commits = &#123;&#125; </span><br><span class="line">  <span class="keyword">for</span> record r <span class="keyword">in</span> log[<span class="built_in">len</span>(log)-<span class="number">1</span>] .. log[<span class="number">0</span>]: </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == commit: </span><br><span class="line">      commits.add(r.tid) </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == update <span class="keyword">and</span> r.tid <span class="keyword">not</span> <span class="keyword">in</span> commits: </span><br><span class="line">      cell_write(r.var, r.old_val) // undo  </span><br><span class="line">  <span class="keyword">for</span> record r <span class="keyword">in</span> log[<span class="number">0</span>] .. log[<span class="built_in">len</span>(log)-<span class="number">1</span>]: </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == UPDATE <span class="keyword">and</span> r.tid <span class="keyword">in</span> commits: </span><br><span class="line">      cell_write(r.var, r.new_value) // redo, improvement <span class="number">2.1</span></span><br></pre></td></tr></table></figure><p>real problem: one single failure in high-scalability system can cause problems as well. like bank system, hospital system…</p><h3 id="L17-two-phase-locking-isolation"><a class="header-anchor" href="#L17-two-phase-locking-isolation">¶</a>L17:two-phase locking(isolation)</h3><p>Problem: We have multiple transactions – T1, T2, …, TN – all of which must be atomic, and all of which can have multiple steps.  We want to schedule the steps of these transactions so that it appears as if they ran sequentially.</p><p>Solution: we need a fine-grained locking. our goal (in lecture) is to run transactions concurrently, but to produce a schedule that is conflict serializable</p><h4 id="Serializability"><a class="header-anchor" href="#Serializability">¶</a>Serializability</h4><p>what type of serializability you want depends on what your application needs/what state do we need/want?</p><p>different type of serializability: <strong>conflict serializability</strong></p><ul><li><p>Conflicts: two operations conflict if they operate on the same object and at least one of them is a write.</p></li><li><p>a schedule is <strong>conflict serializable</strong> if the order of all of its conflicts is the same as the order of the conflicts in some sequential schedule.</p></li></ul><p>Problem: how do we generate conflict-serializable schedules?</p><h4 id="Two-phase-locking"><a class="header-anchor" href="#Two-phase-locking">¶</a>Two-phase locking</h4><ol><li>each shared variable has a lock</li><li>before any operation on a variable, the transaction must acquire the corresponding lock</li><li><em>multiple transactions can hold reader locks for the same variable at once; a transaction can only hold a writer lock for a variable if there are no other locks held for that variable.</em>(improvement 1)</li><li><em>after a transaction releases a lock, it may not acquire any other locks</em>(improvement 0)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">T1 </span><br><span class="line">begin acquire(x.lock) </span><br><span class="line">T1<span class="number">.1</span> read(x) </span><br><span class="line">acquire(y.lock) </span><br><span class="line">T1<span class="number">.2</span> tmp = read(y) </span><br><span class="line">T1<span class="number">.3</span> write(y, tmp+<span class="number">10</span>) </span><br><span class="line">commit release(x.lock) </span><br><span class="line">release(y.lock)</span><br><span class="line"></span><br><span class="line">T2 </span><br><span class="line">begin acquire(x.lock) </span><br><span class="line">T2<span class="number">.1</span> write(x, <span class="number">20</span>) </span><br><span class="line">acquire(y.lock) </span><br><span class="line">T2<span class="number">.2</span> write(y, <span class="number">30</span>) </span><br><span class="line">commit release(x.lock) </span><br><span class="line">release(y.lock)</span><br></pre></td></tr></table></figure><p>Lemma:2PL produces a conflict-serializable schedule.</p><p>Proof: prove by contradiction.</p><p>problem 1: dead lock</p><p>Better solution than global ordering on locks is to take advantage of atomicity and abort one of the transactions.</p><p>performance improvement(improvement 1): reader-writer locks</p><ul><li>Rules: many readers, one writer.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">T1 </span><br><span class="line">begin acquire(x.reader_lock) </span><br><span class="line">T1<span class="number">.1</span> read(x) </span><br><span class="line">acquire(y.reader_lock) </span><br><span class="line">T1<span class="number">.2</span> tmp = read(y) </span><br><span class="line">acquire(y.writer_lock) </span><br><span class="line">T1<span class="number">.3</span> write(y, tmp+<span class="number">10</span>) </span><br><span class="line">commit release(x.reader_lock) </span><br><span class="line">release(y.reader_lock) </span><br><span class="line">release(y.writer_lock)</span><br><span class="line"></span><br><span class="line">T2 </span><br><span class="line">begin acquire(x.writer_lock) </span><br><span class="line">T2<span class="number">.1</span> write(x, <span class="number">20</span>) </span><br><span class="line">acquire(y.writer_lock) </span><br><span class="line">T2<span class="number">.2</span> write(y, <span class="number">30</span>) </span><br><span class="line">commit release(x.writer_lock) </span><br><span class="line">release(y.writer_lock)</span><br></pre></td></tr></table></figure><h3 id="L18-distributed-transactions-two-phase-commit-multi-site-atomicity"><a class="header-anchor" href="#L18-distributed-transactions-two-phase-commit-multi-site-atomicity">¶</a>L18:distributed transactions: two-phase commit(multi-site atomicity)</h3><p>Scenario: Client + coordinator + two servers: one with accounts A-M, the other with accounts N-Z.</p><img src="/sg/2021/11/20/SD_ds/6.png" class="" title="截屏2021-12-07 下午5.26.21"><p>Goal: develop a protocol that can provide multi-site atomicity in the face of all sorts of failures(every part of the system can fail)</p><p>Problem: one server committed, the other did not</p><p>Approach: two-phase commit, nodes agree that they’re ready to commit before committing</p><p>more specifically,</p><blockquote><ol><li>Coordinator sends tasks to servers (workers)</li><li>Once all tasks are done, coordinator sends prepare messages to workers.</li><li>Once all workers are confirmed to be prepared, coordinator will tell them to commit, and tell client that the transaction has committed.</li></ol></blockquote><img src="/sg/2021/11/20/SD_ds/7.png" class="" title="截屏2021-12-07 下午5.33.40"><p>知道过程是怎样进行的才能推断失败发生的阶段，然后解决问题。</p><p>basic idea: it’s ok to abort the process before the commit point. Otherwise, it cannot abort, and it needs recovery approach.</p><p><u>question</u>: how things work?</p><ul><li><p>Worker: worker prepared, worker acknowledged</p></li><li><p>Coordinator</p><ul><li>if heared all workers prepared, it writes COMMIT to its own log,(commit point)</li><li>if heard all workers committed, it writes DONE to its own log.(transaction is totally done at that point)</li></ul></li></ul><p>approach applies in different types of <u>failures</u>:</p><ol><li>Worker/Network Failures Prior to the Commit Point<ul><li>Lost prepared message</li><li>lost ACK for prepare</li><li>Worker failure before prepare</li></ul></li><li>Worker Failures After the Commit Point<ul><li>Before receiving commit</li><li>After commit received</li></ul></li><li>Coordinator Failures<ul><li>Before prepare</li><li>After commit point, before DONE</li><li>After writing DONE</li></ul></li></ol><p><u>performance issues</u>:</p><p><u>Problem -1</u>: when sys fails, some data becomes unavailable.</p><p>Solution: replication.</p><p>approach: single-copy consistency</p><p>Problem -1.1: we need to keep multiple copies of the same pieces of data consistent, and we need to decide what type of consistency we want in different scenarios.</p><h3 id="L19-Replication-replicated-state-machines"><a class="header-anchor" href="#L19-Replication-replicated-state-machines">¶</a>L19:Replication:replicated state machines</h3><p>goal:solve problem -1.1 of L18</p><p>Attempt 1: replicate data on two servers</p><img src="/sg/2021/11/20/SD_ds/8.png" class="" title="截屏2021-12-07 下午6.20.50"><p>Problem 1: messages can arrive at replicas in different orders resulting in inconsistent state.</p><img src="/sg/2021/11/20/SD_ds/9.png" class="" title="截屏2021-12-07 下午6.24.06"><p>Attempt 2: make one replica the primary replica, and have a coordinator in place to help manage failures</p><img src="/sg/2021/11/20/SD_ds/0.png" class="" title="截屏2021-12-07 下午6.28.17"><p>Problem 2: network partition splits the communication in half</p><img src="/sg/2021/11/20/SD_ds/1.png" class="" title="截屏2021-12-07 下午6.28.31"><p>Attempt 3: use a view server to determine which replica is primary, in hopes that we can deal with network partitions</p><img src="/sg/2021/11/20/SD_ds/2.png" class="" title="截屏2021-12-07 下午6.30.02"><p>problem 3.1: network partition prevents S1 from communicating with VS</p><img src="/sg/2021/11/20/SD_ds/3.png" class="" title="截屏2021-12-07 下午6.31.01"><p>problem 4: VS fails</p><p>Solution: achive agreement(Raft)</p>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD network</title>
      <link href="/sg/2021/11/17/SD_network/"/>
      <url>/sg/2021/11/17/SD_network/</url>
      
        <content type="html"><![CDATA[<p>目标：对计算机网络的网络层到应用层有最基本的了解。包括TCP和UDP、IP和应用层分别提供了什么保证，没有提供什么保证；我们能通过他们达到什么目的；我们如何使用他们。</p><blockquote><p>general goal:</p><p>on the Internet, we have to solve all of the “normal”<br>networking problems (addressing, routing,transport) at massive scale, while supporting a diverse group of applications and competing economic interests.</p></blockquote><h2 id="introduction-v2"><a class="header-anchor" href="#introduction-v2">¶</a>introduction</h2><p>we can build network starting from link. Once the network is set up, we need to consider of transport. Finally, we need to think about the practical use in real life, which generates the traffic.</p><p><strong>Changes</strong></p><img src="/sg/2021/11/17/SD_network/sc.png" class="" title="截屏2021-11-17 下午3.37.43"><ol><li><p>make the internet flexible -&gt; layered model in 1978</p><blockquote><p>with a layered model, we can swap out protocols at one layer without much (or perhaps any) change to protocols at other layers.</p></blockquote></li><li><p>reliable transport -&gt; TCP 1983</p></li><li><p>scalibility -&gt; EGP(1978),DNS(1982)</p></li></ol><p><strong>Problems(history view)</strong></p><ol><li><p>Congestion collapse -&gt; congestion control mechanism</p></li><li><p>Commercial use -&gt; policy routing(BGP) (early 90s)</p></li><li><p>Assign addresses in chunks of different sizes -&gt; CIDR</p></li></ol><p><strong>Problems(today)</strong></p><ol><li>Denial of service attack</li><li>security</li><li>mobility</li><li>address space depletion: IPv4 -&gt; IPv6</li><li>congestion control</li></ol><h2 id="Routing-hard-to-scale-version"><a class="header-anchor" href="#Routing-hard-to-scale-version">¶</a>Routing(hard to scale version)</h2><p>Problems: For every node X, after the routing protocol is run, X’s routing table should contain a <em>minimum-cost route</em> to every other reachable node.</p><p>Concept:</p><ul><li><p>Path: full path packets will travel.</p></li><li><p>Route: first hop of that path.</p></li><li><p>Link cost</p></li></ul><p><u>distributed routing protocol</u>: nodes build up their own routing tables, rather than having tables given to them by a centralized authority.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> Nodes:</span><br><span class="line">Hello(Neighbors);</span><br><span class="line">advertisements();</span><br><span class="line">count(minimum_cost_routes);</span><br></pre></td></tr></table></figure><p><strong>Analysis</strong></p><p>there are two ways of routing applying distributed routing protocols:</p><ol><li>Link-state routing</li><li>Distance-vector routing</li></ol><img src="/sg/2021/11/17/SD_network/sc1.png" class="" title="截屏2021-11-17 下午4.19.25"><p>Summary: they are good for very small networks but not good enough for scaling to the size of the internet.</p><h2 id="Routing-at-scale-BGP"><a class="header-anchor" href="#Routing-at-scale-BGP">¶</a>Routing at scale:BGP</h2><p><em>Concept</em></p><p>BGP: border gateway protocol</p><p>policy routing: switches make routing decisions based on some set of policies set by a human.  Routing protocol must disseminate enough information to enable those policies.</p><hr><p><sub>&lt;!–swig￼3–&gt;</sub>~</p><p>Problem: why BGP can scale while link state and distance vector can’t?</p><p>BGP relationships: customer/provider, peers</p><p>Export policies</p><p>Import policies</p><p>Distributed routing</p><p>Problems with BGP</p><ul><li>Scale</li><li>Secure</li></ul><h2 id="TCP"><a class="header-anchor" href="#TCP">¶</a>TCP</h2><p><em>Concept</em>: reliable transport&amp;congestion control</p><p>arguments: Sequence numbers, acknowledgements,timeouts</p><hr><p><u>Problem 0</u>: create a reliable transport protocol, which delivers each byte of data <strong>exactly once, in-order</strong>, to the receiving application.</p><p>Goal: fairness and efficiency. fairness means</p><ul><li>Approach 1: sliding-window protocol</li></ul><img src="/sg/2021/11/17/SD_network/sc3.png" class="" title="截屏2021-12-05 下午6.33.00"><p><u>problem 1</u>: how to decide W? (Drops,delay, bandwidth bottleneck)</p><p><em>assumption</em>: infinite offered load</p><p><u>Improvement 1</u>: congestion control</p><p>AIMD: every RTT(round-trip-time, if there is no loss, W = W + 1; else, W = W/2</p><ul><li><p>Issue 1: when remove the assumption, TCP has trouble measuring the fairness.</p></li><li><p>Example: S1,S2 offered load 10 packets/s; S3 5 packets/s.</p><p>Result: get max-min fairness:S3 stops increase once it’s sending 5 packets/s. S1 and S2 continue increasing until they reach 7-8 packets/s.</p></li></ul><p><u>improvement 2</u>: Slow-start: at the start of the connection, double W every RTT.</p><p><u>improvement 3</u>:Fast retransmit/fast recovery: retransmit packet k+1 as soon as four ACKs with sequence number k are received.</p><ul><li>issue 2: TCP doesn’t react to congestion until it’s already happening.  -&gt; next lecture</li></ul><h2 id="In-network-resource-management"><a class="header-anchor" href="#In-network-resource-management">¶</a>In-network resource management</h2><p>TCP have issues that:</p><p>problem 1: long delays when routers have too much buffering</p><p>problem 2: Doesn’t work well in some scenarios (DCTCP)</p><p>Problem 3: doesn’t react to congestion until queues are full.</p><p>Goal: solve problem 3: transient queues.</p><p>Idea: manipulate switches to get flexibility.</p><p>consideration: we need to think about what the method allows a switch to do? Example protocols? How the protocol works? Pros/cons of each protocol.</p><h3 id="A1-Queue-management"><a class="header-anchor" href="#A1-Queue-management">¶</a>A1:Queue management</h3><ol><li><p>drop tail</p></li><li><p>Random early detection</p></li><li><p>explicit congestion notification</p></li></ol><h3 id="A2-Delay-based-scheduling"><a class="header-anchor" href="#A2-Delay-based-scheduling">¶</a>A2:Delay-based scheduling</h3><ol><li>priority queueing</li></ol><h3 id="A3-Bandwidth-based-scheduling"><a class="header-anchor" href="#A3-Bandwidth-based-scheduling">¶</a>A3:Bandwidth-based scheduling</h3><ol><li>Round-robin</li><li>weighted round-robin</li><li>deficit round-robin</li></ol><h3 id="Discussion"><a class="header-anchor" href="#Discussion">¶</a>Discussion</h3><p>let’s think about three ideas in lecture:</p><ol><li>Traffic differentiation</li><li>Queue-management</li><li>In-network resource-management</li></ol><img src="/sg/2021/11/17/SD_network/sc4.png" class="" title="截屏2021-12-05 下午6.48.52">]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.046 randomization</title>
      <link href="/sg/2021/11/15/6.046-randomization/"/>
      <url>/sg/2021/11/15/6.046-randomization/</url>
      
        <content type="html"><![CDATA[<h3 id="randomization"><a class="header-anchor" href="#randomization">¶</a>randomization</h3><p>随机算法有很多种，比较有趣的三类是：</p><ol><li>Probably correct(determined fast) : <a href="https://en.wikipedia.org/wiki/Monte_Carlo_algorithm">Monte Carlo algorithm</a></li><li>Probably fast(determined correct): <a href="https://en.wikipedia.org/wiki/Las_Vegas_algorithm">Las Vegas algorithm</a></li><li>not guaranteed to be fast or correct: <a href="https://en.wikipedia.org/wiki/Atlantic_City_algorithm">Atlantic City algorithms</a></li></ol><h4 id="Matrix-multiply"><a class="header-anchor" href="#Matrix-multiply">¶</a>Matrix multiply</h4><p><strong>problem</strong>: Matrix product checker</p><p>Given  n × n  matrices  A, B, C,  the  goal  is to  check  if A × B  = C  or not.<br><strong>Question</strong>:  a such matrix multiplication would take O(n**3) time. We want a checker algorithm to take less time than that, or else the checker doesn’t make sense.</p><p>We  will  see an  O(n**2)  algorithm  that:</p><ul><li>if A × B = C, then  Pr[output=YES] = 1.</li><li>if A × B = C, then  Pr[output=YES] ≤ 1/2</li></ul><p><strong>Frievald’s algorithm</strong>: Choose a random binary vector r[1…n] such that Pr[ri  = 1] = 1 /2 independently for  r = 1 , …, n.  The algorithm  will output  ’YES’  if A(Br) =   Cr and  ’NO’ otherwise.</p><p><strong>Analysis of correctness if AB != C</strong></p><p>Claim:  If  AB != C, then  Pr[ABr != Cr] ≥ 1/2.</p><p><u>want to show</u>: ABr != Cr =&gt; Dr != 0 where D=AB-C. The goal is to show that there are many r such that Dr != 0.(many &gt;= 1/2)</p><p><em>Proof</em>:</p><ol><li><p>Dr != 0 case, we would output ‘No’, done</p></li><li><p>Dr = 0 case(specifically, it means that find r’ s.t. Dr’ != 0)</p><p>Set a binary vector v is 0 in all coordinates except for v_j = 1: (Dv)_i = d_ij !=0 implies Dv != 0</p><p>Take any r where Dr = 0, set r’ = r + v.</p><ul><li>Dr’ = D(r + v) = 0 + Dv != 0</li><li>r to r’ is 1 to 1</li></ul><p>Therefore # r’ for which Dr’ != 0 &gt;= # r for which Dr=0</p></li></ol><p>we can conclude that Pr[ABr != Cr] ≥ 1/2.</p><h4 id="quicksort"><a class="header-anchor" href="#quicksort">¶</a>quicksort</h4><p>Quick sort is in-place sort, which need not require auxiliary space as merge sort. Divide and conquer algorithm doesn’t work well in the combine step.</p><p>We can use median finding in pivot selection. It takes theta(n*logn) time. However, it is slow in practice and loses to merge sort.</p><p>randomized quicksort comes to solution.</p><p>“paranoid” quicksort analysis and expected runtime analysis</p><h4 id="R4-Randomized-median"><a class="header-anchor" href="#R4-Randomized-median">¶</a>R4: Randomized median</h4><p>Quick find, quick sort</p><p>expected runtime, amoritized runtime are just fancier way saying average runtime.</p><h4 id="skip-lists"><a class="header-anchor" href="#skip-lists">¶</a>skip lists</h4><p>With high probability bound</p><h4 id="Universal-hashing"><a class="header-anchor" href="#Universal-hashing">¶</a>Universal hashing</h4><h4 id="perfect-hashing"><a class="header-anchor" href="#perfect-hashing">¶</a>perfect hashing</h4>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.046 algorithms design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SD os</title>
      <link href="/sg/2021/11/15/SD_os/"/>
      <url>/sg/2021/11/15/SD_os/</url>
      
        <content type="html"><![CDATA[<p>A revisit in virtulization, 2022/04/28</p><h2 id="Threads-virtual-machines-os-structures"><a class="header-anchor" href="#Threads-virtual-machines-os-structures">¶</a>Threads, virtual machines, os structures</h2><h3 id="concurrency"><a class="header-anchor" href="#concurrency">¶</a>concurrency</h3><p>problem: how to handle concurrency problem using yield? And the problems encountered.(from lecture 5)</p><p>yield(): suspends the running thread, chooses a new thread to run, and resumes the new thread</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span>(): </span><br><span class="line">  acquire(t_lock) </span><br><span class="line">  // Suspend the running thread </span><br><span class="line">  <span class="built_in">id</span> = cpus[CPU].thread </span><br><span class="line">  threads[<span class="built_in">id</span>].state = RUNNABLE </span><br><span class="line">  threads[<span class="built_in">id</span>].sp = SP </span><br><span class="line">  threads[<span class="built_in">id</span>].ptr = PTR </span><br><span class="line">  // Choose a new thread to run </span><br><span class="line">  do: </span><br><span class="line">    <span class="built_in">id</span> = (<span class="built_in">id</span> + <span class="number">1</span>) mod N </span><br><span class="line">  <span class="keyword">while</span> threads[<span class="built_in">id</span>].state != RUNNABLE </span><br><span class="line">  // Resume the new thread </span><br><span class="line">  SP = threads[<span class="built_in">id</span>].sp </span><br><span class="line">  PTR = threads[<span class="built_in">id</span>].ptr </span><br><span class="line">  threads[<span class="built_in">id</span>].state = RUNNING </span><br><span class="line">  cpus[CPU].thread = <span class="built_in">id</span> </span><br><span class="line">    </span><br><span class="line">  release(t_lock)</span><br></pre></td></tr></table></figure><h3 id="virtual-machines"><a class="header-anchor" href="#virtual-machines">¶</a>virtual machines</h3><p>Scenario: running multiple Ones on a single physical machine.</p><p>problem: how to safely share physical hardware?</p><img src="/sg/2021/11/15/SD_os/sc.png" class="" title="截屏2021-11-15 下午10.12.27">]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to read a paper?</title>
      <link href="/sg/2021/11/15/paper/"/>
      <url>/sg/2021/11/15/paper/</url>
      
        <content type="html"><![CDATA[<h2 id="怎么读论文"><a class="header-anchor" href="#怎么读论文">¶</a>怎么读论文</h2><h3 id="third-pass"><a class="header-anchor" href="#third-pass">¶</a>third pass</h3><p>Goals:</p><ol><li>general idea</li><li>Content, not details(such as proofs)</li><li>Read in depth</li></ol><h4 id="first-pass"><a class="header-anchor" href="#first-pass">¶</a>first pass</h4><p>5~10 min, 决定是否继续读</p><ul><li>步骤：</li></ul><ol><li>读标题，摘要，介绍</li><li>读部分和小部分的标题，略去其他</li><li>读结论</li><li>瞥一眼引用，去掉读过的</li></ol><ul><li>回答问题：5C</li></ul><ol><li><p>Category: What type of paper is this? A measurement paper? An analysis of an existing system? A description of a research prototype?</p></li><li><p>Context: Which other papers is it related to? Which theoretical bases were used to analyze the</p><p>problem?</p></li><li><p>Correctness: Do the assumptions appear to be valid?</p></li><li><p>Contributions: What are the paper’s main contributions?</p></li><li><p>Clarity: Is the paper well written?</p></li></ol><ul><li>适用类型：可能相关，不在研究氛围内</li></ul><h4 id="Second-pass"><a class="header-anchor" href="#Second-pass">¶</a>Second pass</h4><p>1h</p><ul><li>步骤</li></ul><ol><li>Look carefully at the figures, diagrams and other illustrations in the paper. Pay special attention to graphs.<ol><li>Are the axes properly labeled?</li><li>Are results shown with error bars, so that conclusions are statistically significant?</li></ol></li><li>Remember to mark relevant unread references for further reading (this is a good way to learn more about the background of the paper).</li></ol><ul><li>回答：summarize the main thrust of the paper, with supporting evidence, to someone else</li><li>适用类型：感兴趣的，但不在研究范围之内</li><li>当仍旧看不懂这篇论文在讲啥：延后再读</li></ul><h4 id="third-pass-v2"><a class="header-anchor" href="#third-pass-v2">¶</a>third pass</h4><p>4-5 hours, virtually re-implement the paper</p><ul><li>making the same assumptions as the authors: identify and challenge every assumption in every statement</li><li>recreate the work: think about how you yourself would present a particular idea.</li><li>By comparing this re-creation with the actual paper, you can easily identify not only a paper’s innovations, but also its hidden failings and assumptions.</li></ul><h2 id="读什么论文"><a class="header-anchor" href="#读什么论文">¶</a>读什么论文</h2><p>暂时跟着课表走就好了。都要记下对之后可能有用的点（积累</p><h2 id="review"><a class="header-anchor" href="#review">¶</a>review</h2><p>我个人的一个小建议是，看的时候，自己心里也想一想，如果是我来做，我会怎么做？如果我来讲这篇paper，我要怎么样才能给别人讲懂</p><p>关于paper review：</p><ol><li><p>review是什么？所有会议paper，在投稿之后，怎么判断中还是不中呢？这个流程叫同行评审，是找几个同行专家对你的paper进行review，了解你paper的内容，判断你paper的优缺点，决定是接收还是录取。</p></li><li><p>review的主要内容：paper的内容与优缺点。一般是大约半页到一页A4纸的篇幅。</p></li><li><p>review的目的：这个过程会需要你去 主动地思考paper的内容与价值，批判性地学习与吸收，这样的效果很多时候比 被动地接受 要更好一些。</p></li><li><p>如何判断paper的价值？这也是在review的时候你们要问自己的问题。我这里给一些参考建议</p><p>解决的问题是什么？重要嘛？<br>效果怎么样？显著嘛？<br>表述怎么样，清晰嘛？<br>逻辑合理嘛？<br>技术是否有问题？<br>影响力有多大？<br>是否够详细，能根据它复现出来嘛？<br>核心的思想是什么，有道理嘛？<br>实验是否完整，是否合理公平？</p></li></ol><p>注：方法部分来自How to Read a Paper；review部分来自胡 Sir(胡津铭)的分享和建议。</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>recitation os</title>
      <link href="/sg/2021/11/15/recitation_os/"/>
      <url>/sg/2021/11/15/recitation_os/</url>
      
        <content type="html"><![CDATA[<h3 id="Reading-We-did-nothing-wrong"><a class="header-anchor" href="#Reading-We-did-nothing-wrong">¶</a>Reading:We did nothing wrong</h3><p>主要讲了个软件出错然后辐射量增大导致病人死亡或得癌症的事件。本来FDA不管软件的事，但造成伤亡后开始进行监管。质检机制只能减少这种情况，很难消除。然后讲了措施避免这样的问题，其中一条就是提高从业人员的专业门槛。我个人的看法是提高专业门槛是有必要的，但是这门槛不能简单用标化成绩或者学位证来衡量。</p><p>注：之前卡在这儿的原因是，十页以上的英文阅读真不知道如何读起？😭现在知道咋读了。</p><h3 id="R-DNS"><a class="header-anchor" href="#R-DNS">¶</a>R:DNS</h3><p>The internet domain name system is designed for the communication between client and server. The primary purpose of DNS is to associate domain names to internet addresses.</p><p>DNS的设计主要从三个部分看：</p><ul><li><p>name resolution</p><p><strong>Design of structures</strong></p><p>it can be designed in three ways:Telephone book model, the central directory service model and the distributed directory service model.</p><p>Telephone book model gives one big file to every machine. The volume of <u>network traffic</u> required to keep it up to date would grow with the cube of the number of domain names.</p><p>Central view is one powerful machine with one big table.That machine is hit with a ton of requests, which leads to a trade-off between a performance bottleneck and a potential source of massive failure.</p><p>Distributed view provides delegation and respond to increases in scale while maintaining reliability and performance.</p><p><strong>Operations</strong></p><ol><li>Name client makes a request. Its DNS_RESOLVE sends that domain name to a root name server</li><li>recursive part:The root name server matches the name in the request with the subset of domain names it knows about,starting with the most significant component of the requested domain name. If matching, respond with both domain names and internet addresses.</li><li>DNS_RESOLVE receives the response and resends the same name resolution request to what the response is.</li><li>Repeat operations above until DNS_RESOLVE finally reaches the the name server we wants.</li></ol><p><strong>Details</strong></p><ol><li><p>cache in name server and recursive names query</p><p>A server that provides <u>recursive name</u> service thus collects records that can greatly <u>speed up</u> future name resolution requests.</p><p>Fact: cache uses expiration instead of explicit invalidation of changed entries.</p><blockquote><p>A DNS cache manager is expected to discard entries that have passed their expiration period.</p></blockquote><p>由于name server发出的请求总是会在recursive name的范围中，那么请求次数较多的网址在缓存中保存的期限就会更长。从而增加了hit ratio。</p></li></ol></li><li><p>hierarchical name management</p><ul><li>Benefits: decentralization-&gt;distributing responsibility and Independent naming authorities(path name different).</li><li>Drawbacks?</li></ul></li><li><p>name discovery</p><ol><li>How this address gets into the configuration table?</li><li>Domain names</li><li>the extension that is used for unqualified domain names.</li></ol></li><li><p>Other features</p><p>Problem1: 如果总服务器着火了，那么连接就断了，那该怎么上网？</p><p>Problem2: 如果我想要去的地址改变了地址，那我还怎么找到它？</p><ul><li>备份: replica of servers and network services to increase fault-tolerance<ul><li>Fact: the importance of separated attachment increases at higher levels of the naming hierarchy.</li></ul></li><li>Robust design of DNS<ul><li>DNS server’s public interface is idempotent</li><li>DNS server’s job is simple: accept a request packet, search a table, and send a response packet.</li></ul></li><li>重定向<ul><li>Maintenance: the names of services can be expected to outlive their bindings to particular Internet addresses, and synonyms cater to this difference in lifetimes.</li><li>allow a single computer to appear to be in two widely different naming domains</li></ul></li></ul></li><li><p>trustworthiness of dns response: authentication and accuracy</p></li></ul><h3 id="Paper-UNIX"><a class="header-anchor" href="#Paper-UNIX">¶</a>Paper:UNIX</h3><p>历史：UNIX是一个很棒的操作系统，现代的许多os都是从unix出发，它的历史可以追溯到70年代，贝尔实验室的研究员为了摆脱现有的糟糕的可用计算机设施而研制出的，之后再逐渐添加了新的功能。它并不是从一开始就从设计上决定的，但为了适合研究员编程的需要而逐渐添加的功能使它最后成为了虽然小但是功能强大的操作系统。</p><h4 id="basic-structures"><a class="header-anchor" href="#basic-structures">¶</a>basic structures</h4><p>UNIX 的设计可以分为四部分：</p><ol><li><p>file system</p><ul><li><p>Naming in file system applies layering and hierarchy like that in DNS.</p></li><li><p>The file can be divided into: ordinary files, directories, special files.</p></li><li><p>operations on files</p><ul><li>create</li><li>open</li><li>write</li><li>read</li><li>delete</li></ul></li><li><p>Implementations:</p><ul><li>When the file is accessed, the i-number is used as an index into a system table(the i-list) stored somewhere.</li><li>The entry thereby found is file’s i-node.</li></ul></li></ul></li><li><p>process</p><ul><li>Create a new process</li><li>Pipes:communication between processes using the read and write calls</li><li>execute</li><li>Process synchronization: wait()</li><li>Terminate a process</li></ul></li><li><p>shell</p><ul><li>Standard I/O</li><li>filters</li><li>Command separators to perform multitasking</li><li>Command files</li><li>Implementations</li></ul></li><li><p>Traps</p><ul><li>illegal action</li><li>Unwanted command</li><li>Quit</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.033 system design </tag>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.046 amortization</title>
      <link href="/sg/2021/11/13/6.046_amortization/"/>
      <url>/sg/2021/11/13/6.046_amortization/</url>
      
        <content type="html"><![CDATA[<p>We have already known amortization in array resizing and hashing with chaining.</p><blockquote><p><strong>amortized bound</strong> definition: sum(amortized cost) &gt;= sum(actual cost)</p><p>Ex: 2-3 tree, O(1) amortized cost per create, O(lg n*) amortized cost per insert, and 0 amortized cost per delete.</p><p>n*: maximum size of 2-3 tree. 0 amortized cost per delete: because you can’t delete without inserting first.</p></blockquote><h2 id="amortized-analysis-techniques"><a class="header-anchor" href="#amortized-analysis-techniques">¶</a>amortized analysis techniques</h2><ol><li><p>aggregate method</p><p>amortized cost per operation = total cost of k operations / k</p></li><li><p>accounting method</p><p>for each operation:</p><p>​Store credit: amortized cost &gt; actual cost</p><p>​pay for it: amortized cost &lt; actual cost</p><p>Example</p><ul><li><p>table doubling</p></li><li><p>2-3 tree</p></li></ul></li><li><p>charging method</p><p>amortized cost of an operation = actual cost of this operation - total cost charged to past operations + total cost charged by future operations</p><p>Example</p><ul><li>table doubling and halving</li><li>Free deletion in 2-3 trees</li></ul></li><li><p>potential method</p><p>Example:</p><ul><li>binary counter</li><li>insert in 2-3 tree</li><li>Insert and delete in 2-5 tree</li></ul></li></ol><h2 id="Union-find"><a class="header-anchor" href="#Union-find">¶</a>Union-find</h2><p>Problem: how can a simple doubly linked list improve to support fast search and fast union? how this method is different from what is in cs61b disjoint set course?</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.046 algorithms design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.006 data structures</title>
      <link href="/sg/2021/11/09/6.006-data_structures/"/>
      <url>/sg/2021/11/09/6.006-data_structures/</url>
      
        <content type="html"><![CDATA[<h3 id="Binary-search-tree"><a class="header-anchor" href="#Binary-search-tree">¶</a>Binary search tree</h3><p>Balanced: a tree on n nodes is balanced if its height is O(logn). Bst is not always balanced.</p><ul><li><p>AVL tree: height-balanced tree</p><ul><li>skew of a node is the height difference between right subtree and left subtree.</li><li>skew is -1,0,1</li></ul></li></ul><h3 id="sort"><a class="header-anchor" href="#sort">¶</a>sort</h3><p>Selection sort, insertion sort, heap sort, merge sort, quick sort</p><ul><li><p>in-place: 当数列中有相同的成员时，先后次序的不同。</p><ul><li>Whether merge sort is stable depends on how an implementation breaks ties when merging<ul><li>Stable: that items with duplicate keys appear in the same order in the output as the input</li></ul></li></ul></li><li><p>Comparison model</p><ul><li>worse case analysis</li></ul><p>The worst-case number of comparisons that must be made by any comparison search algorithm will be the height of the algorithm’s decision tree. Comparisons are limiting because each operation performed can lead to most constant branching factor in the decision tree. Any fixed a will lead to a decision tree with at least omega(logn) height. It can be improved that data structures are not limited to comparisons.</p></li><li><p>comparison sorting</p><ul><li>Analysis to lower bound the worst-case running time of any sorting algorithm that only uses comparisons</li></ul><p>sort n items, n! Permutations of the items,  height of decision tree is omega(log(n!)) = omega(nlogn). so run time at least omega(nlogn).</p></li><li><p>Direct access array: use data as index, might cause collisions and interger overflow, but skip comparisons to gain more efficiency.</p><p>Space: u slots to store items;  n items</p><ul><li><p>solution: make it dynamic: let m = O(n)</p><p>need a function that maps item keys to different slots of the direct access array, and no two keys map to the same direct access array index. Then we can support worst-case constant time search.</p></li><li><p>If m &lt; u: collisions occur.</p><ul><li>Solution: 1. Open address. 2. Chaining</li></ul><p>Chaining, a separate data structure that supports the dynamic set interfaces, operations including <strong>find, insert and delete.</strong> It is common to implant using a linked list or dynamic array, but any implementation supporting those operations would work.</p><p>what’s a good hash function? Minimize the frequency of collisions (all items stored in one chain) in order to minimize the maximum size of any chain.</p><ul><li>hash function: the performance of data structures would be independent of the keys we choose to store.</li><li>amortized bounds for dynamic operations<ul><li>Resize</li></ul></li></ul></li><li><p>Problems: n positive integers array A, find duplicates.</p></li><li><p>direct access array sort</p><p>n items, u slots array. (n &lt;= u)</p><ul><li>runtime analysis: insert + initialize &amp; scan: theta(n+u), if u = O(n), then the algorithm is linear.</li><li>Drawbacks: can’t handle duplicate keys and large key ranges</li></ul></li></ul></li></ul><p>Impovement:</p><ul><li><p>Allow duplicates on the basis of direct access array sort while preserving linear runtime property-&gt; counting sort</p></li><li><p>sort keys from a larger integer range: break up integer keys into parts, and then sort each part -&gt; tuple sort</p><ul><li>Example: LSD/MSD radix sort, sort in a certain order.</li></ul><blockquote><p>Then tuple sort uses a stable sorting algorithm as a subroutine to repeatedly sort the objects, first according to the least important key, then the second least important key, all the way up to most important key, thus lexicographically sorting the objects.</p></blockquote></li><li><p>Radix sort: counting sort + tuple sort</p><ul><li>Problems<ul><li>n ints from [-n** 2, n** 3]</li><li>n strings having k English characters</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.006 algorithms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5 synchronization</title>
      <link href="/sg/2021/11/09/6.004_synchronization/"/>
      <url>/sg/2021/11/09/6.004_synchronization/</url>
      
        <content type="html"><![CDATA[<h2 id="20-concurrency-synchronization"><a class="header-anchor" href="#20-concurrency-synchronization">¶</a>20 concurrency &amp; synchronization</h2><p>前言：翻了一下以前看61c的笔记不禁扶额，写得什么鬼。之前的笔记感觉就是简单概念的堆砌加抄写教授讲授的东西，没有太多的思考，所以才感觉学了和没学一样。不管怎么说，既然现在在学6.004，那么就按照课程设置的标准都搞定。</p><blockquote><p>Scenerio 1: video compression algorithms represent each video frame as an array of 8-pixel by 8-pixel macroblocks.</p><p>Scenario 2: Applications like video games are naturally divided into the “front-end” user interface and “back-end” simulation and rendering engines.</p></blockquote><p>problem: What’s the advantage of using multiple processes instead of just a single process? How should the processes communicate with each other?</p><p>Data-/Event- driven applications have the need to improve the efficiency. We can divide computation among multiple threads of execution. Independent sequential threads compete for shared resource while cooperating sequential threads communicate with each other.</p><p>We can divide communication models into:</p><ol><li>shared memory</li><li>Message passing</li></ol><p>goal: synchronization and thread-safe programming</p><h3 id="Synchronous-Communication-in-producer-consumer-model"><a class="header-anchor" href="#Synchronous-Communication-in-producer-consumer-model">¶</a>Synchronous Communication in producer-consumer model</h3><img src="/sg/2021/11/09/6.004_synchronization/sc1.png" class="" title="test"><p>Producer sends char to consumer and consumer receives char.</p><ul><li><p>constraints</p><ol><li>The consumer can’t consume data before it’s produced.</li><li>The producer can’t overwrite data before it’s consumed.</li></ol></li><li><p>design a FIFO(first-in first-out) buffers: The producer can run up to N values ahead of the consumer.</p><p>Implementation: ring buffer in shared memory. Consumers control write pointer, producers control read pointer. After space is full, producer starts to write char into receiver.</p></li><li><p>design a data type for synchronization: semaphores</p><blockquote><p>Basic structure:  an integer ≥ 0<br>semaphore s = K;  // initialize s to K<br>New operations (defined on semaphores):</p><ul><li><p>wait(semaphore s)<br>wait until s &gt; 0, then s = s – 1</p></li><li><p>signal(semaphore s)<br>s = s + 1 (one waiting thread may now be able to proceed)</p></li><li><p>Semantic guarantee: A semaphore s initialized to K enforces the precedence constraint:</p><p>The ith call to signal(s) must complete before the (i+K)th call to wait(s) completes.</p></li></ul><p>Implementation:</p><ul><li>use a special instruction that performs an atomic read-modify-write</li><li>use system calls.Works in uniprocessors only, where the kernel is uninterruptible</li></ul></blockquote><ol><li>for precedence: Declare semaphore = 0 -&gt; signal(s) at start of arrow-&gt;wait(s) at end of arrow</li><li>for resource allocation: Invariant: Semaphore value = number of resources left in pool.</li></ol></li></ul><p>scenerio1:single producer + single consumer</p><p>solution: enforce precedence and avoid buffer overflow</p><img src="/sg/2021/11/09/6.004_synchronization/sc2.png" class="" title="testi"><p>Scenerio2: multiple producers and consumers</p><p>Problem: producers interfere with each other.</p><p>disign: set constraint(mutual exclusion) to critical sections. Only one thread can execute critical sections at the time.</p><ul><li><p>Issue: lock granularity-&gt;How many locks do we need?</p><p>It depends. Think about the extreme sides: one lock for all accounts or one lock per account? We can choose the middle case.</p></li></ul><p>scenerio3: in the transfer scenario, account A transfer M money to account B.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">int</span> account1, <span class="keyword">int</span> account2, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//int a = min(account1, account2); dead lock solution</span></span><br><span class="line"><span class="comment">//int b = max(account1, account2);</span></span><br><span class="line">wait(lock[account1]);</span><br><span class="line">wait(lock[account2]);</span><br><span class="line">balance[account1] = balance[account1] - amount;</span><br><span class="line">  balance[account2] = balance[account2] + amount;</span><br><span class="line">signal(lock[account2]);</span><br><span class="line">signal(lock[account1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Downside: dead lock: no thread can make progress because all the process are locked.</p><ul><li><p>Example: dining philosophers</p><p>问题来源于他们几个人几个筷子，而吃饭的顺序是先拿左边的筷子，当每个人都拿了这只筷子后等待右边有没被拿的筷子，而这种情况无法发生，所有就一直等待，陷入僵局。</p><p>解决这个问题只需要改变用餐的顺序，只要能够避免筷子同时被拿的情况就行。</p><p>solution: Assign a unique number to each chopstick, request resources in a consistent order</p></li><li><p>solution: Establishing and using a global order for shared resources</p></li></ul><h2 id="21-system-level-communication"><a class="header-anchor" href="#21-system-level-communication">¶</a>21 system-level communication</h2><p>computer system technologies: each part has a detailed specification of the functionality and interface. We can still add things together without knowing the details of those implementations for things evolve rapidly.</p><p>Problem: what is  the appropriate interface choices for interconnecting system components?</p><h3 id="communication-channel"><a class="header-anchor" href="#communication-channel">¶</a>communication channel</h3><p>fact: the synchronous multi-signal channels of earlier systems -&gt; asynchronous point-to-point channels nowadays</p><p>problem 1 : how hard can it be to build a <strong>communication channel</strong>?</p><h2 id="22-parallel-processing"><a class="header-anchor" href="#22-parallel-processing">¶</a>22 parallel processing</h2><p>CSI, pipeline, date-parallel, cache coherence</p>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.004 computation structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.046 divide and conquer</title>
      <link href="/sg/2021/11/09/6.046-divide_and_conquer/"/>
      <url>/sg/2021/11/09/6.046-divide_and_conquer/</url>
      
        <content type="html"><![CDATA[<h2 id="Interval-scheduling"><a class="header-anchor" href="#Interval-scheduling">¶</a>Interval scheduling</h2><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7925628.png" class="" title="Screenshot-7925628"><h2 id="Convex-hull"><a class="header-anchor" href="#Convex-hull">¶</a>Convex hull</h2><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7925587.png" class="" title="Screenshot-7925587"><h2 id="Median-finding"><a class="header-anchor" href="#Median-finding">¶</a>Median finding</h2><p>Runtime: O($n^2$)</p><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7925566.png" class="" title="Screenshot-7925566"><h2 id="R1-methods"><a class="header-anchor" href="#R1-methods">¶</a>R1: methods</h2><h3 id="smarter-IS"><a class="header-anchor" href="#smarter-IS">¶</a>smarter IS</h3><p>recursion tree: reduce the runtime to O(logn)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M[j] = max(w(j) + M[p(j)], M[j - 1]) for j=1 to n</span><br></pre></td></tr></table></figure><h3 id="Strassen’s-algorithm"><a class="header-anchor" href="#Strassen’s-algorithm">¶</a>Strassen’s algorithm</h3><ol><li>multiplication runs much slower than addition</li><li>Strassen’s only uses 7 multiplications instead of 8</li></ol><h3 id="Master-theorem"><a class="header-anchor" href="#Master-theorem">¶</a>Master theorem</h3><ol><li>Old stuff of 6.006</li></ol><h2 id="Fast-Fourier-Transform"><a class="header-anchor" href="#Fast-Fourier-Transform">¶</a>Fast Fourier Transform</h2><ol><li><p>polynomial representations</p><ul><li>Coefficient vector</li><li>Roots and a scale term: A(x) = ( x − $r_0$) · (x − $r_1$) · · · · · (x −$ r_{n−1}$) · c</li><li>Samples: (x0, y0),  (x1, y1),  . . . ,  ( xn−1, yn−1) with A(xi) =  yi (∀i) , xi is distinct.</li></ul></li><li><p>Operations: evaluation; addition; multiplication</p></li><li><p>Conversion between coefficients and samples in O(nlgn) time</p><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7930623.png" class="" title="Screenshot-7930623"></li></ol><h3 id="Polynomial-multiplication"><a class="header-anchor" href="#Polynomial-multiplication">¶</a>Polynomial multiplication</h3><ol><li><p>a divide and conquer algorithm: Divide into even and odd coefficients</p></li><li><p>Construct a collapsing set X</p></li><li><p>nth roots of unity: Euler’s formula</p><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7931842.png" class="" title="Screenshot-7931842"></li></ol><h3 id="FFT"><a class="header-anchor" href="#FFT">¶</a>FFT</h3><ol><li><p>FFT: O(nlgn) divide and conquer algorithm for DFT</p></li><li><p>Discrete Fourier Transform: computing A → A* = V  · A for $x_k  = e^{iτk/n}$ where n = $2^l$, where A is the set of coefficients and<br>A* is the resulting samples.</p></li><li><p>Inverse Discrete Fourier Transform: A*  → $V^ {−1}$ · A*  = A</p><p>$V^ {−1}$  = 1/n * complex conjugate of V</p></li><li><p>Fast Polynomial Multiplication</p><ul><li>A* = FFT(A), B* = FFT(B)</li><li>c_k* = a_k* b_k * for k = 0, 1, …, n-1</li><li>C = IFFT(c*)</li></ul></li></ol><h3 id="application"><a class="header-anchor" href="#application">¶</a>application</h3><ol><li>audio processing</li></ol><h2 id="Van-Emade-Boas-Tree"><a class="header-anchor" href="#Van-Emade-Boas-Tree">¶</a>Van Emade Boas Tree</h2><p>problem: why use b tree instead of bst in practice?</p><p>答案与内存层级有关。通常的算法中我们假定从内存中直接获取数据，而实际上计算机的基本内存结构包括：cpu与缓存器间的高速通道，缓存与磁盘中的低速通道。每次访问磁盘获取数据的花费都很大，所以我们需要减少磁盘的访问，因而引入了缓存器。然后我们需要将需要的内存块从磁盘带到缓存中，当块的大小与cache line size相同时，能更大的利用访问的花费。</p><p>二叉树的存储方式是逐层存储的，一个分支对应一个数据。而b tree可以将整个块存储在同个分支，这样能更快的带出需要的内存块而不需要逐次访问磁盘。</p><h3 id="Structure"><a class="header-anchor" href="#Structure">¶</a>Structure</h3><ol><li><p>B represents branching factor, which is related to cache line length. ex:in 2-3 tree: B = 2</p><ul><li>All leaves are at the same level</li></ul></li><li><p>Operation: how to delete node?</p><ul><li><p>move deletion to the leaves.</p><p>Successor: leftmost in the right subtree or rightmost in the left subtree.</p></li><li><p>Case1: have sibling tree undersell</p></li><li><p>Case2: don’t have sibing tree underfull -&gt; merge: propagate the emptiness up, merge; if sibling tree is underfull, rotate.</p></li></ul></li></ol><h3 id="Analysis"><a class="header-anchor" href="#Analysis">¶</a>Analysis</h3><p>We want to maintain n elements in the range {0, 1, 2, . . . , u − 1} and perform Insert, Delete and Successor operations in O(log log u) time.</p><p>Intuition: binary search on the levels of tree.</p><p>Improvements: how a very simple data structure become vEB tree?</p><ol><li><p>Bit vector: We maintain a vector V  of size u such that V[x] = 1 if and only if  x  is in the set.</p></li><li><p>Split Universe into Clusters: splitting up the range {0, 1, 2, . . . , u − 1} into sqrt(u) clusters of size sqrt(u).</p><p>Then we have a summary vector.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">low(x) = x mod sqrt(u) = j</span><br><span class="line">high(x) = x //（下取整）sqrt(u) = i</span><br><span class="line">index(i,j) = i*sqrt(u) + j</span><br></pre></td></tr></table></figure><p>Version 1:</p><blockquote><p>Insert:</p><ul><li>Set V.cluster[ high(x) ] [ low(x) ] = 1</li><li>Mark cluster high(x) as non-empty</li></ul><p>Successor:</p><ul><li>Look within cluster high(x)</li><li>Else, find next non-empty cluster i</li><li>Find minimum entry j in that cluster</li><li>Return index(i, j)</li></ul></blockquote><p>Version 2: use recursion: successor calls inside successor, insert calls inside insert.</p><p>V.cluster[i], V.summary, V.summary[i]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSERT(V, x) </span><br><span class="line"><span class="number">1</span> Insert(V.cluster[high(x)], low[x]) </span><br><span class="line"><span class="number">2</span> Insert(V.summary, high[x])</span><br><span class="line"></span><br><span class="line">SUCCESSOR(V, x) </span><br><span class="line"><span class="number">1</span> i = high(x) </span><br><span class="line"><span class="number">2</span> j = Successor(V.cluster[i], j) </span><br><span class="line"><span class="number">3</span> <span class="keyword">if</span> j = =   ∞ </span><br><span class="line"><span class="number">4</span> i = Successor(V.summary, i) </span><br><span class="line"><span class="number">5</span> j = Successor(V.cluster[i], −∞) </span><br><span class="line"><span class="number">6</span> <span class="keyword">return</span> index(i, j)</span><br></pre></td></tr></table></figure><p>then we have a problem: two recursive call in insert, three recursive call in successor. We want one recursive call to achieve our goal.</p></li><li><p>Maintain Min and Max: We store the minimum and maximum entry in each structure.  This gives an O(1) time overhead for each Insert operation.</p></li><li><p>Don’t store Min recursively:</p><p>The Successor call now needs to check for the min separately.</p><blockquote><p>if x &lt; V.min : return V.min</p></blockquote></li></ol><p>space improvement: We can improve from Θ(u) to O(n log log u).</p><p>Intuition: for each element in n, perform a O(lglgu) runtime insertion.</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.046 algorithms design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《暗黑》—— 关于时间问题的另一种陈述</title>
      <link href="/sg/2021/11/07/dark/"/>
      <url>/sg/2021/11/07/dark/</url>
      
        <content type="html"><![CDATA[<blockquote><p>跌跌撞撞穿过时空，方向是无止境。飞蛾扑火，就像你和我。随时随地未来随时开始。我不会再等待。爱由勇气而生，所以不要再犹豫。我们踩着炽热的火轮，穿过黑夜驶向未来。</p></blockquote><h3 id="前言"><a class="header-anchor" href="#前言">¶</a>前言</h3><p>之前就听说过暗黑被称为德国版怪奇物语，虽然我觉得怪奇物语是很不错的故事，但不确定自己能不能看完整整三季冗长的叙述，就没有立即去看。然后第一个场景和片头就让我感觉这会成为我最喜欢的剧，一个双目被侵蚀的人从时间裂缝中掉出来，一个窄小的地下室，两三个人在讨论如何处理。片头初见只是简单的对称图形，越看越觉得这应该是分形的结构，有一种几何美。配乐也非常空灵。</p><p>为什么要写这篇文章呢？我想梳理一下对这部剧的想法，尝试联系之前看过的类似题材，更重要的是问自己一些问题。有时候觉得自己是很矛盾的人，既追求实用主义，又向往无用之学。比如对生科强烈地排斥态度就由于生科所研究的东西我都不能理解和日常生活有什么太大联系，实验包含很多重复实验而往往重做的时间又很长，这些都是我后来发现的一些理想和现实的差距。另一方面，我又很爱看一些科幻历史题材，也会看感兴趣的哲学类话题。喜欢计算机也是因为它既有用也无用，现在也只是想完成最开始设定的6-3的主干课程，群里的小伙伴已经去实习和刷题准备秋招了，而我还待在学校一事无成。</p><p>如果不能感受生活的乐趣，那么这生活——我们所努力去做的事情——还有什么意义呢？我也有自己的路要走。</p><h3 id="强烈的回响"><a class="header-anchor" href="#强烈的回响">¶</a>强烈的回响</h3><p>《暗黑》在故事开头就有一种强烈的即视感。时间线因为某个关键节点的改变产生新的时间线，各种人物关系，利益团体交错复杂，主角为了改变这所谓的宿命在不同时间来回跳跃，最后终于使时间线收敛，这是石头门所讲的部分。又或者是一个闭环的故事，一个完整的圆形循环，其中的节点有特定的人去完成，周而复始，这是阿西莫夫《永恒的终结》所讲述的。暗黑虽然被称为德国版怪奇物语，但和怪奇物语是完全不同的故事，最多也就是视觉效果上都比较暗沉。和谐的音乐和剪辑，一环扣一环的剧情展开，讲述了一个结♾️的展开和消失归于黑暗的故事。</p><h3 id="角度变化"><a class="header-anchor" href="#角度变化">¶</a>角度变化</h3><p>我很少会在看剧的时候有认知在不断变化和加深的经历，感受不到太多明显的层次。然而在暗黑的整个过程中我都处于惊讶状态，常常是我觉得我懂了然后下一集又推翻了这个想法。在刚开始我以为三个世界是以年代划分的，1986，1999，1953构成了三个世界代表现在未来过去，通过唯一的洞穴充当虫洞连接起不同的时空。故事是一个循环进行的环形叙事，故事的开始就是结尾，结尾就是开始。然而即使是最简单的图形通过一点变换就能变成不同的样子。正如一个圆镜像对称了另一个圆，构成了无限的符号。一个世界镜像了另一个平行世界，而这两个世界通过男主女主连接成一个不破的结，所有节点上的事情按部就班地发生，每个人的命运在最开始就已经写好，即使他/她总有错觉在这一次循环里能够打破这个结。</p><p>印象深刻的一个情节是，新派来的警长在面对小镇群众对前任警方负责人无法解决青少年失踪案仍参与调查时说，一个大象十个人去看会得到十种不同的样子，但如果一个人用十种角度去看，根据不同的结果进行修正往往就能得到对大象正确的认知。暗黑不断追问的问题“起源在哪里”纠缠了所有人无尽个循环，Jonus(Adam)每次循环里都认为自己不会成为老年时期Adam麻木残酷的样子，只要自己在某件事做了不同的决定，就能打破这次循环，但最后只是一次次地走向固定的命运。Martha(eve)为了延续因旧世界Martha死去而创造出的新世界，不断引导年轻时的自己走向循环的不同方向，以存续这个结和两个世界。他们沉浸在自己的视角里太久，观者也沉浸在自己的视角里走不出来。</p><p>两个世界只是起源世界的分支，它们在诞生时就摧毁了起源世界，并成为回环往复的衔尾蛇，所有人自此困顿在时间的囚牢里。而只有从最开始改变起源，阻止时间机器的产生，才能避免这个结，让世界正常单线进行。代价就是两个世界不复存在，曾经奋斗的一切化为虚无，而结以外的人还能在起源世界活下去。Claudia提供了第三种角度，她为了拯救女儿必死的命运来往于两个世界，在不同的时空通过改变不同角色的行为观察导致的结果，在每次循环里提供给新循环里的自己新的认知，当碎片被收集完全，才得到了追寻的答案。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4 virtual memory</title>
      <link href="/sg/2021/11/04/6.004-vm/"/>
      <url>/sg/2021/11/04/6.004-vm/</url>
      
        <content type="html"><![CDATA[<h2 id="17-virtual-memory"><a class="header-anchor" href="#17-virtual-memory">¶</a>17 virtual memory</h2><p>Fact:DRAM accessing hard disk is much more slower(100,000) than cache accessing main main memory.</p><p>Problem: Enormous miss penalty of secondary storage</p><p>Solution/Goal: the miss rate should be very small compared to the rate of executing instructions.(decrease miss ratio)</p><p>Design policy:</p><ol><li><p>high associativity: avoid collisions between accesses</p></li><li><p>large block size: amortize the cost of miss over many future hits</p></li><li><p>Write-back strategy: separation of hardware and software.only update the contents of disk when data that’s changed in main memory needs to be replaced by data from other blocks of secondary storage.</p><blockquote><p>upside of long latencies: manage the organization of main memory and the accesses to secondary storage in software.</p><p>-&gt; handle hits in hw, misses in sw</p></blockquote></li></ol><h3 id="Virtual-memory"><a class="header-anchor" href="#Virtual-memory">¶</a>Virtual memory</h3><p>Fact: we only need to ensure the current working set of a program is actually resident in main memory. Locations not currently being used could live in secondary storage until needed.</p><p>Goal:</p><ul><li><p>Exploit locality on a large scale</p><ul><li>solution: MMU with single-level page map</li><li>optimizations<ul><li>store in RAM</li><li>TLB</li></ul></li><li>Cache/VM interactions</li></ul></li><li><p>ease memory management, protect multiple contexts from each other.</p></li></ul><h4 id="MMU-translate-VA-to-PA"><a class="header-anchor" href="#MMU-translate-VA-to-PA">¶</a>&gt; MMU:translate VA to PA</h4><p>Solution: two part: VAtoPA + PageFault</p><ul><li>use hw(MMU) to implement VtoP, use sw(page fault exception handler of CPU) to handle exceptional cases</li></ul><blockquote><p>fact:  MMU maps virtual pages to physical pages. Cause a page fault if virtual page is not resident in physical memory.</p></blockquote><p>implementation: Paging/demand paging</p><p>Plan:</p><ol><li><p>All virtual pages in secondary storage, MMU empty.</p></li><li><p>map VA to PA</p><p>2.1 RAM-resident page</p><p>2.2 non-resident page: page fault</p><p>​CPU switches execution to page fault handler, the handler allocates a physical page for VA loaded from hard disk, then adjusts the page map entry. If all physical pages are unavailable, it chooses an existing page to replace. Finally return control to program.</p></li><li><p>Working set incrementally loaded via page faults</p><p>problem: thrashing: programs constantly generate page faults, which causes the program run very slowly.</p></li></ol><p>Arithmetic: page map(v, m, p)</p><h4 id="Where-to-store-page-map"><a class="header-anchor" href="#Where-to-store-page-map">¶</a>&gt; Where to store page map:</h4><ol><li><p>store in RAM(main memory): RAM-resident page maps</p><blockquote><p>use a register, called the page map pointer, to hold the address of the page map array in main memory</p></blockquote><p>problem: each memory reference takes 2 accesses to physical memory</p></li><li><p>cache the page map entries: translation look-aside buffer: a special-purpose fully-associative cache</p><p>TLB(VA, PA)</p><blockquote><p>If the PPN is found by using the TLB, the access to main memory for the page table entry can be avoided.</p></blockquote><ul><li><p>Variations:</p><ul><li>Multi-level page map</li></ul><blockquote><p>The key idea is that the page map segments are in virtual memory, <em>i.e.</em>, they don’t all have to be resident at any given time. If the running application is only actively using a small portion of its virtual address space, we may only need a handful of pages to hold the page directory and the necessary page map segments.</p></blockquote><ul><li>paging the page map</li></ul></li></ul></li></ol><h4 id="sum-up-MMU-address-translation"><a class="header-anchor" href="#sum-up-MMU-address-translation">¶</a>&gt; sum up: MMU address translation</h4><img src="/sg/2021/11/04/6.004-vm/sc1.png" class="" title="截屏2021-11-01 上午10.15.13"><h3 id="Virtual-machine"><a class="header-anchor" href="#Virtual-machine">¶</a>Virtual machine</h3><p>Fact:</p><blockquote><p>context: a mapping of VA to PA</p></blockquote><ul><li>problem: timesharing among several programs,When new program starts, the context should be updated by flushing TLB which costs a lot.</li></ul><p>example: OS kernel/user</p><ul><li><p>Solution: perform rapid context-switching</p><ul><li>add a register to hold index of current context.</li><li>switch contexts: update context # and pageablePtr registers.</li></ul></li><li><p>Problem: use caches with Virtual memory</p><p>disign choice:</p><ol><li>Virtually-addressed cache</li><li>Physically-addressed cache</li><li>Overlapped operation</li></ol></li></ul><p>several part to consider: MMU time on HIT, flush cache after context switch</p><p>…to be continued this part</p><h2 id="18-virtualizing-the-processor"><a class="header-anchor" href="#18-virtualizing-the-processor">¶</a>18 virtualizing the processor</h2><p>回顾一下虚拟内存，简单来说它提供给每个运行的程序一个拥有计算机所有内存地址空间的幻想。它通过内存控制单元实现从虚拟地址到物理地址的转换，用虚拟地址查询页表，而用页表来记录物理地址，完成查询。</p><p>由于访问硬盘的延迟比主存储器（main memory）慢的多，通过TLB（一种缓存器）来记录活跃的虚拟地址到物理地址的转换。</p><h3 id="build-a-VM"><a class="header-anchor" href="#build-a-VM">¶</a>build a VM</h3><p>把正在运行的程序抽象成进程，一个进程包含它运行所需要的所有资源(CPU,I/O device, MMU,virtual address space)…</p><p>有一个特别的优先的进程叫kernel。OS为各种进程提供服务，比如访问文件中的数据，建立网络连接，管理UI。从不同用户模式的进程切换，OS需要保存现在运行的进程状态，保存在主存储器中或二级存储器中。</p><p>Problem: share one physical machine between all the virtual machines.  As if each process was running on its own “virtual machine” that works independently of other virtual machines for other processes.(OS’s job)</p><p>Fact: one VM for each process</p><ul><li>OS把外接设备都抽象成服务，为每个进程提供独立的虚拟机，周期性地从一个进程转换到下一个进程。</li><li>外接设备包含一个定时器触发周期性的CPU中断，提供非易失性存储的二级存储器，连接外部设备的USB接口，视频监控器，键盘，鼠标等用户界面服务。</li><li>抽象包括窗口，访问磁盘内的文件，网络传输等。OS通过supervisor calls(SVCs)配置和控制虚拟服务。</li></ul><blockquote><p>The process state includes</p><ul><li>the hardware state of the CPU, <em>i.e.</em>, the values in the registers and program counter.</li><li>the contents of the process’ virtual address space, including code, data values, the stack, and data objects dynamically allocated from the heap. Under the management of the MMU, this portion of the state can be resident in main memory or can reside in secondary storage.</li><li>the hardware state of the MMU, which, as we saw earlier, depends on the context-number and page-directory registers. Also included are the pages allocated for the hierarchical page map.</li><li>additional information about the process’ input and output activities, such as where it has reached in reading or writing files in the file system, the status and buffers associated with open network connections, pending events from the user interface (<em>e.g.</em>, keyboard characters and mouse clicks), and so on.</li></ul></blockquote><h3 id="进程如何复用cpu？"><a class="header-anchor" href="#进程如何复用cpu？">¶</a>进程如何复用cpu？</h3><p>time-multiplexing of the cpu = timesharing</p><p>OS从运行进程0到运行进程1：</p><img src="/sg/2021/11/04/6.004-vm/sc2.png" class="" title="截屏2021-11-02 上午1.06.21"><ul><li>运行进程0 -&gt; 停止运行0，将控制转移回OS kernel，保存当前地址（PC+4）-&gt; 保存进程0的状态并且加载进程1的状态 -&gt; 回到进程1 -&gt; 运行进程1。</li><li>第2步和第4步是不同的trap handler。</li></ul><h3 id="interrupts-to-time-sharing"><a class="header-anchor" href="#interrupts-to-time-sharing">¶</a>interrupts to time-sharing</h3><p>中断处理:handler</p><ul><li><p>Hardware</p><p>Timer interrupts:  the periodic interrupt from the external timer device.</p><p>how the interrupt hardware in the Beta works?</p><blockquote><p>it saves the PC+4 of the interrupted user-mode program in the XP register and sets the program counter to some predetermined value that depends on which external interrupt happened.</p></blockquote></li><li><p>software: beta interrupt handling</p><ul><li><p>保存状态到寄存器中（在os是叫UserMState的数据结构，在main memory中存储CPU的寄存器）-&gt; C程式处理exception -&gt;重装寄存器内保存的状态  -&gt; 回到原来的地址（Reg[XP]-4)</p></li><li><p>Where to find handlers</p><ul><li>Beta scheme: wire in a low-memory address for each exception handler entry point</li><li>Table of handler addresses</li></ul></li><li><p>问题：不是很懂中断对用户程序是透明的？或许是指用户程序能够访问中断改变的变量/状态。</p><blockquote><p>Since the process state is saved and restored during an interrupt, interrupts are transparent to the running user-mode program.</p></blockquote></li></ul></li><li><p>Example: timer interrupt handler</p><ul><li><p>设定：os maintains current time of day count in response to clock events.There are program A and clock handler.</p></li><li><p>目标是用时间中断器来更新os中记录现在时间的值。定时器定期中断用户模式程序，以在操作系统中运行时钟中断处理程序代码，然后继续用户模式程序的运行。对A来说，中断仿佛没有发生。如果A需要访问时间，则需要向os做出提出相应的服务要求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//Handler(C)</span><br><span class="line">long TimeOfDay;</span><br><span class="line">Struct Mstate &#123;&#125; UserMstate;</span><br><span class="line">Clock_Handler()&#123;&#125;</span><br><span class="line"></span><br><span class="line">//Interrupt stub(assymbly)</span><br><span class="line">Clock_h:</span><br><span class="line">save the values of all registers into the UserMState;</span><br><span class="line">set up the kernel-mode stack;</span><br><span class="line">call clock_handler;</span><br><span class="line">reload registers;</span><br><span class="line">decrement the XP register value;</span><br><span class="line">return to the app;</span><br></pre></td></tr></table></figure><img src="/sg/2021/11/04/6.004-vm/sc3.png" class="" title="截屏2021-11-02 上午10.46.46"></li></ul></li><li><p>Scheduler: simple timesharing scheduler</p><ul><li><p>设定：UserMState, process control block of each process(process table), index of current process</p></li><li><p>怎样运行一个新的时间共享的进程？</p><ul><li><p>scheduler通过保存现在进程的状态，改变索引值为进入下一个进程准备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scheduler()&#123;</span><br><span class="line">  proctbl[cur].state = UserMState;</span><br><span class="line">  cur = (cur+<span class="number">1</span>)%N;</span><br><span class="line">  UserMState = proctbl[cur].state; <span class="comment">//install state</span></span><br><span class="line">  LoadUserContext(....PageMap); <span class="comment">//install context</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Time-sharing story in os</p><ul><li><p>Timer 中断正在运行的用户模式程序并开始执行clock handler代码。clock handler先保存现在的进程状态到相关的数据结构中然后调用scheduler。scheduler将暂时保存的进程状态转移到process table中，而之后调用的scheduler会为下一个运行的进程保存相关的状态到暂时存放的地址，clock handler重新加载寄存器保存的状态继续运行下一个进程，这样循环下去。</p></li><li><p>设定: supervisor mode bit：1时不允许中断，0时允许。kernel mode is set 1; user mode is set 0.</p><ul><li>中断不能同时运行，一次只能运行一次。设置监控位保证这一点。由于中断发生会改变进程状态，这样是为了确保不会覆盖进程的状态到寄存器（UserMState）中。</li></ul></li></ul></li></ul><h3 id="exception-handling"><a class="header-anchor" href="#exception-handling">¶</a>exception handling</h3><p>problem: how to deal with “illegal” opcodes?</p><p>…跳过了硬件，汇编的部分</p><h3 id="Communicate-with-os"><a class="header-anchor" href="#Communicate-with-os">¶</a>Communicate with os</h3><p>Problem: how user-mode programs communicate with OS code?</p><p>当os在运行其他进程时，用户程序该如何将控制转移回os？</p><p>Solution:</p><ul><li>abstraction: Use supervisor calls with args in registers</li><li>Implementation: use illegal instructions to cause an exception, and OS recognize the instruction as a user-mode SVCs</li></ul><p>…跳过了汇编部分</p><h2 id="19-devices-and-interrupts"><a class="header-anchor" href="#19-devices-and-interrupts">¶</a>19 devices and interrupts</h2><p>Problem 1: how the OS interacts with the devices themselves?</p><p>Problem 2: how supervisor calls access the kernel buffers in response to requests from user-mode processes?</p><h3 id="Interrupt-based-asynch-I-O"><a class="header-anchor" href="#Interrupt-based-asynch-I-O">¶</a>Interrupt-based asynch I/O</h3><p>操作系统中有很多输入/输出设备，以键盘输入为例，用户在键盘上打字，引起键盘向cpu发起中断请求。中断停止当前程序的运行而执行这个特别的输入输出事件。当内核中的缓存用完后会发生什么？</p><p>早先的处理方式是丢弃收到的键盘输入的字符，提示用户之前输入的已作废。</p><p>后来用户模式的程序执行ReadKey() SVC，要求OS返回下一个字母到R0寄存器中，然后遵循SVC继续执行指令。</p><blockquote><p>ReadKey() SVC: a blocking I/O request.</p><p>当没有字符返回时不执行直到有可用的结果返回。</p><p>the program assumes that when the SVC returns, the next character is in R0. If there isn’t (yet) a character to be returned, execution should be “blocked”, <em>i.e.</em>, suspended, until such time that a character is available.</p><p>Non-blocking I/O request: return immediately with both a status flag and a result.</p><p>当没有字符返回时仍然执行指令，在之后重新发起请求。</p></blockquote><ul><li><p>Operation: no attention to keyboard during normal operation</p><ul><li><p>Event-driven approach</p><p>用户模式程序和键盘并没有直接互动，而是通过事件驱动方法，设备当需要处理输入时通过中断向操作系统发出信号。这样把责任分离的好处是减少操作系统不停地检查是否有未完成的I/O操作</p></li></ul></li><li><p>The interrupt-driven OS interactions with I/O devices are completely transparent to user programs.</p></li><li><p>Example: keyboard interrupt handler</p><ul><li>sketch: cpu needs access device status and data</li><li>approach:Memory-mapper I/O: a portion of the kernel address space is devoted to servicing I/O devices.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Device</span>&#123;</span></span><br><span class="line">  <span class="keyword">char</span> Flag, Data;</span><br><span class="line">&#125;keyboard;</span><br><span class="line"></span><br><span class="line">keyHit_h()&#123;</span><br><span class="line">  Buffer[inptr] = keyboard.Data;</span><br><span class="line">  inptr = (...)...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现实中更复杂：</p><p>键盘处理还需要识别键的状态是按下还是释放，然后将字符转换成ASCII码，并且需要处理特殊的按键组合。</p></li></ul><h3 id="Implementations-of-ReadKey"><a class="header-anchor" href="#Implementations-of-ReadKey">¶</a>Implementations of ReadKey</h3><p>Goal: the associated supervisor call that lets user programs read characters.</p><p>Attempt1: 直接写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReadKey_h()&#123;</span><br><span class="line">  <span class="keyword">int</span> kbdnum = ProcTbl[Cur].DPYNum;</span><br><span class="line">  <span class="keyword">while</span> (BufferEmpty(kbdnum))&#123;</span><br><span class="line">    <span class="comment">/* busy wait loop*/</span></span><br><span class="line">  &#125;</span><br><span class="line">UserMState.Reqs[<span class="number">0</span>] = ReadInputBuffer (kbdnum) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​kbdnum:keyboard num;proctbl: process table</p><ul><li><p>Problem：kernel/supervisor mode can’t be interrupted.</p><blockquote><p>the SVC handler is running with the supervisor bit (PC[31]) set to 1, disabling interrupts.</p></blockquote><ul><li><p>such that the buffer never gets filled.</p></li><li><p>陷入死循环</p></li></ul></li></ul><p>Attempt2: fix the looping problem by adding code to subtract 4 from the saved value of the XP register before returning</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ReadKey_h()&#123;</span><br><span class="line">  <span class="keyword">int</span> kbdnum = ProcTbl[Cur].DPYNum;</span><br><span class="line"><span class="keyword">if</span> (BufferEmpty(kbdnum))&#123;</span><br><span class="line"><span class="comment">/* busy wait loop*/</span></span><br><span class="line">UserMState.Regs[XP] = UserMState.Regs [XP]<span class="number">-4</span> ;</span><br><span class="line">    Scheduler(); <span class="comment">//attempt3</span></span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">UserMState.Reqs[<span class="number">0</span>] = ReadInputBuffer (kbdnum) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>和Attempt1的区别是：</p><ul><li><p>执行循环的方式：当中断推出时，操作系统通过跳到xp继续执行用户模式的指令。通过改变这一地址来循环发出中断。（汇编的常见循环方式？我认为）</p><blockquote><p>When the handler exits, the OS will resume execution of the user-mode program by reloading the registers and then executing a JMP(XP), which would normally then execute the instruction <em>following</em> the SVC instruction.</p></blockquote></li><li><p>ReadKey() SVC 进入用户模式</p></li></ul></li><li><p>Problem: waste its time-slice waiting for next keystroke</p></li></ul><p>Attempt3: 利用等待的时间执行别的程序，通过循环调度的方式最后回到ReadKey() SVC</p><blockquote><p>The call to Scheduler() suspends execution of the current process and arranges for the next process to run when the handler exits. (Round-robin scheduling).</p><p>建立在以下事实上：</p><p>Fact: the time slices for each process are small enough that one round of process execution happens more quickly than the time between two typed characters</p></blockquote><ul><li>Time-sharing 在此场景下的意义：<ul><li>进行计算密集型的程序时由于分隔时间(cycles)过短，time-sharing可能会增加额外的成本在进程交换（context-switching, scheduling）上。</li><li>当有很多个程序需要执行时，分隔时间增加，time-sharing才增加了效率</li></ul></li><li>进一步的提高效率：将进程的状态（活跃/等待）记录到进程的数据中，通过优先执行活跃的程序减少等待的时间。<ul><li>unix系统中sleep, wakeup可以改变进程的相应状态</li></ul></li></ul><p>Attemp4: “进一步”的实现:no CPU cycles are wasted on useless activity.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ReadKey_h()&#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">if</span> (BufferEmpty(kbdnum))&#123;</span><br><span class="line">User.Regs[XP] = User.Regs&#123;XP] - <span class="number">4</span>;</span><br><span class="line">sleep(kbdnum);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;... &#125;</span><br><span class="line">&#125;</span><br><span class="line">sleep(status s) &#123;</span><br><span class="line">ProcTbI[Cur].status = s;</span><br><span class="line">Scheduler();</span><br><span class="line">&#125;</span><br><span class="line">Scheduler)&#123;</span><br><span class="line"><span class="keyword">while</span> (ProcTbIfi].status != <span class="number">0</span>) &#123;</span><br><span class="line">i=(i+<span class="number">1</span>)%N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">KeyHit_h()&#123;</span><br><span class="line">  ...</span><br><span class="line">  writeBuffer(kbdnum, key);</span><br><span class="line">wakeup(kbdnum);</span><br><span class="line">  ...</span><br><span class="line">)  </span><br><span class="line">wakeup(status s) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ProcTbli].status == s)</span><br><span class="line">ProcTbli].status = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The effect is that once a process goes to sleep() WAITING for an event, it’s not considered for execution again until the event occurs and wakeup() marks the process as ACTIVE.</p></blockquote><p>Example: which handler &amp; os? 像个解谜游戏。根据handler和os的特点来排除。</p><h3 id="Time-sharing-can’t-meet-with-ddl"><a class="header-anchor" href="#Time-sharing-can’t-meet-with-ddl">¶</a>Time-sharing can’t meet with ddl</h3><p>Problem: asynchronous world.</p><p>Solution: I/O: separate “event handling” from “event processing”.</p><ul><li>Downside: the need for real-time: can’t predict completion time, therefore can’t deal with real-time system</li><li>Example: ESC on cars,需要实时计算各种因素才能准确刹车。而这是时间分享系统不能做到的</li></ul><blockquote><p>Time-sharing system: 在单个硬件系统上通过快速在进程间切换伪造并行的假象，为每个程序提供了在独立的虚拟机上运行的幻想。</p><p>downside: processing throughput is more variable</p></blockquote><h3 id="the-need-for-real-time"><a class="header-anchor" href="#the-need-for-real-time">¶</a>the need for real time</h3><ul><li><p>what’s the largest L such that Lmax+S=D?</p><blockquote><p>Measure of performance in a real-time system: interrupt latency L,the amount of time that elapses between a request to run some code and when that code actually starts executing.</p></blockquote></li></ul><img src="/sg/2021/11/04/6.004-vm/sc4.png" class="" title="截屏2021-11-04 上午12.10.58"><ul><li><p>What factors contribute to interrupt latency?</p><ul><li><p>关心这个问题的原因在于实现最小化中断延迟以在期限时间完成程序运行的目标。所以我们需要知道导致延迟的原因然后减小延迟。</p></li><li><p>state save, context switch</p><blockquote><p>While handling an interrupt:it takes times to save the process state, switch to the kernel context, and dispatch to the correct interrupt handler.</p></blockquote></li><li><p>periods of un-interruptability</p><ul><li>Long,uninterruptable instructions</li><li>explicitly disabled periods: interrupt handler in kernel mode</li></ul></li><li><p>to bound and minimize interrupt latency by all means</p><blockquote><p>We’ll do this by optimizing the cost of taking an interrupt and dispatching to the correct handler code. We’ll avoid instructions whose execution time is data dependent. And we’ll work to minimize the time spent in kernel mode.</p></blockquote></li></ul></li></ul><h3 id="Real-time-scenarios"><a class="header-anchor" href="#Real-time-scenarios">¶</a>Real-time scenarios</h3><p>scenario: scheduling of multiple devices: long-running handlers have a huge impact on the worst-case latency seen by the other devices.</p><h4 id="Stragegy0-first-come-first-served-scenario"><a class="header-anchor" href="#Stragegy0-first-come-first-served-scenario">¶</a>&gt; Stragegy0:  first-come-first-served scenario.</h4><p>Problems: reducing the worst-case latencies</p><h4 id="Strategy1-“nonpreemptive”-“weak”-priority-system"><a class="header-anchor" href="#Strategy1-“nonpreemptive”-“weak”-priority-system">¶</a>&gt; Strategy1: “nonpreemptive” / “weak” priority system.</h4><ul><li><p>assign priorities to the pending requests and to serve the requests in priority order</p></li><li><p>Result: worsk-case latency = the worst-case service time of all the other devices + the service time of all higher-priority devices</p><p>当前运行的程序完成后才会运行下一个（在不支持中断的系统中）。</p></li><li><p>Subproblem: How should priorities be assigned given hard real-time constraints?</p><ul><li><p>assume each device has a service deadline D after the arrival of its service request. assume D is the time until the <em>next</em> request for the same device.</p></li><li><p>Strategy: earliest deadline, therefore highest priority = earliest deadline</p><blockquote><ol><li><p>Sort the requests by their deadlines.</p></li><li><p>Assign the highest priority to the earliest deadline, second priority to the next deadline, and so on.</p></li></ol></blockquote></li></ul></li><li><p>例子：机场候机排序，优先让飞机快要起飞的乘客候机虽然会延迟部分乘客的候机时间，但是会减少延误的次数。但是如果系统过载，让最先要起飞的乘客优先候机会导致所有人都延误，在这个场景中排序优先问题需要重新讨论，因为目标变成了能够使延误航班次数最少的排序优先。</p></li><li><p>downside：the worst-case latency for a device always includes the maximum time we have to wait for the currently-running task to complete.</p><blockquote><p>Scenario: suppose disk requests have a 800 us deadline in order to guarantee the best throughput from the disk subsystem. Since the disk handler service time is 500 us, the maximum allowable latency between a disk request and starting to execute the disk service routine is 300 us.</p></blockquote><img src="/sg/2021/11/04/6.004-vm/sc5.png" class="" title="截屏2021-11-04 下午12.57.13"></li></ul><h4 id="Strategy2-the-need-for-preemption"><a class="header-anchor" href="#Strategy2-the-need-for-preemption">¶</a>&gt; Strategy2: the need for preemption</h4><p>-&gt;a preemptive priority system/“strong” priority system</p><p>怎么处理strategy1中的场景问题？</p><p>设定新的优先级排序为：disk &gt; printer&gt; keyboard，改变的是当请求发出时立刻执行当前程序而不等待更低优先级程序的完成。在强优先级系统中，优先级和ddl非常相关，所以一定能在限期完成请求；而在弱优先系统中，优先级按照服务需要完成的时间划分，所以在考虑中断延迟时需要考虑其他服务的中断延迟时间。</p><p>…跳过了硬件实现部分…</p><h4 id="recurring-interrupts"><a class="header-anchor" href="#recurring-interrupts">¶</a>&gt; recurring interrupts</h4><p>Consider interrupts which recur at bounded rates:</p><img src="/sg/2021/11/04/6.004-vm/sc6.png" class="" title="截屏2021-11-04 下午1.16.28"><p>Keyboard handler doesn’t complete until 3 ms after its request was received.</p><p>由于只要有优先级高于键盘的请求，就必须先执行那个程序。所以在实时系统中用ddl作为约束而不是延迟时间的长短。</p><p>面临的问题：当键盘ddl在3ms之前时，强优先系统仍然无法达到实时条件的限制，这时说明在紧张的ddl下没有足够的cpu周期达到对服务的重复要求。</p><img src="/sg/2021/11/04/6.004-vm/sc7.png" class="" title="截屏2021-11-04 下午5.37.03"><p>calculations of recurring interrupts</p><ul><li><p>how much load each periodic request places on the system?</p><ul><li>Service time * max frequency = Load%</li><li>User-mode share</li></ul></li><li><p>whether have enough CPU cycles to meet each of the deadlines?</p><ul><li>example: for disk: 500/800=67.5% of the cycles to service the disk in the time between the disk request and disk deadline.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.004 computation structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC programming</title>
      <link href="/sg/2021/11/04/SC_programming/"/>
      <url>/sg/2021/11/04/SC_programming/</url>
      
        <content type="html"><![CDATA[<h2 id="R19-programming-with-ADTs"><a class="header-anchor" href="#R19-programming-with-ADTs">¶</a>R19: programming with ADTs</h2><p>Recipes: Test-first programming approach -&gt; writing an ADT -&gt; writing a program with ADTs</p><p>区别在于test-first和ADT都是从规范出发，然后测试，然后具体实现，可能会改变实现的方式根据不同的规范。而在编程时需要我们根据实际情况选用数据类型，选用我们需要实现的大概步骤以得到想要的数据。然后才进行和测试先行编程方法一样的步骤。</p><blockquote><ol><li><strong>Choose datatypes.</strong> Decide which ones will be mutable and which immutable.</li><li><strong>Choose static methods.</strong> Write your top-level <code>main</code> method and break it down into smaller steps.</li><li><strong>Spec.</strong> Spec out the ADTs and methods. Keep the ADT operations simple and few at first. Only add complex operations as you need them.</li><li><strong>Test.</strong> Write test cases for each unit (ADT or method).</li><li><strong>Implement simply first.</strong> Choose simple, brute-force representations. The point here is to put pressure on the specs and the tests, and try to pull your whole program together as soon as possible. Make the whole program work correctly first. Skip the advanced features for now. Skip performance optimization. Skip corner cases. Keep a to-do list of what you have to revisit.</li><li><strong>Iterate</strong>. Now that it’s all working, make it work better. Reimplement, optimize, redesign if necessary.</li></ol></blockquote><p>case study: matrix multiplication</p><p>Ideas including static typing, testing, spec, immutability, and interfaces.</p>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC test&amp;debug</title>
      <link href="/sg/2021/10/29/SC_test-debug/"/>
      <url>/sg/2021/10/29/SC_test-debug/</url>
      
        <content type="html"><![CDATA[<p>everything is hard.</p><h2 id="R3-测试"><a class="header-anchor" href="#R3-测试">¶</a>R3 测试</h2><p>Goal: systematic testing</p><p>验证包括：</p><ul><li>formal reasoning:verification caonstructs a formal proof that a program is correct.</li><li>code review: have others read your code</li><li>Testing</li></ul><h3 id="测试很难👀"><a class="header-anchor" href="#测试很难👀">¶</a>测试很难👀</h3><ul><li>暴力测试很难进行</li><li>haphazard testing(just try it and see if it works)如果程序的错误不明显很难被随意选择的测试例子发现，而假如那么明显程序中只会含有更多错误<ul><li>我一般就是这种？所以根本不会写测试</li></ul></li><li>Random or statistical testing：软件测试在可能的输入项中是不连续和离散的。</li></ul><h3 id="测试优先编程"><a class="header-anchor" href="#测试优先编程">¶</a>测试优先编程</h3><ul><li>terms: module, spec, implementation, test case, test suite</li><li>Steps<ul><li>Spec: types of parameters and constraints, type of return value and how return value relates to the inputs</li><li>Test: write tests that exercise the spec</li><li>Implement: write the implementation</li></ul></li><li>先写测试。拖到最后测试找bug会很痛苦😖</li></ul><h3 id="系统式编程"><a class="header-anchor" href="#系统式编程">¶</a>系统式编程</h3><p>Goal</p><ul><li>correct: 当运行时通过所有测试</li><li>thorough：有漏洞时报错</li><li>Small</li></ul><h4 id="分区选择测试样例"><a class="header-anchor" href="#分区选择测试样例">¶</a>&gt; 分区选择测试样例</h4><ul><li><p>divide the input space into subdomains, which form a partition</p></li><li><p>Include boundaries in the partition</p><ul><li>Bugs happen at boundaries<ul><li>0, empty, null</li><li>Maximum and minimum</li><li>Emptiness for collection types</li><li>first and last element of a sequence</li></ul></li><li>why bugs happen at boundaries?<ul><li>Off-by-one mistake</li><li>Special case</li><li>places of discontinuity in the code’s behavior</li></ul></li></ul></li><li><p>Use multiple partitions</p><ul><li>如何划分space of input<ul><li>Cartesian-product</li><li>独立地看，然后再考虑交互产生的效果</li><li>Smaller test suit as possible to cover the input space</li></ul></li></ul></li></ul><h4 id="自动化单元测试-JUnit"><a class="header-anchor" href="#自动化单元测试-JUnit">¶</a>&gt; 自动化单元测试: JUnit</h4><ul><li><p>Unit test: tests for every individual module</p></li><li><p>all JUnit assertions that compare values: expected first, actual second</p></li><li><p>Every assertion method accepts an optional message argument which will show when error happens</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assertTrue(..., <span class="string">&quot;...&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="记录测试方案"><a class="header-anchor" href="#记录测试方案">¶</a>&gt; 记录测试方案</h4><ul><li>document the partitions and subdomains at the top of test class</li><li>For each test case: comment which subdomains it covers</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiply</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Testing strategy</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * cover the cartesian product of these partitions:</span></span><br><span class="line"><span class="comment">   *   partition on a: positive, negative, 0</span></span><br><span class="line"><span class="comment">   *   partition on b: positive, negative, 0</span></span><br><span class="line"><span class="comment">   *   partition on a: 1, !=1</span></span><br><span class="line"><span class="comment">   *   partition on b: 1, !=1</span></span><br><span class="line"><span class="comment">   *   partition on a: small (fits in a long value), or large (doesn&#x27;t fit)</span></span><br><span class="line"><span class="comment">   *   partition on b: small, large</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * cover the subdomains of these partitions:</span></span><br><span class="line"><span class="comment">   *   partition on signs of a and b:</span></span><br><span class="line"><span class="comment">   *      both positive</span></span><br><span class="line"><span class="comment">   *      both negative</span></span><br><span class="line"><span class="comment">   *      different signs</span></span><br><span class="line"><span class="comment">   *      one or both are 0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// covers a is positive, b is negative, </span></span><br><span class="line">  <span class="comment">//        a fits in long value, b fits in long value,</span></span><br><span class="line">  <span class="comment">//        a and b have different signs</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDifferentSigns</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      assertEquals(BigInteger.valueOf(-<span class="number">146</span>), BigInteger.valueOf(<span class="number">73</span>).multiply(BigInteger.valueOf(-<span class="number">2</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// covers a = 1, b != 1, a and b have same sign</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testIdentity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      assertEquals(BigInteger.valueOf(<span class="number">33</span>), BigInteger.valueOf(<span class="number">1</span>).multiply(BigInteger.valueOf(<span class="number">33</span>)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="测试方法"><a class="header-anchor" href="#测试方法">¶</a>测试方法</h3><h4 id="玻璃箱和黑箱测试"><a class="header-anchor" href="#玻璃箱和黑箱测试">¶</a>&gt; 玻璃箱和黑箱测试</h4><ul><li><p>Goal: full test cases</p></li><li><p>Difference:</p><ul><li>black box testing means choosing test cases only from the specification</li><li>Glass box chooses test cases from the implementation of the function</li></ul></li></ul><h4 id="覆盖度"><a class="header-anchor" href="#覆盖度">¶</a>&gt; 覆盖度</h4><ul><li>statement coverage: every statement<ul><li>Coverage tool: counts the number of times each statement is run by your test suite</li></ul></li><li>Branch coverage: if/while/…, both the true and false direction</li><li>path coverage:combinations of branches</li></ul><h4 id="单元和集成测试"><a class="header-anchor" href="#单元和集成测试">¶</a>&gt; 单元和集成测试</h4><ul><li>Unit test a single module in isolation</li><li>integration test tests a combination of modules</li><li>Isolating a higher-level module is hard<ul><li>write stub versions of the modules that it calls: mock object</li></ul></li></ul><h4 id="自动化回归测试"><a class="header-anchor" href="#自动化回归测试">¶</a>&gt; 自动化回归测试</h4><ul><li><p>Regression test: test new changes to the code against existing test cases</p><ul><li>new changes: fix bugs, add new features, optimization</li><li>a test is good if it elicits a bug</li><li>save regression tests: avoid reintroducing the bug</li><li>Test-first debugging</li></ul></li><li><p>automated test: running the tests and checking the results automatically</p><ul><li>Test driver</li><li>using junits</li></ul></li><li><p>Automate regeression test: use in combination</p></li></ul><h3 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h3><p>迭代式测试优先编程：</p><ol><li>Practice</li></ol><ul><li>Write spec</li><li>write test that exercise the spec. As u find problems, iterate on the spec and the tests</li><li>Write an implementation. As u find problems, iterate on the spec, the tests, and the implementation</li></ul><ol start="2"><li>writing tests to understand the spec and fix specs</li><li>Plan for iteration</li></ol><ul><li>large spec:  先写一部分spec，然后写测试和实现那一部分，迭代此步骤</li><li>Complex test suite: 选择少部分重要的写一个小的测试集，再写一个简单的实现通过测试，迭代</li><li>tricky implementation： 先暴力写个解法通过测试以确定真的理解了spec和测试。then move on to the harder implementation.</li></ul><h2 id="R9-避免调试"><a class="header-anchor" href="#R9-避免调试">¶</a>R9: 避免调试</h2><p>first defense: make bugs impossible</p><ul><li>by immutability</li><li>static checking.</li></ul><p>second defense:localize bugs</p><ul><li><p>by <strong>defensive programming</strong> such as throwing exception when checking preconditions</p></li><li><p>By incremental development</p><p>一点点写，写一点测试一点（单元测试和回归测试）</p></li><li><p>By modularity</p><blockquote><p><strong>Modularity</strong> means dividing up a system into components, or modules, each of which can be designed, implemented, tested, reasoned about, and reused separately from the rest of the system.</p></blockquote></li><li><p>encapsulation</p><blockquote><p><strong>Encapsulation</strong> means building walls around a module so that the module is responsible for its own internal behavior, and bugs in other parts of the system can’t damage its integrity.</p></blockquote><ul><li><p>Access control: use “public, private, protect” to control the visibility and accessibility of the variables and methods.</p></li><li><p>variable scope: minimize the scope of variables</p><ul><li><p>Always declare a loop variable in the for-loop initializer.</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br></pre></td></tr></table></figure><p>Better:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Declare a variable only when you first need it, and in the innermost curly-brace block that you can.</p></li><li><p>Avoid global variables.</p></li></ul></li></ul></li></ul><h3 id="声明"><a class="header-anchor" href="#声明">¶</a>声明</h3><blockquote><p>java tips:<strong>A serious problem with Java assertions is that assertions are off by default.</strong></p><p>由于assertion需要额外的时间消耗检视数据，所以在运行时关掉但在测试时最好打开以定位可能的程序设计错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAssertionsEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertThrows(AssertionError.class, () -&gt; &#123; <span class="keyword">assert</span> <span class="keyword">false</span>; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>what to assert?</p><ul><li>Method argument requirements: like preconditions</li><li>method return value requirements: postconditions</li></ul><p>when to assert?</p><ul><li>As you write the code, you can still remember the invariants of the program.</li></ul><p>what not to assert?</p><ul><li><p>external conditions</p><blockquote><p>外界条件比如文件是否存在，网络可用性，输入数据的正确性。assertion应该考虑的是程序是否能符合spec的规范。</p><p>When an assertion fails, it indicates that the program has run off the rails in some sense, into a state in which it was not designed to function properly.</p></blockquote></li><li><p>Expression whether is executed</p></li><li><p>conditional statements cover all the possible cases: instead, throw an exception in the illegal cases when checking</p></li></ul><h2 id="R13-debugging"><a class="header-anchor" href="#R13-debugging">¶</a>R13: debugging</h2><p>learn the systematic debugging techniques.</p><h3 id="复现问题"><a class="header-anchor" href="#复现问题">¶</a>复现问题</h3><p>Have a test case for the bug, and make this test work.</p><blockquote><p>First work on <u>reducing the size of the buggy input</u> to something manageable that still exhibits the same (or very similar) bug.</p></blockquote><h3 id="科学实验法寻找问题"><a class="header-anchor" href="#科学实验法寻找问题">¶</a>科学实验法寻找问题</h3><p>Problem: where is the bug?</p><p>scientific methods:</p><h3 id="1-研究数据"><a class="header-anchor" href="#1-研究数据">¶</a>1.研究数据</h3><p>查看测试输入导致的问题，检查错误结果，失败声明，和stack traces</p><h3 id="2-提出假设"><a class="header-anchor" href="#2-提出假设">¶</a>2.提出假设</h3><p>think about your program as a flow of data, or steps in an algorithm, and try to rule out whole sections of the program at once. Binary search can help minimize the search space.</p><ul><li><p>Slicing:找到产生出一个特定值的所有计算部分。</p><p>如果该计算错误则问题出现在这一部分的某一步骤，那么从错误的结果出发回溯代码中涉及到的所有部分。有利的设计选择有助于帮助缩小检索范围。比如：immutability,这提示我们这一变量是否会受代码的其他部分影响，不过应该注意final修饰的限定变量的不同（final int bonus vs. final Sale s, 尽管s不会重新赋值，但Sale仍可能会改变从而影响s)；scope minimization, 比如local variable和global variable。</p><blockquote><p>With instance variables, the slicing search might have to expand to include the entire class. For a global variable (gasp), the search expands to include the entire program.</p></blockquote></li><li><p>Delta debugging: it uncovers two closely-related test cases that bracket the bug, in the sense that one succeeds and one fails.One hypothesis is that the bug lies in those lines of code, the <em>delta</em> between the passing run and the failing run.</p><p>利用版本控制来比较两种情况（A成功，B失败；A失败，B成功）下代码的改变情况，知道找到导致出错的问题。</p></li><li><p>prioritize hypotheses: trust lower levels code until you’ve found good reason not to. Like: java compiler and runtime, os, hardware&gt;well-tested code &gt; your code.</p><p>比如在db pj0 autograder导致的一系列问题，实际上是对smart pointer的部分使用不熟。</p></li></ul><h3 id="3-实验"><a class="header-anchor" href="#3-实验">¶</a>3.实验</h3><p>Make a prediction and test it. The best experiment is a probe.</p><ul><li><p>print debugging</p><ul><li><p>print statement: write good debugging print statement to keep track of code</p><p>需要注意在测试完成后除去print statement</p></li><li><p>Logging</p><p>能够从全局用变量控制是否启用logging</p><blockquote><p>A logging framework like <a href="https://logging.apache.org/log4j/">Log4j</a> can also direct the logging to a file or to a server across the network, can log structured data as well as human-readable strings, and can be used in deployment, not just development.</p></blockquote></li></ul></li><li><p>assertion</p><p>好处是不用手动检查变量，只用设置条件。</p></li><li><p>breakpoint with a debugger like gdb</p></li></ul><p>对一些方法的分析：</p><ul><li><p>Swap components: don’t do it unless you have good reasons</p><blockquote><p>If you hypothesize that the bug is in a module, a different implementation of it that satisfies the same interface, then one experiment you can do is to try swapping in the alternative.</p><ul><li>If you suspect your <code>binarySearch()</code> implementation, then substitute a simpler <code>linearSearch()</code> instead.</li><li>If you suspect <code>java.util.ArrayList</code>, swap in <code>java.util.LinkedList</code> instead.</li></ul></blockquote></li><li><p>one bug at a time</p><ul><li><p>keep a bug list</p></li><li><p>Don’t get distracted from the bug you’re working on.Keep your code changes focused on careful,controlled probes of one bug at a time.</p><p>a bug can be reproduce another bug and get into recursive debugging process which is bad cause you don’t know how those changes might affect your debugging experiments.</p><blockquote><p>because you may have a hard time popping your mental stack to return to the original bug. And don’t edit your code arbitrarily while you are debugging, because you don’t know whether those changes might affect your debugging experiments.</p></blockquote></li></ul></li><li><p>don’t fix yet: mere probe &gt; fix the hypothesized bug</p><p>fix the real problem.</p><p>你可能只是掩盖了错误而不是找到了真正的问题所在。我觉得我在db pj1遇到的就是这样。</p></li></ul><h3 id="4-重复"><a class="header-anchor" href="#4-重复">¶</a>4.重复</h3><p>重复以上步骤，如果假设正确缩小产生错误的可能区域，假设错误修改假设以适应观察。</p><ul><li><p>When to apply this method? 10-minute rule. 十分钟肉眼调试调不出来就用</p></li><li><p>Taking note during this process:</p></li></ul><blockquote><ul><li><em>Hypothesis.</em> Based on what you’ve learned so far, what’s your next hypothesis about the location or cause of the bug?</li><li><em>Experiment.</em> What are you about to try that will shed light on the hypothesis, by verifying or falsifying it?</li><li><em>Predictions.</em> What do you expect, based on your hypothesis, to be the result of the experiment?</li><li><em>Observations.</em> What actually happened when you did the experiment?</li></ul></blockquote><h3 id="修复问题"><a class="header-anchor" href="#修复问题">¶</a>修复问题</h3><p>直到你找到问题并理解导致原因时，再修改代码。</p><p>先问问题是哪种类型的：</p><ul><li>coding error<ul><li>Misspelled variable/interchanged method parameters</li></ul></li><li>design error -&gt; step back and revisit your design<ul><li>Underspecified or insufficient interface</li></ul></li></ul><p>Method：</p><ul><li><p>Look for related bugs, and newly-created ones.</p></li><li><p>Undo debugging probes.</p></li><li><p>Make a regression test</p><blockquote><p>make sure that :</p><p>(a) the bug is fixed</p><p>(b)no new bugs have been introduced</p></blockquote></li></ul><h3 id="Tips"><a class="header-anchor" href="#Tips">¶</a>Tips</h3><ul><li><p>Keep an audit trail: 当进行了很多次科学实验的循环（肉眼调试）找bug</p><p>keep a log in a text file of what you dit, in what order, and what happened as a result.</p><blockquote><ul><li>the hypothesis you are exploring now</li><li>the experiment you are trying now to test that hypothesis</li><li>what you observe as a result of the experiment:<ul><li>whether the test passed or failed this time</li><li>the program output, especially your own debugging messages</li><li>any stack traces</li></ul></li></ul></blockquote></li><li><p>check the plug</p><p>当反复迭代找问题仍然不可解时，可以怀疑是不是assumption（外置条件）错了。就像电脑无法启动怀疑插头没插电源没开没电了而不是怀疑机器或者开关坏了。比如db的autograder只支持当年的project（函数名正确）。</p><ul><li>Make sure your source code and object code are up to date.</li></ul></li><li><p>if YOU didn’t fix it, it isn’t really fixed</p><p>当你并没有明白问题为什么消失时，问题并没有真正解决而只是暂时藏了起来。尤其在并行编程出现问题的时候。</p><p>因此系统的调试帮助我们理解为什么问题被解决而不是暂时隐藏问题。这就是最初要先让问题显现的原因，你必须在问题仍没被解决是发现导致问题的原因，知道你真正理解自己在做什么。</p><blockquote><p>you want to see that your change caused the system to transition from failing to working, and understand why.</p></blockquote></li><li><p>Get a fresh view</p><p>小黄鸭测试法。解释为什么你的代码可以运行，它在做什么。</p><p>小黄鸭-&gt;知道你在做什么的同事-&gt;staff/mentor</p><ul><li>Minimizing your bug will help you make a minimal,reproducible example to throw at stackoverflow.</li></ul></li><li><p>Sleep on it. Trade latency for efficiency</p></li></ul><h3 id="总结-v2"><a class="header-anchor" href="#总结-v2">¶</a>总结</h3><blockquote><p>In this reading, we looked at how to debug systematically:</p><ul><li>reproduce the bug as a test case, and put it in your regression suite</li><li>find the bug using the scientific method:<ul><li>generate hypotheses using slicing, binary search, and delta debugging</li><li>use minimially-invasive probes, like print statements, assertions, or a debugger, to observe program behavior and test the prediction of your hypotheses</li></ul></li><li>fix the bug thoughtfully</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC concurrency</title>
      <link href="/sg/2021/10/20/SC_concurrency/"/>
      <url>/sg/2021/10/20/SC_concurrency/</url>
      
        <content type="html"><![CDATA[<h2 id="R20-concurrency"><a class="header-anchor" href="#R20-concurrency">¶</a>R20: concurrency</h2><p>I’ve studied parallelism before however the implementation of locks remains unsolved. The goal of this reading is supposed to deepen the understanding and the process of coding.</p><h3 id="two-models-for-concurrent-programming"><a class="header-anchor" href="#two-models-for-concurrent-programming">¶</a>two models for concurrent programming</h3><p>Hand-written notes</p><h3 id="basic-concepts"><a class="header-anchor" href="#basic-concepts">¶</a>basic concepts</h3><p><strong>Process</strong></p><blockquote><p>A process is an instance of a running program that is <em>isolated</em> from other processes on the same machine. In particular, it has its own private section of the machine’s memory.</p></blockquote><ul><li>The process abstraction is a <em>virtual computer</em>.</li></ul><p><strong>Thread</strong></p><blockquote><p>A thread is a locus of control inside a running program. Think of it as a place in the program that is being run, plus the stack of method calls that led to that place (so the thread can go back up the stack when it reaches <code>return</code> statements).</p></blockquote><ul><li>the thread abstraction represents a <em>virtual processor</em></li></ul><p><strong>Time slicing</strong></p><ul><li>the processor switches between threads when there are more threads than processors</li></ul><h3 id="starting-a-thread-with-an-anonymous-class"><a class="header-anchor" href="#starting-a-thread-with-an-anonymous-class">¶</a>starting a thread with an anonymous class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from a thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//named class</span></span><br><span class="line"><span class="comment">/** A comparison function that imposes a total ordering on some objects.</span></span><br><span class="line"><span class="comment"> *  ... */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** Compares its two arguments for order.</span></span><br><span class="line"><span class="comment">     *  ...</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@return</span> a negative integer, zero, or a positive integer if the first</span></span><br><span class="line"><span class="comment">     *          argument is less than, equal to, or greater than the second */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Orders Strings by length (shorter first) and then lexicographically. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringLengthComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() == s2.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;alice&quot;, &quot;bob&quot;, &quot;yolanda&quot;, &quot;zach&quot; &#125;</span></span><br><span class="line">With a Comparator:</span><br><span class="line"></span><br><span class="line"><span class="comment">// uses StringLengthComparator declared above</span></span><br><span class="line">Comparator&lt;String&gt; compareByLength = <span class="keyword">new</span> StringLengthComparator();</span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;(compareByLength);</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;bob&quot;, &quot;zach&quot;, &quot;alice&quot;, &quot;yolanda&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uses StringLengthComparator declared above</span></span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> StringLengthComparator());</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;bob&quot;, &quot;zach&quot;, &quot;alice&quot;, &quot;yolanda&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// no StringLengthComparator class!</span></span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() == s2.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;bob&quot;, &quot;zach&quot;, &quot;alice&quot;, &quot;yolanda&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>advantage: one-off implementations</p><p>Disadvantage: a named class is good for needing more than once.</p><p>Never call run() on a thread, or on a runnable that you created for a thread, which uses the same thread.</p><p>Instead, make a new Thread() with an instance of your Runnable, and call start() on the thread to start it.</p><p>junit: test fails if an exception is thrown and not caught by the test code itself.</p><h3 id="Shared-memory-example"><a class="header-anchor" href="#Shared-memory-example">¶</a>Shared memory example</h3><p>Race condition: the correctness of the program depends on the relative timing of events in concurrent computations A and B. “A is in a race with B.”</p><p>It can’t be told what the atomic operations(the individual steps of the computation) will be.</p><p>System.exit(): main() may return while its threads are still running. Use exit to force the process to exit.</p><h3 id="Message-passing-example"><a class="header-anchor" href="#Message-passing-example">¶</a>Message passing example</h3><p>Interleaving of the messages sent to the bank account.</p><h3 id="concurrency-is-hard-to-debug"><a class="header-anchor" href="#concurrency-is-hard-to-debug">¶</a>concurrency is hard to debug</h3><p>问题可能存在于多个程序，os？网络？cpu?</p><p>问题很难再现，想想吧，相同的问题位置，出错的地方确不同或者不会发生。</p><p>并且print-debug失效，因为它们相比于运行的程序的操作要慢100倍～1000倍。当使用print时，足够的时间改变操作的时间。</p><p>Nondeterministic behavior causation?</p><h2 id="R21-22-thread-safety"><a class="header-anchor" href="#R21-22-thread-safety">¶</a>R21&amp;22: thread safety</h2><h3 id="what-is-threadsafe"><a class="header-anchor" href="#what-is-threadsafe">¶</a>what is threadsafe?</h3><blockquote><p>if it behaves correctly when used from multiple threads, regardless of how those threads are executed, and without demanding additional coordination from the calling code.</p><ul><li>“Behaves correctly” means satisfying its specification and preserving its rep invariant.</li><li>“Regardless of how threads are executed” means threads might be on multiple processors or timesliced on the same processor.</li><li>And “without additional coordination” means that the data type can’t put preconditions on its caller related to timing, like “you can’t call <code>get()</code> while <code>set()</code> is in progress.”</li></ul></blockquote><h3 id="how-to-make-a-safety-argument"><a class="header-anchor" href="#how-to-make-a-safety-argument">¶</a>how to make a safety argument?</h3><p>how to make code safe in concurrent programming?</p><p>Don’t share data between threads (by confinement, immutability, threadsafe data types).</p><p>The difficult one is how to implement a threadsafe type.</p><h3 id="Strategy1-confinement"><a class="header-anchor" href="#Strategy1-confinement">¶</a>Strategy1: confinement</h3><p>idea: Avoid races on reassignable references and mutable data by keeping those confined to a single thread.</p><p>Shared mutable state is the root cause of a race condition.</p><p>don’t use global variables: static variables are accessible to all threads therefore can be changed. While local variables are confined to single thread.</p><h3 id="Strategy2-immutability"><a class="header-anchor" href="#Strategy2-immutability">¶</a>Strategy2: immutability</h3><p>keep the data immutable and variables unreassignable.</p><blockquote><p>Threadsafe immutability:</p><ul><li>no mutator methods</li><li>all fields declared <code>private</code> and <code>final</code></li><li>no <a href="https://web.mit.edu/6.031/www/sp21/classes/11-abstraction-functions-rep-invariants/#invariants">representation exposure</a></li><li>no mutation whatsoever of mutable objects in the rep – not even <a href="https://web.mit.edu/6.031/www/sp21/classes/11-abstraction-functions-rep-invariants/#beneficent_mutation">beneficent mutation</a></li></ul></blockquote><h3 id="Strategy3-using-threadsafe-data-types"><a class="header-anchor" href="#Strategy3-using-threadsafe-data-types">¶</a>Strategy3:using threadsafe data types</h3><p>Store shared data in existing threadsafe data types.</p><p>threadsafe collections:</p><p>wrapper methods that make collections threadsafe while still mutable</p><p>Notice:</p><ul><li>don’t circumvent the wrapper</li><li>Iterators are still not threadsafe<ul><li>Solution: collections’ lock</li></ul></li><li>Atomic operations aren’t enough to prevent races</li></ul><h3 id="Strategy4-synchronization"><a class="header-anchor" href="#Strategy4-synchronization">¶</a>Strategy4: synchronization</h3><p><u>The correctness of a concurrrent program should not depend on accidents of timing.</u></p><p>Problem: bugs in concurrent programming</p><blockquote><p>steps to develop the datatype:</p><ol><li><p>Specify: define operations</p></li><li><p>test</p></li><li><p>rep</p><p>a. Implement a simple, brute-force rep first</p><p>b. write down the rep invariant and abstraction function, and implement checkRep()</p></li><li><p>Synchronize</p></li><li><p>Iterate</p></li></ol></blockquote><h2 id="R23-queues-message-passing"><a class="header-anchor" href="#R23-queues-message-passing">¶</a>R23: queues &amp; message-passing</h2><p>主要用java讲了个queue&amp;message-passing的例子。内容：</p><ol><li>与shared memory system对比，message-passing使两个thread间有独立性，出错的概率更小。</li><li>blocking queues pattern，其实和6.004中sophomore的例子相似，加上了一些java语法的细节</li><li>实例： 放在冰箱里有一些饮料，一些人需要拿饮料。(代码在本地文件夹中)</li></ol><p>相当于6.004的sychronization另外的一个例子。</p><h3 id="producer-consumer-design-pattern"><a class="header-anchor" href="#producer-consumer-design-pattern">¶</a>producer-consumer design pattern</h3><p>problem: how to implement message passing with in single process?</p><p>Design: producer-consumer design pattern</p><p>Problem: how to stop the process?</p><p>Approach1: a <em>poison pill</em>: a special message on the queue that signals the consumer of that message to end its work.</p><p>Approach2: change the type of elements on the requests queue to an ADT:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FridgeRequest = DrinkRequest(n:int) + StopRequest</span><br></pre></td></tr></table></figure><p>with operations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drinksRequested : FridgeRequest → int</span><br><span class="line">shouldStop : FridgeRequest → boolean</span><br></pre></td></tr></table></figure><p>and when we want to stop the fridge, we enqueue a <code>FridgeRequest</code> where <code>shouldStop</code> returns <code>true</code>.</p><p>Approach3:signal a thread that it should stop working by calling that thread’s <a href="http://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Thread.html#interrupt()"><code>interrupt()</code></a> method</p><h3 id="race-conditions"><a class="header-anchor" href="#race-conditions">¶</a>race conditions</h3><p>prevent deadlock:</p><ol><li><p>design the system so that there is no possibility of a cycle — so that if A is waiting for B, it cannot be that B was already (or will start) waiting for A.</p></li><li><p><em>timeouts</em>：If a module has been blocked for too long (maybe 100 milliseconds? or 10 seconds? how to decide?), then you stop blocking and throw an exception.</p><p>problem: what do you do when that exception is thrown?</p></li></ol><h2 id="R24-sockets-networking"><a class="header-anchor" href="#R24-sockets-networking">¶</a>R24: sockets &amp; networking</h2><p>compared to producer-consumer pattern, client-server pattern abstracts the communication over the network using the sockets.</p><h3 id="Client-server-design-pattern"><a class="header-anchor" href="#Client-server-design-pattern">¶</a>Client/server design pattern</h3><blockquote><p>In this pattern there are two kinds of processes: clients and servers. A client initiates the communication by connecting to a server. The client sends requests to the server, and the server sends replies back. Finally, the client disconnects. A server might handle connections from many clients concurrently, and clients might also connect to multiple servers.</p></blockquote><h3 id="sockets-and-streams"><a class="header-anchor" href="#sockets-and-streams">¶</a>sockets and streams</h3><p>Basic concepts related to network communication, and to input/output. (I/O refers to communication into and out of a process.)</p><ul><li><p>IP addresses</p></li><li><p>Hostnames</p></li><li><p>Port numbers</p></li></ul><h4 id="Network-sockets"><a class="header-anchor" href="#Network-sockets">¶</a>&gt; Network sockets</h4><p>A <a href="http://en.wikipedia.org/wiki/Network_socket"><strong>socket</strong></a> represents one end of the connection between client and server.</p><ul><li>listening socket：used by a server process to wait for connections from remote clients.</li><li>connected socket：send and receive messages to and from the process on the other end of the connection.</li></ul><p><strong>Physical-socket analogy</strong></p><ul><li><p>用户和服务器的连接过程就像将USB线插入接口一样，没插入前的接口是listening socket，插入接口的线和接口是connected socket。正如一条线有两个终端，连接的socket也有两个终端分别在用户端和服务器端。</p></li><li><p>细节上的区别：在实际的socket连接中，当用户请求被listening socket接收，服务器重新产生一个新的connected socket来管理连接，而保留着listening socker继续接受用户请求。</p></li></ul><h4 id="streams"><a class="header-anchor" href="#streams">¶</a>&gt; streams</h4><ul><li>buffers</li><li>Byte streams</li><li>character streams</li><li>Blocking</li></ul><h4 id="wire-protocols"><a class="header-anchor" href="#wire-protocols">¶</a>&gt; wire protocols</h4><blockquote><p>A <strong>protocol</strong> is a set of messages that can be exchanged by two communicating parties.</p><p>A <strong>wire protocol</strong> in particular is a set of messages represented as byte sequences, like <code>hello world</code> and <code>bye</code> (assuming we’ve agreed on a way to encode those characters into bytes).</p></blockquote><ul><li><p>Telnet client</p></li><li><p>http</p></li><li><p>smtp</p></li></ul><p><strong>Design a wire protocol</strong></p><p>use same <a href="http://web.mit.edu/6.031/www/sp21/classes/24-sockets-networking/#designing_a_wire_protocol">strategy</a> as designing ADT</p><h3 id="Using-network-sockets-in-Java"><a class="header-anchor" href="#Using-network-sockets-in-Java">¶</a>Using network sockets in Java</h3><ul><li>client</li><li>server</li><li>multithreaded server</li><li>Closing streams and sockets with <u>try-with-resources statement</u></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="comment">// preamble: declare variables initialized to objects that need closing after use</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// body: runs with those variables in scope</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(...) &#123;</span><br><span class="line">    <span class="comment">// catch clauses: optional, handles exceptions thrown by the preamble or body</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// finally clause: optional, runs after the body and any catch clause</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// no matter how the try statement exits, it automatically calls</span></span><br><span class="line"><span class="comment">// close() on all variables declared in the preamble</span></span><br></pre></td></tr></table></figure><p><strong>testing</strong></p><p><a href="http://web.mit.edu/6.031/www/sp21/classes/24-sockets-networking/#testing_clientserver_code">Example</a></p>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>db memory management</title>
      <link href="/sg/2021/10/19/db_memory_management/"/>
      <url>/sg/2021/10/19/db_memory_management/</url>
      
        <content type="html"><![CDATA[<p>storage: Goal:</p><p>Provide an illusion that it has sufficient memory, avoid large stalls due to expensive disk access, maximize sequential access due to principle of locality.</p><p>Problem: why not use the os for moving the files’ pages in and out of memory?</p><p>Answer: OS doesn’t care about what the file is while DBMS sees the difference of queries.<img src="/sg/2021/10/19/db_memory_management/Screenshot-7504622.png" class="" title="Screenshot-7504622"></p><h2 id="Disk-manager"><a class="header-anchor" href="#Disk-manager">¶</a>Disk manager</h2><p><u>Problem: how the DBMS represents the database in files on disk?</u></p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7504676.png" class="" title="Screenshot-7504676"><h3 id="Where-to-store-data"><a class="header-anchor" href="#Where-to-store-data">¶</a>Where to store data?</h3><p>Fixed-size db pages.</p><blockquote><p>Storage manager: organize files as a collection of pages.</p><ul><li>represents the files as a collection of pages.</li><li>keeps track: data read/written to pages, available space</li></ul></blockquote><ul><li>hardware page</li></ul><p>Fact:The storage device guarantees an atomic write of the size of the hardware page.</p><p>A hardware page is the largest block of data that the storage device can guarantee failsafe writes.  If our database page is larger than our hardware page, the DBMS will have to take extra measures to ensure that the data gets written out safely since the program can get partway through writing a database<br>page to disk when the system crashes.</p><ul><li>Database heap: random pages collection.</li></ul><p>Problem: how to locate a page on disk given page_id?</p><ol><li><p>Linked list: sequenctial scan</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7504738.png" class="" title="Screenshot-7504738"></li><li><p>Page directory: translation</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7504759.png" class="" title="Screenshot-7504759"></li></ol><h3 id="how-to-organize-the-data-inside-of-the-page"><a class="header-anchor" href="#how-to-organize-the-data-inside-of-the-page">¶</a>how to organize the data inside of the page?</h3><ol><li><p>Slotted-pages</p><p>Header + slot array + tuples</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7504840.png" class="" title="Screenshot-7504840"><blockquote><p>To add a tuple, the slot array will grow from the beginning to the end, and the data of the tuples will grow from end to the beginning. The page is considered full when the slot array and the tuple data meet.</p></blockquote></li><li><p>Log-structured</p><p>Log records: fast writes, slow reads.</p><ul><li><p>Optimizations:</p><ul><li><p>build index</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7504932.png" class="" title="Screenshot-7504932"></li><li><p>Compact the log</p><p>Concerns: write amplification</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7505078.png" class="" title="Screenshot-7505078"></li></ul></li></ul></li></ol><h3 id="what-is-the-data"><a class="header-anchor" href="#what-is-the-data">¶</a>what is the data?</h3><p>System catalog tracks the schema.</p><h4 id="tuple-layout"><a class="header-anchor" href="#tuple-layout">¶</a>&gt; tuple layout</h4><p>header:Meta-data about the tuple + data + unique identifier(page_id + (offset/slot))</p><p>Denormalize tuple data: when two tables are related,  they can be pre-joined and it results in one table under the cost of update while it makes reads faster.</p><h4 id="data-representations"><a class="header-anchor" href="#data-representations">¶</a>&gt; data representations</h4><p>The data in a tuple is essentially just byte arrays. It is up to the DBMS to know how to interpret those bytes to derive the values for attributes. A data representation scheme is how a DBMS stores the bytes for a value.</p><p>Five high level datatypes in tuples:</p><ol><li><p>Integer</p><ul><li>Examples: INTEGER, BIGINT, SMALLINT, TINYINT</li></ul></li><li><p>variable precision numbers</p><p>upside: Operations on variable precision numbers are faster than arbitrary precision numbers.</p><p>downside:rounding errors</p><ul><li>Examples: FLOAT, REAL</li></ul></li><li><p>Fixed-point precision numbers</p><p>Upside:precise</p><p>Downside: slow</p><ul><li>Examples: NUMERIC, DECIMAL</li></ul></li><li><p>Variable-length data</p><p>problem: large values exceeding the page</p><p>Solution:</p><p>​1.use separate overflow storage pages</p><p>​2.store data in external files, downside:DBMS lose control of this file</p><ul><li>Examples: VARCHAR, VARBINARY, TEXT, BLOB.</li></ul></li><li><p>Dates and times</p><p>Examples: TIME, DATE, TIMESTAMP</p></li></ol><h3 id="workloads-types"><a class="header-anchor" href="#workloads-types">¶</a>workloads types</h3><p>workloads: general nature of requests a system will have to handle.</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7505252.png" class="" title="Screenshot-7505252"><ol><li><p>OLTP:online transaction processing: simple queries; more writes than reads</p></li><li><p>OLAP:online analytical processing: complex queries; more reads than writes</p></li><li><p>HTAP: hybrid transaction + analytical processing</p></li></ol><h3 id="data-storage-models"><a class="header-anchor" href="#data-storage-models">¶</a>data storage models</h3><p>assume n-ary storage model in class.</p><ol><li><p>N-ary storage model(NSM): stores all attributes for a single tuple<br>contiguously in a page -&gt; row store</p><ul><li>pro: scanning the entire tuple</li><li>con: not good for scanning large portions of the table/a subset of the attributes</li></ul><img src="/sg/2021/10/19/db_memory_management/Screenshot-7505628.png" class="" title="Screenshot-7505628"></li><li><p>decomposition storage model(DSM): stores the values of a single attribute for all tuples contiguously in a page -&gt; column store</p><ul><li>pro: scan portiosn of the table; query processing; data compression</li><li>con: because of tuple splitting/stitching, slow for point queries, inserts, updates, deletes</li></ul><img src="/sg/2021/10/19/db_memory_management/Screenshot-7505878.png" class="" title="Screenshot-7505878"><ul><li><p>tuple indentification: put the tuples back together when using a column store</p><ul><li><p>Fixed-length offsets</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7506226.png" class="" title="Screenshot-7506226"></li><li><p>Embedded tuple ids</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7506243.png" class="" title="Screenshot-7506243"></li></ul></li></ul></li></ol><h2 id="buffer-pool-manager"><a class="header-anchor" href="#buffer-pool-manager">¶</a>buffer pool manager</h2><p><u>Problem: how the DBMS manages its memory and move data back-and-forth from disk?</u></p><p>Two goals of db storage is spatial control and temporal control.</p><ul><li>keep pages that are used together often as physically close together as possible on disk.</li><li>minimize the number of stalls from having to read data from disk.</li></ul><h3 id="What-is-buffer-pool"><a class="header-anchor" href="#What-is-buffer-pool">¶</a>What is buffer pool?</h3><p>The buffer pool is an in-memory cache of pages read from disk. It is essentially a large memory region allocated inside of the database to store pages that are fetched from disk.</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7506613.png" class="" title="Screenshot-7506613"><ol><li><p>memory organization.</p><p>Buffer pool’s region of memory organized as an array of fixed size pages. Each entry is a frame.</p></li><li><p>Meta-data</p><ul><li><p>page table: an in-memory hash table that keeps track of pages that are currently in memory.</p><p>(Key:frame location , value: page id)</p></li><li><p>Dirty-flag: set by a thread whenever it modifies a page.</p><ul><li>Indicate: the page must be written back to disk</li></ul></li><li><p>Pin/reference counter</p><ul><li>tracks the number of threads that are currently accessing that page (either reading or modi-<br>fying it).</li><li>if count &gt; 0, then evicting that page from mem is not allowed.</li></ul></li></ul></li><li><p>allocation policies</p><ul><li>global view: best in all transactions</li><li>local view: make a single query/transaction run faster</li></ul></li></ol><h3 id="buffer-pool-optimizations"><a class="header-anchor" href="#buffer-pool-optimizations">¶</a>buffer pool optimizations</h3><ol><li><p>multiple buffer pools</p><ul><li><p>approach 1: Object ID: mapping from objects to specific buffer pools</p><p>&lt;objectID, pageID, slotNum&gt;</p></li><li><p>approach 2: Hashing: Hash the page id to select which buffer pool to access.</p></li></ul></li><li><p>Pre-fetching: prefetched the following pages based on the query plan.</p><ul><li><p>Scenario: accessing many pages sequentially</p></li><li><p>approach 1: sequential scans</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7506974.png" class="" title="Screenshot-7506974"></li><li><p>approach 2: index scans</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7507037.png" class="" title="Screenshot-7507037"></li></ul></li><li><p>Scan-sharing: scanning the same data</p><p>Q2 will attach to Q1 and keep scanning as Q1 moves. When Q1 stops, Q2 continues to scan until meet the attaching point.</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7507190.png" class="" title="Screenshot-7507190"></li><li><p>Buffer pool bypass: access pages in disk directly</p><ul><li>pro: fetch a large sequence of pages that are contiguous on disk; knows as light scans</li></ul></li></ol><h3 id="os-page-cache"><a class="header-anchor" href="#os-page-cache">¶</a>os page cache</h3><p>another way to access data</p><p>os maintains its own file system cache.</p><h3 id="Buffer-Replacement-Policies"><a class="header-anchor" href="#Buffer-Replacement-Policies">¶</a>Buffer Replacement Policies</h3><p>Problem: When the DBMS needs to free up a frame to make room for a new page, it must decide which page to evict from the buffer pool.</p><ol><li><p>LRU: least-recently used</p></li><li><p>CLOCK: use reference bit in each page instead of timestamps in LRU</p><img src="/sg/2021/10/19/db_memory_management/Screenshot-7507995.png" class="" title="Screenshot-7507995"></li></ol><p>Con: susceptible to sequential flooding. Buffer pool’s content are corrupted due to a sequential scan</p><p>Approaches:</p><ol><li>LRU-K: tracks the last K references as timestamps</li><li>localization per query: evict on a per transaction/query basis.</li><li>Priority hints: based on the context of each page during query execution</li></ol><h3 id="dirty-pages"><a class="header-anchor" href="#dirty-pages">¶</a>dirty pages</h3><p>Approaches:</p><ol><li>Fast evictions: drop dirty pages</li><li>Slow evictions: write back</li><li>background writing: the DBMS can periodically walk through the page table and write dirty pages to disk. When a dirty page is safely written, the DBMS can either evict the page or just unset the dirty flag</li></ol><h3 id="other-memory-pool"><a class="header-anchor" href="#other-memory-pool">¶</a>other memory pool</h3><ol><li>Sorting + join buffers</li><li>query caches</li><li>maintenance buffers</li><li>log buffers</li><li>Dictionary caches</li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-445 database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 15-445 database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sicp</title>
      <link href="/sg/2021/10/03/sicp/"/>
      <url>/sg/2021/10/03/sicp/</url>
      
        <content type="html"><![CDATA[<h3 id="procedures-as-building-blocks"><a class="header-anchor" href="#procedures-as-building-blocks">¶</a>procedures as building blocks</h3><ul><li><p>Primitives: numbers, strings, booleans</p></li><li><p>Built-in procedures, value, primitives</p></li><li><p>Lambda: the value of a lambda expression is a procedure.</p></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">*</span></span> x x))</span><br><span class="line"><span class="comment">;(lambda (parameter list) (body))</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> sth toSth)</span><br></pre></td></tr></table></figure><ul><li>Modularity</li><li>controlling the process:</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;(if predicate consequent alternative)</span></span><br></pre></td></tr></table></figure><ul><li>Test<ul><li>rules for evaluation : sustitution model</li></ul></li></ul><h3 id="recursion"><a class="header-anchor" href="#recursion">¶</a>recursion</h3><ul><li><p>Recursion vs. iteration</p><p>pending operations?</p><ul><li>Recurse: reduce problems to smaller subproblems</li><li>Iterative: constant space, based on the form of data<ul><li>需要一个范围，起点是什么，终点是什么</li></ul></li></ul></li></ul><h3 id="procedural-abstraction"><a class="header-anchor" href="#procedural-abstraction">¶</a>procedural abstraction</h3><ul><li>Type of a procedure is a contract: 输入和输出的类型是确定的，如果输出不是此类型，那么：the behavior is undefined</li><li>patterns across procedures</li><li>Higher-order procedures take a <u>procedure</u> as a argument, or <u>return</u> one as a value</li><li>一个方程可以合在一起写，也可以分开写。</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;argument&quot;</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> a b)</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="builtin-name">+</span></span> (<span class="name">term</span> a) (<span class="name">sum</span> term (<span class="name">next</span> a) next b))))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">new-sum-integers</span> a b)</span><br><span class="line">  (<span class="name">sum</span> (<span class="name"><span class="builtin-name">lambda</span></span> (x) x) a (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">+</span></span> x <span class="number">1</span>) b))</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;return procedures&quot;</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> incrementby (<span class="name"><span class="builtin-name">lambda</span></span> (n) ...))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> add1 (<span class="name">incrementby</span> <span class="number">1</span>)) <span class="comment">;;type: number -&gt; (number -&gt; number)</span></span><br></pre></td></tr></table></figure><h3 id="Data-abstraction"><a class="header-anchor" href="#Data-abstraction">¶</a>Data abstraction</h3><ul><li>types</li><li>Compound data<ul><li>a way of gluing data together</li><li>a way of getting the pieces back out</li><li>a contract between glue and unglue</li><li>Property: closure: treated as a primitive object</li></ul></li><li>Cons and friends<ul><li>Pairs (cons cell)<ul><li>a data abstraction</li></ul></li><li>abstractions have two communities: builders and users<ul><li><u>Constructor + accessors + contract + operations</u></li><li>----- abstraction barrier-----</li><li>Implementation</li></ul></li></ul></li><li>ex: rational number -&gt; list -&gt; map<ul><li>scheme list is a linked list</li></ul></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">cons</span></span> &lt;a&gt; &lt;b&gt;) -&gt; &lt;p&gt; <span class="comment">;;cons:construct</span></span><br><span class="line">(<span class="name"><span class="builtin-name">car</span></span> &lt;p&gt;) -&gt; &lt;a-val&gt;</span><br><span class="line">(<span class="name"><span class="builtin-name">cdr</span></span> &lt;p&gt;) -&gt; &lt;b-val&gt;</span><br></pre></td></tr></table></figure><h3 id="Symbols"><a class="header-anchor" href="#Symbols">¶</a>Symbols</h3><ul><li>Data types in scheme<ul><li>Conventional: numbers, characters and strings, booleans, vectors</li><li>Scheme- specific<ul><li>procedures</li><li>pairs and lists</li><li>Symbols</li></ul></li></ul></li><li>All data types are first class (scheme)<ul><li>Symbols -&gt; procedures -&gt; value of procedures -&gt; store in data structures</li></ul></li><li>referring to symbols: quote<ul><li>Object or expression to be evaluated</li></ul></li><li>operations<ul><li><u>symbol?</u> has type anytype -&gt; boolean: (symbol? 'foo) -&gt; #t</li><li>eq? tests the equality of symbols</li></ul></li><li>tagged data<ul><li>benefits<ul><li>Data-directed programming:</li><li>defensive programming</li></ul></li></ul></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">make-point</span> x y)</span><br><span class="line">  (<span class="name"><span class="builtin-name">list</span></span> <span class="symbol">&#x27;point</span> x y))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">point?</span> thing)</span><br><span class="line">  (<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">pair?</span></span> thing)</span><br><span class="line">       (<span class="name"><span class="builtin-name">eq?</span></span> (<span class="name"><span class="builtin-name">car</span></span> thing) <span class="symbol">&#x27;point</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name"><span class="builtin-name">...</span></span>)</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name">point?</span> thing)</span><br><span class="line">      (<span class="name">....</span>)</span><br><span class="line">      (<span class="name">.....</span>))</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">not</span></span> (<span class="name">point?</span> pt)) <span class="comment">;;非需要的类型，更好地说明错误在哪</span></span><br><span class="line">      .....))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mutation-and-the-environment-model"><a class="header-anchor" href="#mutation-and-the-environment-model">¶</a>mutation and the environment model</h3><h4 id="Data-mutation"><a class="header-anchor" href="#Data-mutation">¶</a>Data mutation</h4><ul><li><p>Mutators</p><ul><li>mutate 指的是改变pointer指向的对象。不只是substitution model。</li><li>Enable new and efficient data structures</li></ul></li><li><p>syntax: Expression sequences</p><ul><li>Begin: do sth and then return a value</li><li>Lambda,let, cond accept sequence</li><li>mutating compound data<ul><li>Only side-effect: type is changed to undef</li></ul></li></ul></li><li><p>Semantics: related to environment model</p></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;primitive data&quot;</span></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> x <span class="number">1</span>)</span><br><span class="line">(<span class="name"><span class="builtin-name">set!</span></span> x <span class="number">2</span>) <span class="comment">;;mutate, for names; set-car!, set-cdr! for pairs.</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">begin</span></span> </span><br><span class="line"> (<span class="name"><span class="builtin-name">set!</span></span> x <span class="number">2</span>)</span><br><span class="line"> (<span class="name"><span class="builtin-name">set!</span></span> y <span class="number">3</span>)</span><br><span class="line"> <span class="number">4</span>)</span><br></pre></td></tr></table></figure><ul><li><p>Sharing, equivalence, and identity</p><ul><li>Same object: eq?</li><li>Look the same: equal?</li></ul></li><li><p>functional programming vs imperative programming</p><ul><li>函数式编程：计算函数，no assignments, easy to understand(代入求解都不会么？)</li><li>命令式编程：relies heavily on assignment, introduce new classes of bugs<ul><li>be able to modify local state</li></ul></li></ul></li><li><p>queue implementation</p><ul><li>Simple -&gt; better(attach a type tag to maintain queue identity)</li><li>单向链表到双向链表，就是语法不一样</li></ul></li></ul><h4 id="environment-model"><a class="header-anchor" href="#environment-model">¶</a>environment model</h4><p>New model of mutation for closures</p><ul><li><p>what</p><ul><li>Name-rule</li><li>define-rule</li><li>Set!-rule</li><li>Lambda-rule: creates a procedure in the same EM</li><li>application</li></ul></li><li><p>view on computation</p><ul><li>Variable, place to store things</li><li>Procedure, object with inherited context</li><li>Expressions, 不只与环境有关</li></ul></li><li><p>组成</p><ul><li>Frame: a table of bindings</li><li>Environment: a sequence of frames<ul><li>enclosing environment pointer</li></ul></li></ul></li><li><p>evalutation in the environment model</p><ul><li>Global environment</li><li>to evaluate a combination: evaluate the subexpressions in the current environment</li><li>Capture state in local frames &amp; procedures</li></ul></li><li><p>Let special form</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">let</span></span> ( (<span class="name">&lt;name1&gt;</span> &lt;expr1&gt;)</span><br><span class="line"> (<span class="name">&lt;name2&gt;&lt;expr2&gt;</span>)...) </span><br><span class="line">&lt;body&gt;) <span class="comment">;;body are evaluated in the new frame generated from current frame; hidden lambda</span></span><br><span class="line"></span><br><span class="line">Ex: (<span class="name"><span class="builtin-name">let</span></span> ((<span class="name">z</span> (<span class="name"><span class="builtin-name">/</span></span> (<span class="name"><span class="builtin-name">-</span></span> x2 x1) num-steps)))</span><br><span class="line">(<span class="name">square</span> z))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> make-counter</span><br><span class="line">  (<span class="name"><span class="builtin-name">lambda</span></span> (n)</span><br><span class="line">    (<span class="name"><span class="builtin-name">lambda</span></span> () (<span class="name"><span class="builtin-name">set!</span></span> n (<span class="name"><span class="builtin-name">+</span></span> n <span class="number">1</span>))</span><br><span class="line">      n</span><br><span class="line">      )))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Lambda captures the frame, which can be used to store local state.</p></li><li><p>people make rules to allow computer following, not themselves. (没想到是这样的EM)</p></li></ul><h3 id="interpretation-and-evaluation"><a class="header-anchor" href="#interpretation-and-evaluation">¶</a>interpretation and evaluation</h3><h4 id="interpretation-and-interpreter"><a class="header-anchor" href="#interpretation-and-interpreter">¶</a>interpretation and interpreter</h4><ul><li>interpreter<ul><li>lexical analyzer: break up input str into words called tokens</li><li>parser: convert to a tree</li><li>evaluator<ul><li>Convert tree to a value</li><li>read and modify the environment</li></ul></li><li>Printer</li></ul></li></ul><h3 id="debugging"><a class="header-anchor" href="#debugging">¶</a>debugging</h3><h3 id="Language-design-and-implementation"><a class="header-anchor" href="#Language-design-and-implementation">¶</a>Language design and implementation</h3><h3 id="Continuations-lazy-evaluation-and-streams"><a class="header-anchor" href="#Continuations-lazy-evaluation-and-streams">¶</a>Continuations, lazy evaluation, and streams</h3><h3 id="Concurrency-garbage-collection-6-001-in-perspective-and-the-Lambda-Calculus"><a class="header-anchor" href="#Concurrency-garbage-collection-6-001-in-perspective-and-the-Lambda-Calculus">¶</a>Concurrency, garbage collection, 6.001 in perspective, and the Lambda Calculus</h3>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
          <category> 6.037 crash sicp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.037 crash sicp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苏妈某演讲</title>
      <link href="/sg/2021/10/03/speechofsu/"/>
      <url>/sg/2021/10/03/speechofsu/</url>
      
        <content type="html"><![CDATA[<p>Good morning. Thank you for the opportunity to be here today. It’s really such an honor for me to be back at MIT and to really participate in today’s hooding ceremony. And I have to say a big, hearty congratulations to all of you who are graduating this week. I know just how hard you’ve worked for this achievement, and it’s an honor to be here to recognize you today. And also, to all of the friends and family who have supported our graduates this week, congratulations to you as well. Everyone here should feel extremely proud of this amazing accomplishment.</p><p>Now I heard a very insightful comment once that really stuck with me. And it was really that the two most important things that determines a person’s success in life is really the love of their family and their education. And I certainly believe that. As I think back to my days at MIT, I am incredibly grateful for the experiences that I had here and the things that I learned. And if you will indulge me for a few minutes, let me tell you a little bit about my story. So I was born in Taiwan, and I came to the United States when I was two, and I grew up in New York to immigrant parents. I was very lucky to have parents that supported me as I grew up, and really treating my brother and I as equals and <strong>setting extremely high standards for what success meant.</strong></p><p>Throughout grade school and middle school, I was an OK student, but I certainly wasn’t anywhere near best in my class. I did realize, though, that competition made me better. So in high school I went to the Bronx High School of Science, and I met some very smart people, and some of them were pretty competitive. And that pushed me harder and shaped my interests in math and science. Then I was lucky enough to get into MIT as an undergrad, and I truly understood what smart was. I think you guys understand that, too. Freshman year at MIT was actually very eye opening. And I would say it was pretty intimidating taking some of those freshmen weed out classes that we know exist at the Institute.</p><p>However, it was during my freshman year at MIT that I got my first undergraduate research assignment, and it was in a semiconductor lab. And I had the opportunity for the first time to do something that I thought was amazing. I fell in love with semiconductors because it was the ability to build something really small and really complicated, and I could do it myself. And it was during this time that I realized that I didn’t need to be the smartest person in the classroom, but if I really applied myself to solve practical problems, I could make a big difference. And so as I was graduating from the 6-A program at MIT, my parents encouraged me to get a PhD. I actually really wasn’t sure that this is what I wanted to do, but I was really too young you know at the time to know any better, so I said-- some of you might relate to that-- but I said, OK, you know, I’ll do it. But I was really torn with the prospect of spending another four to five years of my life in school.</p><p>Now I can honestly say that the MIT PhD has truly shaped who I am in so many ways, both personally and professionally. And so when people ask me what has MIT meant to me, I usually say a couple of things. I say MIT is pure, and it’s really hard. I do believe that MIT practices the motto what doesn’t kill you makes you stronger. Hope you guys agree with that. But what I really say, though, is that MIT taught me how to think and solve really tough problems because today, for all of you who are completing your doctoral dissertations, you have created something or discovered something or demonstrated something that nobody else in the world has. And that should give you an incredible amount of confidence about what you’re able to do when you put your mind to it. And through that you’ve really proven that you’re at the top of your field, and so you should feel extremely proud of that accomplishment.</p><p>So my path since leaving MIT has had a few twists and turns, and I find myself often coming back to the principles that I learned here. So as each of you sit here today, about to embark on your own journey, I have maybe just a couple of small pieces of advice that I would like to share with you.</p><p>The first-- and I’ll say this is, you should really <strong>dream big</strong>. Believe that you can change the world. I remember when I first left MIT,I was really intimidated about joining a large corporate environment I was 25 years old and I joined IBM’s TJ Watson Research Center, which had an incredible reputation. And I met people who had a lot more experience and knowledge than I had. And I had no idea how could I contribute in that environment and make a difference. However, what I learned is that MIT has really prepared you for that journey. MIT trains the best problem solvers in the world, and the world is starving for new ideas and great leaders who will champion those ideas. So I was able to make a difference even after a few short months, and each of you will make an incredible difference as well. You are the next generation of great leaders with fresh, innovative ideas, and you will solve the world’s toughest problems. You just have to believe in yourself and give yourself the permission to believe that you can change the world.</p><p>Second, I would say have the courage to <strong>take risks</strong>, sometimes big risks. But make sure you also enthusiastically learn from your mistakes. And there will be a few mistakes. I started off as an engineer and then turned to the business and management side of things in my career. And I saw, actually, in many business environments, that MIT PhDs worked for Harvard MBAs. And the truth is, that made absolutely no sense to me.[appLAUSE]I was determined to make sure that I wasn’t working for Harvard MBAs for the rest of my career. But truthfully, I actually thought I could make better business decisions because I understood the technology, whereas sometimes generalists don’t.[appLAUSE]So I took a risk, and I asked my management at IBM to give me a chance to run a business. And they did actually give me a shot, surprisingly. I made a lot of mistakes those first few years, and I learned that the moments that really shaped my career were the times when I really screwed up the most. It’s like in the lab, you know, when that experiment you thought was supposed to work out didn’t quite work out, you know, what do you do? You need to learn and adjust your next steps. It’s certainly like that in your career, as well. And sometimes you even make some very large mistakes. Like for example, the first business ran, I missed my revenue the first year by 50%.My boss wasn’t very happy about that. I spent about 24 hours being extremely disappointed in myself, but the day after, I promised myself I would learn from it. And I adjusted my game plan for the rest of the year. And you can believe I never made that particular mistake again. And so I really do say, don’t be afraid to take risks, even if some of them seem large, and don’t be afraid to make a few mistakes. Mistakes are natural. There’s no straight line to success. But the people who learn best from their mistakes are actually the ones who end up being the best leaders.</p><p>And the last thing I want to leave you with is perhaps most important. I encourage each of you to <strong>make your own luck</strong>. MIT has given you all the tools and training to be the best in the world and make a huge impact on your chosen field. However, in addition to being smart, you also have to be lucky, and <strong>you have to be in the right place at the right time solving the right problems.</strong> So my favorite advice to graduates is find the toughest problems in the world and volunteer to help solve them because this is really how you make your own luck. This is when people really pay attention. And this is when you’re really doing something that makes a difference. I’ve had the opportunity several times in my career to work on some very hard problems. Sometimes I found it extremely frustrating and stressful. But each time, I found that working on something hard brought out the best in me and also my team. And it also created a new set of opportunities. So five years ago I had the opportunity to join AMD. Now when I joined AMD, there were a few of my mentors who actually questioned my decision because they knew about the challenges of the company. And I actually looked at them really perplexed. I actually felt like I could not possibly have a better opportunity because I had trained my entire career, since my days at MIT through my 20 years in industry, to lead a semiconductor company. And so this was my opportunity to make my own luck.</p><p>The world is full of very complex and challenging problems. And I truly believe that what MIT has taught us is that <strong>there is no problem that is too hard to solve if you have the right mindset, the right perseverance, and the right creativity.</strong> So I advise you to run towards those problems, and you will have great luck throughout your career. So today is a tremendous day for all of you. It really is a celebration of your MIT experience, but it’s also a celebration of the beginning of the next chapter in your career, where you start to leverage all of the tools and training you’ve received here to go off and solve the world’s hardest problems and make the world a better place. <strong>So I encourage each of you to dream big and believe you can change the world, have the courage to take risks and enthusiastically learn from those mistakes, and work damn hard every day to solve the world’s toughest problems.</strong> And I think if you do that, I’m pretty sure you’re going to make everybody very proud, and you will be incredibly lucky throughout your career. So I do have one last personal request for all of you. You know, I told you at the beginning that I’m slightly competitive, just slightly. So please promise me that you will join me on my journey to make sure that there are lots of Harvard MBAs working for MIT PhDs in the future. Thank you very much and congratulations.</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC ADT</title>
      <link href="/sg/2021/09/30/SC_ADT/"/>
      <url>/sg/2021/09/30/SC_ADT/</url>
      
        <content type="html"><![CDATA[<h2 id="R10-abstraction-data-types"><a class="header-anchor" href="#R10-abstraction-data-types">¶</a>R10: abstraction data types</h2><h3 id="access-control"><a class="header-anchor" href="#access-control">¶</a>access control</h3><p>Private(only in the same class), public, no modifiers(only in the same package), protected(only in the same parentage)</p><ul><li><p>Scope: same class, same package, subclass of other package, different class of other package</p></li><li><p>区分： instance variable vs. class name</p></li></ul><h3 id="What-abstraction-means"><a class="header-anchor" href="#What-abstraction-means">¶</a>What abstraction means</h3><ul><li>fancy words? Not that fancy.<ul><li>Abstraction/modularity/encapsulation/information hiding/separation of concerns</li></ul></li><li>User-defined types<ul><li>type is characterized by the operations you can perform on it.</li><li>abstract away from the details of data structure, memory storage, implementation</li></ul></li></ul><h3 id="classifying-types-and-operations"><a class="header-anchor" href="#classifying-types-and-operations">¶</a>classifying types and operations</h3><ul><li><p>Types: mutable / immutable</p></li><li><p>Operations:</p><ul><li>Creator, create new objects of the type. Input: values<ul><li>constructor</li><li>implemented as a static method called a factory method</li></ul></li><li>Producers. Input: existing objects</li><li>Observer</li><li>Mutators, change objects</li></ul></li></ul><h3 id="What-and-how-what-is-ADT-and-how-to-design"><a class="header-anchor" href="#What-and-how-what-is-ADT-and-how-to-design">¶</a>What and how: what is ADT and how to design</h3><ul><li>Representation</li><li>Implementation</li></ul><h3 id="representation-independence"><a class="header-anchor" href="#representation-independence">¶</a>representation independence</h3><h3 id="Testing"><a class="header-anchor" href="#Testing">¶</a>Testing</h3><h2 id="R11-abstraction-function-rep-invariants"><a class="header-anchor" href="#R11-abstraction-function-rep-invariants">¶</a>R11: abstraction function &amp; rep invariants</h2><h3 id="invariants"><a class="header-anchor" href="#invariants">¶</a>invariants</h3><p>good ADTs preserve its own invariants.</p><ul><li><p>mutable objects</p></li><li><p>public and private in access control</p></li><li><p>Immutable wrappers around mutable data types, get exception at runtime not at compile time.</p><ul><li>avoid representation exposure</li></ul></li></ul><h3 id="Rep-invariants-and-abstract-function"><a class="header-anchor" href="#Rep-invariants-and-abstract-function">¶</a>Rep invariants and abstract function</h3><p>abstract type can be divided into abstract value space and representation value space.</p><ul><li>every abstract value is mapped to by some rep value.</li><li>Some abstract values are mapped to by more than one rep value.</li><li>Not all rep values are mapped.</li></ul><ol><li>Abstract function</li></ol><blockquote><p>AF: R -&gt; A</p></blockquote><ol start="2"><li>Rep invariant</li></ol><blockquote><p>RI: R-&gt;boolean //subset of rep values on which AF is defined</p></blockquote><p>Implementations of an ADT means not only choosing the two spaces, but alse deciding which rep values are legal, and how to interpret them as abstract values.</p><h3 id="Beneficent-mutation"><a class="header-anchor" href="#Beneficent-mutation">¶</a>Beneficent mutation</h3><ul><li><p>beneficent mutation: 改变rep value, 不改变abstract value</p><p>The rep value has changed to another that still maps to the same abstract value.</p></li></ul><h3 id="Documenting-the-AF-RI-and-safety-from-rep-exposure"><a class="header-anchor" href="#Documenting-the-AF-RI-and-safety-from-rep-exposure">¶</a>Documenting the AF, RI, and safety from rep exposure</h3><ul><li>Rep exposure safety argument</li><li>What an ADT spec<ul><li>may talk about<ul><li>Things that are visible to the client: parameters, return values, exceptions thrown by its operations</li><li>Abstract values</li></ul></li><li>should not talk about<ul><li>details of the representation</li><li>AF and RI should hide within the body of the class</li></ul></li></ul></li></ul><h3 id="ADT-invariants-replace-preconditions"><a class="header-anchor" href="#ADT-invariants-replace-preconditions">¶</a>ADT invariants replace preconditions</h3><ul><li><p>Encapsulate preconditions in ADTs</p></li><li><p>How to establish invariants</p><blockquote><p>if an invariant of an ADT is</p><pre><code>1. established by creators and producers2. preserved by mutators, observers, and producers; and3. no representation exposure occurs</code></pre><p>then the invariant is true of all instances of the ADT.</p></blockquote></li></ul><h2 id="R12-defining-ADTs"><a class="header-anchor" href="#R12-defining-ADTs">¶</a>R12:defining ADTs</h2><p>Objectives:implement interfaces, generic types, enumerations and global functions operating on opaque type of ADT, determine subtyping relationship</p><h3 id="Interface"><a class="header-anchor" href="#Interface">¶</a>Interface</h3><h4 id="interfaces"><a class="header-anchor" href="#interfaces">¶</a>&gt; interfaces:</h4><ul><li><p>advantage:</p><ol><li>Interface specifies the contract for the client.</li><li>Support multiple different representations</li></ol></li><li><p>Java’s interfaces: do not include info about the representations</p><p>所以不需要提供有关interface的额外信息，比如：instance variables, instance method bodies, constructors</p></li></ul><h4 id="subtypes"><a class="header-anchor" href="#subtypes">¶</a>&gt; subtypes:</h4><ul><li>编译器能检查子类型有无实现其父类的所有类型，但不能检查是否符合其规范。我们需要保证子类型的规范至少要和其父类一样的强劲。</li></ul><blockquote><p>“B is a subtype of A” means “every B is an A.” In terms of specifications: “every B satisfies the specification for A.</p></blockquote><ul><li><p>Declare subtypes in java</p><ul><li>declare that a class B is a subtype of an interface A, use <code>implements</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>declare that an interface is a subtype of another interface, using <code>extends</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SortedSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Example-mystring"><a class="header-anchor" href="#Example-mystring">¶</a>&gt; Example:mystring</h4><p>需要注意的地方：</p><ol><li><p>Constructor: valueOf(). The difference between concrete class’s static method and interface’s constructor</p></li><li><p>Inheritance: @override</p></li><li><p>Private constructors are allowed</p></li><li><p>abstraction barrier between ADT and its concrete representations</p><ul><li><p>How clients use ADT?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyString s = <span class="keyword">new</span> FastMyString(<span class="keyword">true</span>);</span><br><span class="line">MyString s = MyString.valueOf(<span class="keyword">true</span>); <span class="comment">//better</span></span><br></pre></td></tr></table></figure><ul><li>implement the creator operation <code>valueOf</code> as a static <a href="https://web.mit.edu/6.031/www/sp21/classes/10-abstract-data-types/#factory_method">factory method</a> in the interface <code>MyString</code></li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyString represents an immutable sequence of characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyString</span> </span>&#123; </span><br><span class="line">    <span class="comment">// public static MyString valueOf(boolean b) &#123; ... &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MyString <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> FastMyString(b);&#125; <span class="comment">//notice 4</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyString <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleMyString</span> <span class="keyword">implements</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] a;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a string representation of b, either &quot;true&quot; or &quot;false&quot;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b a boolean value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleMyString</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        a = b ? <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125; </span><br><span class="line">              : <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// private constructor, used internally by producer operations</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SimpleMyString</span><span class="params">(<span class="keyword">char</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> a.length; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> a[i]; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> MyString <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] subArray = <span class="keyword">new</span> <span class="keyword">char</span>[end - start];</span><br><span class="line">        System.arraycopy(<span class="keyword">this</span>.a, start, subArray, <span class="number">0</span>, end - start);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleMyString(subArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastMyString</span> <span class="keyword">implements</span> <span class="title">MyString</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span>[] a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a string representation of b, either &quot;true&quot; or &quot;false&quot;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b a boolean value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FastMyString</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        a = b ? <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125; </span><br><span class="line">              : <span class="keyword">new</span> <span class="keyword">char</span>[] &#123; <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125;;</span><br><span class="line">        start = <span class="number">0</span>;</span><br><span class="line">        end = a.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private constructor, used internally by producer operations.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FastMyString</span><span class="params">(<span class="keyword">char</span>[] a, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> end - start; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="keyword">return</span> a[start + i]; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> MyString <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FastMyString(<span class="keyword">this</span>.a, <span class="keyword">this</span>.start + start, <span class="keyword">this</span>.start + end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Why-interfaces？"><a class="header-anchor" href="#Why-interfaces？">¶</a>&gt; Why interfaces？</h4><ol><li>使用界面能为编译器和人们增加可读性。</li><li>从最开始抽象出独立的实现，然后再修正具体细节。能够在不同方式实现间权衡性能。</li><li>有意未明确的方法规范，在之后更具体的实现</li><li>multiple view of one class. <a href="https://stackoverflow.com/questions/21263607/can-a-normal-class-implement-multiple-interfaces#:~:text=Yes%2C%20a%20class%20can%20implement,for%20some%20sort%20of%20behavior.">A java class may implement multiple interfaces.</a></li><li>通过从简单的实现到更复杂/严格的实现，一步步构建可信的方法实现</li></ol><h3 id="subclassing"><a class="header-anchor" href="#subclassing">¶</a>subclassing</h3><p>和界面实现的区别在于：subclass 可以继承superclass的method bodies, fields；包含spec 和rep,而interface只包含spec。</p><p>Problem: what inheriting the rep means?</p><ul><li><p>answer: 一个安全的subclass需要遵循两个合同，和用户的以及和其subclass的，而这导致了rep独立性被破坏的问题。</p><blockquote><ul><li>rep exposure between the superclass and all its subclasses</li><li>rep dependence between superclass and subclasses</li><li>superclass and subclass can inadvertently break each other’s rep invariants</li></ul></blockquote></li></ul><p>Static type vs. dynamic type:</p><ul><li><p>Dispatching to the method</p><blockquote><p>Java’s dynamic dispatch: it uses the implementation appropriate to the <em>dynamic type</em> of the object, not the static type of the reference that points to the object.</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FastMyString fms = <span class="keyword">new</span> FastMyString(<span class="keyword">true</span>); <span class="comment">// recall that this represents the 4-character string &quot;true&quot;</span></span><br><span class="line">fms.toString() → <span class="string">&quot;FastMyString@504bae78&quot;</span> <span class="comment">// not useful! just the class name followed by the object&#x27;s address in memory</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastMyString</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length(); ++i) &#123;</span><br><span class="line">            s += <span class="keyword">this</span>.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Object obj = <span class="keyword">new</span> FastMyString(<span class="keyword">true</span>);</span><br><span class="line">obj.toString() → <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>Object is static type known at compile time, while FastMyString is the typpe unknown until runtime.</p><h3 id="Generic-types"><a class="header-anchor" href="#Generic-types">¶</a>Generic types</h3><p><em>generic type</em>: a type whose specification is in terms of a placeholder type to be filled in later. -&gt; generic programming</p><p>Implementations:</p><ul><li><p>Generic interface, non-generic implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharSet</span> <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">Character</span>&gt; </span>&#123;&#125;                      </span><br></pre></td></tr></table></figure></li><li><p>Generic interface, generic implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="enumerations"><a class="header-anchor" href="#enumerations">¶</a>enumerations</h3><p><em>enumeration</em>: a small and finite values which can be defined as named constants.</p><p>和c struct相像。</p><ul><li><p>Java 中.equals 和 == 的额外细节：equals在运行时间检查是否在意义上相同，而==检查两个对象是否是同一个reference。这在一般的比较中是有差异的，而在enum中由于只有唯一的reference，equals和==反而没什么区别，同时==符合fail fast的特点因为我们检查的正是它们是否是相同的reference指向唯一的enum中的值。</p></li><li><p>java中有内置的enum类型，自动提供一些操作：</p><blockquote><ul><li><code>ordinal()</code> is the index of the value in the enumeration, so <code>JANUARY.ordinal()</code> returns 0.</li><li><code>compareTo()</code> compares two values based on their ordinal numbers.</li><li><code>name()</code> returns the name of the value’s constant as a string, e.g. <code>JANUARY.name()</code> returns <code>&quot;JANUARY&quot;</code>.</li><li><code>toString()</code> has the same behavior as <code>name()</code></li></ul></blockquote></li><li><p>可以自定义需要的enum</p><ul><li>An <code>enum</code> declaration can contain all the usual fields and methods that a <code>class</code> can. (Rep, methods, constants)</li><li>Example</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Month</span> </span>&#123;</span><br><span class="line">    <span class="comment">// the values of the enumeration, written as calls to the private constructor below</span></span><br><span class="line">    JANUARY(<span class="number">31</span>),</span><br><span class="line">    FEBRUARY(<span class="number">28</span>),</span><br><span class="line">    MARCH(<span class="number">31</span>),</span><br><span class="line">    APRIL(<span class="number">30</span>),</span><br><span class="line">    MAY(<span class="number">31</span>),</span><br><span class="line">    JUNE(<span class="number">30</span>),</span><br><span class="line">    JULY(<span class="number">31</span>),</span><br><span class="line">    AUGUST(<span class="number">31</span>),</span><br><span class="line">    SEPTEMBER(<span class="number">30</span>),</span><br><span class="line">    OCTOBER(<span class="number">31</span>),</span><br><span class="line">    NOVEMBER(<span class="number">30</span>),</span><br><span class="line">    DECEMBER(<span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rep</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> daysInMonth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enums also have an automatic, invisible rep field:</span></span><br><span class="line">    <span class="comment">//   private final int ordinal;</span></span><br><span class="line">    <span class="comment">// which takes on values 0, 1, ... for each value in the enumeration.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rep invariant:</span></span><br><span class="line">    <span class="comment">//   daysInMonth is the number of days in this month in a non-leap year</span></span><br><span class="line">    <span class="comment">// abstraction function:</span></span><br><span class="line">    <span class="comment">//   AF(ordinal,daysInMonth) = the (ordinal+1)th month of the Gregorian calendar</span></span><br><span class="line">    <span class="comment">// safety from rep exposure:</span></span><br><span class="line">    <span class="comment">//   all fields are private, final, and have immutable types</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make a Month value. Not visible to clients, only used to initialize the</span></span><br><span class="line">    <span class="comment">// constants above.</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Month</span><span class="params">(<span class="keyword">int</span> daysInMonth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.daysInMonth = daysInMonth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isLeapYear true iff the year under consideration is a leap year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number of days in this month in a normal year (if !isLeapYear) </span></span><br><span class="line"><span class="comment">     *                                           or leap year (if isLeapYear)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDaysInMonth</span><span class="params">(<span class="keyword">boolean</span> isLeapYear)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == FEBRUARY &amp;&amp; isLeapYear) &#123;</span><br><span class="line">            <span class="keyword">return</span> daysInMonth+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> daysInMonth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> first month of the semester after this month</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Month <span class="title">startOfNextSemester</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> JANUARY:</span><br><span class="line">                <span class="keyword">return</span> FEBRUARY;</span><br><span class="line">            <span class="keyword">case</span> FEBRUARY:   <span class="comment">// cases with no break or return</span></span><br><span class="line">            <span class="keyword">case</span> MARCH:      <span class="comment">// fall through to the next case</span></span><br><span class="line">            <span class="keyword">case</span> APRIL:</span><br><span class="line">            <span class="keyword">case</span> MAY:</span><br><span class="line">                <span class="keyword">return</span> JUNE;</span><br><span class="line">            <span class="keyword">case</span> JUNE:</span><br><span class="line">            <span class="keyword">case</span> JULY:</span><br><span class="line">            <span class="keyword">case</span> AUGUST:</span><br><span class="line">                <span class="keyword">return</span> SEPTEMBER;</span><br><span class="line">            <span class="keyword">case</span> SEPTEMBER:</span><br><span class="line">            <span class="keyword">case</span> OCTOBER:</span><br><span class="line">            <span class="keyword">case</span> NOVEMBER:</span><br><span class="line">            <span class="keyword">case</span> DECEMBER:</span><br><span class="line">                <span class="keyword">return</span> JANUARY;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;can&#x27;t get here&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ADTs-in-non-OOP-languages"><a class="header-anchor" href="#ADTs-in-non-OOP-languages">¶</a>ADTs in non-OOP languages</h3><p>define ADT in non-oop languages like C: a group of globally-accessible functions that operate on an opaque data type.</p><p>(data abstraction)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE* f = fopen(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>); // <span class="built_in">open</span> a file <span class="keyword">for</span> writing</span><br><span class="line">fputs(<span class="string">&quot;hello&quot;</span>, f); // write to the file</span><br><span class="line">fclose(f);  // close the file</span><br></pre></td></tr></table></figure><blockquote><p>The notion of an abstract data type does not depend on language features like classes, or interfaces, or <code>public</code>/<code>private</code> access control. Data abstraction is a powerful design pattern that is ubiquitous in software engineering.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC recursion</title>
      <link href="/sg/2021/09/05/SC_recursion/"/>
      <url>/sg/2021/09/05/SC_recursion/</url>
      
        <content type="html"><![CDATA[<h2 id="R14-recursion"><a class="header-anchor" href="#R14-recursion">¶</a>R14: recursion</h2><p>有时候会觉得自己对recursion/iteration的了解已经够多了，但不够多总是常态。尤其在应用到不同的场景的时候。</p><h3 id="decompostion"><a class="header-anchor" href="#decompostion">¶</a>decompostion</h3><p>Choose the right decomposition for a problem.</p><p>recursion is one method</p><h3 id="structure-of-recursive-implementations"><a class="header-anchor" href="#structure-of-recursive-implementations">¶</a>structure of recursive implementations</h3><p>helper methods: don’t expose the helper method to your clients.</p><p>base case + recursive case</p><h3 id="choosing-the-right-recursive-subproblem"><a class="header-anchor" href="#choosing-the-right-recursive-subproblem">¶</a>choosing the right recursive subproblem</h3><p>Think about several ways to break down the problem, and try to write the recursive steps.</p><p>Recursive subproblem can be smaller or simpler in more subtle ways.</p><h3 id="recursive-problems-vs-recursive-data"><a class="header-anchor" href="#recursive-problems-vs-recursive-data">¶</a>recursive problems vs. recursive data</h3><ul><li><p>recursive problems</p></li><li><p>recursive data</p><ul><li>file systems</li><li>data structures: binary search tree</li></ul></li></ul><h3 id="Mutual-recursion"><a class="header-anchor" href="#Mutual-recursion">¶</a>Mutual recursion</h3><p>return immutable object</p><h3 id="reentrant-code"><a class="header-anchor" href="#reentrant-code">¶</a>reentrant code</h3><ul><li>it can be called again even while a call to it is underway.</li><li>many application scenario: concurrency, callbacks, mutual recursion…</li></ul><h3 id="when-to-use-recursion-rather-than-iteration"><a class="header-anchor" href="#when-to-use-recursion-rather-than-iteration">¶</a>when to use recursion rather than iteration</h3><p>像递归这样只用考虑输入和输出模式的范式属于函数式编程的一种。它与命令式编程/迭代还有一个主要区别就是可变性(mutablity)，不可避免产生的可变变量在迭代过程中不断改变，导致出现漏洞。但递归相较于迭代的明显的缺点就是需要更多的空间。</p><blockquote><p>building up a stack of recursive calls consumes memory temporarily, and the stack is limited in seze.</p></blockquote><h3 id="common-mistakes-in-recursive-implementations"><a class="header-anchor" href="#common-mistakes-in-recursive-implementations">¶</a>common mistakes in recursive implementations</h3><ul><li>base case missing</li><li>recursive step fails to reduce to a smaller subproblem</li><li>aliases to mutable data structures are inadvertently shared, mutated among the recursive calls.</li></ul><p>Bright side: fail faster. StackOverflowError.</p>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC specifications</title>
      <link href="/sg/2021/09/03/SC_specifications/"/>
      <url>/sg/2021/09/03/SC_specifications/</url>
      
        <content type="html"><![CDATA[<h2 id="R6-specifications"><a class="header-anchor" href="#R6-specifications">¶</a>R6: specifications</h2><h3 id="Behavioral-equivalence"><a class="header-anchor" href="#Behavioral-equivalence">¶</a>Behavioral equivalence</h3><p>whether it could be substituted with one implementation for the other</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(...)</span></span>&#123;</span><br><span class="line"><span class="comment">//requires: ........</span></span><br><span class="line"><span class="comment">//effects:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Specifications"><a class="header-anchor" href="#Specifications">¶</a>Specifications</h3><h4 id="why"><a class="header-anchor" href="#why">¶</a>why</h4><ul><li>Acts as firewall</li><li>Connect / separate client and implementer<ul><li>Client: input, output</li><li>Implementater: computation<ul><li>Local variables, private fields, implementation details</li></ul></li></ul></li></ul><h4 id="structure"><a class="header-anchor" href="#structure">¶</a>structure</h4><ul><li>Composition<ul><li>method signature</li><li>requires clause -&gt; additional restrictions on the parameters<ul><li>type</li><li>interactions between parameters</li></ul></li><li>effects clause -&gt; return value, exceptions, and other effects of the method<ul><li>How the return value relates to the inputs</li><li>exceptions</li><li>Whether and how objects are mutated</li></ul></li></ul></li><li>precondition and postcondition of the method</li><li>Overall structure:<ul><li>if the precondition holds, then the postcondition must hold when the method completes</li><li>Else, free to do anything</li></ul></li></ul><h4 id="in-java"><a class="header-anchor" href="#in-java">¶</a>in java</h4><ul><li>javadoc</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@param p</span><br><span class="line">@param q</span><br><span class="line">@return</span><br><span class="line">@throw</span><br></pre></td></tr></table></figure><h3 id="do-not-allow-null-references"><a class="header-anchor" href="#do-not-allow-null-references">¶</a>do not allow null references</h3><ul><li>syntactically illigal<ul><li>primitives cannot be null</li><li>Some methods or fields: length()</li></ul></li><li>Null values are vague<ul><li>Disallowed in parameter and return values unless spec says otherwise</li><li>use something other than null makes your meaning clear</li><li>Fail fast: null can overlook many kinds of bugs</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map.get(key) <span class="keyword">return</span> when the key is not found in the map: </span><br><span class="line">Optional&lt;T&gt;</span><br></pre></td></tr></table></figure><h3 id="Include-emptiness"><a class="header-anchor" href="#Include-emptiness">¶</a>Include emptiness</h3><ul><li><p>difference between null and emptiness</p></li><li><p>empty values are alway allowed as parameter or return values.</p></li></ul><h3 id="testing"><a class="header-anchor" href="#testing">¶</a>~ testing</h3><ul><li>Black box tests need follow specification</li><li>Glass box test must follow spec too.</li></ul><h3 id="mutating"><a class="header-anchor" href="#mutating">¶</a>~ mutating</h3><ul><li>describe side-effects-changes to mutable objects-in the postcondition</li><li>Mutation is disallowed unless stated otherwise</li></ul><h3 id="exceptions"><a class="header-anchor" href="#exceptions">¶</a>exceptions</h3><ul><li>Function<ul><li>Signaling bugs</li><li>for special results</li></ul></li><li>checked and unchecked exceptions</li><li>exception hierarchy</li><li>declare exceptions in specs</li></ul><h2 id="R7-design-specifications"><a class="header-anchor" href="#R7-design-specifications">¶</a>R7: design specifications</h2><p>Three dimensions for comparing specs</p><ul><li>deterministic</li><li>declarative</li><li>strong</li></ul><h3 id="Deterministic-vs-underdetermined-specs"><a class="header-anchor" href="#Deterministic-vs-underdetermined-specs">¶</a>Deterministic vs. underdetermined specs</h3><ul><li>deterministic: one final state for the same input.</li><li>undetermined: multiple valid outputs for the same input<ul><li>different from Nondeterministic, which means same program with the same inputs can generate different outcomes</li></ul></li></ul><h3 id="Declarative-vs-operational-specs"><a class="header-anchor" href="#Declarative-vs-operational-specs">¶</a>Declarative vs. operational specs</h3><ul><li>Operational : steps that the method performs</li><li>Delcarative : properties of the final outcome, and how it related to the initial state</li></ul><h3 id="stronger-vs-weaker-specs"><a class="header-anchor" href="#stronger-vs-weaker-specs">¶</a>stronger vs. weaker specs</h3><p>a spec S2 is stronger than a spec S1 if the set of implementations that satisfy S2 is a strict subset of those that match S1.</p><blockquote><p>Rule: S2 is stronger than a spec S1 iff</p><ul><li>S2’s precondition is weaker than or equal to S1.<ul><li>S2’s input is less, placing fewer demands on a client</li></ul></li><li>S2’s postcondition is stronger than or equal to S1.<ul><li>Make more promises to the client</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC code review</title>
      <link href="/sg/2021/09/01/SC_code_review/"/>
      <url>/sg/2021/09/01/SC_code_review/</url>
      
        <content type="html"><![CDATA[<h2 id="R4-code-review"><a class="header-anchor" href="#R4-code-review">¶</a>R4: code review</h2><ul><li>code review: read and discuss code written by others</li><li>General principles of good coding: things you can look for in every code review(与编程语言和目的无关的)</li></ul><h3 id="code-review"><a class="header-anchor" href="#code-review">¶</a>code review</h3><ul><li>Purpose<ul><li>Improve the code</li><li>improve the programmer<ul><li>新语言特性，项目设计的改变，its coding standards, new techniques…</li></ul></li></ul></li><li>Style standards: 除了特定语言的规范，比如google C++/java/… style guide，还有许多部分值得审视<ul><li>spec, ADT with representation invariants, concurrency and thread safety</li><li>be a team player: 在写pj时考虑别人已经写了的部分的风格</li></ul></li></ul><h3 id="DRY-don’t-repeat-yourself"><a class="header-anchor" href="#DRY-don’t-repeat-yourself">¶</a>DRY: don’t repeat yourself</h3><ul><li>avoid duplication</li></ul><h3 id="Comments-where-needed"><a class="header-anchor" href="#Comments-where-needed">¶</a>Comments where needed</h3><h4 id="where-to-comment"><a class="header-anchor" href="#where-to-comment">¶</a>&gt; where to comment</h4><ul><li>Specifications document assumptions</li><li>Specify the provenance of code that was copied from elsewhere<ul><li>Reason<ul><li>Copyright</li><li>Answers change fast</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function: read a web page into a str</span></span><br><span class="line"><span class="comment">//see web:http://...</span></span><br><span class="line">........</span><br></pre></td></tr></table></figure><ul><li>Obscure code<ul><li>一串莫名其妙的公式</li></ul></li></ul><h4 id="where-not-comment"><a class="header-anchor" href="#where-not-comment">¶</a>&gt; where not comment</h4><ul><li>direct transliterations of code into English<ul><li>assume readers at least knows java</li></ul></li></ul><h3 id="Fail-fast"><a class="header-anchor" href="#Fail-fast">¶</a>Fail fast</h3><p>code should reveal its bugs earlier as possible</p><ul><li>static checking</li><li>Dynamic checking</li><li>…</li></ul><h3 id="avoid-magic-numbers"><a class="header-anchor" href="#avoid-magic-numbers">¶</a>avoid magic numbers</h3><p>Magic numbers：一串莫名其妙的数字</p><ul><li>do not hardcode; reason<ul><li>a number is less readable than a name</li><li>constants may need to change in the future</li><li>Constants may be dependent on other constants</li></ul></li><li>use named constants</li><li>When there are many magic numbers, treat them as data and consider to store in data structures.<ul><li>Easy to understand: uncover the hidden relationship.  存储在某数据结构中并不能保证这一点。</li><li>Ex: 0, used as an integer value,作为计数的最小值或identity value in addition; symbolically, magic number.</li></ul></li></ul><h3 id="one-purpose-for-each-variable"><a class="header-anchor" href="#one-purpose-for-each-variable">¶</a>one purpose for each variable</h3><p>Don’t reuse variables/parameters. (我之前还不太习惯用太多变量名)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final: variables can&#x27;t be reassigned.</span></span><br></pre></td></tr></table></figure><h3 id="use-good-names"><a class="header-anchor" href="#use-good-names">¶</a>use good names</h3><ul><li><p>what to do</p><ul><li>follow the lexical naming conventions of the language<ul><li>Python/java: Classes, setVariableName(java), set_variable_name(python)</li><li>Global constants(public static final): use capitalization in java, ALL_CAPS_WITH_UNDERSCORES</li><li>Local variablesL use camelCaseNames like secondsPerDay</li></ul></li><li>method name: verb phrases</li><li>Variable, class names: noun phrases</li></ul></li><li><p>what not to do</p><ul><li>No abbr/single-character variable names except conventional one</li></ul></li></ul><h3 id="Use-whitespace-to-help-the-reader"><a class="header-anchor" href="#Use-whitespace-to-help-the-reader">¶</a>Use whitespace to help the reader</h3><ul><li>don’t use tab for indentation; use space instead<ul><li>why: tab represents numbers of spaces in different languages</li><li>只要将tab设置成相应的空格就行了。</li></ul></li></ul><h3 id="don’t-use-global-variables"><a class="header-anchor" href="#don’t-use-global-variables">¶</a>don’t use global variables</h3><ul><li>Global variable: accessible and changeable from anywhere in the program<ul><li>final: unchanged</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ... </span><br></pre></td></tr></table></figure><ul><li>Kinds of variables<ul><li>local variable: inside a method<ul><li>Disappear when the method returns</li></ul></li><li>instance variable: inside an instance of an object (belong to certain class instance)<ul><li>created when calling new object; disappears when object is no longer accessible</li><li>each object instance has its own instance variables</li><li>别名：field, property, member variable, attribute</li></ul></li><li>Static variable: associated with a class(belong to class itself)</li></ul></li></ul><h3 id="Methods-should-return-results-not-print-them"><a class="header-anchor" href="#Methods-should-return-results-not-print-them">¶</a>Methods should return results, not print them</h3><ul><li>except debugging output: aim to debugging the design</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out <span class="comment">//sends result to the console</span></span><br></pre></td></tr></table></figure><h3 id="avoid-special-case-code"><a class="header-anchor" href="#avoid-special-case-code">¶</a>avoid special-case code</h3><ul><li>Resits to handle special cases separately<ul><li>Special cases add complexity and hide possible bugs</li><li>Special cases is not exactly related to overall performance.</li></ul></li><li>think for the general case.<ul><li>Broader, general-case code pay off.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 6.031 software construction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to speak</title>
      <link href="/sg/2021/08/03/speak/"/>
      <url>/sg/2021/08/03/speak/</url>
      
        <content type="html"><![CDATA[<p>之前有看过几节Professor Winston的AI课，感觉是个很有热情比较严肃的老师，没想到教授在19年就过世了。他的这个演讲主要是在教我们如何构建自己给出talk架构，而不只是单纯的讲方法，这样的思考方式也很inspring。</p><h2 id="intro"><a class="header-anchor" href="#intro">¶</a>intro</h2><ul><li><p>实现人生价值的重要性：Speak &gt; write &gt; quality of ideas</p></li><li><p>Quality = f (Knowledge, Practice, talent)</p><p>knowledge and practice weigh more than talent</p></li><li><p>本演讲顺序：Example to techniques</p></li></ul><h2 id="How-to-start"><a class="header-anchor" href="#How-to-start">¶</a>How to start</h2><p>Empowerment promise : 告诉观众会学到什么，这个演讲的目标，可以达成什么</p><h3 id="4-samples"><a class="header-anchor" href="#4-samples">¶</a>4 samples</h3><ul><li>Cycle: repetitions to keep well-informed</li><li>build fence: one good example can serve the purpose</li><li>Verbal punctuation: time stamps, 易于专注和回顾</li><li>Question：合适的问题，不要太难或太简单，停顿7s左右</li></ul><h2 id="the-tools"><a class="header-anchor" href="#the-tools">¶</a>the tools</h2><p>Empathetic mirroring: 人会假设自己处于这样的状况做什么</p><h3 id="Time-and-place"><a class="header-anchor" href="#Time-and-place">¶</a>Time and place</h3><p>类似study area，什么样的时间和环境做怎样的事。talk 和 study同理</p><ul><li>well lit</li><li>cased</li><li>Populated</li></ul><h3 id="Boards-and-props"><a class="header-anchor" href="#Boards-and-props">¶</a>Boards and props</h3><p>教授讲了黑板和幻灯片的对比，以及他认为黑板是更适合学生理解学习的方式。以及运用道具教学能给人更深刻的印象，这是单纯的slide不能比较的。</p><h3 id="projections"><a class="header-anchor" href="#projections">¶</a>projections</h3><p>如何做ppt，字体，风格</p><h2 id="informing"><a class="header-anchor" href="#informing">¶</a>informing</h2><h3 id="promise"><a class="header-anchor" href="#promise">¶</a>promise</h3><p>just like empowerment promise</p><h3 id="inspiration"><a class="header-anchor" href="#inspiration">¶</a>inspiration</h3><p>How to get inspired?</p><p>by example: 当有人对他们所做的事情表现出激情时，身边的人就会受鼓舞</p><h3 id="how-to-think"><a class="header-anchor" href="#how-to-think">¶</a>how to think</h3><p>how to get people know how to think?</p><p>people are story-telling animals: 故事，根据故事提出的问题，mechanism provided to analyze, ways to organize，ways to evaluate how reliable a story is…</p><h2 id="persuading"><a class="header-anchor" href="#persuading">¶</a>persuading</h2><h3 id="Job-talks"><a class="header-anchor" href="#Job-talks">¶</a>Job talks</h3><p>finish in 5 minutes</p><ul><li>vision<ul><li>problem</li><li>Approach</li></ul></li><li>Done sth</li><li>Contributions</li></ul><h3 id="getting-famous"><a class="header-anchor" href="#getting-famous">¶</a>getting famous</h3><p>why people want to be famous?</p><p>because they want their ideas valued.</p><img src="/sg/2021/08/03/speak/sc.png" class="" title="截屏2021-08-03 下午12.29.35"><h2 id="How-to-stop"><a class="header-anchor" href="#How-to-stop">¶</a>How to stop</h2><h3 id="final-slide"><a class="header-anchor" href="#final-slide">¶</a>final slide</h3><p>contribution slide: show your work</p><p>把致谢人员清单放到first slide</p><h3 id="final-words"><a class="header-anchor" href="#final-words">¶</a>final words</h3><p>don’t say thank you or thank you for listening. 虽然很多人都这样做，但这并不是正确的，这会让你的发言软弱。</p><p>Rather, salute the audience.</p><ul><li>How much you value your time at a place</li><li>How much you look forward to coming back</li><li>…</li></ul><h2 id="实例"><a class="header-anchor" href="#实例">¶</a>实例</h2><blockquote><p>1）在基本的flow上能比较快的理顺出一个slides draft（最初刚学习的时候，我会去看一下跟我work flow类似的人的slides）。每一页slides基本都会用很少的字，提炼重点，多用图和说来illustrate。</p><p>2）有了draft以后，在准备正式演讲的时候，我会把每一页要讲的东西全都写下来：每一页基本要包含transition，basic content和summary/takeaways。然后会把这个拿给老板看（或者native speaker？），他的修改会让我在语言的简明和准确性上有提高，下次就会用类似的句式。</p><p>3）准备好了演讲稿以后就开始一遍一遍的练。如果是英文演讲的话，有机会可以找个native speaker，让他读几页slides录下来，学习他的抑扬顿挫 (比如在for example以后，通常每个短语的音调都会有特别声调，且短语间都很紧凑)。</p><p>这样准备过一两次以后就会很有提高。平时不太重要的presentation也不再用写演讲稿，因为各种transition或者句式已经慢慢学会了。</p><p>&lt;women in tech 小组&gt;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿纳金</title>
      <link href="/sg/2021/07/31/starwars/"/>
      <url>/sg/2021/07/31/starwars/</url>
      
        <content type="html"><![CDATA[<p>Star wars和Star Trek 系列一样作为生活大爆炸主角的爱好，我早就有所耳闻。但是我之前一直以为只有geek才会喜欢这种类型的，一直没有看。直到偶然看到星球大战：残次品，动画效果展现出的宇宙有一种真实的浩瀚感，而故事也很有意思。于是我又开始看背景中的克隆人战争，看到中途还补了前传三部曲，正传只是略看了下。</p><p>在全系列中我最喜欢的人物还是阿纳金·天行者。</p><p>阿纳金在小时候就向往走过每一个星球，眼前浩瀚无垠的星空显得神秘而又不可控制。阿纳金一直将亲人的重要性放在任何准则之上，他的母亲，妻子，徒弟是他最重要的人。当他的母亲意外时他杀了绑架她的一整个部族的人，预见妻子会难产而死时又想打破这命运即使因此进入原力的黑暗面成了黑暗尊主的学徒达斯·维达。克隆人战争系列丰满了阿纳金的血肉。他是独特的绝地武士，除了卓越的军事能力和思考问题的灵活性，他有自己所相信的。</p><p>阿纳金的悲剧源于他的性格如此，由环境所推动。他的徒弟阿方索被诬陷入狱并被剥夺绝地学徒身份，直到他找回证据后绝地委员会也未在此事件上承认过失，只是用绝地的试炼来掩饰曾表现出对阿方索的不信任。阿纳金对绝地委员会的信任在克隆人战争未结束前就已经一点点的丧失。而在委员会和议长的争斗中，他身为绝地一员却因为议长对他展示出的信任而失去委员会的信任，却要求他充当间谍来监视议长的活动，即使这有违绝地守则。在阿纳金发现了议长的最终身份告知了委员会后，他们仍然将他孤立在抓捕议长的行动之外。他恳求温杜留下议长的性命因为这是唯一拯救妻子生命的机会没有得到温杜的任何回应和解释，于是他也做出了自己的选择。他一直是个决绝人。阿纳金投向黑暗面最初是为了拯救爱人，但在爱人死去和徒弟离开后彻底不能回头。力量让他迷失在对权力的追逐和统治整个银河系的幻想中。</p><p>共和国失去民主然后变成帝国的过程始终有些不可思议，也让我想去了解更多什么才是民主。共和国在克隆人战争未开始时已经由于腐败而在经济，政治，军事等方面暴露出各种弱点，而之后在共和国议会议长帕尔帕廷在暗中操控下，通过和分离势力的战争一步步将权力集中在自己手里，最后独裁帝国成立。虽然绝地委员会表面上是为了阻止最高议长的阴谋而意图在过渡期掌控议会，但绝地制度的僵化和共和国一样难以挽回，他们不允许被挑战权威同时又固执己见，没有解释的空间。新帝国在早期未辜负人民渴望和平的期望，结束了银河系中环和外环的战争。但在权力集中后，强大的军事力量成为了帝国控制各星系的武器，帝国不再需要人民的支持，凭借威慑就能使之臣服，而帝国议会的解散则标志着民主的完全丧失。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拾遗合集</title>
      <link href="/sg/2021/06/29/review/"/>
      <url>/sg/2021/06/29/review/</url>
      
        <content type="html"><![CDATA[<p>拾遗系列就用来记录一些互联网冲浪中遇见的有意思的想法吧</p><h2 id="政治哲学"><a class="header-anchor" href="#政治哲学">¶</a>政治哲学</h2><p>起因是来自于之前和人关于出国选择，性别议题的讨论中我显露出的某些知识层面的欠缺造成了可能的偏狭观点。有些印象深刻的争执点是：在外国生活的人面临可能的歧视而采取的抗争是否有必要；国外不同地区的安全问题和国内外的法制差异；华裔在公司高层的比例，能否接触到核心技术；性别歧视在科技行业中存在吗，跨专业歧视或许会更多；理想和现实的差距需要靠实践来补足…由于社科类的书籍我一向很少接触，有些问题的讨论上还是有些理想和片面。而我又想能够更清晰地认识这些问题，单纯地想去了解这部分内容。</p><p>在参考了一些推荐和建议后，我打算分成以下几部分进行：</p><h3 id="问题索引"><a class="header-anchor" href="#问题索引">¶</a>问题索引</h3><ul><li><p>自由主义：自由是异见者的自由。</p></li><li><p>公共讨论：非暴力沟通 -&gt;怎样发展出观察方式和判断体系？</p></li></ul><h3 id="书籍阅读"><a class="header-anchor" href="#书籍阅读">¶</a>书籍阅读</h3><p>一些社科类书籍</p><ul><li>埃及，希腊与罗马</li><li>罗马帝国衰亡史</li></ul><p>…</p><h3 id="视频课程导读"><a class="header-anchor" href="#视频课程导读">¶</a>视频课程导读</h3><p>Yele courses: 古希腊历史，美国内战和重建，欧洲文明，美国独立战争</p><h3 id="导论课程的学习"><a class="header-anchor" href="#导论课程的学习">¶</a>导论课程的学习</h3><ul><li>finance101</li><li>Microeconomics101</li></ul><h2 id="学习"><a class="header-anchor" href="#学习">¶</a>学习</h2><ul><li>了解你自己</li></ul><blockquote><p>了解—&gt;选择—&gt;执行—&gt;复盘</p></blockquote><p>在做事的过程中了解自己。学习的方法论看过很多人的但一直觉得哪里不对，不论是scott young书里写的理解的三个层次还是潇峰的从语言学习展开的理解复盘测试方法，即使实验过一段时间仍然云里雾里，感觉自己的情况并不适用（虽然我是荒废了很多年才意识到了这一点的）。而在看到一位博主的学习经历后我才明白：了解包含“了解自己吸收、整合、再输出知识的速度、质量甚至速率变化”。</p><h3 id="know-yourself-Nothing-in-excess"><a class="header-anchor" href="#know-yourself-Nothing-in-excess">¶</a>know yourself &amp; Nothing in excess</h3><h4 id="个人发展和能力"><a class="header-anchor" href="#个人发展和能力">¶</a>个人发展和能力</h4><ul><li>对于状态不好的两点建议：1.学会转弯，2.学会原谅。</li><li>对自己的期许：想成为能力更强的人，而这需要长时间努力。但是盲目的膜拜大佬对我来说是无用的，而且我认为每个人都是独立的个体有自己的思考能力和发展空间，平等才是任何关系发展的基础，因为这代表着相互尊重和理解。希望自己在毕业前能做几个觉得还算有用的project（迟先生就是最近的例子）。</li><li>ddl前压力大的回避心理</li><li>从想进外企到找到自己真正喜欢的工作：外企和国外不是所有问题的答案，选择一份工作，选择一个地方居住这样的问题都需要首先理解自己想要的东西，以及对所有选择的客观数据评估。当然，在这之前是首先有能够选择的能力。</li><li>essential facts，犀利</li><li>学习方式：motivation （by hs），多问为什么，怎么样。多做习题，coding</li></ul><h4 id="情感关系-v2"><a class="header-anchor" href="#情感关系-v2">¶</a>情感关系</h4><h5 id="对友谊的不同思考角度"><a class="header-anchor" href="#对友谊的不同思考角度">¶</a>对友谊的不同思考角度</h5><ul><li><p>优质情感有很多种</p></li><li><p>expectation management</p></li><li><p>掌握各自的节奏</p></li></ul><h5 id="家庭关系"><a class="header-anchor" href="#家庭关系">¶</a>家庭关系</h5><p>原生家庭，独立，分割</p><h4 id="CS"><a class="header-anchor" href="#CS">¶</a>CS</h4><h5 id="基础"><a class="header-anchor" href="#基础">¶</a>基础</h5><ul><li>编程语言的类型</li><li>算法和底层知识</li></ul><h5 id="工作"><a class="header-anchor" href="#工作">¶</a>工作</h5><ul><li>Research scientist, swe的区别：主要问题在于能否有能力找到问题和独立解决问题。</li><li>如何成为一个优秀的算法工程师？</li><li>对我来说比较重要的元素：找到好的leader和项目，在工作中保持进取心</li></ul><h3 id="选择"><a class="header-anchor" href="#选择">¶</a>选择</h3><p>我认为实习选择中对我最重要的是mentor和做的东西是否有意思。没有mentor花费的无谓时间会更多，没意思我可能会很拖，就像现在我临近4门考试但是还没怎么复习居然还在写这篇博文一样。学习的过程就是一个漫长的自我探索过程，我也不知道之后具体会学什么，学到哪种程度。比如我现阶段就不是很想学编译器等过于硬件，pl等过于理论的课。</p><blockquote><p>我想了想本科期间大概还是不会做太深的ml方向,应该会从更底层的系统方向做起。谁能想到当初想学计算机就是因为疑犯追踪里的root和the machine。 - 21.4.10</p></blockquote><h3 id="英语"><a class="header-anchor" href="#英语">¶</a>英语</h3><p>我现在英语最大的难题是口语，其次是写作，阅读和听力倒是可以在学其他课程中的时候练习。目标就是能够和英语母语者交流。</p><h3 id="旅游"><a class="header-anchor" href="#旅游">¶</a>旅游</h3><p>想出去玩，认真地了解一个地方（自然&gt;人工），而不是穿行于城市里各种大同小异的商业街。希望在毕业前能够至少去敦煌，阿坝，苏州。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《论自由》读书笔记</title>
      <link href="/sg/2021/06/21/freedom/"/>
      <url>/sg/2021/06/21/freedom/</url>
      
        <content type="html"><![CDATA[<p>《论自由》一书中论述了公民自由的边界。首先需要确定的原则是社会若要干预个人事务，只有当目的是防止其伤害他人时才能违背其意志而不失正当地施加于他。个人只有有关于他人利害的部分需要对社会负责，只要个人行为仅与自己有关，那么他就无需对社会负责。作者首先正面论证了自由的定义，并对其分支思想言论自由和个人自由的原理展开论述，最后分析了自由原理在社会中的具体应用。我最感兴趣的地方是怎样才算个人自由？当个人表现得与群体大多数不同的时候，社会应当如何对待作为少数群体与大多数表现不同的部分？</p><p>一个人在和社会其他人交互时自然地产生意见和表达意见，并按照自己的意见行动。产生意见，表达意见和行动都属于个人自由的范畴，不应当被社会强制改变。</p><p>文章分别从三个论点论证了思想自由及表达想法的自由对人类精神幸福的必要性。首先权威所压制的意见不一定是错误的。在历史上即使迫害程度有所减轻，对异端者的迫害从未停止并且很少失败。苏格拉底被国人判为不敬神和不道德处以死刑；耶稣背负亵渎神灵的罪名受刑于十字架。况且即使是所在时代拥有一般人难以比拟的判断力和学识的伟人也有出错的可能，正如下令镇压了基督教的人是贤明的古罗马皇帝奥勒留。其次即使这种意见是错误的，禁绝它仍为过错。被压制的意见可能有部分是正确的同时又是当下通行的意见所欠缺的，真理需要经此修正和补足。如果未经过挑战和反对就直接接受真理会使其流于形式，成为一项成见，既不靠论证又不准论证，这样真理则成为了迷信。作者认为人们需要为其信念的正确性提供证明，为自己的观点提供正反两面证明，在不断否定和辩护的过程中理解自己的观点。通过以宗教信条和道德学说的发展史举例，他驳斥了当公认意见为真，缺乏言论自由的危害之处有限的观点。尽管随着社会文明的进步，意见必然统一，但真理需要分歧使人可以为之向对手解释或辩护来获得更新的活力。最后，现实中常出现真理共存于一组相互冲突的信条之间，人们需要做出明智的判断，在各种不同的观点间进行取舍，而不是让一方的偏见压倒另一方。</p><p>那么我们需要怎样的言论自由呢？公共讨论中自由表达的界限在哪里？有人认为，“一切言论固然都应该被允许自由表达，但前提是意见表达方式必须温和节制，不能逾越自由讨论的界限。”为了使双方的观点得到充分表达，限制主流观点使用无节制的谩骂之语的重要性大于以同等要求约束非主流观点。而这种限制需要来自于舆论对实际情况具体分析，而不是来自于法律和权威当局。</p><p>在实际问题中言论自由的考量变得更加复杂。以某个论坛为例，禁言，封号和删帖的标准在哪里？论坛能有不同的声音吗？当某个活跃成员的发言过于激烈冒犯到了部分成员从而累积多次举报后，这个成员被论坛的管理员小组禁言。那么这项处理是否合理呢？这需要进行多方论证其合理性，管理员小组对禁言的标准和论坛的自由表达相关的“不要发表任何理智的人会认为冒犯的、过分的或招致怨恨的言论”的约定再次进行公示并对成员的处理过程公开；同时，受到该成员冒犯的其他成员对为什么感觉到冒犯的问题与支持她应当自由表达个人观点即使语气带有冲突性的成员进行了相互论证；再次，无任何利益关系的第三方成员相对客观地在其中发表了个人观点；当观点发表在论坛上，就能够被反驳或者支持。通过这样一次论坛内的公开讨论，我们虽然不能说明这项处理是绝对合理的，但我们能够认为这是能够保证多数人自由发表言论的合理方案。而对这项处理有反对意见的人仍然有权利做出自己想做出的任何决定，比如删号或者退出。</p><p>思想言论的自由是个性自由的前提，个性的自由表达与发展相关。个性的自由发展造就先进之士，而先进之士拥有的首创力为未进之士打开眼界，从而让他们在眼界完全打开后有机会使自己成为具备首创力的人。这些少数的先进之士“所能要求的，只是为人们指出道路的自由”，而人们有权力也应当去主动选择真正适合自己的道路，而不是盲从盲信于先进之士的道路。</p><blockquote><p>没有理由说一切人类生活都应该被一个或少数几个模型所筑造。如果一个人具备相当的常识和经验，其以自己的方式筹划生活，就是最好的，并非因为这种方式本身就为最好，而是因为这是属于他自己的方式。</p></blockquote><p>虽然个性得到充分发展有利于社会进步和人类多样性，但公众舆论的倾向则往往不能容忍任何显著的个性流露。作者通过东西方文明发展的对比论述了习俗的专制的危害，反面论证了个性自由的价值。中国在很早的时候就发展出世界领先的风俗制度，然而在确保最富智慧的人稳居高位后则陷入了近千年的停滞；反观欧洲之所以能不断进取则是因为各民族的性格与教养异常歧异，这样的分歧造成变化，引导进步。</p><p>现代政体一般是代表大多数人意志的自治政府，然而大多数人的意志并不能等同于全体人民的意志。多数人的暴政可能以难以察觉的方式渗透入个人生活的各方面。除了法律约束，社会中的优势意见和大众情感同样在潜移默化中成为束缚异见者的方式。作为个体，很难在充满反对声音的环境下仍旧坚持个人意见。而经常发生的情况是大多数人的意见取代了个人的。作者认为，每个人都有权利用自己认为善的方式生活。即使大多数人的意见是有利于他的，只要他原本的意见没有伤害到社会其他人，他就有坚持自己想法的自由。“他人可以热心地助其判断，衷心鼓舞他的意志，乃至强行向他进谏，然而是否采纳必须取决于他自己”。而当他的意见伤害到社会中的其他人或有伤害的确定危险，那么就不符合自由原则而应当受道德或法律问责。</p><p>自由原则在现实生活中的具体应用表现得更为复杂。文末通过举了多个例子讨论了个人自由和社会干涉的界限，并且着重论述反对政府干涉即使其所行未侵犯自由的三类理由。自由原则不允许人有放弃自由的自由，也不允许人以任何名义干涉他人的自由。而政府权力应当受到限制，“在不违效率的前提下，尽最大限度地让权力分散；同时由一个集散中枢尽最大可能地让信息得到收集和传播”。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
        <tags>
            
            <tag> read </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>study less study smart</title>
      <link href="/sg/2021/06/19/study/"/>
      <url>/sg/2021/06/19/study/</url>
      
        <content type="html"><![CDATA[<p>一个简单的归纳。</p><h3 id="简短版-v2"><a class="header-anchor" href="#简短版-v2">¶</a>简短版</h3><p>something I can work on</p><ul><li><p>死记硬背？</p><p>Fact/concept</p><p>Recognition/recollection</p></li><li><p><strong>Reading</strong>:survey, question, read, recite, review</p><ul><li><p>SQ3R</p><p>Survey:浏览要阅读的内容，对要学的部分提出问题。</p><p>Recite:大部分时间？coding is  a nice way to try out.</p><p>Review: go through notes.</p></li></ul></li><li><p>sleep</p></li><li><p><strong>Notes</strong> -&gt; comprehension?</p><p>课上：记尽可能少的笔记，大纲；</p><p>课后：give it depth, flesh it out；</p><ul><li>how to flesh it out? What to?</li></ul><p>而不是一开始就写漂亮的笔记。</p></li><li><p>Feymann’s methods: 教给别人听</p></li><li><p>study area</p></li><li><p><strong>组队学习</strong></p></li></ul><h3 id="加长版-v2"><a class="header-anchor" href="#加长版-v2">¶</a>加长版</h3><p>学习其实并不需要太多花哨的方法，很多巧计妙思大多是没有用的，掌握基本的方法后花时间就够了。在高中非常迷恋学习方法，以为有一种通解能够很快地解决所有问题，但事实并非如此。就像思维导图的核心并不是五颜六色的图画，不是选择的某个词，而是我们是否真正理解学习了这部分内容，然后能用一种结构化的方式表达出来，能否讲给别人听。</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> skill </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
