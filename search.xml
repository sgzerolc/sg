<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Across the Mountains</title>
      <link href="/sg/2025/08/30/travel_oberstdorf_summer/"/>
      <url>/sg/2025/08/30/travel_oberstdorf_summer/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#overview">Overview</a><ul><li><a href="#fellhorn">Fellhorn</a></li><li><a href="#nebelhorn">Nebelhorn</a></li></ul></li><li><a href="#hiking-routes">Hiking Routes</a><ul><li><a href="#ridge-hike-on-fellhorn">Ridge Hike on Fellhorn</a></li><li><a href="#ridge-hike-on-nebelhorn">Ridge Hike on Nebelhorn</a></li><li><a href="#loop-via-the-wallrafweg">Loop via the Wallrafweg</a></li></ul></li></ul><!-- tocstop --></div><p>At the end of this summer, I went to Oberstdorf, a town on the border between Germany and Austria, for hiking and relaxation.</p><h2><span id="overview">Overview</span><a href="#overview" class="header-anchor">¶</a></h2><p>Preparations before taking a hike:</p><ol><li>Sun protection: sunscream and a hat or anything else that can protect your head. Otherwise you would end up with a sunburned scalp as I did :(</li><li>Clothes: quick-drying clothes. It will keep you more comfortable when you’re sweating a lot while walking along the ridges under the sun.</li><li>Water: You’ll need at least 3 liters of water for a four to five hour hike.</li><li>Food: Bring some snacks for the trip as restaurants are usually far away.</li><li>Map: an offline map of the hiking ares. It’s dangerous to get off track in the mountains where you’re unlikely to get any signal.</li><li>Route planning<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> and other information for a hike: Never hurt to have a plan in mind even if reality turns out differently. Don’t forget to check the weather, bus schedules (If you don’t have a car), restaurants, bathrooms and cable car operations. Check the cable cars opening hours<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> unless you plan to hike down on foot. You can get very nice interactive hiking maps of the mountains surrounding Oberstdorf by a simple click<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>.</li><li>Cash: If you are also relying on public transport, be sure to carry some cash in case the buses don’t accept cards.</li></ol><h3><span id="fellhorn">Fellhorn</span><a href="#fellhorn" class="header-anchor">¶</a></h3><img src="/sg/2025/08/30/travel_oberstdorf_summer/fellhorn.png" class title="fellhorn"><p>The ridge hike on Fellhorn followed the route I had mapped out in advance. This route was sourced from Fellhorn summit panoramic ridge hike<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>, accompanied with transport information I looked up for buses, cable cars and trains.</p><img src="/sg/2025/08/30/travel_oberstdorf_summer/fellhorn_route.jpeg" class title="fellhorn_route"><h3><span id="nebelhorn">Nebelhorn</span><a href="#nebelhorn" class="header-anchor">¶</a></h3><img src="/sg/2025/08/30/travel_oberstdorf_summer/nebelhorn.png" class title="nebelhorn"><p>The routes on Nebelhorn are well-marked. You can buy a round-trip cable car ticket at the valley station, which takes you up to the mountain station (the second of three stations on the mountain). From the mountain station, you can climb up to the summit or hike down to Seealpsee, a lake nestled below.</p><h2><span id="hiking-routes">Hiking Routes</span><a href="#hiking-routes" class="header-anchor">¶</a></h2><h3><span id="ridge-hike-on-fellhorn">Ridge Hike on Fellhorn</span><a href="#ridge-hike-on-fellhorn" class="header-anchor">¶</a></h3><img src="/sg/2025/08/30/travel_oberstdorf_summer/fellhorn_real_route.png" class title="fellhorn_real_route"><h3><span id="ridge-hike-on-nebelhorn">Ridge Hike on Nebelhorn</span><a href="#ridge-hike-on-nebelhorn" class="header-anchor">¶</a></h3><img src="/sg/2025/08/30/travel_oberstdorf_summer/nebelhorn_route.png" class title="nebelhorn_route"><h3><span id="loop-via-the-wallrafweg">Loop via the Wallrafweg</span><a href="#loop-via-the-wallrafweg" class="header-anchor">¶</a></h3><img src="/sg/2025/08/30/travel_oberstdorf_summer/wallrafweg_route.png" class title="wallrafweg_route"><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.oberstdorf.de/en/summer/hiking/">Official page of hiking at Oberstdorf</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://www.ok-bergbahnen.com/oeffnungszeiten/">Cable car opening hours</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://www.ok-bergbahnen.com/wandergebiete/wanderpanoramen/">Hiking panorama</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://www.mountainmoments.com/fellhorn-summit-panoramic-ridge-hike-near-oberstdorf-hiking-map/">Fellhorn summit panoramic ridge hike near oberstdorf hiking map</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>The Role of Consensus in Replicated Storage Systems</title>
      <link href="/sg/2025/08/06/ds_replicated_stg/"/>
      <url>/sg/2025/08/06/ds_replicated_stg/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#apache-kafka-kraft">Apache Kafka: KRaft</a></li><li><a href="#ceph-monitors-paxos">Ceph Monitors: Paxos</a></li><li><a href="#ebs-physalia-paxos">EBS Physalia: Paxos</a></li><li><a href="#drbd-split-brain-solution">DRBD Split-brain Solution</a></li></ul><!-- tocstop --></div><p>Paxos is to agree on one decision. Multi-Paxos as Raft is to agree on a sequence of decisions which could be a replicated log.</p><h3><span id="apache-kafka-kraft">Apache Kafka: KRaft</span><a href="#apache-kafka-kraft" class="header-anchor">¶</a></h3><p>Terminology: Kafka’s topic is like a replicated log for a storage node.</p><p>Kafka is a distributed system composed of clients and servers which communicate through TCP, providing services for event streaming. It is deployed in various environments including hardwares, VMs, containers in on-premise and cloud.</p><p>Kafka replicates the log for each topic’s partition across a certain number of servers. It adopts Raft-like protocol to maintain the identical logs between a leader and followers. However, instead of using majority vote, a Kafka node maintains a set of in-sync (active, live) replicas (ISR, like a session list) to elect a leader. The drawback of majority vote is that it takes a few failures to leave a quorum system with no electable leaders. Enough redundancy to tolerate single point failure will sacrifice the throughput a lot for large data. A write to a topic’s partition is committed until all sessions in the ISR have received the write. Thus any replica that is in-sync is eligible to be leader. This ISR and f+1 replicas can make a Kafka’s topic tolerate f failures without losing committed messages.</p><p>There is another design principle of Kafka that does not require crashed nodes to recover with all data intact. A replica must fully re-sync to rejoin the ISR regardless of lost unflushed data in its crash.</p><p>Kafka guarantees the data consistency which is based on at least one in-sync replica. There are two expected behaviors for a system where all the replicas die:</p><ol><li>Wait for a replica in the ISR to be alive and choose it as the leader</li><li>Choose the first replica (in or outside the ISR) to be alive as the leader</li></ol><p>(Availability and Consistency) Kafka uses the first approach as default. The trade-off is between availability and consistency. If the data on the previous in-sync replica was lost, then the system is down for the first approach. Unless we violate the consistency guarantee, and take the first come-back-to-life replica as the leader and make the system available again.</p><p>(Availability and Durability) Kafka provides two configurations for the number of acknowledgements (acks) by replicas.</p><ol><li>The topic’s partition remains unavailable when all replicas die.</li><li>The partition will only accept writes if the size of the ISR is above a certain min.</li></ol><p>A Kafka cluster manages hundreds of the partitions mentioned above. A special controller within each cluster manages the status of all the nodes. If a node dies, the controller will elect a new leader from the remaining nodes of ISR. If the controller fails, another controller will be elected.</p><h3><span id="ceph-monitors-paxos">Ceph Monitors: Paxos</span><a href="#ceph-monitors-paxos" class="header-anchor">¶</a></h3><p>Ceph is a software defined storage designed to store multiple PB data with high performance without any single point of failure. It’s deployed on commodity hardware or cloud. Reliable Autonomic Distributed Object Store (RADOS) is an object store composed of storage nodes that distributes data reliably and consistently. Object Storage Daemon (ODS) is a service running on the storage node which writes the data to hard drives.</p><p>Data replication is performed on ODS. A Ceph client writes to the primary ODS which is found by CRUSH and the cluster map. Then the primary ODS writes the data to the secondary ODSes through the same method. Each ODS writes data to its hard drive.</p><p>A Ceph storage cluster maintains monitors which update the topology of the whole cluster through the CRUSH algorithm. Ceph monitors use Paxos and majority vote to achieve strong consistency of the cluster map. They maintain a master copy of the cluster map including the changes to their operating states, the state of the cluster and cluster members etc. A single monitor in a cluster cannot survive single-point failure. There should be at least three monitors to tolerate single-point failure.</p><h3><span id="ebs-physalia-paxos">EBS Physalia: Paxos</span><a href="#ebs-physalia-paxos" class="header-anchor">¶</a></h3><p>Physalia is a sharded key-value store serving a configuration box for EBS. Elastic Block Storage (EBS) uses chain replication for the primary-backup architecture. A Physalia installation is made up of many cells which are spread over a mesh of nodes. Each node can participate in many cells. One cell manages one partition key of a volume on an EC2 instance (client). Every operation to a volume is associated with the volume’s partition key.</p><p>The client-centric availability reduces the blast radius compared to global availability to all clients. That is designed for keeping strong consistency with the scalability of EBS. Two different volumes, even if they happen to sit on the same storage servers, still have different partition keys and different cells.</p><h3><span id="drbd-split-brain-solution">DRBD Split-brain Solution</span><a href="#drbd-split-brain-solution" class="header-anchor">¶</a></h3><p>Terminology:</p><ol><li>Replicated data set: According to that a volume contains the replicated data set and and a set of metadata, the replicated data set denotes data, not metadata or states.</li></ol><p>A split-brain issue for DRBD, for example, is that the secondary node is disconnected with the primary node and sees itself as the “primary”. This scenario can result in inconsistent data between those two nodes as they both start to service data.</p><p>DRBD tries to solve network partitions through preventions (dependency on external cluster resource management tool like Pacemaker), pre-configured auto-recovery (dangerous to lose an amount of data), manual intervention when the issue is detected (but how to solve divergent data case even if you get the admin access), and the quorum method. We will look into the quorum method.</p><p>DRBD quorum is a three-node quorum composed of the original two nodes (primary and secondary) and a third server which could be diskless. The main idea of the quorum method is to apply the majority rule on a quorum with a third node for replicated data. The data can be written onto a node only if that node connects to the majority of the existing nodes (including itself) in the cluster. The third node serves as a tie-breaker. However, the third (disk-less) server for a two-node cluster can be the bottleneck of this system. An exception is when a primary node’s secondary nodes leave gracefully, meaning the data on those nodes is out-of-date, the primary node can still write data.</p><p>I argue the downside of DRBD quorum can be attributed to two sources:</p><ol><li>Cluster membership change for DRBD either depends on external membership management tool Pacemaker or the internal auto-promote configuration (v9.1+). Both take a few seconds to promote a new Primary node which could happen frequently in a quorum system.</li><li>Having a disk or not becomes a factor for the majority rule of DRBD. When the third node C is connected to the primary node A only first and then disconnected with A and connected to B. B cannot be promoted to the new primary node because B cannot check if C is up-to-date.</li></ol><p>The majority number of nodes is different from the majority votes applied by consensus algorithms as Raft. It doesn’t achieve a real majority of writes on the nodes for a three-node cluster with a diskless node. Even if can, there are still error cases to consider:</p><ol><li>Stale majority: Network partition: {Node1} vs {Node2, Node3}, Node2 has stale data.</li><li>N/w partitions: A node leaves a partition to another one, causing the majority changes. During the actual promotion/demotion process, two primaries may exist.</li><li>Quorum loss and recovery.</li></ol><p>In conclusion, if RMR requires strong consistency for pool metadata, the number of nodes in an RMR pool group should be greater than three and use consensus algorithms like Raft or Paxos. However, it may be challenging to implement and test.</p><p>Reference:</p><ol><li><a href="https://linbit.com/drbd-user-guide/drbd-guide-9_0-en/#s-split-brain-notification-and-recovery">https://linbit.com/drbd-user-guide/drbd-guide-9_0-en/#s-split-brain-notification-and-recovery</a></li><li><a href="https://linbit.com/drbd-user-guide/drbd-guide-9_0-en/#s-configuring-quorum-tiebreaker">https://linbit.com/drbd-user-guide/drbd-guide-9_0-en/#s-configuring-quorum-tiebreaker</a></li><li><a href="https://kafka.apache.org/documentation/#replication">Apache Kafka documentation</a></li><li><a href="https://louwrentius.com/understanding-ceph-open-source-scalable-storage.html">Understanding Ceph: open-source scalable storage</a></li><li><a href="https://www.slideshare.net/slideshow/ceph-as-software-define-storage/75789863">Ceph as software define storage | PDF | Operating Systems</a></li><li><a href="https://docs.ceph.com/en/reef/architecture/#cluster-map">Architecture — Ceph Documentation</a></li><li><a href="https://www.usenix.org/conference/nsdi20/presentation/brooker">Millions of Tiny Databases | USENIX</a></li><li><a href="https://www.amazon.science/blog/amazon-ebs-addresses-the-challenge-of-the-cap-theorem-at-scale">Amazon EBS addresses the challenge of the CAP Theorem at scale</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.824 distributed systems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Demystifying English Pronounciation</title>
      <link href="/sg/2025/06/19/eng_act/"/>
      <url>/sg/2025/06/19/eng_act/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#intonation">Intonation</a></li><li><a href="#reduced-sound">Reduced sound</a></li><li><a href="#word-connections">Word connections</a></li><li><a href="#th">Th-</a></li></ul><!-- tocstop --></div><p>I’d like to talk about my recent enlightenment regarding the English accent. One mystery I used to have was how American English (AE) differs from British English (BE). AE sounds smoother and more natural, while BE seems a bit rigid and serious. My own English speaking also carries an accent. I tend to articulate every syllable and try to say the whole sentence in one go, if possible. That actually makes it harder for native speakers to understand me. Books related to pronunciation helped me understand why.</p><p>If you’re encountering the same issues, these short notes may be worth reading.</p><p>Elements of Pronunciation introduces five common patterns: weak forms, consonant clusters, linking, contractions, and stress-timing. While the book sheds light on various pronunciation changes, I found that it mostly lists the rules without explaining why these patterns exist. Without understanding the reasons behind them, and with the rules being somewhat vague, I found it difficult to move forward.</p><p>By contrast, American Accent Training by Ann Cook explores the causes and offers specific exercises for every phonetic point.</p><p>In a nutshell, AE intonation is like an orchestra. Each syllable is a musical note. Some words are stressed and thus have a higher pitch. Pitch moves like walking down a staircase. Some syllables are reduced, and vowels often turn into schwa sounds. Intonation, word connections, and the TH sound are the areas I’m focusing on most—and I’ve listed my notes on these topics below.</p><h3><span id="intonation">Intonation</span><a href="#intonation" class="header-anchor">¶</a></h3><p>Vowels take two staircases to stress.</p><ul><li>A short vowel + unvoiced consonants</li><li>A long vowel + voiced consonants</li></ul><p>Three ways to stress a word: volume, lengthen the word, and pitch changes.</p><p>Staircase intonation: when and where to stree</p><ul><li>introduce a new noun</li><li>replace pronouns, stress verbs</li><li>statement, question, emotional/retorical statements</li></ul><p>Reasons to stress:</p><ul><li>new information</li><li>opionion</li><li>contrast</li><li>can’t, no need to stress other negative forms like shouldn’t, couldn’t.</li></ul><p>New sentences don’t have to start new staircases; they can continue from the previous sentence until you come to a stressed word</p><p><u>Spelling and numbers:</u></p><p>There is a distinct stress and rhythm pattern to both spelling and numbers—usually in groups of three or four letters or numbers, with the stress falling on the last member of the group.</p><p>Acronyms and initials are usually stressed on the last letter.</p><p><u>Squeezed-out syllables:</u></p><p>Intonation can also completely get rid of certain entire syllables. Some longer words that are stressed on the first syllable squeeze weak syllables right out.</p><p><u>Syllable stress:</u></p><p>One <strong>syllable</strong> = one musical note. Words that end in a vowel or a voiced consonant will be longer than ones ending in an unvoiced consonant</p><p><u>Complex intonation</u>: word count intonation patterns: adj., n., adv.</p><ol><li>compound noun stress patterns: In noun pharases, each individual <strong>word</strong> was represented by a single musical note.</li><li>Descriptive phrases (adj. + n., adj. + adv.): the stress always fall on the noun. Nouns are new information. In the absence of a noun, stress the adjective.<ul><li>It’s <strong>short</strong>.</li><li>It’s a short <strong>story</strong>.</li><li>It’s really <strong>short</strong>.</li></ul></li><li>Set pharases: word images; indicators of a determined use.<ul><li>two-word descriptive pharases -&gt; set pharases, emphasis shifts from the second word to the first.</li><li><strong>pain</strong>killer, a <strong>love</strong> letter, <strong>passers</strong>by</li></ul></li><li>Nationalities: depends on the importance of a word<ul><li>an <strong>American</strong> guy: guy can be left out without changing the meaning.</li><li>an American <strong>restaurant</strong>, descriptive pharases</li><li><strong>American</strong> food: food is a weak word</li><li>an American <strong>teacher</strong>, descriptive pharases</li><li>an <strong>English</strong> teacher, subject, set pharases</li></ul></li></ol><p>Grammar:</p><p>The verb tenses are thrown down in the valleys. Articles and verb tense changes are usually not stressed.</p><p>The th of them is frequently dropped (as is the h in the other object pronouns, him, her)</p><p>Supporting words:  (CD 2, 8,10-11)</p><p>Can or Can’t:</p><ul><li>Can, /k 'n/, stress the <strong>verb</strong> -&gt; positive</li><li>Can’t, /kæn (t)/, make it short and stress <strong>can’t</strong> + <strong>verb</strong> -&gt; negative</li><li><strong>can</strong> do -&gt; extra positive</li><li><strong>can’t</strong> do -&gt; extra negative</li></ul><p>Build an intonation sentence</p><p>The miracle technique:</p><p>Learn to hear again. A child can hear every sound of every langue while adults stop listening for the sounds that they never hear.</p><p>Word groups and phrasing</p><img src="/sg/2025/06/19/eng_act/Screenshot-0338634.png" class title="Screenshot-0338634"><p>Breath groups and idea groups.</p><h3><span id="reduced-sound">Reduced sound</span><a href="#reduced-sound" class="header-anchor">¶</a></h3><p>The position of a syllable is more important than spelling in pronunciation.</p><p>ph<strong>o</strong>tograph, phot<strong>o</strong>graphy</p><p>Syllables on a peak or a staircase (intonation) are strong sounds.</p><p>Syllables that fall in the valleys or on a lower stairstep are weak sounds, thus reduced.</p><p>Reduced sounds are valleys.</p><p>Reduce a vowel by tonning done or changing to a schwa.</p><p>Fix overpronouncing: You skim over words; you dash through certain sounds.</p><p>Articles are very reduced sounds.</p><ul><li>the, a: schwa sounds. For example, <code>a nugly hat</code>, an orange -&gt;<code>a nornj</code>, <code>thee(y) easy way</code></li></ul><p>In the beginning, you should make extra-high peaks and long, deep valleys. When you are not sure, reduce.</p><p>Reduced sounds: when a sound is reduced, the following sound is usually stressed. (Ex. 1-52, CD 2, Track 26)</p><ul><li>To<ul><li>preposition: reduced to  /t/ or /tə/.<ul><li>To school; to the store; He went to work; To be or not to be.</li></ul></li><li>to + (consonant) + vowels: becomes /d/ or /də/.<ul><li>He told me to <strong>help</strong>. She told you to <strong>get</strong> it. At a quarter to <strong>two</strong>.</li></ul></li></ul></li><li>At<ul><li>small grunt + reduced /'t/ or /ət/.<ul><li>We’re at home. I’ll see you at lunch.</li></ul></li><li>at + vowels: becomes /'d/ or /əd/<ul><li>Dinner’s at five.</li></ul></li></ul></li><li>It<ul><li>It and at sound the same in context /'t/</li><li>Turn to /'d/ or /əd/ between vowels or voiced consonants</li></ul></li><li>For: reduced to /fr/. Unless it is at the end of a sentence /for/</li><li>From: /frm/. At the end: /frəm/</li><li>In: reduced to /'n/</li><li>An: reduced to /ə’n/</li><li>And: reduced to /n/ or /ə’n/</li><li>Or: /'r/</li><li>Are: /'r/</li><li>Your: /y’r/</li><li>One: /w’n/</li><li>The: /th/ or /ə/</li><li>A: /ə/</li><li>Of: /'v/ or /ə/<ul><li><img src="/sg/2025/06/19/eng_act/Screenshot-0334994.png" class title="Screenshot-0334994"></li></ul></li><li>Can: /k’n/</li><li>Had: /'d/<ul><li>If there are two hads, reduce the first one.<ul><li>Jack had had enough. [jæk’d hæd’ n’f]</li><li>Had you ever had one?</li></ul></li></ul></li><li>Would: /wud/</li><li>Was: /w’z/</li><li>What: /w’t/, /w’/, /w’d/</li><li>Some: /s’m/, /səm/</li><li>That<ul><li>the relative pronoun and conjunction are reducible to /the 'd/ or /th’t/</li><li>demonstrative pronoun cannot be reduced: /æ/. That book.</li></ul></li><li>Her, his: /h/ is reduced -&gt; /er/, /is/</li></ul><p>Plurals:</p><ul><li>/s/, ends in a voiceless consonant: cups</li><li>/z/, ends in a voiced sound or a vowel sound: keys</li><li>/iz/, ends in s, z, sh, ch, x or ge: buses, watches</li><li>/θs/, ends in /θ/: baths, paths</li><li>ðz, ends in th whose sounds changes from /θ/ to /ð/ in the plural: mounth, truth</li></ul><h3><span id="word-connections">Word connections</span><a href="#word-connections" class="header-anchor">¶</a></h3><p>liaisons</p><p>semivowels: W, Y, R</p><p>Vowels don’t touch any point in the mounth but consonants do.</p><p>Words are connected in four main situations:</p><ol><li><p>Consonant  / Vowel:</p><ul><li>when the consonant is /n/, /m/, /l/, /w/ it will be pronounced in liaisions.<ul><li>fall off: /fä läff/</li></ul></li><li>Also used in spelling and number connections.</li></ul></li><li><p>Consonant / Consonant: the next C is in a similar position in the month to the first C. If the first C is /t/, it can be omited usually.</p><p>Three general locations of sounds are the lips, behind the teeth, or in the throat. The similar position denotes to the two C’s are in the same location. Such words can be linked togother.</p><img src="/sg/2025/06/19/eng_act/Screenshot-0340914.png" class title="Screenshot-0340914"><p>The TH sound is floater between areas. Combinations of various letters forms a new <strong>composite</strong> sound. (2-9, CD 2, 42)</p><img src="/sg/2025/06/19/eng_act/Screenshot-0341480.png" class title="Screenshot-0341480"></li><li><p>Vowel / Vowel: two Vs are connected with a glide in between which is either a slight /y/ or /w/ sound.</p><ul><li>Go away. /w/</li><li>I also xxx. /y/. Don’t force this sound too much.</li></ul></li><li><p>T, D, S, or Z + Y</p></li></ol><h3><span id="th">Th-</span><a href="#th" class="header-anchor">¶</a></h3><p>Pronounciation:</p><ul><li>Think of a snake’s tongue: a quick and sharp little movement</li><li>Keep your tongue’s tip very tense: darts out (0.5 cm) and snaps back very quickly</li><li>Remind tougue’s position is placed between the teeth or even pressed behind the teeth.</li></ul><hr><p>Readings: American Accent Training</p><p>Chap 1: Intonation<br>Chap 2: Word connection<br>chap 7: Th-sound</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A System View of Networks</title>
      <link href="/sg/2025/06/13/nw_link/"/>
      <url>/sg/2025/06/13/nw_link/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#chapter-1-foundation">Chapter 1: Foundation</a><ul><li><a href="#requirements">Requirements</a></li><li><a href="#arch">Arch</a></li><li><a href="#local-area-routing">Local area routing</a></li></ul></li><li><a href="#chapter-3-internetworking">Chapter 3: Internetworking</a></li></ul><!-- tocstop --></div><p>Readings:</p><ul><li>Software Engineering for Systems Hackers, David’s notes</li><li>TCP/IP Illustrated, Volume 1: The Protocols by W. Richard Stevens.</li><li>Unix Network Programming: Networking APIs: Sockets and XTI (Volume 1) by W. Richard Stevens.</li><li>Advanced Programming in the Unix Environment by W. Richard Stevens, Addison-Wesley, 1993</li><li>computer networks, a system approach</li></ul><ol><li>basics: IP</li><li>applications: Web, HTTP, CDN, Overlays (P2P and bitcoin), security</li><li>modern n/w infrastructure: router, data center n/w</li></ol><h2><span id="chapter-1-foundation">Chapter 1: Foundation</span><a href="#chapter-1-foundation" class="header-anchor">¶</a></h2><p>Problem 1: build a network</p><ol><li>requirements from stakeholders: Stakeholders of a computer system may share different perspectives on it. We need to consider network designers, n/w operators, and application programmer in respect to computer networks.<ul><li>designer: share n/w resource fairly</li><li>app programmer: networks provides (logical) channels for application processes to communicate</li><li>operator: Automation and avoidance of change make n/w more manageable. An operator can configure one router but not thousands of routers.</li></ul></li><li>Designing a n/w for performance should be aware of the performance metrics first.</li><li>N/w designers have developed n/w architectures guiding the design and implementation of n/w which include Internet architecture and OSI model.</li></ol><p>A recursive definition of a network: A network can consist of subnetworks, each composed of two or more nodes connected by physical links.</p><p>To build a network from the bottom up, we start by connecting two nodes with a physical link. We then scale the network by adding additional nodes or subnetworks.</p><p>The challenge then becomes providing network connectivity through addressing and routing mechanisms.</p><p>Terminology</p><ol><li>Direct links: a network can consist of two nodes. The physical medium that connects two nodes is called a link. A node can refer to a computer or a specialized piece of h/w. Direct links are composed of point-to-point and multiple-access ones.</li><li>Point-to-point links: a pair of nodes share a single physical link whereas multiple-access is more than two nodes sharing one link.</li><li>Indirect links: switched n/w among which the circuit switched type is for telephones and the packet switched type is for general n/w.</li><li>Packet-switched n/w: the nodes send discrete blocks of data to each other. It uses store-and-forward approach to transfer data. Each node receives a complete packet over some link, stores it and then forwards to the next node.</li><li>Circuit switched: This kind of n/w establishes a dedicated circuit across a sequence of links and then allows the src node to send data stream to a dest node.</li><li>Internetwork (internet): a set of independent n/ws are interconnected to form an internetwork.</li><li>Convention: a generic <strong>i</strong>nternet, the TCP <strong>I</strong>nternet</li><li>Router/Gateway: A node that is connected to two or more networks is commonly called a <em>router</em> or <em>gateway</em></li><li>Address: An address is a byte string that identifies a node. By specifying an address of a node, it can achieve host-to-host connectivity.</li><li>Routing: The process of determining systematically how to forward messages toward the destination node based on its address is called <em>routing</em>.</li><li>Source routing (or path addressing): the path to reach a given destination is explicitly specified by the source when it first injects a packet into the network.</li><li>Cast: that the source node sends a message to a single node is called unicast (one-one). broadcast (one-all), multicast (one-many)</li><li>Multiplexing, which means that a system resource is shared among multiple users. As in n/w context, data sent by users can be multiplexed over the direct links.</li><li>STDM, synchronous time-division multiplexing. The idea is to divide time equally and, in a round-robin manner, each flow can send its data over the physical link.</li><li>FDM, frequency-division multiplexing. The idea is to transmit each flow over the link at a different frequency.</li><li>Packet, the limited-size block of data that the physical link allows for a data flow to transmit.</li><li>FTP, file transfer protocol</li><li>Burst error, several contiguous bits are corrupted.</li><li>Bit error, a bit is flipped. It occurs because of outside forces. (1/(10<sup>6~10</sup>7) on a copper cable, 1/(10<sup>12-10</sup>14) on an optical cable)</li><li>MAC, media access control address, 48 bits long, written in hex. It’s used as part of Ethernet protocol. e.g. 34:f3:e4:ae:66:44.</li><li>Ethernet is a family of wired computer networking technologies</li><li>Broadcast storm</li></ol><h3><span id="requirements">Requirements</span><a href="#requirements" class="header-anchor">¶</a></h3><p>Why packet-switched networks are more efficient than circuit-switched ones?</p><p>The capability of transmitting data on a switch (bandwidth) is limited. When multiple hosts need to send data to their counterparts over a shared physical link, data flows are multiplexed onto the link and then demultiplexed at the receiving end. Common multiplexing methods, such as STDM and FDM, support only a fixed number of data flows, as it is difficult to allocate additional time slots or frequencies dynamically. Moreover, STDM can result in significant idle time if a host has no data to send during its allocated time slot.</p><p>Statistical multiplexing addresses these limitations by allocating transmission time to data flows <strong>on demand</strong>. By avoiding idle time, it gives packet-switched networks efficiency. To ensure fair access to the link and prevent a single large message from blocking other flows, statistical multiplexing imposes an upper limit on the amount of data each flow can send at a time—i.e., the packet size. Large messages are therefore fragmented into multiple packets for transmission and reassembled upon reception.</p><p>Each switch independently decides which packet to forward next, typically on a packet-by-packet basis. To maintain fairness, switches may use strategies such as First-In-First-Out (FIFO) or round-robin scheduling.</p><p>Switches also buffer incoming packets in memory in case packets arrive faster than the shared link can transmit them. If the buffer becomes full, some packets must be dropped—a condition known as congestion, which is the key challenges of statistical multiplexing.</p><p>App level of n/w: Many applications require common n/w services. It is the network designer’s responsibility to define an appropriate set of services that abstracts away the underlying network complexity from the application programmer. Such services are provided through (logical) channels. Each app can select the type of channel which meets its needs best.</p><p>A common communication pattern is to request and reply. To support such services, two types of channels are provided, request/reply channels and message stream channels.</p><p>Where the functionality of channels is implemented involves a trade-off between packet switches and the end hosts (devices).</p><p>N/w failures make it difficult to deliver a message reliably. There are three class of failures: at the bit level, bit errors or a burst error; at the packet level, packet lost or late; at the node and link level, a link is cut or flaky, or a node crashes.</p><p>Minimizing change simplifies network management, but it also underscores a fundamental trade-off between system stability and feature velocity. The deployment of new features within the network can impact thousands of dependent services and potentially result in significant periods of unavailability</p><h3><span id="arch">Arch</span><a href="#arch" class="header-anchor">¶</a></h3><p>The hourglass design of Internet protocols reflects the central philosophy of the architecture. IP defines how to exchange packets as the focal point of the arch. The narrow-waisted model makes n/w easy to embrace new technologies and user demands.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FTP HTTP DNS TFTP</span><br><span class="line">  \/       \/</span><br><span class="line">  TCP      UDP</span><br><span class="line">       \/</span><br><span class="line">       IP</span><br><span class="line">  /  / /  \  \</span><br><span class="line"> Ether ...  LTE WiFi</span><br><span class="line">   (subnetwork)</span><br></pre></td></tr></table></figure><h3><span id="local-area-routing">Local area routing</span><a href="#local-area-routing" class="header-anchor">¶</a></h3><p>Example of building a LAN:</p><ol><li>choose an addressing scheme: Use Ethernet. MAC shows the destination and source address.</li><li>choose a routing algorithm to deliver packets to the destination<ul><li>broadcast with learning switches algorithm: incurs loops, causing broadcast storm</li><li>broadcast with learning switches and spanning tree: solves loop issue</li><li>distance vector</li></ul></li></ol><p>MAC addresses: all MAC addressed are unique, assigned by the device’s manufacturer. Every device (wireless adapter, Ethernet port, bluetooth connector) has attached a MAC address.</p><h2><span id="chapter-3-internetworking">Chapter 3: Internetworking</span><a href="#chapter-3-internetworking" class="header-anchor">¶</a></h2><p>In networking layer, Internet protocol provides inter-network connectivity to hosts, sending packets destined across networks. Sub-networks are connected via routers.</p><p>IP addressing</p><ol><li>hierarchical addressing: replace flat addresses (source routing) with hierarchical addresses which are easier to scale and forward</li><li>class-based addressing: obsolete today. Traditional addressing tends to use network/host split and dotted-quad notation.</li><li>subnet addressing: use network/subnet/host split. A single network number is shared among multiple networks called subnets. Subnets are close to each other, reachable by a single router. They are not visible outside.</li><li>CIDR</li></ol><p>Subnetting: All the nodes on each subnet are configured with a subnet mask and sharing the same subnet number. The subnet number is the bitwise AND of an IP address and a subnet mask of this subnet. By checking the bitwise AND between IP address of the destination host and the subnet mask of source host matching the subnet number of source host, it’s able to find out if these hosts are on the same subnet, thereby sending message via the subnet instead of a router.</p><p>Example:</p><p>IP address: <code>192.168.1.10</code> = <code>192.168.1.0</code> + <code>10</code></p><p>Subnet mask: <code>255.255.255.0</code>. The ‘1’ marks the network part and the ‘0’ marks host part.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IP:          11000000.10101000.00000001.00001010</span><br><span class="line">Subnet mask:     11111111.11111111.11111111.00000000</span><br></pre></td></tr></table></figure><p>IP header design: the information of an IP header need is to parse packet, carry packet to the destination and deal the failures (loops, corruption, very large packet).</p><ul><li>TTL, time-to-live filed (8 bits) prevents forwarding loops as it decrements at each loop and the packet will be discarded when it reaches 0.</li><li>A router can split a packet into multiple fragments when its size is larger than the link’s MTU</li></ul><p>Tunneling forces a packet to go to specific point in the network. It doesn’t go through the regular path. A tunneling app is VPN.</p><p>A host has a host name, an IP address and a MAC address.</p><p>ARP helps to translate IP to MAC, an Ethernet address, by broadcast searching for IP address to all devices on the LAN. Each ARP response is cached as an ARP entry with a timeout on host’s ARP table. However, ARP broadcast takes O(N^2) for an N host network. Proxy ARP decreases the overhead of broadcast.</p><p>DNS is a directory service for hosts on the Internet which maps from host addresses to host names.</p><p>Terminology</p><ol><li>LAN: local area n/w,</li><li>WAN: wide area n/w</li><li>End host/host/computer/device, switch/bridge/router, number-port switch</li><li>IP addresses (IPv4) uses a unique 32-bit number associated with a host. It’s partitioned into a prefix (network) and suffix (host) components. It’s represented with the dotted quad notation. e.g. 12.34.158.5.</li><li>Class-based addressing, an early method of assigning IP addresses (specifically IPv4) by dividing the entire IP address space into fixed-size classes, based on the leading bits of the address.</li><li>Subnet: the idea is to take a single IP network number and allocate the IP addresses with that network number to several physical networks which is referred to as subnets. A subnet can consist of multiple hosts.</li><li>CIDR, classless interdomain routing. Flexible division between network and host addresses. Need to specify the boundary of network prefix by slash. e.g. 128.23.9/26 uses 26 bits as n/w prefix.</li><li>Frame, a data unit for data link.</li><li>Datagram (IP packet), a data unit for network layer.</li><li>MTU, maximum transmission unit. Every link has a MTU which defines largest number of bits it can carry as one unit.</li><li>ARP, address resolution protocol.</li><li>DNS, domain name system.</li><li>All FF address: <code>FF:FF:FF:FF:FF:FF</code>, an Ethernet destination means to broadcast to all devices on the LAN.</li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-441 networks </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>三城二人🇮🇹</title>
      <link href="/sg/2025/05/08/travel_firenze_may/"/>
      <url>/sg/2025/05/08/travel_firenze_may/</url>
      
        <content type="html"><![CDATA[<p>我一直想去意大利随便走走，和朋友小r一说一拍即合，于是我们趁着五一假期约好一起出行。小r和我在性格上有诸多相似，都比较随性和散漫，比如懒得制定非常精确的计划（小r风评被害x）和如非必要绝不提前规划一天以上的日程。故而在起飞前往意大利的第一天，我们只确定了会去三个城市，分别是威尼斯，佛罗伦萨和米兰，其他都是未知。</p><p>小时候我就对威尼斯有个朦胧的印象，因为收到的第一张明信片就是威尼斯水城，再加上小学课本里的描写。曾梦到过一个场景，和一个人去桥下探索一个书店，又或者在窗前听到河流。这或许是欲抑先扬？威尼斯实际上并不符合这样的设想。</p><p>威尼斯我们主要在主岛转了转，那里有错综复杂的窄巷河道，熙熙攘攘的游客和摆着各种“工艺品”的小商贩。河道的水呈现出一种浑浊的绿色，要走到靠近码头边水的颜色才逐渐变蓝，如果有阳光加成。沿着外围走过一条摆满了画作和纪念品的小道，一些须发皆白的画师在现场作画，而旁边则挂着成品。可后来我听说实际上卖给游客的成品有印刷的痕迹，是否真的值得买就见仁见智了。岛上的商业化也很严重，我们走过很多家卖着同类商品的店铺，价格令人瞠目。优点是天气尚可，在黄昏时分还是抓住了一些美丽的瞬间。或许是天黑了就看不清楚河道的颜色了:P</p><p>我们实际上是在威尼斯周边的小城帕多瓦暂住，这后来被证明是明智之举。一避开了威尼斯拥挤的人流，二不用面对居住在主岛上昂贵的住宿和行李箱刺客——台阶和鹅卵石，三躲开了火车站周围便宜的住宿但略显危险破败的环境。要说帕多瓦有什么缺点，那应该是没有多少中餐。初到帕多瓦让我有种回国的感觉。这个小城不算什么旅游胜地，破旧的房舍街道，工地中的教堂，看起来就像是一个有一些景点的二线城市。然而好天气，绿地公园和人少仍旧让我们更偏爱帕多瓦。我们在街角行走时闻到有几分清雅的香气，来自于庭院内长得茂密的海桐花。它长得和桂花略有相似，香味也清新怡人。后来的几天我们也在不同的地方重遇到海桐。</p><p>虽然是由于建筑才选择了佛罗伦萨，但最后我们也没去任何室内观瞻大师们的杰作。不得不承认主要原因是我们最后一刻才订票的旧习。下次或许我们会记得买票去圣母百花教堂的穹顶，或者再去某个博物馆逛逛。</p><p>佛罗伦萨我们同样避开了拥挤的市中心，选择了住在了郊区。阴差阳错我们也因而遇到了目前住过的最好的酒店和 host。这成为我们旅行的闪光点之一。</p><p>佛罗伦萨处于托斯卡纳地区，出城之后可以轻易欣赏到其地貌。连绵的田地坐拥在丘陵之上，松柏郁郁葱葱，还种植着葡萄藤和橄榄树。我们所住在的山庄在庭院里就能将远方的丘陵收入眼底。尽管后来的两天天气不好，几乎没有一个城市能够打破阴天滤镜，我们也在山庄里感受到了静谧的田野生活。</p><p>在城区内我们撞见了很多教堂和能够挤满街道广场的人。在欧洲去过的城市里，我很少能够见到有如此多游客的地方。在米开朗基罗广场能够俯瞰城市的全景，只是河流在没有阳光的时候会回到他本来的泥沙绿。整座城市都是红房子，小r查到那是由于佛罗伦萨市政府有保持其城市古建筑风格的条例。</p><p>佛罗伦萨周边也有许多小城可以转转，比如卢卡，锡耶纳，比萨。我想去卢卡看看那个长了一棵树在头顶的古塔，小r想去比萨买晴雨冰箱贴。在弗洛伦萨剩下的最后第二个晚上，我们在不甚好的天气预报下制定好从市区去卢卡和比萨的详细路线。然后从画饼到放弃，强度太大不想去了。于是我们转而商量要不要取消原定于市区附近的住宿继续多住在山庄一天，就在市中心继续晃悠。讨论逐渐变成理智和情感的对抗，理智上应该省钱，情感上不愿放弃当下舒适的环境。不管怎么列举缺点，都改变不了我们更愿意待在山庄休闲的心情。</p><p>出门总是能遇到阴雨天气，行程的最后几天几乎都是下雨。原本我们想去科莫湖附近走些路线，但山雾缭绕的河边小镇也转不了多长时间。去的川菜馆我倒觉得挺不错的，要是我家附近也有这样物美价廉的中餐馆就好了。</p><p>在米兰的两天我们主要都在吃吃吃。米兰有一条华人街，里面有各种小吃，饭馆，早餐店，奶茶店，烧烤，麻辣烫等等。这些看似平常的事物在异乡已经变成难能可贵的存在了。</p><p>意大利餐我们错位吃了佛罗伦萨闻名的 T 骨牛排和 tartare （一种生牛肉）。服务生给我们选择的牛肉推荐了五分熟，尽管我们都更偏好全熟但还是相信并尊重了她的推荐。而生肉则是因为小r想尝尝意大利的这道特色菜。事实证明我们真的一点也不喜欢生肉，五分熟基本里面也都是生的。吃起来虽然没什么腥味也实在有种茹毛饮血的感觉。</p><p>旅途中我们在玩一个很简单的 word game。起因是我先和小r 说人很难想出10个以v开头的单词。然后演变到说出以某个字母开头的单词，从出现频率越少的字母开始。有意思的地方在于总会有很熟悉的单词被忘记。比如在说 k 时我根本想不起来 kernel，说 p 时我们都没想到 potato。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Portugal: An Unexpected Journey</title>
      <link href="/sg/2025/03/24/travel_lisbon/"/>
      <url>/sg/2025/03/24/travel_lisbon/</url>
      
        <content type="html"><![CDATA[<p>Thanks to rainy days in Portugal, I had met rainbows quite frequently, some of which I looked through webcams<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> of Madeira<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>. The reason I chose the Madeira islands as the destination of my travel is that there are many hiking trails. Moreover, throwing myself to a distant island for several days, wouldn’t that be nice? Given that few direct filghts were available and Lisbon is so close to Madeira as compared to other European cities, my original plan was to have two-day stopover in Lisbon, five days in Madeira and fly back to Berlin through Lisbon with two-hour layover.</p><p>It went well as I could have lied around for a weekend before setting out until a national airport strike was happening on the exact day of my outbound flight took off. How lucky I was to experience it all over again. There was also a strike of trains last year which made me start off one day later. I “happily” embraced the new change which I paid for extra 300 euros and arrived in Lisbon in a cloudy day before the strike. Wondering if it’s a right decision, I found a rainbow against the sky with a little bit of sunshine just over the street. Maybe that’s a sign.</p><p>The rains make cities look somber with no exceptions. But Lisbon is an exceptional city. People there are warmhearted and friendly, which is quite opposite to the cold and detached feeling of Germany. I found myself have pleasant meals sometimes without understanding full words of waiters at the restaurant, mostly because of their smiles and politeness. Paella is one of must-have foods in Portugal, which is a dish of rice, vegetables, seafood or chicken in a large pan. Even if I am not particularly into seafood, it tasted good. Roast chicken I had once, on the other side, was mediocre which looked no different than that in other places. Or I just didn’t find the right restaurant.</p><p>Pouring rain was actually not that bad if you wore right gears including a water-proof jacket and shoes while hoding an umbrella. I felt pretty good stamping on wet tiles and passing by shops whose frontier were crowded with pedestrians as if the rain didn’t exist. The weather of the next day turned better with a little more sunshine. You could see the sparkling sidewalks, white tiles flashing as going through. The city came alive and seemed busier than yesterday. Waiters were standing outside to gather customers going by. Tourists tried to capture the spirit of ancient relics or went along with locals to lie down in the grassland basking in the long-lost sunshine. I followed the map to a viewpoint (Miradouro, Portuguese) where the buildings and harbors were underfoot. Many people had already got there, sharing music, nice views, and company of each other. Provided with enough time, I would like to go to some more viewpoints to have a complete sketch of this place.</p><p>One goal of Libon trip for me was to find lemon fish. Oceanário de Lisboa (aquarium) is special for connecting all champers together to constitute the conception of ocean. After some time to seach, I found a group of lemon fish, which I didn’t know their exact names but did share similar appearances. Mission completed :) I also found it interesting that a lemon fish and a little blue fish (let’s call it blueberry fish) were teasing. The blueberry fish tagged along behind the lemon fish and wouldn’t let it go. I was sure that the lemon fish wanted to break away as it swung its tail several times.</p><img src="/sg/2025/03/24/travel_lisbon/IMG_9170.jpg" class title="IMG_9170"><p>Another surprising creature was seadragons which is a nearly extinct species coming from southern australia. Mimicking the surroundings to protect themselves, seadragons evolve and take different forms such as weeds or leaves. From their shapes, it should be easy to identify which one is Leefy Seadragon or Weedy Seadragon. I must say they were a little intimidating, which was also what I felt when I saw a shoal of fish swimming in my direction while knowing they couldn’t touch me.</p><img src="/sg/2025/03/24/travel_lisbon/IMG_8500.JPG" class title="IMG_8500"><img src="/sg/2025/03/24/travel_lisbon/IMG_8495.JPG" class title="IMG_8495"><p>I didn’t think it through about how weather would affect my schedule. Since sea became a key factor of the travel, a turbulent storm wasn’t much surprising. It had influence over every flight I’d taken. Though, we’ll come to this part of thrilling return later in this blog. In the beginning, I was just grateful my flight to Madeira didn’t get cancelled and made my way to the hotel in Funchal. In the evening, the daylight went away gradually and lights lit up by the seaside. A peaceful and blue moment in the bus, I pondered. When the bus got closer to towns sitting by the hills, what I saw was similar to villages in Kephallonia from Assassin’s Creed Odyssey. I was living in a game.</p><p>The first sight of Funchal reminded me of some old streets around my university. I had to say it’s a little crappy and a sense of fear caught me when I walked into those narrow and dim alleys. Concerning the safety matters, one can never be too careful. Despite the worries of nights, I had to find a supermarket to buy some water and snacks for the next-day activity which required me to meet up at 5:30 AM. It’s not that scary after all. Extra time allowed me to grab a dinner of a Portuguese-style steak which I don’t recommend :(</p><p>Madeira is an ideal land for hiking lovers with multiple hiking routes<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup> covering this archipelago. PR1, PR1.2 and PR8<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> are the most amazing ones from my investigation prior to my arrival. In a perfect world, people can see a stunning sunrise at Pico do Areeiro where PR1 starts. Firstly, you expore the unique landscapes through hiking for 6.1 km to Pico Ruivo, which is one of Madeira’s highest mountains and the starting point of PR1.2. Keep walking for another 2.8 km and you will be in the right place at Achada do Teixeira. Tour groups in Madeira can take over drop-off and pick-up for this route at a reasonable price. Sounds like a good plan, hah?</p><p>I wake up at 4 AM at the scheduled day of PR1 with concerns that I couldn’t afford to miss the activity. Luckily, I found a cat mate walking by who was also alone when I got to the meet-up point at 5:25 AM. Wind were blowing and it was still pretty dark. Hanging around for ten minutes or so, I started to get cranky when not a single car stopped. I checked the app where I booked the activity and finally knew it was cancelled last night. The question following was whether or not to stick to my plans given current weather conditions<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup>.</p><img src="/sg/2025/03/24/travel_lisbon/IMG_9171.jpg" class title="IMG_9171"><p>Lying down for a while, I couldn’t stand it I gave up no matter what and hopped on a taxi to Areeiro. I didn’t know what lay ahead, but I knew it might be one of those moments I would regret. On the way up the mountain, sunlight streamed through the forest. That day was actually the best day of Areeiro during the week I stayed in Madeira. Even though I could only walk for 1.2 km to Redra Rija in the end, it was enough for me.</p><img src="/sg/2025/03/24/travel_lisbon/IMG_9172.jpg" class title="IMG_9172"><p>The PR8 trail went smoothly - that was, until I got on a bus back to Funchal. There were more passengers than empty seats and I happened to be one of the people that had to stand. The bus ride was really bumpy, constantly turning and braking. A fit of dizziness hit me just as we were around 15 minutes from town. I was about to pass out when I suddenly leaned onto the lady on my left. She noticed me and asked concernedly if I was ok. I could only shake my head as my body slowly slumped down with closed eyes. She quickly offered me her seat and, along with her friend, helped me get back on my feet. Some other passengers sounded worried too. I was moved and deeply grateful for their kindness and support.</p><p>It was a heavy rain when I went for the Levada walk trip with a tour group. Storms once again came strong to the western coast. That forced the guide to pick a shorter trail in the northeastern where rain was lighter. I wouldn’t want to risk my clothes so I asked for a raincoat, called “Poncho” in Madeira, from the guide. The trek was very muddy and damp. Although, the upside was it’s also refreshing in the midst of countryside. I knew a friend would definitely like this kind of tour right after the rain.</p><p>“Levada” means mini-canal, a special irrigation system consisting of narrow channels that transport water from the rainfall heavy northern regions to the drier southern regions. These channels follow the contours of the mountains and hills, creating a network across Madeira.</p><p>We walked for two hours and reached a small shop for drinks. Poncha, a traditional Madeiran drink made with rum, was available there. Many travellers seemed to enjoy it. Before going back to Funchal, I got into the minibus when the guide suddenly asked about “Poncho”. I thought she was referring to Poncha, so I replied, “It’s good, but I can’t drink.” She looked confused and repeated the words. I was confused too, and said again, “I can’t drink alcohol.” That didn’t help. Then she leaned into the bus and said, “Didn’t I get you a raincoat? Ah, I see the misunderstanding. You see, Poncha is what we drink, and Poncho is the raincoat.” I finally realized what had happened and quickly gave back the raincoat I had borrowed. She patted me on the shoulder and said with a smile, “A good joke.” Some fellow travelers were laughing too.</p><img src="/sg/2025/03/24/travel_lisbon/IMG_9086.JPG" class title="IMG_9086"><p>Seafood is unavoidable in coastal cities. Madeira produces a lot of bananas. And apparently black scabbardfish is a local specialty. That makes up a tradional dish called Espada com banana. Personally, I didn’t like the blend of sweetness and saltiness, but it might be your thing. Another must-try dish is the beef skewer, which is tastier than the Portuguese steak I had the other day.</p><p>The morning I returned to Germany, I spotted a rainbow arching over the cable car through the window of my hotel room. I kept a good mood on the way to airport and got onboard, which gave me some time to write. However, bad news came from the crew: our flight would be delayed by around one hour and a half due to coastal events ongoing in Lisbon. What made things difficult was that the terminal for my first flight was different from the one for my connecting flight - which meant I had to take a shuttle to T2 at Lisbon airport and go through security all over again. I only had two-hour layover, so the delay could have caused me to miss my flight to Berlin. Not to mention, I had to work the next day. During the first flight, I ran through every possible scenario in my head: what steps I’d need to take, what to say to the airline staff. As soon as the plane landed, I bolted out of the aircraft and ran toward T2 like a maniac. You can probably imagine what that looked like. Fingers crossed, I made it to the gate with just 10 minutes to spare. It was such a relief - I didn’t have to buy another flight, book a hotel room, or call my manager to explain a last-minute absence.</p><p>I guess that’s why I saw the rainbow in the morning.</p><img src="/sg/2025/03/24/travel_lisbon/IMG_9104.jpg" class title="IMG_9104"><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://madeira.best/useful-info/webcams">https://madeira.best/useful-info/webcams</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://www.netmadeira.com/">https://www.netmadeira.com/</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://visitmadeira.com/en/travel-info/useful-information/">https://visitmadeira.com/en/travel-info/useful-information/</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://ifcn.madeira.gov.pt/pt/atividades-de-natureza/percursos-pedestres-recomendados/percursos-pedestres-recomendados.html">https://ifcn.madeira.gov.pt/pt/atividades-de-natureza/percursos-pedestres-recomendados/percursos-pedestres-recomendados.html</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://visitmadeira.com/en/what-to-do/nature-seekers/activities/hiking/">https://visitmadeira.com/en/what-to-do/nature-seekers/activities/hiking/</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://www.ipma.pt/pt/otempo/prev.localidade.hora/#Madeira&amp;Areeiro">https://www.ipma.pt/pt/otempo/prev.localidade.hora/#Madeira&amp;Areeiro</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Summary of Andrej&#39;s LLM Sessions for General Audience</title>
      <link href="/sg/2025/03/17/llm_intro_sum/"/>
      <url>/sg/2025/03/17/llm_intro_sum/</url>
      
        <content type="html"><![CDATA[<p>After watching three videos by Andrej Karpathy<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, I have gained new perspectives on current LLMs.</p><p>Here were my misunderstandings and questions about LLMs before:</p><ol><li>Can LLMs truly think? I doubted this when Claude released its 3.5 Sonnet model. There is a script called thinking-Claude which makes Claude explicitly show its thinking process of answering questions using natural language. Though it appeared as if Claude could think step-by-step and verify the results, I was hesitant about the nature of the chatbot under the hood. What if it just makes stuff up and demonstrates a chain of thoughts that users think it’s supposed to have?</li><li>Why does Claude hallucinate and behave inconsistently? It needs so many calibrations to make a simple app work.</li><li>How does thinking help chatbots improve their answers?</li><li>Claude seems more humane than ChatGPT to me.</li><li>How does ChatGPT work?</li><li>Cognitive ability: self-consciousness</li></ol><p>Conclusions of the intro sessions:</p><ol><li><strong>Next-word prediction</strong>: The generation of a chatbot breaks down into two main stages: pre-training and post-training. In the first stage, a very large amount of internet documents are extracted and processed to train a base model. The question it solves is very simple, which is next-word prediction. This stage is the most time and computation consuming, taking many months or even a year. It outputs a base model containing billions/millions (?) of parameters, depending on the size of data fed and the computational ability of chips/hardware. In the second stage, we want to make the base model talk/answer questions, to function like an assistant model. This step is trained using Q&amp;A documents first collected from human labelers and later simulated by the model itself. The assistant model can then answer questions following the Q&amp;A modality. By nature, an LLM merely predicts the next word one by one.</li><li><strong>Context windows and tokens</strong>:<ul><li>Token: Nowadays, language models can only take text tokens as inputs. All forms of human-readable files such as PDFs, DOCs, TXTs, Excel files, etc., are transcribed to one-dimensional token sequences. The model understands the world as tokens, captures internal behaviors between words, and provides the most statistically likely following tokens. Images, videos, and audio are also transformed into text.</li><li>Lossy simulation: A language model has a limited context window to which it has direct access. It has base memory and working memory. Base (knowledge) memory consists of numerous parameters derived from internet data, which is vague recollection of internet data and can be outdated because the pre-training stage is expensive and seldom runs fully. Working memory is what can be instantly loaded into the context window. The prompt window provides a place the model can access very quickly. It usually provides more details than having the model retrieve tokens from its base memory. When you ask a model to generate a summary of a book chapter, it’s best to provide the text of the chapter instead of asking for it directly.</li><li>Language models see the world as tokens. It’s beneficial to distribute the computational overhead across tokens/answers. Each token goes through a finite layers of computation to return a result. If we ask the model to concentrate computation on one token, the context window is likely to run out. For example, when evaluating answers to a math question such as “What’s the price of an apple if we spend 15 euros on 2 oranges (whose price is 3 euros each) and 3 apples?” Solution 1 gives the price of an apple first and then shows its analysis, while Solution 2 does the inverse. Solution 2 is better because it doesn’t make one token (the price of an apple) represent the entire calculation process, which consumes memory quickly.</li></ul></li><li><strong>Thinking and self-consciousness</strong>: We must decide what constitutes thinking or self-consciousness before judging a language model. In Andrej’s view, intelligence is information processing and reorganization. As mentioned above, LLMs are just next-word prediction engines computed via complex neural networks. Therefore, they are not self-conscious and don’t have personas. However, they can “think” by providing statistical results sampled from large portions of internet documents which are not verified. What an LLM gives is not opinions, thoughts, or ideas of itself, but a reflection of human intelligence, possibly representing an expert in a certain domain, found on the internet.</li><li><strong>Neural networks</strong>: Don’t overthink this concept. This point is what I was eager to understand when deciding on a major in college. I used to believe there were inherent connections between biology and computer science, which I mistakenly took from some “famous” journal. I realized it was wrong shortly after being admitted to the college of biology. Artificial neural networks are just a collection of mathematical formulas and knobs to tweak, sharing the form of biological neural networks. They are complicated but not specifically related to biological structures or processes. Through neural networks, the model is able to tweak parameters to represent the characteristics of pre-processed data extracted from certain portions of internet documents.</li><li><strong>Transformer</strong>: This is one type of neural network that works well in various cases of training models. And yes, it’s based on mathematical formulas.</li><li><strong>Hallucinations of models</strong>: Each time you ask a model a question, you may receive a different answer. Returning to the point about the pre-training stage, the base model is just a large set of parameters representing a portion of internet documents. When you ask a question, it is transformed into tokens. Whether the model knows the correct answer is irrelevant. It always samples the most statistically likely result from its base memory.</li><li><strong>Thinking models</strong>: “Thinking” can be considered as the next stage of assistant models. OpenAI hides chains of thoughts of its reasoning model in case of distillation risk through imitation of reasoning. For factural questions, thinking model might be an overkill.</li><li><strong>Tool uses</strong>: It’s a two-sided story.<ul><li>Language models are not good at math, at least in their early stages. The reason is simple: if some internet document shows 2+2 as 3.9, it will surely deviate the statistically sampled result. Basic tools such as Python interpreters and calculators are introduced to language models for assistance. Similarly, search tools are introduced so that the model has updated memory on specific topics. These tools upload new information as tokens to the model’s context window.</li><li>From a user perspective, we also need to take advantage of various LLMs to increase efficiency in many daily matters. As long as we are aware of the benefits and drawbacks of language models, they can be more helpful than expected. They are good at generating summaries of chapters, books, and papers when provided with the exact texts of the content. Different models have unique features. Claude has artifacts to run simulations of apps for you. ChatGPT can use search tools and serve as a data analysis tool.</li><li>Answers from language models need to undergo factual checks. They may hallucinate various information and alter your input data. If you want to do something with a picture, it’s best to transcribe the image to text and check if the model interprets it correctly. The outputs of models, whether they be sources or estimated values from a diagram, need to be verified. The code they provide, especially if you don’t fully understand it, is better checked line by line. I personally find it annoying that code generated by models often contains small bugs. Yes, they may get a basic version right, but the debugging time needed to achieve perfection can be considerable.</li></ul></li><li><strong>LLM OS</strong>: LLMs are not just word generators, but the kernel process of uprising systems. We can build peripheral devices, browsers and make better use of storages, file system embeddings, RAM, etc. around an LLM. But in the other hand, doesn’t the words of “a new compuation stack” emerge too frequently?</li><li><strong>RLHF</strong>: reinforcement learning from human feedback is a practical way to tackle un-verified domain questions. It uses neural net simulator of human preference as a reward model. The upside is decreasing the discriminator-generator gap as it is easier for LLMs to discriminate than to generate. Though the downside also comes from lossy simulation of humans, which could be misleading, deviate and stray away.</li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://www.youtube.com/playlist?list=PLAqhIrjkxbuW9U8-vZ_s_cjKPT_FqRStI">https://www.youtube.com/playlist?list=PLAqhIrjkxbuW9U8-vZ_s_cjKPT_FqRStI</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> machine learning </category>
          
          <category> neural networks </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>25岁生日——新航路</title>
      <link href="/sg/2025/03/12/25/"/>
      <url>/sg/2025/03/12/25/</url>
      
        <content type="html"><![CDATA[<p>雨季打乱了出行的很多行程，虽然是由于徒步路线多而来了这个小岛，但实则在诡变的天气下所有路线都关闭了。不过这也没有太打乱我的心情，总有些可做的事情。最近思绪很杂乱，我也需要去理清楚一些堆积的问题。</p><p>原本订好了一个山里徒步的活动，凌晨五点半我就在出发地点等待直到发现活动在前一个晚上被临时取消。挣扎了一段时间要不要继续这个路线，去起点和回程可以用打车替代，只是会贵一两倍的样子。等到天亮时我终于决定了出发。在路途中我仍然在怀疑这个选择的正确性，真的有必要在不那么好的天气下非去不可么？在房间里躺着不比出去折腾要舒服？以及，我真的走得完那个路线么？但在越靠近路线起点，在看到日光在林道上爬升时，我明白了我必须要做的是 seize the moment，不管结果如何。有时候，能够抓住的只有当下的一个瞬间，如果错过这个瞬间，就再也来不及了。</p><p>结果有好有坏。坏处是发现路线只能走到一公里左右的地方，后面全部被封闭了。此时我还不知道徒步路线的状况，只是看到陆陆续续有很多人走向 PR1 或者在回程中。心里暗自疑惑这不是个单向路线么？好处是天气还算可以，要知道不下雨已经是很好的状况了对徒步来说。在短短的一小部分路上，我仿佛走在塞尔达世界里，水滴从悬空的石头上滑落，斜坡上的草地，群山环翠隐隐约约。只可惜我没有林克的矫健度飞岩走壁。不过更重要的是，我选择了跟随内心。</p><p>天气已经不太能影响我出行的心情，只要不到极端恶劣的程度，我都喜欢事物呈现它本来的样子。在从机场开到小镇的路上正是傍晚，海边的路灯，不远处一整个山坡闪烁的灯光，好像刺客信条奥德赛里的村庄。人生也正如游戏，我们又何尝不是在玩一个大型实时实况游戏呢？即使在里斯本老是下雨的几天里，我也感受到了不一样的乐趣。大雨倾盆下连接近地铁站入口的电梯上都能感受到的水汽，被雨水阻挡的行人临时停靠在门槛上躲避，而雨停后有波光粼粼的街道和依旧繁忙的行人。葡萄牙人有一种难得的热情和友好，以至于即使我没能听懂对方的话，依然能够妥善地取走我忘在饭店里的伞。在傻傻地等待红绿灯时，有个路人跟我说这里的信号灯坏掉了:) 出行正是因为意外更加独特，偶遇的小猫，寻常的小巷，弹唱的街头艺术家，飞旋的海鸥，蓝蓝绿绿的内港。</p><p>不过我仍有烦恼的问题。我想做什么？我该怎么做？翻了一个博客的 transcripts 后我有了答案，我只需要去做就可以了。逃避犯错而不去做就是什么都没做。而我们做的每一个选择和决定都塑造了现在的自己，成为现实的一部分。所以不要逃避做出选择和真实的自我了。</p><p>Takeaways<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>:</p><ol><li>iterations of teaching: say like taking 10 hours to create one hour of content. When teaching someone else, you realize your gaps in knowledge. Then go back to basics.</li><li>pre: the source of content is the code not slides. We are building a story out of it.</li><li>need <u>10,000 hours to become an expert</u></li><li>general advice for beginners:<ul><li>“Focus on just the amount of work you’re spending on a thing. Compare yourself only to yourself, not to others.”</li><li>how to pick the thing? Find Max(interest of things) for a thing and stick with it.</li></ul></li><li>answer: artificial intelligence only takes one property from biological intelligence which is the form of neural networks. Artificial neural networks share nothing else with biological nerual networks. It simply does compression and composed of mathematical formations and many knobs to tweak.</li><li>transformer: attention is all you need. Transformer is one form of neural networks.</li><li>definition of reasoning: information processing and generalization</li><li>consciousness = modeling insight (?) : “in my mind, consciousness is not a special thing you will figure out and bolt on. I think it’s an emerging phenomenon of a large enough and complex enough generative model sort of. So, if you have a complex enough world model that understands the world, then it also understands its predicament in the world as being a language model, which to me is a form of consciousness or self-awareness.”</li><li>books/textbooks/papers: books sometimes are high-level abstraction of abstractions and general consumption. Textbooks take one layer down to the details. But for new areas, textbooks are often outdated. That’s where we read papers in those areas. At least abstract and introducation is readable, even for laymen. Then read from Appendix.</li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>From Lex Fridman Podcast: <a href="https://podcasts.apple.com/us/podcast/333-andrej-karpathy-tesla-ai-self-driving-optimus-aliens/id1434243584?i=1000584342757">#333</a> – Andrej Karpathy: Tesla AI, Self-Driving, Optimus, Aliens, and AGI, Oct 29, 2022. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工作一年余杂想</title>
      <link href="/sg/2025/03/05/diary_march/"/>
      <url>/sg/2025/03/05/diary_march/</url>
      
        <content type="html"><![CDATA[<p>好像一眨眼的时间就从毕业到了现在，做好了一些事，做坏了一些事，拖延了一些事。生活的进度在延续着，我或许也在发生着变化。Imposter syndrome 的感觉时断时续，有时觉得自己现在什么都能做，但又在遇到一些费解的问题时怀疑哪里不对。</p><p>一月初时还停留在：收尾一个活后 debugging 能力又提高了一点。被拉去干这个活前，我还在想 rcu 我都忘得差不多了怎么改，block layer 的东西我也只是知道一点点。但改完过后又觉得没那么难，遇到了一些难题，然后花时间找到解决方法。比起刚实习时，我的编程能力已经更新了一个 level 了。</p><p>而最近有个 bug 也是找了很久才在组长的提示下意识到问题。一般 bug 从 error 往前回溯 root cause 是很常见的方法，但是 kernel trace 叠着几层 layers of abstraction 到某个点就迷失了:( 每次调代码总时不时遇到某个以为完全没问题的地方才是出错的那个点，mental model 从一开始就错了方向。这次的 bug 也是，只有那个地方我没有仔细查过，想着 scatter list 这样的用法完全正确。由于我还在看看细节，之后再写篇文细说。</p><p>还有个有点费解的活是 Encryption at Rest tooling，从一开始就很迷惑。Security 是我大学期间几乎没有涉猎的部分，不太感兴趣就只是浅浅看了一节 encryption 介绍的课。但在和同事交流和自己瞎鼓捣后，继续和同事交流，今天终于有点懂了这个活在干什么的感悟。</p><p>Programming 和 engineering 是不同的方面，现在我在 engineering 的层面还实践得不够多。比较苦恼的问题是 debugging concurrent programs，稍不注意就是一个 race condition。也是一个需要深入练习的部分。</p><blockquote><p>To be a good developer, you need to be more than just a programmer, you need to be an engineer - you have to discuss, plan, predict, design, evaluate and re-design; you have to think. Engineering is about solving problems, thinking deeply about every aspect of a system and figuring out the best way of doing things. That is the part of development I love, and the part I consider art<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p></blockquote><p>我最近感兴趣的话题是从 engineering 的角度看 LLM。对统计学不感兴趣，跳过这部分，会主要跟着学 Andrej Karpathy 放在网上的课程和项目。看到 Andrej 的一个演讲里又讲到10000小时理论，这个我们已经很熟悉了。如果每天投入8小时在一件事上，3-4年就可以成为一名专家。这段时间也包含了走弯路和犯错。兴趣是最好的老师，只要在感兴趣的方向上坚持下去就好了。</p><ul><li>If you want to do sth seriously, do it for 10000 hours.</li><li>Don’t compare to others. Compare yourself to you from, like say, a year ago.</li></ul><p>在德国生活了一年多后，也会有想换一个国家的时刻。漫长的长达五个月的冬天伴随着灰暗的没有日光的日子，紧缺的医疗资源，经常不准时的德铁和公交，税高物价高，天然存在的深深的文化隔阂，右翼政党不知何时会抬头，难学的德语和低效的官僚机构。但在这几天阳光的照耀下，那些烦恼好像被吹散了。落日与晚霞，是最平常不过的景象，而人们都有时间去欣赏。今天在回家的路上，桥上又聚集起了很多人或坐或倚在两侧，等待着夜幕低垂。</p><p>时间和自由可能是在德国常有而国内缺乏的东西。上个月我办好了日本的旅游签证，比起在三年前办护照的艰难和尝试办日签的失败，这次很顺利得就通过了。走出使馆，动物园的熊猫旗子晃晃悠悠，仿佛还是在成都一样。</p><p>有点想念秋天的桂花。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://thesquareplanet.com/blog/coding-is-boring-engineering-isnt/">https://thesquareplanet.com/blog/coding-is-boring-engineering-isnt/</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Word Power Made Easy Cheat Sheets 1</title>
      <link href="/sg/2025/02/01/eng_wpme1/"/>
      <url>/sg/2025/02/01/eng_wpme1/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#session-1-personality-types">SESSION 1: personality types</a></li><li><a href="#session-14-liars-and-lying">SESSION 14: liars and lying</a></li><li><a href="#session-20-actions">SESSION 20: actions</a></li><li><a href="#session-24-speech-habits">SESSION 24: speech habits</a></li><li><a href="#session-28-insult-your-enemies">SESSION 28: insult your enemies</a></li><li><a href="#session-32-flatter-your-friends">SESSION 32: flatter your friends</a></li><li><a href="#session-39-common-phenomena-and-occurrences">SESSION 39: common phenomena and occurrences</a></li><li><a href="#session-42-what-goes-on">SESSION 42: what goes on</a></li><li><a href="#session-45-personal-characteristics">SESSION 45: personal characteristics</a></li></ul><!-- tocstop --></div><p>从语言学习的角度，我们在遇到不认识的汉字时会“认字认半边”，而这在大部分情况下也够用了。看到象形字猜它的读音可以认识到汉字的结构，偏旁部首。那么英语似乎也是同样的道理，当遇到一个生词，词根词缀就相当于汉字的偏旁部首。但在记忆单词时，我认识的词根词缀实在是有限。曾经也买过讲词根词缀的书，但都只是早早束之高阁。毕竟背个偏旁部首是很烦躁无聊的事。这本书虽然也是在帮助讲词根词缀，但用故事（大概算是？）穿起来是颇有意思的。本文通过图片列举出了各个章节的单词，背后的原因是方便我查单词：）</p><h3><span id="session-1-personality-types">SESSION 1: personality types</span><a href="#session-1-personality-types" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8019.jpeg" class title="IMG_8019"><h3><span id="session-14-liars-and-lying">SESSION 14: liars and lying</span><a href="#session-14-liars-and-lying" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8014.jpeg" class title="IMG_8014"><img src="/sg/2025/02/01/eng_wpme1/IMG_8015.jpeg" class title="IMG_8015"><h3><span id="session-20-actions">SESSION 20: actions</span><a href="#session-20-actions" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8016.jpeg" class title="IMG_8016"><img src="/sg/2025/02/01/eng_wpme1/IMG_8017.jpeg" class title="IMG_8017"><img src="/sg/2025/02/01/eng_wpme1/IMG_8018.jpeg" class title="IMG_8018"><h3><span id="session-24-speech-habits">SESSION 24: speech habits</span><a href="#session-24-speech-habits" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8024.jpeg" class title="IMG_8024"><img src="/sg/2025/02/01/eng_wpme1/IMG_8026.jpeg" class title="IMG_8026"><h3><span id="session-28-insult-your-enemies">SESSION 28: insult your enemies</span><a href="#session-28-insult-your-enemies" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8023.jpeg" class title="IMG_8023"><img src="/sg/2025/02/01/eng_wpme1/IMG_8022.jpeg" class title="IMG_8022"><img src="/sg/2025/02/01/eng_wpme1/IMG_8021.jpeg" class title="IMG_8021"><img src="/sg/2025/02/01/eng_wpme1/IMG_8034.jpeg" class title="IMG_8034"><h3><span id="session-32-flatter-your-friends">SESSION 32: flatter your friends</span><a href="#session-32-flatter-your-friends" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8039.jpeg" class title="IMG_8039"><img src="/sg/2025/02/01/eng_wpme1/IMG_8040.jpeg" class title="IMG_8040"><img src="/sg/2025/02/01/eng_wpme1/IMG_8041.jpeg" class title="IMG_8041"><img src="/sg/2025/02/01/eng_wpme1/IMG_8042.jpeg" class title="IMG_8042"><h3><span id="session-39-common-phenomena-and-occurrences">SESSION 39: common phenomena and occurrences</span><a href="#session-39-common-phenomena-and-occurrences" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8051.jpeg" class title="IMG_8051"><img src="/sg/2025/02/01/eng_wpme1/IMG_8052.jpeg" class title="IMG_8052"><img src="/sg/2025/02/01/eng_wpme1/IMG_8053.jpeg" class title="IMG_8053"><img src="/sg/2025/02/01/eng_wpme1/IMG_8054.jpeg" class title="IMG_8054"><h3><span id="session-42-what-goes-on">SESSION 42: what goes on</span><a href="#session-42-what-goes-on" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8055.jpeg" class title="IMG_8055"><img src="/sg/2025/02/01/eng_wpme1/IMG_8056.jpeg" class title="IMG_8056"><h3><span id="session-45-personal-characteristics">SESSION 45: personal characteristics</span><a href="#session-45-personal-characteristics" class="header-anchor">¶</a></h3><img src="/sg/2025/02/01/eng_wpme1/IMG_8057.jpeg" class title="IMG_8057"><img src="/sg/2025/02/01/eng_wpme1/IMG_8058.jpeg" class title="IMG_8058">]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> English </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>German Phonetic Alphabet</title>
      <link href="/sg/2025/01/26/ger_phonetics/"/>
      <url>/sg/2025/01/26/ger_phonetics/</url>
      
        <content type="html"><![CDATA[<img src="/sg/2025/01/26/ger_phonetics/IMG_7954.jpeg" class title="IMG_7954"><img src="/sg/2025/01/26/ger_phonetics/IMG_7955.jpeg" class title="IMG_7955"><img src="/sg/2025/01/26/ger_phonetics/IMG_7956.jpeg" class title="IMG_7956">]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> German </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 Year-end Review</title>
      <link href="/sg/2024/12/20/2024/"/>
      <url>/sg/2024/12/20/2024/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#moments">Moments</a><ul><li><a href="#january">January</a></li><li><a href="#february">February</a></li><li><a href="#march">March</a></li><li><a href="#april">April</a></li><li><a href="#may">May</a></li><li><a href="#june">June</a></li><li><a href="#october">October</a></li><li><a href="#december">December</a></li></ul></li><li><a href="#games">Games</a></li></ul><!-- tocstop --></div><p>One year has passed since my arrival in Germany. This year brought many firsts – my first time living abroad, visiting dentists, exploring European cities, speaking basic German words, and meeting an online friend in person. I’ve settled into a long-term apartment, completed my probation period, and attended a developer conference. The worries I had last year have faded away, and I’ve found a sense of peace in my heart.</p><p>Although I didn’t spend much time on open courses this year, I managed to complete the Paxos Lab 3A. I’ve realized how much my system programming skills have grown since I started studying operating systems four years ago. Back then, I would struggle to understand lab assignments even after reading the materials multiple times. Now I can grasp the concepts and implement solutions – it just takes time to turn my ideas into code. I’ve gained confidence to achieve things I once thought impossible. Yet, I sometimes wonder if I’ll be able to overcome the challenges that lie ahead. Will I continue to grow and adapt?</p><p>The AI era has begun. The capabilities and potential of AI will inevitably affect everyday life and industries. It’s unpredictable how people will find their place in this rapidly changing world. I experimented with Claude to implement a vacation-planner tool, and it created a version that met my basic requirements. It still has limitations – inconsistent responses, recurring coding errors, and challenges in fully aligning with human intent. Nevertheless, I believe it will evolve into a more intelligent version where everyone can implement their ideas without deep programming knowledge. Still, understanding the fundamental principles remains valuable for building complex projects. Andrej Karpathy wrote <a href="https://karpathy.github.io/2015/11/14/ai/">a short AI story</a> where “shapers” – a new type of professional – would assist AI agents in solving human-intelligence tasks. It will be fascinating to see how super-intelligent AI ultimately develops.</p><p>About the relationship aspect, I finally resolved the emotional issue that had bothered me for years. It was a relief to talk straightforwardly to her about all the feelings I had when we were very young. Going through this helped me discover who I really am. Though it’s still difficult to look back at my old self struggling during those years, I’ve stopped hiding the past and moved on. I told her I would visit Iceland after graduation, and I’m glad I kept my word.</p><p>Speaking German was challenging for me, even with simple words. I was hesitant due to my lack of prior knowledge of the language. This changed after meeting with a friend who taught me some basic phrases, like how to say “pay by card,” “pay in cash,” and “thank you.” That’s all I’ve got for now :) I plan to start learning German more seriously and aim to reach the B1 level next year.</p><p>In the end, I would like to thank my friends and parents for their companionship, understanding, and support.</p><h2><span id="moments">Moments</span><a href="#moments" class="header-anchor">¶</a></h2><h3><span id="january">January</span><a href="#january" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_3056.jpeg" class title="IMG_3056"><h3><span id="february">February</span><a href="#february" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_3328.jpeg" class title="IMG_3328"><h3><span id="march">March</span><a href="#march" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_3493.jpeg" class title="IMG_3493"><h3><span id="april">April</span><a href="#april" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_3811.jpeg" class title="IMG_3811"><h3><span id="may">May</span><a href="#may" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_4275.jpeg" class title="IMG_4275"><h3><span id="june">June</span><a href="#june" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_5115.jpeg" class title="IMG_5115"><h3><span id="october">October</span><a href="#october" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_7039.jpeg" class title="IMG_7039"><h3><span id="december">December</span><a href="#december" class="header-anchor">¶</a></h3><img src="/sg/2024/12/20/2024/IMG_7461.jpeg" class title="IMG_7461"><h2><span id="games">Games</span><a href="#games" class="header-anchor">¶</a></h2><p>I bought an Xbox earlier this year, and my main game console has shifted from the Switch to the Xbox. I have to admit that gaming has become somewhat boring for me now, though it remains a good way to relax. I even talked a friend into playing video games.</p><p><em>Baldur’s Gate 3</em>: ✅ Great game. Completed the mainline story.</p><p><em>Persona 3 Reload</em>: Good game, though some female character portrayals made me uncomfortable.</p><p><em>Citizen Sleeper</em>: ✅ Decent game with well-structured gameplay.</p><p><em>Fallout 4</em>: Good game. Strong storytelling, but the constant combat became repetitive.</p><p><em>Assassin’s Creed Odyssey</em>: ✅ Enjoyable overall, apart from the naval battles.</p><p><em>Mount &amp; Blade II: Bannerlord</em>: Decent game. It can explore the map faster than the warband.</p><img src="/sg/2024/12/20/2024/IMG_7594.jpeg" class title="IMG_7594"><hr><p>2025 resolution:</p><ul class="task-list"><li class="task-list-item"><p><input type="checkbox" id="cbx_0" disabled="true"><label for="cbx_0"> German A1</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_1" disabled="true"><label for="cbx_1"> Finish sys track</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_2" disabled="true"><label for="cbx_2"> Travel in Japan</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_3" disabled="true"><label for="cbx_3"> PR (prep)</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_4" checked="true" disabled="true"><label for="cbx_4"> Read 4 books</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_5" disabled="true"><label for="cbx_5"> Join in open source conferences</label></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Awakened in Vienna</title>
      <link href="/sg/2024/09/29/24_plumbers/"/>
      <url>/sg/2024/09/29/24_plumbers/</url>
      
        <content type="html"><![CDATA[<p>I had the opportunity to attend Linux Plumbers in Vienna this year, and it was great to finally meet Stefan and Damien in person after two years since my internship project began. It reminded me of something I had long forgotten—the desire to learn and change. Ever since I started working full-time and settling into a new city, I’ve been busy finding a long-term apartment, getting through the probation period, applying for a residence card, and so on. During my free time, I would explore new places and enjoy the diverse cultural vibes. I found a sense of serenity in my everyday life by watching leaves fall or simply walking to the office. Now, it’s time to move forward.</p><p>During the conference, I was engulfed in numerous sessions and slides, with many questions arising both before and after. To be honest, I didn’t fully understand several topics, as they seemed quite distant from what I’ve been working on. But I know things will become clearer after gaining a few more years of experience.</p><p>I also take my first step towards overcoming my fear of public speaking. I gave a short talk about one of my past projects, but it derailed when my mind went blank halfway through. In the end, I had to read from the script I had prepared beforehand to continue the presentation. It’s okay to fail—I just need more practice. I was really touched that Stefan and Damien encouraged me afterward, just like they did when I first started working on open-source projects and felt lost about the direction of my career. My manager was also supportive and understanding. I’m starting to learn what leadership truly is—pulling people together.</p><p>It’s very dangerous to work on a project in an enclosed environment. That’s why communication and exchanging ideas are so important. Even though I’m an introvert, I find it fascinating how the gathering of opensource people shared all sorts of things, from work projects to conference experiences. It’s one of few times when I am not afraid of being in a group. When people asked about my current project, I struggled to deliver the right message. I found myself saying things like, “It serves as the transportation layer of Ceph” or “It distributes IOs to many servers.” While these statements are true, they lacked key details. After returning to work, I realized a more accurate description is: it’s a kernel module that distributes and replicates data over a block-based storage cluster. Besides, I need to look into more design ideas and similar projects so I can gain a better grasp of the overall architecture and possible scenarios of failures or bottlenecks.</p><p>Outside of the conference, it was pleasant to stroll through the city, soaking in the architecture and the vibrant atmosphere of everyday life.</p><img src="/sg/2024/09/29/24_plumbers/IMG_6632.jpeg" class title="IMG_6632"><img src="/sg/2024/09/29/24_plumbers/IMG_6669.JPG" class title="IMG_6669"><p>The museums and galleries were well worth visiting, offering fresh perspectives on a variety of subjects. It was my first time seeing paintings by Monet, whose impressionist artwork I love. Though, I was a bit disappointed to find only two of his paintings at the Albertina.</p><img src="/sg/2024/09/29/24_plumbers/IMG_6658.jpeg" class title="IMG_6658">]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Adding Metadata Persistence to a Storage Cluster</title>
      <link href="/sg/2024/09/09/wk_debugging_md/"/>
      <url>/sg/2024/09/09/wk_debugging_md/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#design">Design</a><ul><li><a href="#flush-methods">Flush methods</a></li><li><a href="#synchronization-policy">Synchronization policy</a></li><li><a href="#fancy-data-structures">Fancy data structures?</a></li></ul></li><li><a href="#development">Development</a></li><li><a href="#debugging">Debugging</a><ul><li><a href="#reference-count">Reference count</a></li><li><a href="#fio-verify-bad-header">Fio_verify: bad header</a></li><li><a href="#work-queue-mechanism">Work_queue mechanism</a></li><li><a href="#submit-bio-wait-err">Submit_bio_wait err</a></li><li><a href="#reconnection-timeout-crashes">Reconnection timeout/crashes</a></li></ul></li></ul><!-- tocstop --></div><p>In recent months, I’ve worked on adding metadata persistence to an internal project. Excluding the details of codes, I’d like to review the methods I took when testing and debugging. System programming is intricate. It happens that taking hours of search leads to one line of code that causes the error. The kernel back traces generated may be far from the original cause. Or perhaps that’s just me, making some silly mistakes of mismatched units or freeing the wrong pointer. There is one kind of mistakes that is easy to overlook: the one that I think is correct.</p><p>The goal is to persist the metadata of many servers. In the design phase of that task, I had many meetings with my manager to discuss what, how and why. We’ve looked into two open-source projects for inspiration which are <code>/dev/md</code> and <code>drbd</code>. I’ll briefly discussed some topics I find it interesting.</p><h2><span id="design">Design</span><a href="#design" class="header-anchor">¶</a></h2><p>In the very beginning, we were thinking about where, what to store, state machine, cache policy, organization/layout of metadata and failures to handle… Above all, we would like to achieve strong consistency on the metadata and handle split brain case where network partition splits the communication in half.</p><p>Availability and redundancy are important components of system design. The request on the VM is not completed when it failed on some servers. While submitting a request, a server is down, decreasing the availability of the system. When a machine is crashed and if every server stores one copy at that machine, the redundancy of the system also goes down by one.</p><h3><span id="flush-methods">Flush methods</span><a href="#flush-methods" class="header-anchor">¶</a></h3><ol><li><p>Does (10 times of 4KB + 1000 times of 32B) or (1010 times of (4KB+32B)) perform better when they are written back to disk?</p><p>If we break space into two parts, one of them will be updated immediately while the other will wait for a certain time window. The answer is that the discrepancy on performance is not that big. The interface of this project is designed in a way to pass on the data buffer to the block layer. The argument to decide is the transfer size of md IOs.</p></li><li><p>(one write IO + one md IO) or (several write IOs + one md IO)?</p></li><li><p>When to flush? Drbd syncs the activity log prior to the failure point. <code>/dev/md</code> syncs per time window. The time window of flushing metadata will be the most consistency that the project can reserve.</p></li></ol><p>Drbd flushes a certain area (hot area). Activity log is to track recent data blocks that are written to. To ensure a quick recovery, the activity log gets synced first. Then the data blocks that expires from the AL (updated in the bitmap) get synced afterwards.</p><p>When data is written, and if the block is no longer in the AL, it is marked in the bitmap as it requires synchronization. Drbd has the primary and backup nodes. It does synchronization in the background  in the event of the node failure. The synchronization in this case means to get synced from other nodes that is in the consistent state.</p><h3><span id="synchronization-policy">Synchronization policy</span><a href="#synchronization-policy" class="header-anchor">¶</a></h3><p>Having a little understanding of the context, we know the key to metadata persistence is synchronization.</p><p>(v8.1) Drbd uses timers to periodically do regular jobs like resyncs and writes. The metadata is stored at either the end of the device or a separate file.</p><ul><li>When it makes a resync request, it checks if there are still application IOs going on this area and completes IOs then.</li><li>The data blocks tracked in the activity log can be transferred to bitmap and wait for synchronization.</li><li>When the metadata is marked as dirty, it does md_sync to flush the metadata part to disk.</li></ul><p>(v9.1)</p><ul><li><p>Why many active extents in the AL can reduce metadata writes?</p><p>Active extents are regions in the AL that are currently being written to. Each active extent can track a range of blocks. The AL uses active extents to track recent writes in memory. If there are more active extents, the fewer inactive extents are written at disk therefore it reduces metadata writes. The active extent becomes inactive when there are no new IOs written in after a period. An old extent on the disk gets activated in failure cases.</p></li><li><p>How to address this issue?</p><p>Drbd periodically flushes the inactive extents to disk. If the secondary machine crashes, the AL will be lost along with its active extents. Then in data recovery, it has to activate the old extent that is on the disk. But the data of those active extents which haven’t been flushed to disk will be lost.</p><p>Data Loss Window: There is an inherent risk of losing the most recent writes that were only tracked in the in-memory AL and not yet flushed to disk.</p></li></ul><h3><span id="fancy-data-structures">Fancy data structures?</span><a href="#fancy-data-structures" class="header-anchor">¶</a></h3><p>What data structures can be used for this task? Should we consider b+ tree, log-structured merged tree? At the current stage, simple structures are enough.</p><h2><span id="development">Development</span><a href="#development" class="header-anchor">¶</a></h2><p>Tips:</p><ol><li><p>Avoid premature optimizations: when working on the first version, we can omit the edge cases (failure cases) if they are not sorted out yet. That will also boost up the process of developing.</p></li><li><p>Speed up the development process until the regression tests pass. Do the cleanup work after passing the regression tests.</p></li></ol><p>The first thing I did after most of the code is done is testing for basic correctness. Change some states and see whether it persists. Then I cleaned up the code which turned out to be unnecessary since a few errors showed up after running the regression tests.</p><h2><span id="debugging">Debugging</span><a href="#debugging" class="header-anchor">¶</a></h2><p>The process of debugging also strengthens my understanding of this project and trains my debugging skills through finding every root cause of the error. Let’s say the chain of clues is A-&gt;B-&gt;C-&gt;D-&gt;E, it’s evident to track A when the back traces are complete. But our job is to track A even without B, C and D. When I have no clue on a certain issue, a tip that a friend once taught me works well. The tip is binary search debugging. Knowing a project prior to the commit c1 is bug-free, break the remaining changes into two and test each part. Iterate this process unless the root cause is identified. It doesn’t have to be exactly in half. Just pick out the suspicious part and run the tests. With a little more patience, we’ll find the reason eventually.</p><h3><span id="reference-count">Reference count</span><a href="#reference-count" class="header-anchor">¶</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">percpu ref (xxxxx) &lt;= 0 (-15) after switching to atomic.</span><br></pre></td></tr></table></figure><blockquote><p>Reference counting is used by the kernel to know when a data structure is unused and can be disposed of. Most of the time, reference counts are represented by an <code>atomic_t</code> variable, perhaps wrapped by a structure like a <code>kref</code>. If references are added and removed frequently over an object’s lifetime, though, that <code>atomic_t</code> variable can become a performance bottleneck.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><p>The core idea is to have a counter which is incremented whenever a new reference is taken and decremented when a reference is released. When this counter reaches zero any resources used by the object (such as the memory used to store it) can be freed.</p><p>The reference count issues are usually caused by mismatched put_ref() and get_ref(). It can be traced back to one extra operation or racing conditions. Firstly, reproduce the issue and add reference printing. Secondly, we need to check the code containing reference operations for the extra operation. It could be one get_ref() with two put_ref() at some point. For example, two duplicate returned paths which both call put_ref() while the input path calls get_ref() once. Learned from my manager, all of that has to be checked by reading the code, doing dry runs, and building sequence of execution steps on paper or in head.</p><h3><span id="fio-verify-bad-header">Fio_verify: bad header</span><a href="#fio-verify-bad-header" class="header-anchor">¶</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify: bad header offset 366080, wanted 361984 at file /dev/xxx offset 361984, length 512</span><br></pre></td></tr></table></figure><p>Fio_verify verifies whether the original input is stored properly on the storage. The server may have partial data. If something changes the offset of IOs, the data won’t be stored at the intended location, leading to the bad header error on fio_verify.</p><h3><span id="work-queue-mechanism">Work_queue mechanism</span><a href="#work-queue-mechanism" class="header-anchor">¶</a></h3><p>A case is a work queue appears where it should be destroyed. The first step is to check if the work queue get canceled. When it’s certain, we can check the conditions of canceling the work queue and reason the issue.</p><h3><span id="submit-bio-wait-err">Submit_bio_wait err</span><a href="#submit-bio-wait-err" class="header-anchor">¶</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[  162.458257] brd_submit_bio: bv offset 2729 len 1367 sector size 512</span><br><span class="line">(...</span><br><span class="line">[  162.473539] brd_submit_bio: bv offset 0 len 2729 sector size 512</span><br><span class="line">...)</span><br><span class="line">[  162.458682] ------------[ cut here ]------------</span><br><span class="line">[  162.458980] WARNING: CPU: 5 PID: 708 at drivers/block/brd.c:303 brd_submit_bio.cold.14+0x106/0x143 [brd]</span><br><span class="line">...</span><br><span class="line">[  162.461362] Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS 1.12.0-1 04/01/2014</span><br><span class="line">...</span><br><span class="line">[  162.462263] RIP: 0010:brd_submit_bio.cold.14+0x106/0x143 [brd]</span><br><span class="line">...</span><br><span class="line">[  162.468286] Call Trace:</span><br><span class="line">[  162.468444]  submit_bio_noacct+0xfb/0x410</span><br><span class="line">[  162.468717]  submit_bio+0x43/0x190</span><br><span class="line">[  162.468938]  ? printk+0x58/0x73</span><br><span class="line">[  162.469144]  submit_bio_wait+0x54/0xb0</span><br><span class="line">...</span><br><span class="line">[  162.473244] ---[ end trace 1cca44a5ad63415c ]---</span><br></pre></td></tr></table></figure><p>This error is hard to solve because the offset and length of IOs are correct and no explicit errors show up. With the help of my manager, we found that the problem comes from the test script that uses ram devices as the block backend. After switching to SCSI disks, the kernel warning is gone since it no longer goes through that path.</p><p>We still need to find out how bio submission works for /dev/sda. It’s likely handled by QEMU virtio-blk or SCSI pass-through and submitted to the host kernel.</p><h3><span id="reconnection-timeout-crashes">Reconnection timeout/crashes</span><a href="#reconnection-timeout-crashes" class="header-anchor">¶</a></h3><p>The most difficult issue I’ve met during the debugging for md persistence is constant reconnection timeout which affects several tests. When one server has reconnection timeout and shortly crashes afterwards, it’s hard to track what’s going on exactly.</p><p>The first thing is to find the back traces in this very short time window right before the server crashes. There are several back traces but none of them seems to relate to the md persistence part. That is the case where only E is visible but B, C, an D are missing. I made few fixes to see if the back traces change only to get new back traces suggesting that the module outside incurs kernel warnings, which makes this issue even harder to reason. I had been going around in circles on that, running a few tests and getting no useful results.</p><p>It’s the time that I decided to apply binary search debugging. At first I left the md_sync part out and tested for the rest part which passed. Then I knew the issue must be inside the md_sync part but it’s still hundreds of the lines. The md_sync part can be divided into four parts. By commenting out each part and testing separately, I finally found which part and looked into that line by line.</p><p>Even though I was sure it’s the part p that results to the issue, it still looked far-fetched to drag connection from p to the issue. The back traces showed no information related to p and the logic of the p looked correct. Where could go wrong? After staring at the code for a long time, it occurred to me that the buffer pointer was changed and the wrong pointer was taken to free. Case closed.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://lwn.net/Articles/557478/">https://lwn.net/Articles/557478/</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> OCW </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的蔚蓝海岸</title>
      <link href="/sg/2024/09/01/travel_iceland_summer/"/>
      <url>/sg/2024/09/01/travel_iceland_summer/</url>
      
        <content type="html"><![CDATA[<p>踩着夏天的尾巴来到了冰岛，我曾想象过她的样子，但直到见到才发现我所想象的不过是冰山一角。我在这里找回了一些在长大中失去的东西，遇到了一些旅行的同伴，也会感受到孤独但不是很悲伤。第一次在人群中感到安全，想继续待着这里，而不是逃跑。在旅行的一周里，我什么都没有想，只是放空在空旷的原野里。</p><div class="toc"><!-- toc --><ul><li><a href="#d1-reykjavik">D1: ✈️ Reykjavík</a></li><li><a href="#d2-culture-night">D2: Culture Night</a></li><li><a href="#d3-the-south-coast">D3: The South Coast</a></li><li><a href="#d4-snaefellsnes">D4: Snæfellsnes</a></li><li><a href="#d5-museums">D5: Museums</a></li><li><a href="#d6-bookstore-and-bands">D6: Bookstore and Bands</a></li><li><a href="#d7-highland">D7: Highland</a></li></ul><!-- tocstop --></div><h3><span id="d1-reykjavik">D1: ✈️ Reykjavík</span><a href="#d1-reykjavik" class="header-anchor">¶</a></h3><p>Reykjavík [ˈreiːcaˌviːk] 中的 Reykja 是 smoky bay 的意思，vik 是指 bay。冰岛有非常多的地热资源，这些冒着的烟其实是温泉冒出的蒸汽。刚到雷市的第一天我就快被海风吹倒了，住的旅舍离海岸线比较近，我几乎是逆着风往海边走，竟然一眼就看到群山低伏在对岸。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5530.jpeg" class title="IMG_5530"><h3><span id="d2-culture-night">D2: Culture Night</span><a href="#d2-culture-night" class="header-anchor">¶</a></h3><p>时差关系我五点就醒了，稍微清醒些后就打算出去走走。一抬眼就看到了一朵阴影云（自己瞎取的名），虽然身体在阴影里，但边缘泛红。我跟着这朵云一直走，误打误撞来到了海岸旁的草地。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5538.jpeg" class title="IMG_5538"><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5557.jpeg" class title="IMG_5557"><p>此时正好七点，只有我一个人站在这里，而太阳从云层里钻出，点亮了这座城市。非常多的海鸟穿梭在海边，浪花不那么猛烈地拍击着海岸。有山有海，有云有太阳，这就是我理想中的画面。所谓我之日出，是我看到太阳升起的时刻。这个时刻我会一直记得。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5553.JPG" class title="IMG_5553"><p>回头可以看到教堂在光线下也熠熠生辉。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5573.jpeg" class title="IMG_5573"><p>文化之夜是雷市比较盛大的节日之一。我本打算去看一个画展但似乎总没有走对地方，于是就只在市区逛了逛。上午就开始有马拉松选手在准备了，参赛者老人，少年，青年都有。一直到了下午两点多还在跑，不时有路人鼓掌激励选手继续向前。每走一段路就会撞见有街头乐队在演出，让我想起了博德之门 3 的乐队演出，周围也是有群众观听鼓掌，只是没人洒金币就是了。在草地音乐会快要结束前的三十分钟，我终于来到了现场。从这里开始我就觉得冰岛的 vibe 很独特和有吸引力。这个场景竟然和我在高中时看的剧里一些冰岛片段所描述的一模一样。人们随着乐队而拍手，舞动，尽情享受在音乐的旋律里。而在走回旅社的半途，烟花如期响起，点亮了城市的另一角。我尤其喜欢看到烟花燃尽时的场景。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5677.jpeg" class title="IMG_5677"><h3><span id="d3-the-south-coast">D3: The South Coast</span><a href="#d3-the-south-coast" class="header-anchor">¶</a></h3><p>到了冰岛后才发现这里的瀑布非常多。冰岛没有火车地铁，主要出行方式就是公交车和汽车。我报的都是 bus travel 的单人团，体验非常好。每个车都会有导游，会沿路介绍讲解沿路的地理地质，或者一些传奇小故事。可以看出来他们不仅专业，而且非常热爱这片土地。Daniel 是我们南岸之行的导游，在介绍黑冰川时提到这里的冰川在几十年前是一直延伸到公路旁的，但由于全球变暖和人类活动已经萎缩到现在的程度。黑色的地方其实是裸露出的岩石。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5786.jpeg" class title="IMG_5786"><p>沿途见到不少瀑布，这个瀑布有意思的地方是可以从后面穿过去，只是从（照片）左侧下来时想不被水流淋到是不太可能的。我当时和偶遇的两个旅客一起穿行出来，衣服防水的没事，但裤子两侧略有遭殃。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5864.jpeg" class title="IMG_5864"><p>在回雷市的路上经过这儿时我想到了塞尔达和指环王。连绵的群山，一望无际的原野和草地。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5871.jpeg" class title="IMG_5871"><p>晚上绕到海岸突然被眼前的场景打动到了，好孤独的画面。从这儿一直走到了美术馆附近，听到一首歌 will you remember me by Nicky Lee.</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5874.jpeg" class title="IMG_5874"><h3><span id="d4-snaefellsnes">D4: Snæfellsnes</span><a href="#d4-snaefellsnes" class="header-anchor">¶</a></h3><p>导游的风格可以严重影响到旅途体验。我参加的小团游里其他人在之前的旅途里已经熟识了，这点我在旅途快要结束时才知道😅。这日导游 Siggi 的特点就是很随性自然，行程并不完全遵循着路线而是想到/看到有什么值得一去的地方就会带我们前去一看。</p><p>来到这片海滩原本是为了看海豹，但我觉得更有意思的是跳石子。不知道过了有多久我没有这样非常自由活泼的时光了，或许还是在初中时才有同样的心情。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5942.jpeg" class title="IMG_5942"> <p>路上依然可以遇见到处都是的小羊。Siggi 有个习惯是在经过 sheep gate （公路上的减速带？）时会学羊叫，他也鼓励旅客一起。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5945.jpeg" class title="IMG_5945"><p>第二个很有意思的活动是走进山间裂缝。裂缝处有一条瀑布顺着流下来，人们可以踩着石头一直往里走。往上看是一条狭缝。Siggi 带着我们，直到一块比较高的石头，我估计自己腿短跨不上去，和上面的路人摆摆手表示我不上去了。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5963.jpeg" class title="IMG_5963"><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5969.jpeg" class title="IMG_5969"><p>之前都只是远远望着雪山，实际上是火山 + ice cap。Siggi 开近了半山腰近距离看这座雪山。从这里看远方大海的场景也是很震撼的，尤其是站在峭石上，刚刚经过的地方无限缩小出现在身前，半岛似有似无的边际。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5986.jpeg" class title="IMG_5986"><img src="/sg/2024/09/01/travel_iceland_summer/IMG_5990.jpeg" class title="IMG_5990"><p>走到 Hellnar 的海岸时，看到大海的边际线比海水会更蓝一度。我想这就是我的蔚蓝海岸了。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_6009.jpeg" class title="IMG_6009"><p>之后还去了很多景点，在经过草帽山附近时，我猛然想到了 Hobbit: an unexpected journey。这周围的景色加在一起是如此和谐，相机很难拍出这样自然的组合。</p><h3><span id="d5-museums">D5: Museums</span><a href="#d5-museums" class="header-anchor">¶</a></h3><p>天气不算太好的时候我都待在雷市，这天我用 city card 逛了三个博物馆。第一个主要讲的是城市发展的历史，看到一些历史上存在的不公正的法律判例，一个穷小子由于食不果腹偷了些吃的被判成中等鞭刑。有段时期监狱是男女混住的，这就造成监狱生子的情况，法律判定女方的责任更大，除非有人可以娶她才能免除刑罚。</p><p>第二三个都是美术博物馆。他们有些表达艺术的方式好抽象，使用的媒介也有些意想不到。有一个我能看懂且觉得有意思的是叫做 Loop 的一个展。瀑布不再是竖着倾泻而下，而是变成横着。不同地方的瀑布被等比例组合成一个圈，排满整个房间。</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_6483.jpeg" class title="IMG_6483"><h3><span id="d6-bookstore-and-bands">D6: Bookstore and Bands</span><a href="#d6-bookstore-and-bands" class="header-anchor">¶</a></h3><p>找了家书店买完明信片和邮票后就开始写，当时温和的阳光稍微打在纸页上，我安静的看着文字跃动在光影之间。</p><p>晚上和有缘旅客一起去了书屋酒吧听乐队，竟然听到了仍旧是高中那部剧的主题曲 - what’s up。我记得当时在想自己虽然十八岁但心理年龄已经三十岁了。</p><h3><span id="d7-highland">D7: Highland</span><a href="#d7-highland" class="header-anchor">¶</a></h3><p>虽然身体不算太舒服，被海风吹感冒了，但我很庆幸最后还是去了高地。</p><p>穿越无人区：</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_6202.jpeg" class title="IMG_6202"><p>高地徒步 4小时：</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_6228.jpeg" class title="IMG_6228"><p>完全值得！</p><img src="/sg/2024/09/01/travel_iceland_summer/IMG_6269.jpeg" class title="IMG_6269"><p>（有点困了，之后或许会有补充：）</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.046 distributed algorithms</title>
      <link href="/sg/2024/04/16/6.046_da/"/>
      <url>/sg/2024/04/16/6.046_da/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#terms">Terms</a></li><li><a href="#synchronous">Synchronous</a><ul><li><a href="#leader-election">Leader election</a></li></ul></li></ul><!-- tocstop --></div><p>One purpose of this blog is to explain distributed algorithms in plain words :) as I find the lecture slides are somewhat mathematical to myself.</p><h2><span id="terms">Terms</span><a href="#terms" class="header-anchor">¶</a></h2><ol><li>Distributed algorithms are algorithms that run on networked processors or on multiprocessors that share memory.</li><li>Two common models are covered in this lecture, asyn/sync distributed computing models</li><li>Config: Distributed networks are represented by an undirected connected graph G = (V, E). A node represents vertex/process. An edge represents communication channel. Assume no failures.</li><li>A clique network: all vertices are directly connected to all others.</li></ol><h2><span id="synchronous">Synchronous</span><a href="#synchronous" class="header-anchor">¶</a></h2><h3><span id="leader-election">Leader election</span><a href="#leader-election" class="header-anchor">¶</a></h3><p>A leader acts as the coordinator of servers. First try to use algorithms composed of deterministic, indistinguishable processes to choose a leader. The professor give a theorem which proves it will never work. Then we move to algorithms composed of randomness and distinguishable processes (UID, unique identifiers) to break symmetry.</p><ul><li><p>(symmetry -&gt; asymmetry): deterministic =&gt; randomness, indistinguishable processes =&gt; UIDs</p><img src="/sg/2024/04/16/6.046_da/Screenshot-0887738.png" class title="Screenshot-0887738"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go 101</title>
      <link href="/sg/2024/03/17/go_101/"/>
      <url>/sg/2024/03/17/go_101/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#intro">Intro</a><ul><li><a href="#common-bugs">common bugs</a></li><li><a href="#debugging">debugging</a></li><li><a href="#syntax">syntax</a></li></ul></li><li><a href="#threads">Threads</a></li><li><a href="#rpc">RPC</a></li></ul><!-- tocstop --></div><p>Go basics</p><p>Following a tour of go, the notes are taken at this link: <a href="https://github.com/sgzerolc/go101">https://github.com/sgzerolc/go101</a></p><ol><li><p>Types</p><p>Character sets: ASCII: 0-127; Unicode defines code point.</p><p>UTF-8 encoding: English remains the same. The char under 128 takes up one byte. Only char &gt;=128 will take &gt;= 2 bytes.</p><p>The problem is how many bytes should a char consume? To interpret a string, we need to know how it is encoded first. Go uses UTF-8 encoding.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span></span><br><span class="line"><span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span>  <span class="type">int8</span>  <span class="type">int16</span>  <span class="type">int32</span>  <span class="type">int64</span></span><br><span class="line"><span class="type">uint</span> <span class="type">uint8</span> <span class="type">uint16</span> <span class="type">uint32</span> <span class="type">uint64</span> <span class="type">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="type">byte</span> <span class="comment">// alias for uint8</span></span><br><span class="line"><span class="type">rune</span> <span class="comment">// alias for int32; represents a Unicode code point</span></span><br><span class="line"><span class="type">float32</span> <span class="type">float64</span></span><br><span class="line"><span class="type">complex64</span> <span class="type">complex128</span></span><br></pre></td></tr></table></figure><p><code>fmt.Printf()</code> prints the string, while <code>fmt.Sprintf()</code> creates a string and returns it.</p></li><li><p>style: naming, go uses camel style while c uses snake style.</p></li><li><p>const: <code>iota</code>, Greek letter (9th), representing incremental values. When it is used, it simplifies the creation of incrementing values.</p></li><li><p><code>defer</code>: last-in-first-out order. Execute after return before control is returned to the caller.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mu.Unlock()</span><br><span class="line">    <span class="comment">// modifies data</span></span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></li></ol><p>References:</p><ol><li><a href="https://go.dev/doc/tutorial/getting-started">go tutorial</a>, a tour of go, <a href="https://gobyexample.com/">gobyexample</a></li><li><a href="https://go.dev/doc/code">how to write go code</a>, <a href="https://go.dev/ref/mem">memory model</a></li><li><a href="http://nil.csail.mit.edu/6.824/2022/notes/l-rpc.txt">http://nil.csail.mit.edu/6.824/2022/notes/l-rpc.txt</a></li></ol><h2><span id="intro">Intro</span><a href="#intro" class="header-anchor">¶</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> build xx.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">go</span> run xx.<span class="keyword">go</span></span><br><span class="line"><span class="keyword">go</span> test -run singleTest</span><br></pre></td></tr></table></figure><ol><li>Go is better than C++ in a way of <strong>threads (goroutines)</strong> and garbage collection.</li><li>The go runtime executes goroutines on all available cores in parallel. If the cores are less than runnable goroutines, the runtime will <u>pre-emptively time-share</u> the cores among threads.</li><li>Channels, queue-like synchronization primitive, are <u>synchronized</u> between many threads. It means that some goroutine should be waiting when a goroutine sends a message on the channel. At a high level, consider a channel as a struct holding a buffer and a lock.</li><li>Go’s sync.Cond, conditional variables.</li><li>Go’s select</li><li>sync.WaitGroup: waits for multiple threads to finish.</li><li>Do a periotic task: time.Sleep()</li><li>The view of performance on threads:<ul><li>how many threads can be run in parallel? If the machine has 16 cores, then it’s 16 threads (goroutines).</li><li>how many threads are needed to take up the full capacity of one service? (100/(100*0.1) = 10 threads)</li></ul></li><li>Channels only work within one program. RPC allows talking to other programs over the internet.</li><li>A slice contains a pointer to an array, a start and end index to the array. It is more flexible than go array.</li><li>Printf is a common debugging tool.</li><li>synchronous RPC calls vs asynchronous RPC calls<ul><li>It depends which one and when needs the reply. When the reply is needed to proceed, use synchronous calls. However, in a server-client model, the client can launch many RPCs by asynchronous calls, giving the client has other tasks on its plate or the connection to server is broken from time to time.</li><li>Send one RPC without waiting for the result: create a goroutine and have it make a synchronous call to wait.</li></ul></li><li>Go has generics for what c++ style inheritance support.</li><li>A mutex in a struct cannot be made a value receiver.  The mutex is copied and loses its purpose.</li><li>DRF-SC: data-race-free programs execute in a sequentially consistent manner.</li><li>Don’t write infinite loops</li><li>select and timeout: select must send or receive values from channels.</li><li>Goroutines: when a function creates a goroutine and returns, the goroutine will continue running. Goroutines run independently of the function that created them. They will only stop when:<ul><li>The goroutine’s function completes execution</li><li>The entire program exits</li><li>The goroutine is explicitly stopped</li></ul></li></ol><p>Go memory model: -&gt; How to write threaded code?</p><blockquote><p>The Go memory model specifies the conditions under which reads of a variable in one goroutine can be guaranteed to observe values produced by writes to the same variable in a different goroutine.</p></blockquote><p>It means to serialize a program that modifies data accessed by multiple goroutines using synchronization primitives.</p><p><em>synchronized before</em>:  Cond arranges that a call to [Cond.Broadcast] or [Cond.Signal] “synchronizes before” any Wait call that it unblocks.</p><p>The relation A <em>happens before</em> B: B observes what A has observed. “All code after B must be able to observe everything up to A.”</p><h3><span id="common-bugs">common bugs</span><a href="#common-bugs" class="header-anchor">¶</a></h3><ol><li><p>i of a closure references outer i which has been mutated</p></li><li><p>WaitGroup is reused before previous Wait has returned in multiple go routines</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">   wg:=sync.WaitGroup&#123;&#125;</span><br><span class="line">   <span class="keyword">go</span> funcfile2(&amp;wg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>the initialization statement is only executed <strong>once</strong> before the loop starts.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Initialization statement runs only once</span></span><br><span class="line"><span class="keyword">for</span> s, val := check(); s != <span class="number">1</span>; &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Inside loop:&quot;</span>, s, val)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update the loop variable manually (or it would be an infinite loop)</span></span><br><span class="line">s++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>When using rpc, encode a struct (such as a mutex) which has no exported fields. Unexported fields (starting with lowercase) are private to the package where they are defined.</p></li><li><p>xx</p></li></ol><h3><span id="debugging">debugging</span><a href="#debugging" class="header-anchor">¶</a></h3><ol><li><p>Printf: Use DPrintf in util.go. Can put in test_test.go to see the phase of the test<br>ex: DPrintf(“TESTACTION: leader disconnects”)</p></li><li><p>use <code>-race</code> to help detect data races</p></li><li><p><code>SIGQUIT</code>: the default SIGQUIT handler for Go prints stack traces for allgoroutines (and then exits)</p><p><code>Ctrl+\</code> will send SIGQUIT to current process</p></li><li><p>Dealing with leaking goroutines</p><ul><li><p>use <code>ps</code> to see the running processes</p></li><li><p>send SIGQUIT or SIGKILL using <code>kill -QUIT pid</code> or <code>kill -KILL pid</code></p></li></ul></li><li><p>parallel: running tests in parallel makes it easier to find concurrency bugs</p></li></ol><h3><span id="syntax">syntax</span><a href="#syntax" class="header-anchor">¶</a></h3><ol><li>The <code>...</code> is Go’s variadic parameter syntax - it allows a function to take a variable number of arguments.</li><li>x</li></ol><h2><span id="threads">Threads</span><a href="#threads" class="header-anchor">¶</a></h2><ol><li><p>per-thread state: program counter, stack, registers, returned value</p></li><li><p>alternative to threads: event-driven: code that explicitly interleaves activities, in a single thread</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">func isYellow() &#123;</span><br><span class="line">while true:</span><br><span class="line">wait_for(Yellow)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">func isWhite() &#123;</span><br><span class="line">while true:</span><br><span class="line">wait_for(White)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">while events &#123;</span><br><span class="line">isYellow(evens_i)</span><br><span class="line">isWhite(events_i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>keep a table of state about each activities</li><li>one event loop checks for new input, advances to next step and updates state.</li><li>the good side is getting I/O concurrency without thread costs. The bad side is no real multi-core speedup and hard to program.</li></ul></li><li><p>Takeaways from web crawler example: I use channel + waitgroup, terminated by a thread that keeps waiting for fetches.</p><ul><li>A: serial crawler: depth first, recursively call Fetch() + map.</li><li>B: concurrent mutex: waitgroup + map with mutex, parallel Fetch() after first fetch.</li><li>C: concurrent channel: channel + map</li></ul><p>A+B: Terminated by exhaustion and synchronized by wg.Wait().</p><p>B requires mutex lock. Because there may be two threads of Fetch accessing same url of map (shared). Only one of them should read map[url] = false. C doesn’t use lock because there is no sharing of map.</p><p>C: Terminated by using local counter of goroutines. Why break <code>if n == 0</code>?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = 1 (first worker 1)</span><br><span class="line">n += 1 (first worker: starts its worker 2. Let&#x27;s say it has one worker) -&gt; n = 2</span><br><span class="line">n -= 1 (first worker finishes its job) -&gt; n = 1</span><br><span class="line">when worker 2 has done, n -= 1 -&gt; n = 0, terminates.</span><br></pre></td></tr></table></figure></li><li><p>locks + sharing V.S. channels</p><ul><li>state – sharing and locks</li><li>communication – channels</li></ul><blockquote><p>(F) For the 6.824 labs, I recommend sharing+locks for state, and sync.Cond or channels or time.Sleep() for waiting/notification.</p><p>(Robert) I personally avoid channels for the most part and program with shared memory and use (mutexes and condvars) instead</p></blockquote></li><li><p><code>go run -race crawler.go</code>, detects races even when output is correct</p></li><li><p>Lock of Go does not enforce any relationship between locks and data: locks protect invariants, not “locks protect access to shared data”</p></li><li><p>Condition variables: wait, signal, broadcast</p><p>how to avoid bugs: 1) lock around use. 2) check condition (a read) in loop</p></li><li><p>Channels: an object that can communicate and synchronize.</p><ul><li>Channels are cheap</li><li>Sender blocks until the receiver receives</li><li>avoid deadlock</li></ul></li><li><p>immediately-invoked function expression: <code>func</code> is an “anonymous function”. It creates a lexical scope that is local</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parent</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(u <span class="type">string</span>)</span></span> &#123; <span class="comment">// parameters</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, u)</span><br><span class="line">    &#125;(<span class="string">&quot;dog&quot;</span>) <span class="comment">// -&gt; argument to pass in</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2><span id="rpc">RPC</span><a href="#rpc" class="header-anchor">¶</a></h2><ol><li><p>RPC is a piece of distributed system machinery that provides an esay interface of client-server communication</p></li><li><p>A toy key-value server: It does Put(key,value), Get(key)-&gt;value.</p><ul><li>Declare Args and Reply struct for each server handler.</li><li>Client: connect() -&gt; Dial(); get(), put(); Call() asks the RPC library to perform the call. The library takes in arguments, sends requests, waits and puts the output to reply.</li><li>Server: it must declare an object with methods as RPC handlers; register() -&gt; net.Listen(), server accepts network connections; Get(), Put() must lock; <u>The library creates a new goroutine for each request</u>, dispatches the named object, and writes the reply to the network connection.</li><li>binding to which server: determined by the arguments to Dial() for go’s RPC that are server name/port. Name or configuration server for big systems.</li><li>marshalling: format data into packets<ul><li>can pass: strings, arrs, objects, maps, &amp;c</li><li>cannot pass: channels or functions</li></ul></li></ul></li><li><p>Go RPC uses at-most-once form</p></li></ol><p>failure handling</p><ol><li><p>(simple) best-effor RPC: Calls() waits for response until timeout. If none arrives, re-send the request. Repeat a few times. Give up and return an error. incorrect for many situations. It’s ok only when the operations take no effect if repeated such as read-only operations.</p></li><li><p>at-most-once RPC: client re-sends req if no anwer while server detects duplicate requests and returns previous reply instead of following ones.</p><ul><li>How to avoid duplicates? Client attaches unique ID (XID) with each req to identify duplicate ones.</li><li>What if two clients use the same XID? Use big random number</li><li>How to avoid a huge seen [xid] table? Per-client RPC seq numbers and client includes “seen all repliest &lt;= (before) X” with every RPC. The server can keep O(# clients) state rather than O(# XIDs)</li><li>Server must discard info about old RPCs or old clients. When to discard?</li><li>How to handle a duplicate req while the previous one is executing? “Pending” flag per executing RPC; wait or ignore</li></ul></li><li><p>exactly once:</p><ul><li>unbounded retries</li><li>duplicate detection</li><li>fault-tolerant service</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>24岁生日——再出发</title>
      <link href="/sg/2024/03/12/24/"/>
      <url>/sg/2024/03/12/24/</url>
      
        <content type="html"><![CDATA[<p>今天雾茫茫一片。淡季没有很多人，遇到的当地人都比较友好。第一次休假的底色是淡淡的绿。徳铁在运行正常时是比较舒适的出行方式，来时是在最近最后一天的晴朗背景下启程的，大片的原野，湿地，风车，和港口波光粼粼的蓝色海水。上岛后更加开阔，虽然林木与柏林未有太大不同，也就多了一点临海的气息。</p><p>这一年有什么不同吗？我不知何时起一直想去远方，然后我到达了。组长曾有一天问我这里的工作是我所期望的么？我想是的，能够学到新东西和设计一些新的结构，在开放自由的环境里问问题和找到答案。初到柏林我就开始喜欢这个城市，即使冬天只有八个小时的白昼和些微寒冷。我有很长的一段时间无法分辨四季，但初见这座城市就感到秋天的萧瑟仍旧停留，然后是明晰的白雪，到了现在则是初春的清冽。</p><p>上一年在干什么呢？在担忧不一样的事，后来也失败了，再重新开始。或许自己能够更加坚韧地面对不可避免的失败，在纷纷扰扰的世界找到自己的位置和角落。新的一岁想完成一些拖了很久的事情。要好好工作学习，走更多的路，不要刻意回避和人交流。</p><p>第一次看见大海：</p><img src="/sg/2024/03/12/24/IMG_3460.jpeg" class title="rugendamm"><p>徒步从 Binz 走到 Sellin:</p><img src="/sg/2024/03/12/24/IMG_3500.jpeg" class title="IMG_3500"><img src="/sg/2024/03/12/24/IMG_3501.jpeg" class title="IMG_3501"><img src="/sg/2024/03/12/24/IMG_3504.jpeg" class title="IMG_3504">]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Distributed File System Notes</title>
      <link href="/sg/2023/12/27/storage_dfs/"/>
      <url>/sg/2023/12/27/storage_dfs/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#multi-disk-systems">Multi-disk systems</a></li><li><a href="#distributed-file-systems">Distributed File Systems</a><ul><li><a href="#performance-tuning-d">Performance tuning (d)</a></li><li><a href="#file-handles-fs">File handles (fs)</a></li><li><a href="#execution-models">Execution models</a></li></ul></li><li><a href="#multi-server-storage">Multi-server Storage</a></li></ul><!-- tocstop --></div><p>This note will only briefly talk about disk array systems, including some points I think is interesting.</p><h2><span id="multi-disk-systems">Multi-disk systems</span><a href="#multi-disk-systems" class="header-anchor">¶</a></h2><p>Terms:</p><ol><li>disk stripting is that data gets interleaved across multiple disks.</li><li>To measure how often one disk fail: MTBF_disk (Mean Time Between Failures) = sum(t_down - t_up) / # of failures</li><li>MTBF in multi-disk system, MTBF_MDS = mean time to first disk failure = sum(t_down - t_up) / (Disks * # of failures per disk) = MTBF_disk / disks</li><li>Recalled that raid5 intersperses the parity over N+1 disks, raid 6 is N+2 and raid N+3  etc. Not elaborate here.</li></ol><p>We want a reliable storage system with large capacity, good performance. Multi-disk systems are designed for these reasons.</p><p>Solution: RAID, redundant array of independent disks</p><p>Problem 1: Load balancing: bandwidth (MB/second) and throughput (IOs/second).</p><p>The problem is that some data is more popular than other data, which is described as load imbalance. I/O requests almost never evenly distributed, but depend on the apps, usage, time. It’s hard to partition static data to evenly distributed IO reqs for hot data changing over time.</p><p>Solution 1.1: stream data from multiple disks in parallel. To deal with hot data, find the right data placement policy</p><ol><li>simple approach: fixed data placement: Data x goes to y.</li><li>better approach: dynamic data placement. Label popular files as <code>hot</code>, separated across multiple disks.</li><li>practical approach: <strong>disk striping</strong>, to distribute chunks of data across multiple disks for large files (relative to stripe unit), good for high-throughput requests. Hot file blocks get spread uniformly.<br><u>The key design decision is picking the strip unit size.</u> To assist alignment, choose multiple of file system block size. If it’s too small, small files will also be spanned across all disks. Extra effort for little benefit. If it’s too large, it’s cost more with striping but no parallel transfers.</li></ol><p>Solution 1.2: concurrent requests to multiple disks</p><p>Problem 2: Fault tolerance: tolerate partial and full disk failures<br>Solution 2.1: store data copies across different disks</p><p>In a independent disk system, all fs on the disk are lost; in a striped system, part of each fs residing on failed disk is lost. Backups can lead to new problems like performance issue and complicate storage provisioning. It is also difficult to do back scheduling.<br>Disk failures in a multi-disk system happen. HDDs fail often (1-13%); SSDs are more reliable (1-3%).</p><p>Solution 2.1.1: Replication. Combine mirroring (replicated block device) and stripping to find a balance between reliablity and performance.</p><ul><li>combination ways differ<img src="/sg/2023/12/27/storage_dfs/Screenshot-3261051.png" class title="Screenshot-3261051"></li></ul><p>Solution 2.1.2: Error correction code via parity disks. Read-modify-write is behind updates of failed disk.</p><ul><li><p>striping!</p><img src="/sg/2023/12/27/storage_dfs/Screenshot-3262217.png" class title="Screenshot-3262217"></li></ul><h2><span id="distributed-file-systems">Distributed File Systems</span><a href="#distributed-file-systems" class="header-anchor">¶</a></h2><p>Fs/database is just a layer of abstraction on top of block devices. It provides services to many apps. Distributed fs shares data among users and among computers with easier provisioning and management.</p><p>Dfs has its own jobs as is pathname lookup. Client mounts fs on the server. When the client looks up a file, it performs the individual lookups (1 RPC per directory), which can take a long time. Server does not know about client’s mount points.</p><p>Design:</p><ol><li><p>server-client structure: a separate server providing base of fs and applications running on client machines use this base.</p></li><li><p>how to partition fs functionality? Performance, complexity of system, security, semantics, sharing of data, administration…</p></li></ol><p>request/reply: a procedure call (read/write descriptor, parameters, a pointer to a buffer, implicit info).</p><ol><li>Client marshals parameters into message</li><li>message sent to server, unmarshalled, processed as local op</li><li>server marshals op result and sends back to client</li><li>client unmarshalls message, passes result to calling process</li></ol><p>Approach 1: server does everything (partition)</p><ul><li>Performance of a server and network can bottleneck clients.</li><li>Memory state must be maintained for each client app session.</li></ul><h3><span id="performance-tuning-d">Performance tuning (d)</span><a href="#performance-tuning-d" class="header-anchor">¶</a></h3><p>client-side caches</p><p>design decision 1: cache coherence, a consistent view across set of client caches</p><p>design decision 2: choose consistency model -&gt; in what order to persist data in</p><ul><li>Unix (Sprite, a new network file system which made heavy use of local client-side caching), 1984, all reads see most recent write</li><li>Original HTTP: all reads see last read, no consistency</li></ul><p>implementation: who does what, when</p><p>Approach 2: Sprite, caching + server contorl</p><ul><li>Server tells client whether caching of the file is allowed.</li><li>Server calls back to clients to disable caching as needed except for mapped files.</li><li>Client tells server its operations to files.</li></ul><p>Approach 3: AFS v2, caching + callbacks; All reads see latest close version.</p><ul><li>clients get copy of file and callback from server; server always callbacks if the file changes</li><li>only write back entire file upon close.</li><li>updates by server revoking callbacks for the other clients (race on close)</li></ul><p>Approach 4: NFS v3, stateless caching; Other clients’ writes visible within 30 seconds.</p><p>Stateless refers to server having no guarantees to clients.</p><p>design decision 3: Servers keep state about clients or not.</p><p>stateless servers: simple -&gt; faster in a way, easy to recover, no problem with running out of state resources</p><p>Vs. stateful servers: long-lived connections to clients -&gt; faster in a way, easy for state checking</p><h3><span id="file-handles-fs">File handles (fs)</span><a href="#file-handles-fs" class="header-anchor">¶</a></h3><p>Terms:</p><ul><li><code>opaque</code> means a structure’s contents are unknown</li><li>NAS, network-attached storage. It’s a dedicated file server.</li></ul><p>File handle, as file descriptor, is a easier way to represent/handle a file.</p><p>In fs, <code>open</code> returns a file descriptor. Applications don’t need to use file name to represent a file any more.</p><p>In NFS with stateless server, <code>open</code> creates a file handle and the server passes it back to the client. The whole process is as this:</p><ol><li>client passes the file handle (<code>opaque</code> struct) to the server when it wants to access a file</li><li>the server creates a file handle and passes it back to the client</li></ol><h3><span id="execution-models">Execution models</span><a href="#execution-models" class="header-anchor">¶</a></h3><p>Terms:</p><ul><li>IOFSL, I/O forwarding scalability layer</li></ul><ol><li>processes: creating a process needs entire new address space. Switching CPU from one process to another needs to switch address space with the unmeasurable cost of TLB misses…</li><li>threads: a thread means a thread of execution. Multiple threads share one address space, which reduces os time for creation and context switch (10000/machine). -&gt; gdb level</li><li>events/tasks: lighter than threads (1000,000/machine). Task is hard to code and debug</li></ol><p>Example:</p><p>IOFSL for supercomputers. I/O forwarding layer is introduced to solve the large number of concurrent client requests. All IO requests go through dedicated IO forwarder.</p><p>Problem: large requests -&gt; Out-of-order IO pipelining; small requests -&gt; IO request scheduler.</p><p>AFS with FUSE.</p><h2><span id="multi-server-storage">Multi-server Storage</span><a href="#multi-server-storage" class="header-anchor">¶</a></h2><p>Terms:</p><ol><li>LAN, local area network; SAN, storage area network; NASD, network attached storage device; pNFS, parallel NFS</li></ol><p>Problem 3: how to partition funtionality across servers and why</p><p>do the same tasks on each server for different data &lt;----&gt; do different tasks on each server for the same data</p><p>common issues:</p><ul><li>find the right server for given task/data</li><li>balance load across servers</li><li>excessive inter-server communication</li></ul><p>conflicting design issues: want to keep the independence of server but gain sth from multi-server struct &amp; easy to use</p><p>Approach 1:  same functions, different data</p><ul><li>Good for load distribution and fault tolerance.</li></ul><p>Problem 3.1 how is client-side namespace constructed</p><ul><li>NFS v3, Each client mounts server FSs at its own pick. Many namespaces in the clients overall.</li><li>AFS, a set of servers provide a single name space. Each client has a link to global directory hierarchy.</li></ul><p>Problem 3.2 Given file name, how to find the server having the file</p><ul><li>NFS v3, A client traverses its namespace and mount points and contacts the server (a directory sub-tree)</li><li>AFS, ~ (volume)</li></ul><p>Problem 3.3 Load balancing</p><ul><li>NFS v3, manual: system admin can assign file sub-trees to servers and configure mount points on clients.</li><li>AFS, manual: admin moves volumes among servers</li></ul><p>Approach 2: different functions, same data</p><ul><li>Good for flexibility and bottleneck avoidance. Less common, often used with approach 1.</li><li>E.g., pNFS for NASD by EMC</li></ul><p>Problem 4: concurrent access to shared state</p><p>Skip this section for which we have discussed in distributed system blogs.</p>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> storage systems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 Year-end Review</title>
      <link href="/sg/2023/12/19/2023/"/>
      <url>/sg/2023/12/19/2023/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#flashback">Flashback</a><ul><li><a href="#january">January</a></li><li><a href="#february">February</a></li><li><a href="#may">May</a></li><li><a href="#june">June</a></li><li><a href="#sometime">Sometime</a></li><li><a href="#september">September</a></li><li><a href="#november">November</a></li><li><a href="#december">December</a></li></ul></li><li><a href="#games">Games</a></li></ul><!-- tocstop --></div><p>Guten Tag,</p><p>This year is a little different from last year. I have relocated in Berlin and started my job to continue my search in storages. It may seem strange, but I didn’t fully understand the storage system back then, even though I was determined to learn about it. I own many thanks to Stefan and Damien who have walked with me through the journey in QEMU even after I finished Outreachy internship. It was a hard time for me dealing with pandemic control and school matters during last year, for which I am grateful for their companion as not only mentors but also friends with whom I could share something with.</p><p>I am constantly asked why learning CS (computer science) whereas my major in university is biology. I decided to study CS when I was 18. I remember having a conversation with a friend  about the majors we were planning to pursue in university. She chose physics and that’s when I revealed my choice for the first time. It took some turns in the year-over-year self-learning in the university. However, studying biology is not a regretful choice eventually. I must be responsible for all my decisions, right or wrong. And it does not deter me from studying what I set out with. I never believe in the opinion that one must work in the same field as their major studied in school. Not to mention the abundance of excellent open courses available, from which you can learn not only CS, but also gain a deeper understanding of the world and yourself.</p><p>However, I was still in doubt for many years. Will I be able to make it happen that I can work as a software engineer? One question led to another and it builds who I am for finding those answers. Damien was the first one who validated my abilities when I had those doubts and hesitations. And it was the offer of one internship in Japan, which did not happen for a various of reasons in the end, that inspired me to think I could work abroad, starting by not setting limits for myself. That was what in my mind about a year ago.</p><p>I would also thank one of my dearest friend who have supported me even I was not in a good shape. She was there when I made my decision to work abroad and during the long search in possible opportunites. It would have been very difficult for me to cope with the ups and downs without her.</p><p>It was a surprise that my parents took my decision to relocate to Berlin well. I could not come this far without their unconditional love and support.</p><h2><span id="flashback">Flashback</span><a href="#flashback" class="header-anchor">¶</a></h2><h3><span id="january">January</span><a href="#january" class="header-anchor">¶</a></h3><img src="/sg/2023/12/19/2023/IMG_0303.jpeg" class title="IMG_0303"><h3><span id="february">February</span><a href="#february" class="header-anchor">¶</a></h3><img src="/sg/2023/12/19/2023/IMG_0496.jpeg" class title="IMG_0496"><h3><span id="may">May</span><a href="#may" class="header-anchor">¶</a></h3><img src="/sg/2023/12/19/2023/IMG_1008.jpeg" class title="IMG_1008"><h3><span id="june">June</span><a href="#june" class="header-anchor">¶</a></h3><img src="/sg/2023/12/19/2023/IMG_1210.jpeg" class title="IMG_1210"><h3><span id="sometime">Sometime</span><a href="#sometime" class="header-anchor">¶</a></h3><img src="/sg/2023/12/19/2023/IMG_2235.jpeg" class title="IMG_2235"><h3><span id="september">September</span><a href="#september" class="header-anchor">¶</a></h3><p>It’s the same day when I received the offical contract and saw the sundown.</p><img src="/sg/2023/12/19/2023/IMG_1763.jpeg" class title="IMG_1763"><img src="/sg/2023/12/19/2023/IMG_1814.jpeg" class title="IMG_1814"><img src="/sg/2023/12/19/2023/IMG_1755.jpeg" class title="IMG_1755"><h3><span id="november">November</span><a href="#november" class="header-anchor">¶</a></h3><img src="/sg/2023/12/19/2023/IMG_2131.jpeg" class title="IMG_2131"><img src="/sg/2023/12/19/2023/IMG_2003.jpeg" class title="IMG_2003"><img src="/sg/2023/12/19/2023/IMG_1985.jpeg" class title="IMG_1985"><h3><span id="december">December</span><a href="#december" class="header-anchor">¶</a></h3><img src="/sg/2023/12/19/2023/IMG_2389.jpeg" class title="IMG_2389"><img src="/sg/2023/12/19/2023/IMG_2501.jpeg" class title="IMG_2501"><img src="/sg/2023/12/19/2023/IMG_2639.jpeg" class title="IMG_2639"><img src="/sg/2023/12/19/2023/IMG_2637.jpeg" class title="IMG_2637"><h2><span id="games">Games</span><a href="#games" class="header-anchor">¶</a></h2><p>Baldur’s Gate 3 is my favorite game in this year. It depicts an imaginary world full of adventures, where you can seek the truth amidst a suspicious and uncertain exterior. Though the fight scenes are great, I enjoy playing the Lute with teammates on the top floor of the Elfsong Tavern more.</p><p>I am surprised to find about that the Talos Principle is a very delicate and well designed game. It takes some extra thoughts to pass each level. Every problem you solved will reveal a little more truth of the world that traps you inside. And in the end you are able to choose your path. Maybe a robot overlord? Besides that, Octopath Traveler II is also one of the games that I am crazy about. It’s kind of the game once you pick up and never want to let it go, unless you find the whole stories of all characters. Civilization VI, Mount &amp; Blade I, Breath of the Wild are just classics. I spent many hours to beat old me. IMHO, Breath of the Wild is better than The Tears of The Kindom. It is beautiful and pure as in nature. Though the second one is more advanced in life styles, the previous one touched me with its story lines and the wild without pollution of some ancient relics.</p><img src="/sg/2023/12/19/2023/IMG_2682.jpg" class title="IMG_2682"><img src="/sg/2023/12/19/2023/IMG_2683.jpg" class title="IMG_2683"><hr><p>2024 resolution:</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" checked="true" disabled="true"><label for="cbx_0"> Pass the probation period</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> Join in <s>Alpine xxx Summit</s> Linux Plumbers 24</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true"><label for="cbx_2"> Read 4 books (half half)</label></li><li class="task-list-item"><input type="checkbox" id="cbx_3" checked="true" disabled="true"><label for="cbx_3"> Visit some national nature parks (almost 2)</label></li><li class="task-list-item"><input type="checkbox" id="cbx_4" checked="true" disabled="true"><label for="cbx_4"> See deers <s>in the wild</s></label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" checked="true" disabled="true"><label for="cbx_5"> See the sea</label></li><li class="task-list-item"><input type="checkbox" id="cbx_6" checked="true" disabled="true"><label for="cbx_6"> Travel in Iceland</label></li></ul>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>File Systems At a Glance</title>
      <link href="/sg/2023/12/04/storage_fs/"/>
      <url>/sg/2023/12/04/storage_fs/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#fs-storage-layout">FS storage layout</a><ul><li><a href="#log-structured-fs">Log-structured FS</a></li><li><a href="#log-structured-merge-trees">Log-structured Merge Trees</a></li><li><a href="#co-locating-ffs">Co-locating FFS</a></li></ul></li><li><a href="#fs-organization">FS organization</a><ul><li><a href="#data-organization">Data organization</a></li><li><a href="#open-read-write">Open/read/write</a></li><li><a href="#access-methods">Access methods</a></li></ul></li><li><a href="#fs-integrity">FS integrity</a><ul><li><a href="#disk-block-caching">Disk block caching</a></li><li><a href="#internal-consistency">Internal consistency</a></li><li><a href="#crash-recovery">Crash recovery</a></li></ul></li></ul><!-- tocstop --></div><p>This blog is the third part of NVMe ZNS emulation. We will explore cluster storage and all the things behind.</p><h2><span id="fs-storage-layout">FS storage layout</span><a href="#fs-storage-layout" class="header-anchor">¶</a></h2><p>Readings:<br>Chap 8 of Unix Internals, Vahalia 1995;<br>A Solution to the Metadata Update Problem in File systems, Ganger 2000<br>Chap 7 of Practical File System Design, Giampaolo 1998</p><p>Problem 1: mapping raw data into files converts into mapping fs structures and data to LBNs</p><p>Need a structure to keep track of available space (granularity: blocks). And to choose which free block.</p><p>Solution 1:</p><ul><li>Free list: Linked list of free blocks -&gt; simple but performance issues</li><li>Bitmap (common): large array of bits, one per allocatable unit. Two state: free or in use -&gt; better lookup</li><li>Free extent structure (s.t. better): extent is a contiguous range of free blocks -&gt; better management but fragmentation issues</li></ul><p>E.g. Fs storage layout for HDD: FFS 1984<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> has advantages on locality and larger transfer size over pre-FFS fs world. <strong>Allocation groups</strong> are inode and the first data blocks in the same cylinder group, which is also used in modern FSs like xfs 1994, ext*.</p><p>Larger transfer size is meant to amortizing overall positioning costs.</p><ol><li>larger fs block size</li><li>allocate contiguous blocks</li><li>prefetch: fetch more data than requested. Read-ahead is for sequential access. When paying positioning cost once, the trade-off is that a large request can delay requests of normal size. -&gt; heavy streaming of sequential I/O (locality helps)</li></ol><p>Small (&lt;= 8kb, 80%) files are fragmented in real world. And it leads to small I/Os caused by independence of files and levels of indirection.</p><p>Problem 2: small files lead to small I/Os. Need to increase locality and transfer size for small files</p><p>Solution 2: group small files and metadata for larger I/Os.</p><p>How to group?</p><ol><li>Co-locate?</li><li>Over aggressiveness costs little?</li></ol><p>Locality and large transfer size brings performance improvement to fs. The relation between them is prefetching and write-back caching. We don’t want too many random writes. The idea behind all those optimization, I think, is to reduce random access of local file systems. That’s why we  care about cache, fetching data, transferring, etc.</p><p>+Locality:</p><ol><li>delay in cache for r/w</li><li>disk req scheduling for allocation</li><li>write near the disk head (hardly used)</li></ol><p>+large transfer</p><ol><li>re-allocation (move data around)</li><li>pre-allocation (allocate more than you need now)</li><li>extents-like structure as a replacement for block lists and bitmaps (beware of long small-extent lists hiding out)</li></ol><h3><span id="log-structured-fs">Log-structured FS</span><a href="#log-structured-fs" class="header-anchor">¶</a></h3><p>-&gt; amortization, large write</p><ul><li>Data and metadata are written sequentially to a circular buffer called log</li><li>shadow paging: write a segment to replace several older smaller blocks and reclaim space. The idea is to increase empty blocks. Its cost may more expensive than benefit gained.<ul><li>It follows Amdahl’s law. Speedup is limited to fraction improved.</li></ul></li><li>cleaning: segment cleaning starts when there are blanks between blocks. Read entire segment for amortization and move live blocks from segment being cleaned.<ul><li>know which blocks are live -&gt; segment summary</li><li>know whether block is still live -&gt; inode map, inodes</li><li>do cleaning in background unless running out of space</li></ul></li><li>Most modern FTLs do LFS-liek remapping into SSD blocks</li><li>F2FS is a LFS-like FS for flash<ul><li>set segment size = SSD block size</li><li>separate hot/cold data: Hot/warm/cold. Set criteria for data according to its usage (how likely to be overwritten)</li></ul></li></ul><h3><span id="log-structured-merge-trees">Log-structured Merge Trees</span><a href="#log-structured-merge-trees" class="header-anchor">¶</a></h3><p>data structure view: (memory buffer -&gt; disk)</p><ol><li>insert: buffer and sort recent inserts in memory; write out into local fs sequentially; Less random disk writes than b-tree.</li><li>lookup: search sorted tables one by one -&gt; compaction: merge sort into new files, deleting old (cleaning as LFS); Bloom-filter and in-memory index to reduce lookups.</li></ol><p>E.g. TableFS (FUSE) packs metadata into LSM trees</p><ol><li>Design: small objects (&lt;= 4kB) are embedded into LSM tree, turning into one large object (~2MB). Large files are stored in object store indexed by tablefs assigned id number.</li><li>LSM tree is a tabular structure with (key, value). It co-locates directory entries with inode attr and small files to reduce random lookups. Readdir performs sequential scan on the table.</li><li>FUSE is a fs in user space. It presents user VFS to the kernel<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</li><li>LevelDB is a key-value database using LSM tree to supports its operations like put, delete, get, scan.</li></ol><h3><span id="co-locating-ffs">Co-locating FFS</span><a href="#co-locating-ffs" class="header-anchor">¶</a></h3><p>It allows large transfers by co-locating related metadata and data objs and r/w to obj groups. Files are placed based on name locality, which leads to multiple files per disk I/O.</p><h2><span id="fs-organization">FS organization</span><a href="#fs-organization" class="header-anchor">¶</a></h2><p>Vahalia1995 ch8: P255</p><ol><li><p>vnode layer: this layer is for having multiple fs at once. It adds a level of indirection as virtual fs layer. Everything in kernel interacts with fs via a virtualized layer of functions. It can also supprot non-local FSs like NFS, FAT fs,<br>user -&gt; open file object -&gt; vnode_structure</p></li><li><p>dir (inode IDs (file name tranlating to), record len, length of name, file name) is a special file with entries formatted. Sets of entries are organized in block-sized chunks.</p></li><li><p>mount/unmount attach/detach one FS into the namespace.</p></li><li><p>a root file system <code>/</code></p></li><li><p>multiple FSs on one disk. Disk capacity is divided into multiple “partitions”. To track such structure, keep a partition map which has (offset, len) (in logical blocks). Commonly, device drivers handle the partition map (FS req -&gt; partition).</p></li><li><blockquote><p>a symbolic link contains a text string as a path to another file or directory</p></blockquote></li><li><p>Data is declared to be set of records, each a set of fields. Index is a map of key values to offsets in the file. Libarary API in databases allows access by key value or range of values.</p></li></ol><h3><span id="data-organization">Data organization</span><a href="#data-organization" class="header-anchor">¶</a></h3><p>The problem of disk organization and naming is how to find certain entry in many environments with TBs of data.</p><ol><li>directory and file structure. Traverse the directory hierairchy by the <code>.</code> and <code>..</code> entries. -&gt; good for moderate-sized data sets</li><li>managing namespace: mount/unmount. Starting with a root file system, mounted fs is attached into this namespace.</li></ol><p>Difficulty with dir hierarchies:</p><ol><li>difficult to scale to large size</li><li># of entries in a dir grows too large -&gt; partition into subdirectories again</li><li>one data object fits into many places -&gt; different file names for the same data object/put symbolic link to a file</li></ol><p>Naming in two respectives, direct/indirect, absolute/relative. Files are accessed by attributes. Attributes are external information to describe a file, like last modified by, created by, file type etc.</p><h3><span id="open-read-write">Open/read/write</span><a href="#open-read-write" class="header-anchor">¶</a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fd = open(<span class="string">&quot;foo/bar&quot;</span>, RO);</span><br><span class="line">ret = read(fd, buffer, size);</span><br><span class="line">ret = write(fd, buffer, size)</span><br></pre></td></tr></table></figure><p>Open:</p><ol><li>translate file name to inode: <code>vnode_lookup</code>, use dir lookup cache first for each lookup</li><li>create a vnode for inode</li><li>create a open file struct</li><li>fill in fd</li><li>return index into fd table</li></ol><p>Read:</p><ol><li>index into fd table to get a open a open file struct -&gt; get vnode</li><li><code>vnode_read(vnode, offset, buffer, size)</code> -&gt; normal read req</li><li>find vnode’s buffer (offset) in buffer cache</li><li>if buffer is invalid, <code>vnode_getbuf</code> fills it. It requests device driver to fill buffer with data.</li><li>copy data from cached buffer to user space buffer -&gt; advance offset by len of copied data in file obj</li><li>repeat until size reached</li><li>return -&gt; update open file obj’s offset</li></ol><p>Write op handles buffers differently from read op. If entire buffer will be overwritten by write, the buffer is marked as valid. When  the write copies data to cache buffer, it will also mark buffer dirty. After returning, it leaves buffers as dirty in buffer cache.</p><p>To map file offset to disk LBNs, simple solution is to use start location and a contiguous LBNs to keep entire file. Using a next pointer in each block allows a flexible way to store a file. The most common approach is to use block lists. Block lists are an array with one LBN per block in the file.</p><h3><span id="access-methods">Access methods</span><a href="#access-methods" class="header-anchor">¶</a></h3><p>Unix files are generally flat which is a stream of bytes. Databese files are generally indexed with b-tree of records.</p><p>Hash table: O(1) lookup with poor range query. B-tree: O(lgN) lookup with efficient range query.</p><h2><span id="fs-integrity">FS integrity</span><a href="#fs-integrity" class="header-anchor">¶</a></h2><ol><li>cache benefit = time without cache/time with cache</li><li>average = hit time + (average miss time * miss probability)</li><li>write-back caching: the processor writes data to its local cache firsts before writing that cached data to memory or disk.</li><li>ECC is Error-Correcting Code</li><li>fsync: sync everything associated with that file.</li></ol><h3><span id="disk-block-caching">Disk block caching</span><a href="#disk-block-caching" class="header-anchor">¶</a></h3><p>Latency to fetch data or perform I/O on disk from when I/Os are sent from application (on CPUs) can be 5-50 ms, 5-500 times of accessing disk block cache (0.1-1.0 ms) from the same starting place. We need to hide storage latencies or mortize the average response time.</p><p>Problem 1: how to avoid cache misses?</p><p><code>Miss Ratio</code> dominates the avarage access time computation than hit ratio. A cache miss takes much slower than a cache hit. It can be seen in the avarage equation.</p><p>Cache misses scenarios:</p><ol><li>among reads: read for which not all data is in cache. Have to go to disk and the reader has to wait. Prefetches go to disk too. Though it do that in the background.</li><li>among writes: writes put new (block-aligned) data into cache and move one. Writers don’t wait unless no cache space is available for new data or it must read existing block because only part set of data being written to disk.</li></ol><h3><span id="internal-consistency">Internal consistency</span><a href="#internal-consistency" class="header-anchor">¶</a></h3><p>Problem 2: Challenges to internal consistensy</p><ul><li>concurrent modifications: two processes induce race conditions -&gt; concurrency control</li><li>media defect growth: contents of newly-defective sectors are lost -&gt; redundancy</li><li>transient storage subsystem bug: flipped bits on bus etc -&gt; integrity checks + redundancy</li><li>system crashes are unpredictable and can happen at any time: volatile main memory contents lost. On-disk img must be sufficiently consistent for this type of failures. Only persistent storage is there upon restart. Clean-up must be done after system failures.</li></ul><p>Tools for protecting consistency:</p><ol><li><p>static mapping: if they do not change, they do not cause problems</p></li><li><p>atomicity of writes: checksum or per-server ECC provides per-sector with unwritten guarantee by FS/app. -&gt; good for grouping inter-related updates, like directory chunks and inodes</p><p>Problem 2.1: data is lost when write is partially completed</p></li><li><p>update ordering: ensure that one update propagates before another -&gt; good for single-direction dependencies</p><p>Problem 2.2: not good for bidirectional dependencies (most of them in fs)</p><p>Solution 2.2: convert some of them to single direction giving importance of direction.</p></li><li><p>atomicity: ensure that a set of updates all occur or none do</p></li></ol><p>Purpose of update ordering: provide integrity of metadata pointers in face of system failures</p><p>Basic rules are like rules of programming with pointers. Allocate before use, must free when deallocating, set new pointer before free when moving. In pointer world, freeing means nullifying. Something always left dangling if there is a badly-timed crash.</p><h3><span id="crash-recovery">Crash recovery</span><a href="#crash-recovery" class="header-anchor">¶</a></h3><p>Tradional way examines entire contents by walking entire dir hierarchy and each file’s block list, indentify and rebuild free space/inode bitmaps. It is exhausting.</p><p>Problem 2.3: clever way of crash recovery</p><p>Solution 2.3.1: update ordering</p><ol><li>synchronous writes: wait for one write to complete before proceeding -&gt; huge performance overhead</li><li>soft updates: write-back caching for all (non-fsync) updates -&gt; good for delayed writes</li></ol><p>Solution 2.3.2: multi-write atomicity. Always present safe version.</p><ol><li>write-ahead logging (WAL, or journaling): changes are kept in a log first.</li><li>shadow paging<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>: New versions of data blocks written to new locations. Write changes to alternate location and replace previous.<img src="/sg/2023/12/04/storage_fs/Screenshot-3247958.png" class title="Screenshot-3247958"></li></ol><p>Need to revisit P240<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://afterhoursacademic.medium.com/a-fast-file-system-for-unix-15117fb7425b">https://afterhoursacademic.medium.com/a-fast-file-system-for-unix-15117fb7425b</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://stackoverflow.com/questions/2910229/what-is-a-virtual-file-system-or-a-file-system-in-userspace">https://stackoverflow.com/questions/2910229/what-is-a-virtual-file-system-or-a-file-system-in-userspace</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://stackoverflow.com/questions/55223741/understanding-shadow-paging-and-how-it-differs-from-journaling-file-systems">https://stackoverflow.com/questions/55223741/understanding-shadow-paging-and-how-it-differs-from-journaling-file-systems</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://en.wikipedia.org/wiki/Three-state_logic">Three-state logic - Wikipedia</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> storage systems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Write a BST: Work and Span</title>
      <link href="/sg/2023/10/03/fp_sml/"/>
      <url>/sg/2023/10/03/fp_sml/</url>
      
        <content type="html"><![CDATA[<p>materials: 15-150, <a href="http://www.cs.cmu.edu/~15150/index.html">http://www.cs.cmu.edu/~15150/index.html</a></p><p>Goal of this article is to learn how to write a balanced binary search tree as an example to dip into the flavour of functional programming.</p><p>Problem 1: how to exploit parallelism?</p><p>Expression evaluation has no side-effects on correctness of program. Evaluation order has no effect on values. Thus evaluation on independent code in parallel is workable.</p><p>A more procedural way to analyse is work and span. To calculate the runtime, go back to recurrence. Work runs in sequential while span is in parallel. Work of an expression is the work for sub-expressions. Span of an expression needs to max the span for independent sub-expressions first and add them up.</p><blockquote class="colorquote grey"><p><em>Definition of work and span.</em></p><ol><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.186ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2292 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mo" transform="translate(1048,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1437,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(1903,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, the <u>work</u> of expression is the evaluation time in sequential on a single processor.</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.274ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1889 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(1500,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, the <u>span</u> of e is the evaluation time in parallel for independent code.</li><li>The applicative work/span <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="6.321ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 2793.9 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(1415.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1804.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2404.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>/<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="5.572ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 2462.9 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(1084.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1473.9,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2073.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> is the work/span of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.102ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 1813 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(1424,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> when v is a value of size n.</li></ol></blockquote><p>Problem 2: How to use trees to represent integers? -&gt; How to design a datatype for trees : int?</p><p>To design a datatype, we need to consider:</p><ol><li>constructor</li></ol><h2><span id="basics">Basics</span><a href="#basics" class="header-anchor">¶</a></h2><p>ML has syntax features as:</p><ul><li>Only well-typed expressions can be evaluated (int, real, bool, tuples, fun, list)</li><li>Functions are values (f(x) = x + 1) or functions (f(x) = f(x-1) + 1)</li><li>List items have the same type.</li><li>User defines their own types.</li></ul><p>ML systems:</p><ul><li>expressions are evaluated to values</li><li>declarations are checked with types</li><li>ML reports value and type</li></ul><p>Pitfalls and notices:</p><ol><li><p>warning: the indication of redundant code of the pattern.</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">val</span> <span class="number">49</span> = sq (~<span class="number">7</span>);</span><br><span class="line">stdIn:<span class="number">44.5</span>-<span class="number">44.17</span> <span class="type">Warning</span>: binding not exhaustive</span><br><span class="line">          <span class="number">49</span> = ...</span><br></pre></td></tr></table></figure></li><li><p>import file in interpretor: must add double quotation marks</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- use <span class="string">"eval.sml"</span>;</span><br></pre></td></tr></table></figure></li><li><p>marks: <code>=&gt;*</code> means equivalent to in finitely many steps, <code>::</code> is the constructor for lists.</p></li><li><p><code>nil</code> is an empty list</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
          <category> functional programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Not Exatcly About NVMe ZNS Emulation</title>
      <link href="/sg/2023/09/22/qemu_zns/"/>
      <url>/sg/2023/09/22/qemu_zns/</url>
      
        <content type="html"><![CDATA[<p>This blog is the second part of NVMe ZNS emulation. You can find the first one on this link: <a href="https://sgzerolc.github.io/sg/2023/01/14/qemu_nvme/">A Tour of NVMe</a>.</p><p>First, the tour continues by discussing the hanging questions and introducing the latest solutions to metadata persistence. Second, we delve into address translation and elaborate on the details of ZNS metadata on NVMe device side. Afterward, we will shift our focus away from NVMe and briefly explore Linux cluster storage.</p><p>There were several approaches to persistence when Dimtry contributed to ZNS emulation<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. The one I apply is to add a separate blockdev which stores the zoned metadata in the Qcow2 image. Qcow2 is better than Raw format for its popularity in virtual image format.</p><p>Another way is using a separate hostmem/mmap’ed file. However, the QEMU block layer does not support mmap. A BlockDriverState might not have a file descriptor that can be mapped.</p><h2><span id="qcow2-full-emulation">Qcow2 full emulation</span><a href="#qcow2-full-emulation" class="header-anchor">¶</a></h2><p>Qcow2 is a storage format for virtual disks. Zoned storage emulation is added as a new format extension to the Qcow2 driver. Thereby users can attach such a Qcow2 image file to the guest os as a zoned device.</p><p>The zone state machine depicts state transitions and zone resources<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>. Read only and offline states are caused by device internal events, which is ignored in full emulation for simplicity. The other zone states contain empty, full, open and closed states. If the guest or QEMU crashes, the zone states are needed to recover. In real devices, open states (explicit open, implicit open) will lost and turn into closed state after a power cycle. Meanwhile, write pointers should be preserved to track usable blocks within the zone.</p><p>We need to think of a way to maintain zone states correctly and guarantee zoned metadata persistence. Write pointer is an array of unsigned 64-bit intergers. Even though it can store zone information that has few bits like zone state, in-memory zone state is good enough to serve its purpose without extra cost on state assignment to write pointers. Without loss of active zones, Qcow2 keeps track of active states in doubly linked lists. When reading zone states, it will first check if the zone is in each zone list and check wp when finding none.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Qcow2Wp</span> &#123;</span></span><br><span class="line">    <span class="type">uint64_t</span> wp;</span><br><span class="line">    QLIST_ENTRY(Qcow2Wp) exp_open_zone_entry;</span><br><span class="line">    QLIST_ENTRY(Qcow2Wp) imp_open_zone_entry;</span><br><span class="line">&#125; Qcow2Wp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BDRVQcow2State</span> &#123;</span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">/* States of zoned device */</span></span><br><span class="line">    Qcow2ZonedHeaderExtension zoned_header;</span><br><span class="line">    QLIST_HEAD(, Qcow2Wp) exp_open_zones;</span><br><span class="line">    QLIST_HEAD(, Qcow2Wp) imp_open_zones;</span><br><span class="line">    Qcow2Wp *wp;</span><br><span class="line">...</span><br><span class="line"> &#125; BDRVQcow2State;</span><br></pre></td></tr></table></figure><p>Another kind of in-memory state is zone resources. It has open and active zone limits to affect zone operations. Write requests on zones no longer excute when any one of the zone limits is over. If there is room left for active zones, the device can implicitly close one zone (implicit open) to avoid exceeding open zone limit.</p><h2><span id="zns-metadata-persistence">ZNS metadata persistence</span><a href="#zns-metadata-persistence" class="header-anchor">¶</a></h2><p>ZNS emulation is fully compliant with the NVMe ZNS spec except persistent zone states. We can add persistence to the metadata of ZNS emulation by taking advantage of new block layer APIs and the Qcow2 image as backing file. It divides into two parts, zone states and ZDED (zone descriptor extension data) which is one of zone attribute fields.</p><h3><span id="address-translation">address translation</span><a href="#address-translation" class="header-anchor">¶</a></h3><p>NVMe device internal memory stores data directly from the guest depending on where the io_queues are stored, host or NVMe device. Normally, the guest address will be translated to host address. But if it’s DMA (direct memory access), the guest cannot map the address and will trigger a bounce buffer. The host will trap it asking if Nvme device knows about it. CMB (controller memory buffer) and PMR (persistent memory region) are designed for data mapping there. PMR always persists even incurring the crashes. It can resume the writes. Only one bounce buffer in-flight is trapped.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">void</span> <span class="title function_">nvme_blk_zone_append</span><span class="params">(BlockBackend *blk, <span class="type">int64_t</span> *offset,</span></span><br><span class="line"><span class="params">                                  <span class="type">uint32_t</span> align,</span></span><br><span class="line"><span class="params">                                  BlockCompletionFunc *cb,</span></span><br><span class="line"><span class="params">                                  NvmeZoneCmdAIOCB *aiocb)</span></span><br><span class="line">&#123;</span><br><span class="line">    NvmeRequest *req = aiocb-&gt;req;</span><br><span class="line">    assert(req-&gt;sg.flags &amp; NVME_SG_ALLOC);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (req-&gt;sg.flags &amp; NVME_SG_DMA) &#123;</span><br><span class="line">        req-&gt;aiocb = dma_blk_zone_append(blk, &amp;req-&gt;sg.qsg, (<span class="type">int64_t</span>)offset,</span><br><span class="line">                                         align, cb, aiocb);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        req-&gt;aiocb = blk_aio_zone_append(blk, offset, &amp;req-&gt;sg.iov, <span class="number">0</span>,</span><br><span class="line">                                         cb, aiocb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="zone-attribute-zrwa-zded">zone attribute: ZRWA, ZDED</span><a href="#zone-attribute-zrwa-zded" class="header-anchor">¶</a></h3><p>The ZRWA (zone random write area) is a legacy bit for adaption. The old drives do not support sequential constraints and set this bit to valid. ZRWAV is in runtime. All writes to ZRWA must be persistent while the write pointer is not advanced immediately<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>.</p><p>The size of ZDED is relatively small comparing to the overall size of image file therefore we adopt the option that stores ZDED of all zones in an array regardless of the valid bit set.</p><p>In the end, I would like to express my gratitude to Stefan Hajnoczi, Damien Le Moal and Dmitry Fomichev for their guidance and support over the last year. And I have gained much more than the experience within the QEMU community.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://patchew.org/QEMU/20201208200410.27900-1-dmitry.fomichev@wdc.com/">https://patchew.org/QEMU/20201208200410.27900-1-dmitry.fomichev@wdc.com/</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://zonedstorage.io/docs/introduction/zoned-storage#zone-states-and-state-transitions">https://zonedstorage.io/docs/introduction/zoned-storage#zone-states-and-state-transitions</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Comments by Klaus Jensen. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.046 incremental improvement</title>
      <link href="/sg/2023/09/09/6.046_flow/"/>
      <url>/sg/2023/09/09/6.046_flow/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#flow-networks">Flow networks</a><ul><li><a href="#flow">Flow</a></li><li><a href="#cut">Cut</a></li><li><a href="#residual-networks">Residual networks</a></li></ul></li><li><a href="#max-flow-min-cut">Max-flow, min-cut</a><ul><li><a href="#max-flow-min-cut-theorem">Max-flow, min-cut theorem</a></li><li><a href="#ford-fulkerson-algorithm">Ford-Fulkerson algorithm</a></li><li><a href="#edmonds-karp-algorithm">Edmonds-Karp algorithm</a></li></ul></li><li><a href="#baseball-elimination-ex">Baseball elimination ex</a></li></ul><!-- tocstop --></div><h2><span id="flow-networks">Flow networks</span><a href="#flow-networks" class="header-anchor">¶</a></h2><p>Notions+</p><ul><li>directed graph G(V, E)</li><li>two distinguished vertices source s, sink t</li><li>basic idea: flow comes out of s and makes it way to t with constraints on edges.<ul><li><u>capacity</u> is like the amount of traffic that can go through the road; flow goes through the edge.</li><li>local contraint: the flow can never exceed the capacity</li><li><u>flow</u>: think flow as a rate. No commodity accumulation along the way. Flow can be cyclic<ul><li><img src="/sg/2023/09/09/6.046_flow/Screenshot-4100901.png" class title="Screenshot-4100901"></li></ul></li></ul></li><li>cut is a partition of nodes. A cut in G forms two disconnected components.</li></ul><p>Example: each edge (u, v) in E, non-negative capacity c(u, v). If (u, v) not in E, then assume c(u, v) = 0</p><p><u>Maximum-flow problem</u>: Given a flow network G, find a flow of maximum value on G.</p><p>Assumptions:</p><ol><li>no self-loop edges allowed</li><li>If edge(u, v) in E exists, then (v, u) not in E. WLOG, <u>introduce a new vertex</u> u’ so that v -&gt; u’ -&gt; u</li></ol><p>Relation of flow and cut: The capacity of any cut bounds the flow of cut/network. Min-cut will point to the max-flow.</p><h3><span id="flow">Flow</span><a href="#flow" class="header-anchor">¶</a></h3><blockquote class="colorquote green"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="4.926ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 2177.3 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></g></svg></mjx-container> <u>Flow</u>: A (net) flow on G is function f: V*V -&gt; R satisfying the following constrains.</p><ul><li><p>Capacity constraint: For all u,v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V, f(u, v) &lt;= c(u, v).</p></li><li><p>Flow conservation: For all u <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V - {s, t}, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.71ex;" xmlns="http://www.w3.org/2000/svg" width="16.577ex" height="2.406ex" role="img" focusable="false" viewbox="0 -750 7327.2 1063.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g></g></g><g data-mml-node="mi" transform="translate(2664,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(3214,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3603,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4175,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4619.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(5104.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5771.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6827.2,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container></p></li><li><p>Skew symmetry: For all u,v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V, f(u, v) = -f(v, u)</p></li></ul><p>The value of a flow f, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.71ex;" xmlns="http://www.w3.org/2000/svg" width="27.544ex" height="2.406ex" role="img" focusable="false" viewbox="0 -750 12174.5 1063.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(828,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1383.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="munder" transform="translate(2439.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g></g></g><g data-mml-node="mi" transform="translate(5103.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(5653.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(6042.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(6511.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(6956.2,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(7441.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(8108,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(9163.8,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(9713.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(10102.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(10571.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(11016.5,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(11785.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p></blockquote><blockquote class="colorquote grey"><p>Simple properties of flow:</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="7.89ex" height="1.57ex" role="img" focusable="false" viewbox="0 -683 3487.3 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></g></svg></mjx-container> 1.  f(X, X) = 0, f(X, Y) = - f(Y, X), <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="32.544ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 14384.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mo" transform="translate(2013.2,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"/></g><g data-mml-node="mi" transform="translate(2902.4,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/></g><g data-mml-node="mo" transform="translate(3665.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4110.1,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g><g data-mml-node="mo" transform="translate(4833.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5499.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(6555.7,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(7105.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(7494.7,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mo" transform="translate(8346.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(8791.3,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g><g data-mml-node="mo" transform="translate(9514.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10125.6,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(11125.8,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(11675.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(12064.8,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/></g><g data-mml-node="mo" transform="translate(12827.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(13272.4,0)"><path data-c="1D44D" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"/></g><g data-mml-node="mo" transform="translate(13995.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.946ex" height="1.731ex" role="img" focusable="false" viewbox="0 -683 4838 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mo" transform="translate(1074.2,0)"><path data-c="2229" d="M88 -21T75 -21T55 -7V200Q55 231 55 280Q56 414 60 428Q61 430 61 431Q77 500 152 549T332 598Q443 598 522 544T610 405Q611 399 611 194V-7Q604 -22 591 -22Q582 -22 572 -9L570 405Q563 433 556 449T529 485Q498 519 445 538T334 558Q251 558 179 518T96 401Q95 396 95 193V-7Q88 -21 75 -21Z"/></g><g data-mml-node="mi" transform="translate(1963.4,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/></g><g data-mml-node="mo" transform="translate(3004.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(4060,0)"><path data-c="2205" d="M624 470Q624 468 639 446T668 382T683 291Q683 181 612 99T437 -1Q425 -2 387 -2T337 -1Q245 18 193 70L179 81L131 39Q96 8 89 3T75 -3Q55 -3 55 17Q55 24 61 30T111 73Q154 113 151 113Q151 114 140 130T115 177T95 241Q94 253 94 291T95 341Q112 431 173 495Q265 587 385 587Q410 587 437 581Q522 571 582 513L595 501L642 541Q689 586 695 586Q696 586 697 586T699 587Q706 587 713 583T720 568Q720 560 711 551T664 510Q651 499 642 490T628 475T624 470ZM564 477Q517 522 448 539Q428 546 375 546Q290 546 229 492T144 370Q133 332 133 279Q136 228 151 195Q157 179 168 160T184 141Q186 141 375 307T564 477ZM642 290Q642 318 637 343T625 386T611 416T598 436T593 444Q590 444 402 277T213 108Q213 104 231 89T293 55T392 37Q495 37 568 111T642 290Z"/></g></g></g></svg></mjx-container>.</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.234ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 4081.3 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> 1. <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.086ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5342.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(828,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1383.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2439.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(2989.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3378.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(4147.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4592.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(4953.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, what goes out the source is what goes in the sink.</p><p><em>Proof.</em> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.048ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 8419.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(1930.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(2930.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(3621.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(4621.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(4982.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(5427.6,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(6196.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6863.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(7919.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container>, flow of the intermediate vertices goes out to all vertices by conservation law.</p></blockquote><h3><span id="cut">Cut</span><a href="#cut" class="header-anchor">¶</a></h3><ol><li>the flow across the cut is as the sum of flows corresponding to each pair of vertices (crossing edges).<ul><li><img src="/sg/2023/09/09/6.046_flow/Screenshot-4105980.png" class title="Screenshot-4105980"></li></ul></li><li>capacity of cut c(S, T) = 3+2+3+1=9</li></ol><blockquote class="colorquote green"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="4.926ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 2177.3 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></g></svg></mjx-container> <u>Cut</u>: A cut (S&lt; T) of a flow network G = (V, E) is a partition of V such that s <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> S and t <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> T. If f is a low on G, then <u>the flow across the cut</u> is f(S, T)</p></blockquote><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.234ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 4081.3 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> 2. The value of any flow is bounded by the capacity of any cut.</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="7.89ex" height="1.57ex" role="img" focusable="false" viewbox="0 -683 3487.3 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></g></svg></mjx-container> 2. For any flow f and any cut (S, T), we have <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.582ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5561.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(828,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1383.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2439.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(2989.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3378.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(4023.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4468.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(5172.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>.</p><p><em>Proof of T2.</em> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.582ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5561.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(828,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1383.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2439.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(2989.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3378.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(4023.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4468.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(5172.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.71ex;" xmlns="http://www.w3.org/2000/svg" width="49.154ex" height="2.406ex" role="img" focusable="false" viewbox="0 -750 21725.9 1063.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1239,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g><g data-mml-node="munder" transform="translate(2637.9,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g><g data-mml-node="mi" transform="translate(5255.9,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(5805.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(6194.9,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6766.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(7211.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(7696.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(8363.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="munder" transform="translate(9419.1,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1239,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g><g data-mml-node="munder" transform="translate(12057,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g><g data-mml-node="mi" transform="translate(14675,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(15108,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(15497,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(16069,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(16513.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(16998.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(17665.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(18721.3,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(19154.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(19543.3,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(20188.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(20632.9,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(21336.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><p><em>Proof of L2.</em> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="79.218ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 35014.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(1584,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2028.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(2732.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3399.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(4455.2,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(5005.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5394.2,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(6039.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(6483.9,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(7252.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(7864.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(8864.3,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(9414.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9803.3,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(10448.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(10893,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(11538,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(12204.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(13260.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(13810.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(14199.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(14844.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(15289.2,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(16058.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(16725,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(17780.8,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(18330.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(18719.8,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(19188.8,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(19633.4,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(20402.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(21013.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(22013.9,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(22563.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(22952.9,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(23820.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(24820.3,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(25289.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(25734,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(26503,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(27169.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(28225.6,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(28775.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(29164.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(29633.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(30078.2,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(30847.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(31514,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(32569.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(32847.8,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(33397.8,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(33842.4,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"/></g></g></g></svg></mjx-container></p><ul><li>Intuitively, source is on one side of the cut and sink on the other side.</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.185ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6711.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(1806.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(2806.4,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(3275.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(3720.1,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(4489.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5155.9,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(6211.7,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container>: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="8.869ex" height="2.106ex" role="img" focusable="false" viewbox="0 -716 3920 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(638.8,0)"><path data-c="2209" d="M196 25Q84 109 84 250Q84 372 166 450T360 539Q361 539 375 539T413 540T460 540L547 707Q550 716 563 716Q570 716 575 712T581 703T583 696T505 540H568Q583 532 583 520Q583 511 570 501L484 500L366 270H568Q583 262 583 250T568 230H346L247 38Q284 16 328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 447 -40T419 -41Q304 -41 228 3Q117 -211 115 -212Q111 -215 104 -215T92 -212T86 -204T84 -197Q84 -190 89 -183L196 25ZM214 61L301 230H124V228Q124 196 147 147T214 61ZM321 270L440 500Q353 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H321Z"/></g><g data-mml-node="mi" transform="translate(1583.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(2450.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(3451,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g></g></g></svg></mjx-container>, by conservation law</li></ul></blockquote><h3><span id="residual-networks">Residual networks</span><a href="#residual-networks" class="header-anchor">¶</a></h3><ol><li>network points to where you can increase the flow for capacity left.</li><li>Augmentation: Not only increase the flow but also shrink it. The shrinkage of flow is represented by an edge in the residual network.</li><li>How augmentation changes flow: walking through the augmenting path, looking at each of the residual capacities and picking the Min value.</li><li>Help to look for augmenting paths in Gf for Ford Fulkerson.</li></ol><blockquote class="colorquote green"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="4.926ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 2177.3 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></g></svg></mjx-container> <u>Residual network</u>: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="10.089ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 4459.5 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/></g><g data-mml-node="mi" transform="translate(819,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(1257.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1646.9,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(2415.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(2860.6,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(4070.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, <strong>strictly positive</strong> residual capacities <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="29.675ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 13116.5 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(904.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1293.9,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2310.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2795.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3462.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(4518.1,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(4951.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5340.1,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5912.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(6356.8,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(6841.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(7453,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(8453.2,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(9003.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9392.2,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(9964.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(10408.9,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(10893.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11560.7,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mn" transform="translate(12616.5,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container>. Edges in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="2.737ex" height="2.206ex" role="img" focusable="false" viewbox="0 -680 1209.9 975"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g></g></g></svg></mjx-container> admit more flow.</p><p>If (v, u) not in E, c(v, u) = 0, but f(v, u) = -f(u, v). <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="11.13ex" height="2.363ex" role="img" focusable="false" viewbox="0 -749.5 4919.5 1044.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(771,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(1487.9,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(2043.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(3099.5,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(3599.5,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(3877.5,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(4641.5,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g></g></g></svg></mjx-container></p></blockquote><p>Augmenting paths:</p><ol><li><p>graph G =&gt; residual networks Gf =&gt; augmented paths</p><ul><li><p>G:<img src="/sg/2023/09/09/6.046_flow/Screenshot-4110386.png" class title="Screenshot-4110386"></p></li><li><p>Gf: <img src="/sg/2023/09/09/6.046_flow/Screenshot-4110124.png" class title="Screenshot-4110124"></p></li></ul></li><li><p>If find a path from s to t in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="2.846ex" height="2.262ex" role="img" focusable="false" viewbox="0 -705 1257.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/></g><g data-mml-node="mi" transform="translate(819,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g></g></g></svg></mjx-container>, then the flow is not maximum. <u>If no path exists, the flow is maximum.</u></p></li><li><p>Augmenting paths can increase flow and tell how to change edges (subtract or increase)</p></li></ol><blockquote class="colorquote green"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="4.926ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 2177.3 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></g></svg></mjx-container> Any path from s to t in <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="2.846ex" height="2.262ex" role="img" focusable="false" viewbox="0 -705 1257.9 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"/></g><g data-mml-node="mi" transform="translate(819,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g></g></g></svg></mjx-container> is an <u>augmenting path</u> in G with respect to f. The flow value can be increased along an augmenting path p by <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.8ex;" xmlns="http://www.w3.org/2000/svg" width="24.732ex" height="2.497ex" role="img" focusable="false" viewbox="0 -750 10931.5 1103.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(904.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1293.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(1796.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2463.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(3519.5,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4397.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="msub" transform="translate(4742.5,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(633,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1239,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(1724,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2113,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(2780,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(7746.9,0)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(904.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1293.9,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2310.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2795.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></svg></mjx-container>.</p></blockquote><h2><span id="max-flow-min-cut">Max-flow, min-cut</span><a href="#max-flow-min-cut" class="header-anchor">¶</a></h2><h3><span id="max-flow-min-cut-theorem">Max-flow, min-cut theorem</span><a href="#max-flow-min-cut-theorem" class="header-anchor">¶</a></h3><p>Proof: 1=&gt;2, 2=&gt;3, 3=&gt;1. Movement between Gf and G.</p><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.234ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 4081.3 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> 3. The following are equivalent:</p><ol><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.317ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5444.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(828,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1383.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2439.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(2872.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3261.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(3906.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4351.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(5055.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> for some cut (S, T). =&gt; some cut is saturated</li><li>f is a maximum flow.</li><li>f admits no augmenting paths.</li></ol><p><em>Proof.</em></p><ul><li><p>1=&gt;2, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.317ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5444.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(828,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(1383.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(2439.6,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mo" transform="translate(2872.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3261.6,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mo" transform="translate(3906.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4351.2,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(5055.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> for any cut (S, T)</p></li><li><p>2=&gt;3, by contradiction</p></li><li><p><u>3=&gt;1</u>, suppose f admits no augmenting paths (cannot reach t from s)</p><ul><li><p>Define S = {v<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container>V: there exists a path in Gf from s to v} (set of the reachable vertices from S) and let T = V - S (s<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container>S, t<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container>T=&gt;(S, T) is a cut)</p></li><li><p><u>key observation</u>: no path in Gf from u to v, otherwise v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> S.</p><ul><li><img src="/sg/2023/09/09/6.046_flow/Screenshot-4279298.png" class title="Screenshot-4279298"></li><li><p>Picking an edge in G from u to v  with a non-zero capacity (existence)</p></li></ul></li><li><p>=&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="11.353ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 5018.1 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(904.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1293.9,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2310.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2795.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3462.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(4518.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container>, since if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="11.353ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 5018.1 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(904.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1293.9,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1865.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2310.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2795.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3462.4,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="mn" transform="translate(4518.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container>, then v<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container>S not v<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container>T as assumed.</p></li><li><p>=&gt; f(u, v) = c(u, v), every edge from S to T in G is saturated =&gt; summing over u, v … yields f(S, T) = c(S, T).</p></li></ul></li></ul></blockquote><h3><span id="ford-fulkerson-algorithm">Ford-Fulkerson algorithm</span><a href="#ford-fulkerson-algorithm" class="header-anchor">¶</a></h3><ol><li>many subproblem routines: compute Gf given f, discover an augmenting path via dfs/bfs, …</li><li>proof: prove T3: 3=&gt;2</li><li>What selected paths lead to failure:<ul><li>only need 2 iterations in the example</li><li>It takes 2 billion iterations: s-&gt;a-&gt;b (G) =&gt; s-&gt;b-&gt;a (Gf) =&gt; G =&gt; Gf …<ul><li><img src="/sg/2023/09/09/6.046_flow/Screenshot-4280418.png" class title="Screenshot-4280418"></li></ul></li></ul></li></ol><blockquote class="colorquote blue"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="12.27ex" height="2.084ex" role="img" focusable="false" viewbox="0 -716 5423.3 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1048,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(1525,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2010,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2461,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2806,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(3167,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(3743,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4621,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(5090,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1048,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(1525,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2010,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2461,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2806,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(3167,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(3743,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(4621,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mo" transform="translate(5090,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></g></svg></mjx-container>  f[u, v] &lt;- 0 for all u,v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V. While an augmenting path p in Gf exists, do augment f by <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="4.945ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 2185.9 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(466,-150) scale(0.707)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g></g><g data-mml-node="mo" transform="translate(904.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1293.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mo" transform="translate(1796.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p></blockquote><h3><span id="edmonds-karp-algorithm">Edmonds-Karp algorithm</span><a href="#edmonds-karp-algorithm" class="header-anchor">¶</a></h3><ol><li>breadth-first (<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.215ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2305 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(1916,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>) or depth-first can provide a polynomial-time bound on max flow</li><li>runtime:<ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.955ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3074 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(1921,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(2685,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> augmentations in worst case</li><li>overall complexity <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.058ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 3561.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="msup" transform="translate(1921,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mn" transform="translate(848.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3172.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li></ul></li><li>fastest max flow algorithms O(VE), Orlin 2015</li></ol><blockquote class="colorquote green"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="4.926ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 2177.3 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mo" transform="translate(1844,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></g></svg></mjx-container> breadth-first augmenting path: a shortest path in Gf from s to t where each edge has weight 1.</p></blockquote><h2><span id="baseball-elimination-ex">Baseball elimination ex</span><a href="#baseball-elimination-ex" class="header-anchor">¶</a></h2><p>Rules: divisions: playoffs -&gt; tied: elimination. <u>Team i is eliminated if wi + ri &lt; wj for some j.</u> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.864ex" height="1.666ex" role="img" focusable="false" viewbox="0 -442 1265.9 736.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(623,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></svg></mjx-container> are the games that these teams play against each other. Table 1 only lists one division. ri includes games playing against other divisions.</p><p>Problem: Decide if you have a chance to make the playoffs or not. Want an algorithms to look at standings and decide if the team is alive or not.</p><img src="/sg/2023/09/09/6.046_flow/Screenshot-4281806.png" class title="Screenshot-4281806"><p>Observe that teams playing each other that can affect the outcome.</p><ul><li>If w5 = 46, Detroit is eliminated. What if w5 = 47, w5+r5=75 = w1, Detroit is still eliminated. Because w5+r5+max(winning) = 54+r5, w1+r1+min(winning) = w1+r1. Either Baltimore or Boston will win by w3+r3+ # games NY loses to Boston = 76+r3</li><li>What if w5 = 48? Edge cases are complicate to analysis</li></ul><p>Analysis: convert tables/data to flow network (<strong>frame of translation</strong>)</p><ol><li>add capacities to v-t edges such that max flow represents elimination<ul><li>c(v, t) = w5+r5-wi, # games team i can win and not have more wins than team 5<ul><li><img src="/sg/2023/09/09/6.046_flow/Screenshot-4334659.png" class title="Screenshot-4334659"></li></ul></li></ul></li><li>Intuition: Assume team 5 wins all remaining games. Divvy up remaining games (sending flow through these edges). All teams have &lt;= w5 + r5 wins (=&gt; team 5 is not eliminated)</li><li>Find the min cut (minimal capacity): c(S, T) = 25 =&gt; elimination</li></ol><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.234ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 4081.3 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> 4. Team 5 (Detroit) is eliminated if and only if max-flow does not saturate all edges leaving the source, i.e., max flow value &lt; 26.</p><ul><li>saturate: all the games have been played</li><li>Argument: If you can’t play all the remaining games without exceeding the capacity of i-&gt;t edges, team 5 is eliminated.</li></ul><p><em>Proof.</em></p><ul><li></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.046 greedy algorithms</title>
      <link href="/sg/2023/09/07/6.046_greedy/"/>
      <url>/sg/2023/09/07/6.046_greedy/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#minimum-spanning-tree">minimum spanning tree</a></li><li><a href="#greedy-properties">greedy properties</a><ul><li><a href="#optimal-substructure-for-mst">optimal substructure for MST</a></li><li><a href="#greedy-choice-property-for-mst">greedy choice property for MST</a></li></ul></li><li><a href="#prim-s-algorithm">Prim’s Algorithm</a></li><li><a href="#kruskal-s-algorithm">Kruskal’s Algorithm</a></li><li><a href="#olc">OLC</a></li></ul><!-- tocstop --></div><h2><span id="minimum-spanning-tree">minimum spanning tree</span><a href="#minimum-spanning-tree" class="header-anchor">¶</a></h2><p>Terminology</p><ul><li>tree, connected acyclic graph</li><li>Cut: A cut is a partition of the vertices of a graph into two disjoint subsets. Any cut determines a cut-set, the set of edges that have one endpoint in each subset of the partition. These edges are said to cross the cut.</li><li>spanning, it contains all the vertices</li><li><u>spanning tree</u> of graph G is the subset of edges of G that form a tree &amp; hit all vertices of G</li><li>E, undirected edges</li><li>The fastest MST is a randomized algorithm with O(V+E) proposed by KKT in 1993</li></ul><p>MST: given graph G=(V, E) &amp; edge weights w for E , find a spanning tree T of minimum weight <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.71ex;" xmlns="http://www.w3.org/2000/svg" width="10.327ex" height="2.406ex" role="img" focusable="false" viewbox="0 -750 4564.6 1063.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(466,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g><g data-mml-node="mi" transform="translate(1133,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g><g data-mml-node="mi" transform="translate(2604.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(3320.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3709.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(4175.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>.</p><p>Goal: exponential # spanning tree -&gt; polynomial (geedy) -&gt; near linear time</p><p>A fundamental lemma of MST is that if a subtree is an MST of a graph contracting an edge, then that subtree adding the edge is an MST of the graph.</p><p>This lemma forms the optimal substructure for MST. Guessing an edge e in a MST takes exponential time. We can reduce that by shrinking the guess space.</p><p>A cut connects two disjoint sets of a graph. The greedy part of the MST algs is that a least-weight edge crossing cut belongs to some MST of the graph.</p><ul><li><img src="/sg/2023/09/07/6.046_greedy/Screenshot-4072530.png" class title="Screenshot-4072530"></li></ul><h2><span id="greedy-properties">greedy properties</span><a href="#greedy-properties" class="header-anchor">¶</a></h2><ol><li>optimal substructure: optimal solution to subproblems -&gt; optimal solution to a problem</li><li>greedy choice property: locally optimal choiced lead to a globally optimal solution</li></ol><h3><span id="optimal-substructure-for-mst">optimal substructure for MST</span><a href="#optimal-substructure-for-mst" class="header-anchor">¶</a></h3><p>If e = {u, v} is an edge of some MST:</p><ol><li><p>remove edge e: still connected by red lines, not working</p></li><li><p><u>contract e</u>: merge u,v, contraction preserves connectivity.</p><img src="/sg/2023/09/07/6.046_greedy/Screenshot-4073380.png" class title="Screenshot-4073380"><img src="/sg/2023/09/07/6.046_greedy/Screenshot-4073566.png" class title="Screenshot-4073566"></li></ol><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="7.89ex" height="1.57ex" role="img" focusable="false" viewbox="0 -683 3487.3 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></g></svg></mjx-container> 1. If T’ is a MST of G/e, then T’ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.403ex" role="img" focusable="false" viewbox="0 -598 667 620"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"/></g></g></g></svg></mjx-container> {e} is an MST of G.</p><p><em>Proof.</em> Say e <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> MST T* &amp; G</p><ul><li>=&gt; T*/e is a spanning tree of G’ = G/{e}, by connectivity.</li><li>T’ is an MST of G’ =&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="17.017ex" height="2.283ex" role="img" focusable="false" viewbox="0 -759 7521.6 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1105,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(793,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(2142.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2809.2,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(3865,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(4581,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(4970,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(793,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6166.6,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(6666.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(7132.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li><li>=&gt; $w(T) = w(T’) + w(e)\le w(T^<em>/e) + w(e) = w(T^</em>)$</li></ul></blockquote><ol><li>DP algs: Lemma 1 prove the correctness of this algorithm<ul><li>guess edge e in a MST</li><li>contract e</li><li>recurse</li><li>decontract e</li><li>add e to MST</li></ul></li><li>analysis: reduce exponential time by taking a good guess</li></ol><h3><span id="greedy-choice-property-for-mst">greedy choice property for MST</span><a href="#greedy-choice-property-for-mst" class="header-anchor">¶</a></h3><ol><li><u>cut and paste</u> argument for greedy proof<ul><li>cut (S, V-S), a crossing edge is the edge that crosses the cut</li><li>only modify edges crossing cut</li></ul></li><li>Lemma 2 provides good guess</li></ol><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="7.89ex" height="1.57ex" role="img" focusable="false" viewbox="0 -683 3487.3 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1147,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2025,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2903,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g></g></g></g></svg></mjx-container> 2. Consider any cut (S, V-S), S <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewbox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"/></g></g></g></svg></mjx-container> V. Say e is a least-weight edge crossing cut, e = {u, v}, u <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> S, v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V-S, then e <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> some MST.</p><p><em>Proof.</em> Let T* be an MST of G. Say e <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="2.106ex" role="img" focusable="false" viewbox="0 -716 667 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2209" d="M196 25Q84 109 84 250Q84 372 166 450T360 539Q361 539 375 539T413 540T460 540L547 707Q550 716 563 716Q570 716 575 712T581 703T583 696T505 540H568Q583 532 583 520Q583 511 570 501L484 500L366 270H568Q583 262 583 250T568 230H346L247 38Q284 16 328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 447 -40T419 -41Q304 -41 228 3Q117 -211 115 -212Q111 -215 104 -215T92 -212T86 -204T84 -197Q84 -190 89 -183L196 25ZM214 61L301 230H124V228Q124 196 147 147T214 61ZM321 270L440 500Q353 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H321Z"/></g></g></g></svg></mjx-container> T* (modify T* to include e).</p><ul><li>=&gt; there must be e’ <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> T* crossing the cut.</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.724ex" height="1.903ex" role="img" focusable="false" viewbox="0 -759 4739.9 841"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(793,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mo" transform="translate(1418.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msup" transform="translate(2419,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(499,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(3384.7,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4273.9,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g></g></svg></mjx-container> is spanning tree (graph theory)</li><li>greedy part: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="60.911ex" height="2.283ex" role="img" focusable="false" viewbox="0 -759 26922.5 1009"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(716,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1105,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(1571,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2237.8,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(3293.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(4009.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(4398.6,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(499,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(5142,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5531,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(5975.7,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(6691.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(7080.7,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(8006.9,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mo" transform="translate(8729.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msup" transform="translate(9507.1,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(499,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(10472.8,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(11362,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g><g data-mml-node="mo" transform="translate(11828,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(12494.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(13550.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(14266.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(14655.6,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(15359.6,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mo" transform="translate(15859.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(16470.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(17471,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(18187,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(18576,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(499,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(19319.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(19930.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(20930.9,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(21646.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(22035.9,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(22501.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(23168.7,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(24224.5,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(24940.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(25329.5,0)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(26033.5,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mo" transform="translate(26533.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li><li>=&gt; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.724ex" height="1.903ex" role="img" focusable="false" viewbox="0 -759 4739.9 841"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mo" transform="translate(793,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g></g><g data-mml-node="mo" transform="translate(1418.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msup" transform="translate(2419,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(499,363) scale(0.707)"><path data-c="2032" d="M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z"/></g></g><g data-mml-node="mo" transform="translate(3384.7,0)"><path data-c="222A" d="M591 598H592Q604 598 611 583V376Q611 345 611 296Q610 162 606 148Q605 146 605 145Q586 68 507 23T333 -22Q268 -22 209 -1T106 66T56 173Q55 180 55 384L56 585Q66 598 75 598Q85 598 95 585V378L96 172L98 162Q112 95 181 57T332 18Q415 18 487 58T570 175Q571 180 571 383V583Q579 598 591 598Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4273.9,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g></g></g></g></svg></mjx-container> is an MST</li></ul></blockquote><h2><span id="prim-s-algorithm">Prim’s Algorithm</span><a href="#prim-s-algorithm" class="header-anchor">¶</a></h2><ol><li>Idea: choose a cut - a single vertex, an arbitrary start vertex s. And find the minimum weight edge sequentially to connect all vertices. Return our MST.</li><li>Design: maintain priority queue Q on V-S where v.key = min{w(u, v) | u <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> S}; Choose arbitrary start vertex s ∈ V, s.key = 0</li><li>Proof for correctness</li><li>Analysis: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.667ex;" xmlns="http://www.w3.org/2000/svg" width="41.257ex" height="2.364ex" role="img" focusable="false" viewbox="0 -750 18235.8 1045"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(1921,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2532.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="msub" transform="translate(3254.4,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(1336,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(1697,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2148,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(2677,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(3110,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mo" transform="translate(3471,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(4249,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mi" transform="translate(5300,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(5645,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(8559.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(9559.8,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(10322.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(10711.8,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(11475.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(12087,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="msub" transform="translate(12809.2,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1294,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(1727,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2178,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(2644,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(3173,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(3642,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(4108,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(4886,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mi" transform="translate(5775,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(6241,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container><ul><li>O(E) results from the sum of # of adjacent vertices in G, which is 2|E| by the handshaking lemma</li><li><img src="/sg/2023/09/07/6.046_greedy/Screenshot-4095274.png" class title="Screenshot-4095274"></li></ul></li></ol><blockquote class="colorquote grey"><p>Invariants of Prim’s Algorithm are:</p><ol><li>v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="2.106ex" role="img" focusable="false" viewbox="0 -716 667 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2209" d="M196 25Q84 109 84 250Q84 372 166 450T360 539Q361 539 375 539T413 540T460 540L547 707Q550 716 563 716Q570 716 575 712T581 703T583 696T505 540H568Q583 532 583 520Q583 511 570 501L484 500L366 270H568Q583 262 583 250T568 230H346L247 38Q284 16 328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 447 -40T419 -41Q304 -41 228 3Q117 -211 115 -212Q111 -215 104 -215T92 -212T86 -204T84 -197Q84 -190 89 -183L196 25ZM214 61L301 230H124V228Q124 196 147 147T214 61ZM321 270L440 500Q353 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H321Z"/></g></g></g></svg></mjx-container> S =&gt; v.key = min{w(u, v) | u <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> S}</li><li>Tree <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="2.541ex" height="1.906ex" role="img" focusable="false" viewbox="0 -677 1123.1 842.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(617,-150) scale(0.707)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g></g></g></g></svg></mjx-container> within S <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewbox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"/></g></g></g></svg></mjx-container> MST of G</li></ol><p><em>Proof of 2.</em></p></blockquote><h2><span id="kruskal-s-algorithm">Kruskal’s Algorithm</span><a href="#kruskal-s-algorithm" class="header-anchor">¶</a></h2><ol><li>Idea: take the globally lowest-weight edge and contract it.</li><li>Design: Maintain connected components that have been added to the MST so far T,  in a Union-Find structure</li><li>Proof for correctness</li><li>Analysis: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="71.864ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 31764 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(954,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1405,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g></g><g data-mml-node="mo" transform="translate(1915.8,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2304.8,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(3068.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3680,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(4680.2,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(5443.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5832.2,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(6601.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(7212.4,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="msub" transform="translate(7934.6,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g><g data-mml-node="mi" transform="translate(1051,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1580,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(2101,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(2567,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(3345,0)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"/></g><g data-mml-node="mi" transform="translate(3990,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(4456,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g></g></g><g data-mml-node="mo" transform="translate(12230,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(13230.2,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(13993.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(14382.2,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(15146.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(15535.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(15924.2,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g><g data-mml-node="mi" transform="translate(749,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1094,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1694,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g></g><g data-mml-node="mo" transform="translate(18379,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(19379.2,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(767,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1367,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1712,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2197,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mo" transform="translate(22024,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(22690.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(23746.5,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(24509.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(24898.5,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(25662.5,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(25960.5,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(26437.5,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(27423.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(28424,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(29188,0)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/></g><g data-mml-node="mo" transform="translate(29828,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(30217,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(30986,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(31375,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><ul><li>Union-Find data structures</li><li>If w in [0, E^O(1)], using counting sort or similar can make Kruskal’s beat Prim’s</li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Initialize T = 0</span><br><span class="line">for v in V: Make-Set(v)</span><br><span class="line">Sort E by weight</span><br><span class="line">For e = (u, v) in E (in increasing-weight order):</span><br><span class="line">    if Find-Set(u) != Find-Set(v):</span><br><span class="line">        Add e to T</span><br><span class="line">        Union(u, v)</span><br></pre></td></tr></table></figure><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.482ex" height="1.645ex" role="img" focusable="false" viewbox="0 -705 2865.3 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1058,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1587,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1932,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1058,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1587,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1932,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container>. The tree-so-far T <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.751ex" role="img" focusable="false" viewbox="0 -636 778 774"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2286" d="M84 346Q84 468 166 546T360 635Q361 635 370 635T395 635T430 636T475 636T524 636H679Q694 628 694 616Q694 607 681 597L522 596H470H441Q366 596 338 592T266 568Q244 557 224 542T179 500T139 433T124 346V341Q124 253 185 185Q244 121 328 103Q348 98 366 98T522 96H681Q694 86 694 76Q694 64 679 56H526Q510 56 480 56T434 55Q350 55 289 71T172 141Q84 223 84 346ZM104 -131T104 -118T118 -98H679Q694 -106 694 -118T679 -138H118Q104 -131 104 -118Z"/></g></g></g></svg></mjx-container> MST T*</p></blockquote><h2><span id="olc">OLC</span><a href="#olc" class="header-anchor">¶</a></h2><ol><li>exponential number of edges to guess that form of the MST.</li><li>handshaking lemma is sum of in-degree vertices and out-degree vertices are both |E|</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Atomicity</title>
      <link href="/sg/2023/08/24/SD_ds_data/"/>
      <url>/sg/2023/08/24/SD_ds_data/</url>
      
        <content type="html"><![CDATA[<p>Reading: 9.1-9.2.2, 9.3-9.4.1, 9.5-9.6 (9.1.5, 9.1.6, 9.5.2, <strong>9.5.3, 9.6.3</strong>)</p><h2><span id="overview">Overview</span><a href="#overview" class="header-anchor">¶</a></h2><blockquote class="colorquote grey"><p>An action that changes several data values can have any or all of at least four independent properties:</p><ul><li>all-or-nothing (either all or none of the changes happen)</li><li>before-or-after  (the changes all happen either before or after every concurrent action)</li><li>constraint-maintaining (the changes maintain some specified invariant)</li><li>durable (the changes last as long as they are needed).</li></ul></blockquote><p>failure masking, coordination</p><ol><li><p>scenario 1:  the processor instruction set interface as seen by a thread in the interrupt interface</p><ul><li><p>signal arriving from outside the thread’s interpreter</p><ul><li><p>interrupted thread, interrupt thread, interrupt handler</p></li><li><p>Ex, an I/O operation that the other thread was waiting for may now have completed.</p></li></ul></li><li><p>sth wrong in the interrupted thread</p><ul><li><p>exception handler, in the orginal thread</p></li><li><p>Ex, deadlock, hw/sw faults, user side, the running thread encountered a missing-page exception in a virtual memory system</p></li></ul></li></ul></li><li><p>scenario 2: a register overflow at the machine level in a layered application</p><ul><li><p>Write intelligible error message in each layer</p></li><li><p>A higher layer will hide the lower layers</p></li><li><p>All-or-nothing action means an action either completes or backs out.</p></li></ul></li><li><p>missing-page exception occurs halfway of an instruction (pipelined processor)</p><ul><li>How to save the next-instruction pointer?<ul><li>every instruction is atomic -&gt; the next-instruction pointer = addr of instruction that encountered the missing page</li><li>if one instruction is not atomic, the exception will still happen in that instruction</li></ul></li><li>supervisor call (SVC) to a kernel READ procedure, keystroke to the caller<ul><li>blocking read</li><li>non-blocking read</li><li>without all-or-nothing read</li></ul></li></ul></li></ol><h2><span id="all-or-nothing">All-or-Nothing</span><a href="#all-or-nothing" class="header-anchor">¶</a></h2><h2><span id="before-or-after">Before-or-After</span><a href="#before-or-after" class="header-anchor">¶</a></h2><blockquote class="colorquote blue"><p>Problem 0: describe a situation where Two-Phase Locking yields higher performance than Simple Locking.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tracing down Bio in Block Subsystems</title>
      <link href="/sg/2023/08/08/linux_bio/"/>
      <url>/sg/2023/08/08/linux_bio/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#bottom-halves">Bottom halves</a><ul><li><a href="#interface">Interface</a></li><li><a href="#block-drivers">Block drivers</a></li></ul></li><li><a href="#block-io">Block IO</a></li></ul><!-- tocstop --></div><p>This blog is to answer two questions:</p><ol><li>Layers involved of I/O requests like write sth to a file in a local computer?</li><li>How does md device (or any other block device like null block driver) receive its data?</li></ol><h2><span id="bottom-halves">Bottom halves</span><a href="#bottom-halves" class="header-anchor">¶</a></h2><ol><li>Bottom halves perform interrupt-related work that was not performed by the interrupt handler (top half)<ul><li>Run with all interrupts enabled</li><li>Deferring work means not now</li></ul></li><li>Work queue is a simple interface for <strong>deferring work</strong> to a generic kernel thread</li></ol><p>runqueue &amp; waitqueue</p><h3><span id="interface">Interface</span><a href="#interface" class="header-anchor">¶</a></h3><ol><li><p>queuing work to workqueue<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">queue_work</span><br><span class="line">queue_work_on</span><br><span class="line">queue_delayed_work</span><br><span class="line">queue_delayed_work_on</span><br></pre></td></tr></table></figure></li><li><p>schedule work to workqueue</p></li></ol><h3><span id="block-drivers">Block drivers</span><a href="#block-drivers" class="header-anchor">¶</a></h3><ol><li>No need to open another kernel thread when using workqueues</li><li>Waitqueue waits on the loop until the condition is met: <a href="https://stackoverflow.com/questions/11184581/why-does-wait-queue-implementation-wait-on-a-loop-until-condition-is-met">https://stackoverflow.com/questions/11184581/why-does-wait-queue-implementation-wait-on-a-loop-until-condition-is-met</a></li><li>wakeup will trigger an interrupt<ul><li><em>wake_up_interruptible</em> wakes up only the processes that are in interruptible sleeps</li></ul></li><li>BIOs can be split, merged (chain). It’s in the scheduling layer.</li><li>The null_blk driver is a bit different than others. It has two ways of receiving commands: bio based, req based.</li><li>Device drivers are normally request based. BIOs are already split/merged in the block layer (scheduling) and grouped to a req which is sent to the device drivers. It should not touch BIOs inside a req/command in the device driver. The job of device driver is to translating a req to corresponding command.</li><li>In-flight BIOs in the device driver don’t conclude the BIOs in the requests.</li><li>Linux is running on the async context.</li><li>flow control on device drivers may not be a good idea. A lot of places in the block layer have already done/could do that, like scheduling layer where requests are regulated.</li></ol><h2><span id="block-io">Block IO</span><a href="#block-io" class="header-anchor">¶</a></h2><p>v6.3-rc2</p><p>high level: app -&gt; fs -&gt; block level</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">application</span><br><span class="line">VFS</span><br><span class="line">File system (XFS, btrfs, etc)</span><br><span class="line">Page cache</span><br><span class="line">Block layer</span><br><span class="line">- Device mapper</span><br><span class="line">Driver Level</span><br><span class="line">- I/O scheduler</span><br><span class="line">- Physical device driver</span><br></pre></td></tr></table></figure><p><a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/include/linux/blk_types.h#L252">bio</a> -&gt; <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/include/linux/bvec.h#L31">bio_vec</a>/<a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/include/linux/bvec.h#L78">bi_sector</a> -&gt; memory <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/include/linux/mm_types.h#L74">page</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span>*<span class="title">bi_next</span>;</span><span class="comment">/* request queue link */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span>*<span class="title">bi_bdev</span>;</span></span><br><span class="line"><span class="type">blk_opf_t</span>bi_opf;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>bi_flags;<span class="comment">/* BIO_* below */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">short</span>bi_ioprio;</span><br><span class="line"><span class="type">blk_status_t</span>bi_status;</span><br><span class="line"><span class="type">atomic_t</span>__bi_remaining; <span class="comment">/* usage counter */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bvec_iter</span><span class="title">bi_iter</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">blk_qc_t</span>bi_cookie;</span><br><span class="line"><span class="type">bio_end_io_t</span>*bi_end_io;</span><br><span class="line"><span class="type">void</span>*bi_private;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line"><span class="type">atomic_t</span>__bi_cnt;<span class="comment">/* pin count */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_vec</span>*<span class="title">bi_io_vec</span>;</span><span class="comment">/* the actual vec list */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_set</span>*<span class="title">bi_pool</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio_vec</span><span class="title">bi_inline_vecs</span>[];</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/include/linux/blkdev.h#L121">gendisk</a> -&gt; <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/include/linux/blkdev.h#L396">request queue</a>/block device -&gt; <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/include/linux/blk-mq.h#L84">request</a></p><p><a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/block/blk-core.c#L831">submit_bio()</a> -&gt; <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/block/blk-core.c#L638">submit_bio_noaccout</a> -&gt; <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/block/blk-core.c#L685">submit_bio_noacct_nocheck</a> -&gt; _submit_bio/_submit_bio_noacct</p><p>(generic_make_request<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, v&lt;=<a href="https://elixir.bootlin.com/linux/v5.8/source/block/blk-core.c#L1100">5.8</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request_queue</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span>*<span class="title">last_merge</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">elevator_queue</span>*<span class="title">elevator</span>;</span></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">percpu_ref</span><span class="title">q_usage_counter</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_queue_stats</span>*<span class="title">stats</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rq_qos</span>*<span class="title">rq_qos</span>;</span></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">blk_mq_ops</span>*<span class="title">mq_ops</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">blk_mq_ctx</span> __<span class="title">percpu</span>*<span class="title">queue_ctx</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>queue_depth;</span><br><span class="line"><span class="type">void</span>*queuedata;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span>queue_flags;</span><br><span class="line">...</span><br><span class="line"><span class="type">spinlock_t</span>queue_lock;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gendisk</span>*<span class="title">disk</span>;</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span>nr_requests;<span class="comment">/* Max # of requests */</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request_queue</span> *<span class="title">q</span>;</span></span><br><span class="line"><span class="type">blk_opf_t</span> cmd_flags;<span class="comment">/* op and common flags */</span></span><br><span class="line"><span class="type">req_flags_t</span> rq_flags;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">/* the following two fields are internal, NEVER access directly */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __data_len;<span class="comment">/* total data len */</span></span><br><span class="line"><span class="type">sector_t</span> __sector;<span class="comment">/* sector cursor */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span> *<span class="title">bio</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bio</span> *<span class="title">biotail</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">queuelist</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">request</span> *<span class="title">rq_next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">block_device</span> *<span class="title">part</span>;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bio layer<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> -&gt; request layer -&gt; device driver<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><p>request queue<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></p><p>create/delete a rq: <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/block/blk-mq.c#L4049">blk_mq_init_queue</a><sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p><p>process a request: <a href="https://elixir.bootlin.com/linux/v6.3-rc2/source/block/blk-mq.c#L1249">blk_mq_start_request</a></p><p>device mapper<sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://embetronicx.com/tutorials/linux/device-drivers/work-queue-in-linux-own-workqueue/">https://embetronicx.com/tutorials/linux/device-drivers/work-queue-in-linux-own-workqueue/</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://lwn.net/Articles/736534/">v4.5 block layer</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="http://books.gigatux.nl/mirror/kerneldevelopment/0672327201/ch13lev1sec3.html">http://books.gigatux.nl/mirror/kerneldevelopment/0672327201/ch13lev1sec3.html</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="http://blog.vmsplice.net/2020/04/how-linux-vfs-block-layer-and-device.html">http://blog.vmsplice.net/2020/04/how-linux-vfs-block-layer-and-device.html</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#request-queues-multi-queue-block-layer">https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#request-queues-multi-queue-block-layer</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#create-and-delete-a-request-queue">https://linux-kernel-labs.github.io/refs/heads/master/labs/block_device_drivers.html#create-and-delete-a-request-queue</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p><a href="https://xuechendi.github.io/2013/11/14/device-mapper-deep-dive">https://xuechendi.github.io/2013/11/14/device-mapper-deep-dive</a> <a href="#fnref7" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reliable Transport via TCP</title>
      <link href="/sg/2023/08/05/SD_rtp/"/>
      <url>/sg/2023/08/05/SD_rtp/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#reliable-transport">Reliable transport</a><ul><li><a href="#some-thinking">Some thinking</a></li></ul></li><li><a href="#tcpdump">tcpdump</a></li></ul><!-- tocstop --></div><h2><span id="reliable-transport">Reliable transport</span><a href="#reliable-transport" class="header-anchor">¶</a></h2><p>Reading: rtp guide</p><ol><li>Best-effort networks do not provide reliability.</li><li>TCP provides reliability and congestion control on the best-effort network.</li><li>The goal of reliable transport protocol is <strong>exactly-once, in-order</strong> delivery.</li></ol><p>This guide uses layered model (two-layer version, app + transport) as examples.</p><ol><li><p>packet structure: header + data (+ trailer) -&gt; in-order</p><ul><li>metadata: source addr, dest addr, <code>sequence number</code></li></ul></li><li><p>two machanisms -&gt; reliability</p><ul><li><code>acknowledgements</code>: Every time the receiver receives a packet, it will send a small packet — an “ACK” — back to the sender.</li><li><code>sliding-window protocol</code>: as the communication occurs, the sender’s window slides across the stream of packets it has to send.<ul><li>guarantee: no more than W packets in its window at a time</li><li><img src="/sg/2023/08/05/SD_rtp/Screenshot-1223436.png" class title="Screenshot-1223436"></li></ul></li><li>terms: waterfall diagram, outstanding packet, window (the collection of outstanding packets), window size, cumulative ACKs (an ACK for packet k means the receiver has received all packets up to and including k)</li></ul></li><li><p>Error cases</p><ul><li>packet loss: <code>retransmissions</code>, the sender will retransmit a lost packet if it doesn’t receive an ACK for it after a certain amount of time<ul><li><img src="/sg/2023/08/05/SD_rtp/Screenshot.png" class title="Screenshot"></li></ul></li><li>ACK loss<ul><li>The sender will retransmit the packet 2. The receiver has received two copies of packet 2.  It will ACK both of them.</li><li>Receiver should not deliver both packet 2 so it keeps track of the received packets but that have not sent to the application yet in its buffer.</li><li><img src="/sg/2023/08/05/SD_rtp/Screenshot-1225146.png" class title="Screenshot-1225146"></li></ul></li><li>terms: retransmission timeout (RTO)</li></ul></li><li><p>Real world:</p><ul><li>set RTO: RTO in the guide is assumed larger than a round-trip-time.</li><li>set W: many sender and receivers on the internet; the amount of data changes. Find an optimal W.</li></ul></li><li><p>Reliable transport protocol</p><blockquote><p>At the sender:</p><ul><li>The sender will keep a list of all of its outstanding packets.  We’ll call that list outstanding_packets; initially it is empty.</li><li>If len(outstanding_packets) &lt; W, transmit the next packet (call it packet k).  Store packet k and the current time in outstanding_packets.</li><li>When an ACK for packet k is received, remove packet k from outstanding_packets, as well as any packets with sequence number less than k.</li><li>Periodically check the packets in outstanding_packets; if any were received more than RTO seconds ago, re-transmit them.</li></ul><p>At the receiver:</p><ul><li>Send an ACK for every received packet. If the sequence number of this ACK is k, that indicates that all packets up to and including packet k have been received.</li><li>Save delivered packets — ignoring duplicates — in a local buffer.</li><li>Keep track of the next packet the receiving application expects.  After each reception, deliver as many in-order packets as possible.</li></ul></blockquote></li></ol><h3><span id="some-thinking">Some thinking</span><a href="#some-thinking" class="header-anchor">¶</a></h3><ol><li>A receiver knows the packes out-of-order when the receiving sequence number is not sequential.</li><li>In ACK lost case:<ul><li>The sender can not tell the difference between ack 2 lost and one where packet 3 itself is lost. Senders consider a packet has been lost when it did not receive corresponding ack signal. In this case, sender hasn’t received ack3 therefore it’s either the packet 3 was lost or the ack2 was lost.</li><li>Why the receiver need to send an ACK for the second copy of packet 2? Though the receiver has received the copy of packet 2, it needs to ack the sender that it is indeed received. However, it can just discard packet 2 in the second time.</li><li>If the ACK for packet 3 had arrived before the sender’s retransmission of packet 2, could the sender have avoided that retransmission?  (I.e., is there a way for the sender to tell that packet 2 had actually been received?)  No, the sender will still retransmit packet 2. The sender should be aware of the packets that have been successfully received.</li></ul></li></ol><h2><span id="tcpdump">tcpdump</span><a href="#tcpdump" class="header-anchor">¶</a></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tcpdump -r tcpdump.dat &gt; /tmp/outfile.pcap</span><br><span class="line">mv /tmp/outfile.pcap outfile.txt</span><br></pre></td></tr></table></figure><p>example:</p><p>A packet sent from willow to maple:</p><p>00:34:41.474225 IP willow.csail.mit.edu.39675 &gt; maple.csail.mit.edu.5001: Flags [.], seq 1473:2921, ack 1, win 115, options [nop,nop,TS val 282136474 ecr 282202089], length 1448</p><p>Maple receives the packet and sends ack to willow:</p><p>00:34:41.482047 IP maple.csail.mit.edu.5001 &gt; willow.csail.mit.edu.39675: Flags [.], ack 2921, win 159, options [nop,nop,TS val 282202095 ecr 282136474], length 0</p><p>How to read the log: timestamp, IP, source addr &gt; dest addr, length is for seq in sender.</p><p>Definition in TCP differs from the guide:</p><ul><li>The ACK reflects the next byte that the receiver expects.</li><li>There is one sequence number per <em>byte of data</em>.</li></ul>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Network Layers Breakdown</title>
      <link href="/sg/2023/08/03/SD_network_layer/"/>
      <url>/sg/2023/08/03/SD_network_layer/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#network-layers">network layers</a><ul><li><a href="#organization">organization</a></li><li><a href="#end-to-end-layer">end-to-end layer</a></li><li><a href="#the-end-to-end-argument">the end-to-end argument</a></li><li><a href="#mapped-and-recursive-apps">mapped and recursive apps</a></li><li><a href="#olc">olc</a></li></ul></li><li><a href="#packet-switching">packet switching</a></li></ul><!-- tocstop --></div><p>Reading: chapter: 7.2, Lec17, Chapters 17-18 of the 6.02 notes, Chapter 19 of the 6.02 notes.</p><h2><span id="network-layers">network layers</span><a href="#network-layers" class="header-anchor">¶</a></h2><h3><span id="organization">organization</span><a href="#organization" class="header-anchor">¶</a></h3><p><u>Principle: adopt sweeping simplifications</u>, networks are organized as layers (layering of protocols).</p><p><u>three-layer reference model</u> example: a defense program has a procedure call and the procedure for single user.</p><ol><li><p>protocols involved in this example</p><ul><li><p>protocol between client stub and service stub / the main program and the procedure it calls</p></li><li><p>remote procedure call (RPC) protocol -&gt; improvement: convert single user -&gt; multiuser by RPC</p><ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1142854.png" class title="Screenshot-1142854"></li></ul></li><li><p>Send/receive message to/from network -&gt; add a transport layer to communicate</p><ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1145255.png" class title="Screenshot-1145255"></li></ul></li></ul></li><li><p>In usual layered organizations, a module has two interfaces. A network module has three (transport + presentation (data format, semantics) + application).</p></li><li><p><u>Layered design: Each layer provides an interface to the layer above and hides interfaces below.</u></p></li><li><p>Layers are abstracted as three parts: end-to-end layer, network layer, link layer. Application layer is not included.</p><ul><li>Data flow from top down: message/stream -&gt; segments -&gt; packets -&gt; frames<ul><li>data sent from upper layer to the lower layer is called <code>payload</code>.  The lower layer attached a <code>header</code> and <code>trailer</code> to the front and end of the data so the corresponding lower layer can process. That’s why layers can hide</li></ul></li><li>link layer: packet switched network, send the bits of the packet across one link. Ex: ethernet, wifi, bluetooth</li><li>network layer: deliver a segment from the source to the destination. Ex: IP<ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1147966.png" class title="Screenshot-1147966"></li></ul></li></ul></li></ol><h3><span id="end-to-end-layer">end-to-end layer</span><a href="#end-to-end-layer" class="header-anchor">¶</a></h3><blockquote><p>Each layer considers the payload transmitted by the layer above to be information that it is not expected, or even permitted, to interpret.</p></blockquote><ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1149580.png" class title="Screenshot-1149580"></li></ul><p>Problems: Why the end-to-end layer is an unstructured library of service modules?</p><p>Different applications have a wide range of requirements for services and any lower layer decision in one app can be counterproductive fro at least some apps.</p><ol><li><p>RPC provides services hiding underlying network aspects from its app</p><ul><li><p>presentation services: change data formats and semantics</p></li><li><p>transport services: streams/messages -&gt; segments with lost, duplicated, out-of-order segments.</p></li><li><p>session services: search, handshake, …</p></li></ul></li><li><p>Open Systems Interconnect has seven layers. The additional layers are:</p><ul><li><p>link layer -&gt; strategy layer (data link layer) + <em>physical layer</em></p></li><li><p>end-to-end layer -&gt; application + presentation + transport + <em>layer providing the session services</em></p></li></ul></li></ol><h3><span id="the-end-to-end-argument">the end-to-end argument</span><a href="#the-end-to-end-argument" class="header-anchor">¶</a></h3><p>Principle: <u>the end-to-end argument: the application knows best.</u> <em>Don’t bury it in a lower layer, let the end points deal with it because they know best what they need.</em></p><p>Example: file transfer and checksum</p><p>When sending a file from A to B, B will recalculate the checksum anew after receiving the file to verify a complete delivery (application layer checksum).</p><p>Given the end-to-end approach, oen can add a link-layer checksum. This additional check does <strong>not</strong> eliminate the application layer check but can act as a performance enhancement for it observes failure sooner.</p><h3><span id="mapped-and-recursive-apps">mapped and recursive apps</span><a href="#mapped-and-recursive-apps" class="header-anchor">¶</a></h3><p>Decomposition a network has two forms: maaped, recursive.</p><ol><li><p>mapped composition: build network layer A on network layer B by mapping high-layer addresses to lower-layer network addresses.</p><ul><li>example: Appletalk (add a better network technology), Internet protocol (internetworking)</li></ul></li><li><p>recursive composition: a three-layer network rests on a link layer of another network</p><ul><li>example: tunnel (+encryption = VPN), overlay network</li><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1153373.png" class title="Screenshot-1153373"></li></ul></li><li><blockquote><p>The Internet links many network layers by mapping them all to a universal network layer using IP.</p></blockquote><ul><li>end-to-end protocols: TCP, UDP, RTP…</li><li>application protocols: FTP (file transfer), HTTP (www), SMTP, POP (mail dispatch and pickup), IRC (text messaging), VoIP (telephone), Gnutella, bittorrent (file exchange)…</li></ul></li></ol><h3><span id="olc">olc</span><a href="#olc" class="header-anchor">¶</a></h3><ol><li>protocol is a fancy name of contract for networks as spec for programming languages. It achieves agreements on the calling function and called one.</li><li>IP is in the network layer. TCP is in a layer above IP.</li></ol><h2><span id="packet-switching">packet switching</span><a href="#packet-switching" class="header-anchor">¶</a></h2><p>Takeaways from Lec17 packet switching:</p><ol><li><p>packet switched network:</p><ul><li>design objective: efficiency and reliabilty<ul><li>use address on the message</li><li>break down big source data to small packets</li></ul></li><li>communication link is associated with an address.</li><li>packet is an atomic unit of delivery. It consists of a link (source addr, destination addr) and message (bits).</li><li>network topology<ul><li>a simplified network<ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1060387.png" class title="Screenshot-1060387"></li></ul></li><li>1964, <a href="https://www.rand.org/pubs/research_memoranda/RM3420.html">distributed communication network</a><ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1065490.png" class title="Screenshot-1065490"></li></ul></li></ul></li></ul></li><li><p>statistical multiplexing: when too many packets come to a switch and exceed its receiving limit, it waits in queue. If queue is full, then the switch just drop the packet and let the end point deals with.</p><ul><li><p>queue adds latency of data transmission.</p></li><li><p>It is better to store the packet inside switch which piles up tasks exceeding current processing limit of a switch</p></li><li><p>multiplexing/demultiplexing</p><ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1064063.png" class title="Screenshot-1064063"></li></ul></li></ul></li><li><p>Real life traffic is like temporarily burst to 10 times of average bit rate.</p><ul><li><img src="/sg/2023/08/03/SD_network_layer/Screenshot-1064957.png" class title="Screenshot-1064957"></li><li>A malicious virus example is DDOS attack on websites, that is a large amount of accessing the service out of limit of websites.</li></ul></li><li><p>Bandwidth is in terms of Herz. If it’s v, it refers to a range of frequencies of data transmission around the value v.</p></li><li><p>Evaluation standards of network are: 1) rate of link, 2) delay (or latency)</p><ul><li>propagation delay: time to send one bit</li><li>transmission delay: time to send size L bits over a link with bit rate c, L/c. It’s also the time from the first bit to the last bit arriving at the switch.</li><li>processing delay: host and switch deal with packet (header, checksums)</li><li>queueing delay: time spent waiting in queue</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Distributed System Notes</title>
      <link href="/sg/2023/07/28/ds_basics/"/>
      <url>/sg/2023/07/28/ds_basics/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#case-study-mapreduce-2004">Case Study: MapReduce 2004</a></li><li><a href="#consistency-and-linearizability">Consistency and Linearizability</a></li><li><a href="#case-study-gfs-2003">Case Study: GFS 2003</a></li><li><a href="#primary-backup-replication">Primary/Backup Replication</a></li><li><a href="#case-study-vmware-ft-2010">Case Study: VMware FT 2010</a><ul><li><a href="#ft-design">FT design</a></li><li><a href="#failure-handling">Failure Handling</a></li><li><a href="#design-alternatives">Design Alternatives</a></li></ul></li><li><a href="#verified-primary-backup">Verified Primary/Backup</a></li><li><a href="#case-study-grove-2023">Case Study: Grove 2023</a></li><li><a href="#raft">Raft</a><ul><li><a href="#raft-review">Raft Review</a></li><li><a href="#leader-election">Leader Election</a></li><li><a href="#log">Log</a></li><li><a href="#persistence">Persistence</a></li><li><a href="#log-compaction-and-snapshots">Log Compaction and Snapshots</a></li><li><a href="#linearizability">Linearizability</a></li><li><a href="#duplicate-rpc-detection">Duplicate RPC Detection</a></li><li><a href="#read-only-operations">Read-only Operations</a></li></ul></li><li><a href="#paxos">Paxos</a><ul><li><a href="#paxos-review">Paxos Review</a></li><li><a href="#inference">Inference</a></li></ul></li><li><a href="#case-study-zookeeper-2010">*Case Study: ZooKeeper 2010</a></li><li><a href="#case-study-chubby-2006">*Case Study: Chubby 2006</a></li><li><a href="#case-study-harp-1991">*Case Study: Harp 1991</a></li></ul><!-- tocstop --></div><p>Design goals</p><ul><li><p>Infrastructure services: storage, communication, computing. The course goal is to build an abstraction that hides the distribution while realizing high performance.</p></li><li><p>performance -&gt; scalability</p><ul><li>scenario: n users &lt;=&gt; 1 web server &lt;=&gt; 1 database</li><li>When n is 1million, scaling up web servers and spliting users accounts into multiple webs can achieve performance until web-db communication becomes bottle neck, that is, scalable web servers no longer help. Then db will need to be refactored so that is splitting data into multiple dbs.</li><li>terms<ul><li><code>scalability</code>: N times computers/resources can achieve N times throughput.</li></ul></li><li>special cases<ul><li>quick response time for a single user request</li><li>all users want to update the same data</li></ul></li></ul></li><li><p>fault tolerance -&gt; availability, recoveribility</p><ul><li><p>scenario: always sth brokes when running 1000 computers vs running 1</p></li><li><p>rare events become real problems</p></li><li><p>terms</p><ul><li><p><code>availability</code>: system will keep operating when certain kinds of failures occur. It will not be available when too many failures occur.</p></li><li><p><code>recoverability</code>: system stops running/reponding to requests until the failed componets are repaired. Need to save latest data on disk etc so they can recover it when powering up.</p></li><li><p><a href="https://stackoverflow.com/questions/1371400/how-much-faster-is-the-memory-usually-than-the-disk">memory access speed V.S. disk</a></p></li><li><p>normal scale: 3 GHz microprocessor</p></li></ul></li><li><p>tools</p><ul><li>non-volatile storage: store log of states. -&gt; writing NV storage is too slow (move disk arms and wait for a disk platter to rotate)</li><li>replicated servers: use a copy -&gt; two replicas drifted out of sync</li></ul></li></ul></li><li><p>consistency</p><ul><li><blockquote><p>General-purpose infrastructure needs well-defined behavior.</p></blockquote></li><li><p>everything could broke and lead to lose replica.</p></li><li><p>strong consistency often means poor performance relative to weaker consistency.</p></li></ul></li></ul><h2><span id="case-study-mapreduce-2004">Case Study: MapReduce 2004</span><a href="#case-study-mapreduce-2004" class="header-anchor">¶</a></h2><h2><span id="consistency-and-linearizability">Consistency and Linearizability</span><a href="#consistency-and-linearizability" class="header-anchor">¶</a></h2><h2><span id="case-study-gfs-2003">Case Study: GFS 2003</span><a href="#case-study-gfs-2003" class="header-anchor">¶</a></h2><h2><span id="primary-backup-replication">Primary/Backup Replication</span><a href="#primary-backup-replication" class="header-anchor">¶</a></h2><ol><li>One way of providing fault tolerance: Replication.</li><li>Replication deals with “fail-stop” failure of a single replica. It may not be able to detect h/w or bugs in s/w or human config errors. Geo-failure are dealt with only if replicas are physically separated.</li><li>Failures in one server are independent from another otherwise it’s useless to use replication.</li><li>Whether replication is worthwhile the N*expense of computing resources depends on the consequences of failures.</li><li>Two main approaches:<ul><li>state transfer: primary sends internal memory (state) to backup</li><li>replicated state machine: clients send operations to primary and primary sends those external events to backups. All replicas have deterministic same state as the primary if they execute the operations in the same order.</li></ul></li><li>tradeoffs:<ul><li>state transfer is simpler but may be large and slow to transfer over network</li><li>replicated state machine are comparably smaller than state and generates less network traffic but complex to get right.</li></ul></li><li>example: VM-FT uses replicated state machine on single-core processor. It uses state transfer scheme when it is expanded to multi-core.</li><li>Design points of replication schema<ul><li>What state to replicate?</li><li>Does primary have to wait for backup?</li><li>When to cut over to backup?</li><li>Are anomalies visible at cut-over?</li><li>How to bring a replacement backup up to speed?</li></ul></li></ol><p>Problem 1: At what level do we want replicas to be identical?</p><p>application state: forward op stream, can be efficient. ex: GFS.</p><p>machine level, registers and RAM content: forward machine events (interrupts, DMA, &amp;c), not as efficient. ex: run an existing software without modification</p><h2><span id="case-study-vmware-ft-2010">Case Study: VMware FT 2010</span><a href="#case-study-vmware-ft-2010" class="header-anchor">¶</a></h2><p>Terms:</p><ol><li>vm-ft: fault-tolerant virtual machines</li><li>failstop: if something goes wrong, the computer would stop executing instead of generating incorrect results. E.g. unplug the power cable out of the server, CPU overheats.</li><li>failover: if something goes wrong, the computer will be replaced by another one.</li><li>virtual lockstep</li><li>mode: logging, replaying, normal</li><li>a deferred-execution context (similar to a tasklet in Linux) is a mechanism for deferring work to be executed later at a more appropriate time</li></ol><h3><span id="ft-design">FT design</span><a href="#ft-design" class="header-anchor">¶</a></h3><ol><li>Synchronization of primary and backup VMs is based on the technique of deterministic replay. Briefly talking, deterministic replay transfers the non-deterministic operations/events to the log entries of the file. The backup can read from the file and replay execution of the primary.<ul><li>non-determinism of events and operations in VMs: virtual interrupts, reading the clock cycle counter of the processor</li><li>question: non-deterministic input (capture and apply) -&gt; deterministic execution + performance unaffected (at instruction level)</li><li>However, that technique for VMware vSphere platform is introduced in 2007.</li></ul></li><li>FT protocol: No data is lost if a backup takes over after the primary fails.<ul><li>Output requirement &lt;- output rule: The backup is supposed to execute consistently as the primary after it takes over the primary VM. The rule to guarantee that is two phase commit. The primary delays sending the output until the backup VM has received and acknowledged the log entries of the output operations.</li><li>Can tolerate lost packets: incoming packets may be dropped during failure of the primary due to reasons unrelated to that failure.</li></ul></li></ol><h3><span id="failure-handling">Failure Handling</span><a href="#failure-handling" class="header-anchor">¶</a></h3><ol><li><p>context: time lag on the execution of the backup VM. To control the time lag to be less than 100ms and no greater than 1s, the primary VM’s CPU limit is managed to increase/decrease to occupy/spare more execution time.</p></li><li><p>failure detection: use heartbeating (UDP) to monitor the traffic on the logging channel that connects primary and backup. A timeout in the flow of log entries and acknowledgements is detected as a failure.</p></li><li><p>split-brain problem: solution: (requirement) only one VM (primary or backup) takes over the execution.</p><blockquote class="colorquote blue"><p>Problem 0: How does VM-FT handle network partitions? That is, is it possible that if the primary and the backup end up in different network partitions that the backup will become a primary too and the system will run with two primaries?</p></blockquote><p>There will be only one VM executing during network partitions. The primary VM delays sending outputs to the external world until the backup receives and acknowledges the log entries sent by it. When network partitions occur, the primary and backup VMs lost information of each other. The failure whether caused by network connection or VM faults is unknown.</p><p>VM-FT hence performs an atomic op test-and-set on shared storage that stores the virtual disks of VMs when the primary or the backup wants to go live. If the op succeeds, then the VM is allowed to go live. If not, that means a VM must have been live, so the current VM halts itself. If the VM cannot access shared storage, it waits until it can.</p></li><li><p>Start a new backup on another host: (primary, backup) = (P1, B1) -&gt; (P1 is down, B1 takes over) -&gt; (B1, ?) -&gt; (B1, B2)</p><ul><li>Based on VMware VMotion: migration of a running VM from one server to another server within one second.</li><li>Modified FT VMotion clones a VM to a remote host rather than migrating it within minutes or unnoticeable interruption.</li><li>Simplified steps: the mode of B1, B2: (logging, replaying) -&gt; choose a server to run B2: cluster service decides it -&gt; cloning…</li></ul></li><li><p>To eliminate non-determinism</p><ul><li><p>on disk IO issues:</p><ul><li>parallel disk IOs try to access the same location on the shared storage -&gt; detect IO races and make it sequential</li><li>a disk op races with an application op when they are reading the same memory block at the same time -&gt;  MMU protection on pages - traps - (too expensive) =&gt; bounce buffers (cheaper) to read/write from/at</li><li>when failures happen, no way to find out the IOs issuing during that time are completed or not. -&gt; reissue the pending IOs</li></ul></li><li><p>network IO issues: async updates to a VM’s state while executing ?-&gt; VM traps and interrupts + delaying the sending packets-&gt; performance challenges</p></li></ul></li></ol><p>Aside: <s>Ignored: operations on VM-FT</s></p><h3><span id="design-alternatives">Design Alternatives</span><a href="#design-alternatives" class="header-anchor">¶</a></h3><p>non-shared storage vs shared storage</p><p>advantages:</p><ol><li>no delaying disk writes for the primary VM</li><li>adds availability when the primary and backup VMs are far apart</li></ol><p>disadvantages:</p><ol><li>need the alternative to handle network partition</li><li>need to sync disks of VMs</li></ol><h2><span id="verified-primary-backup">Verified Primary/Backup</span><a href="#verified-primary-backup" class="header-anchor">¶</a></h2><h2><span id="case-study-grove-2023">Case Study: Grove 2023</span><a href="#case-study-grove-2023" class="header-anchor">¶</a></h2><p>Grove: a Separation-Logic Library for Verifying Distributed Systems</p><h2><span id="raft">Raft</span><a href="#raft" class="header-anchor">¶</a></h2><p>site:</p><ol><li><a href="http://nil.csail.mit.edu/6.824/2022/notes/l-raft.txt">http://nil.csail.mit.edu/6.824/2022/notes/l-raft.txt</a></li><li><a href="http://nil.csail.mit.edu/6.824/2022/notes/l-raft2.txt">http://nil.csail.mit.edu/6.824/2022/notes/l-raft2.txt</a></li></ol><p>Problem 0: a machine doesn’t understand the real-life events like network broken, disk failures, server crashed. All it can notice is the state changes.</p><ul><li>It appears that no response to a query over the network.</li><li>Unless an outside agent will decide when to switch servers/a perfectly reliable network (never breaks)/ a single perfectly reliable server (vmware FT’s test-and-set server) -&gt; possible single-point failure</li><li>How to automate it?</li></ul><p>Main idea:</p><ul><li>majority rule: same as Paxos. At lease one server is in the intersection of any two intersect which can convey info about previous decisions. Such a system often is called quorum systems.</li><li>electing a new leader</li><li>Logs of each server can be different but they will converge to be identical despite failures.</li></ul><p>The crucial property:</p><ul><li>committed: an entry that is commited won’t be forgotten despite failures.</li><li>logs with <strong>ordered</strong> commands:<ul><li>It stores the ordered commands in case leader must re-send to followers or for replay after reboot (persistence).</li><li>help to decide if the machines have identical logs</li><li>help replicas agree on a single execution order</li></ul></li><li>leader: leader ensures the identical execution order of the same commands on all servers.</li></ul><p>Raft provides:</p><ul><li>interface:<ul><li>Start(command) (index, term, isleader): only leader can start proposals.</li><li>ApplyMsg(index, command): each peer sends this message for each committed entry to local service.</li></ul></li><li>more understandable than Paxos</li></ul><p>A little about history of consensus protocols: paxos (1998), viewstamped replication (1988, 2012). Raft (2014) is more modern. They are all partition-tolerant.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Raft diagram:</span><br><span class="line">Members: Client, Follower, Leader, denoted by C, F, L respectively.</span><br><span class="line"></span><br><span class="line">Client       ----        Leader          ----                    Follower exchange:</span><br><span class="line">        Put/Get(n1) -&gt;  Start(n1)</span><br><span class="line">                        [appendLog(n1)]  AppendEntries(n1) -&gt;</span><br><span class="line">                        [committed(n1)]  &lt;- reply(n1)</span><br><span class="line">                        [execute(c1)]</span><br><span class="line">        &lt;- reply(c1)</span><br><span class="line"></span><br><span class="line">        Put/Get(n2) -&gt;  [appendLog(n2)]  AppendEntries(c1, n2) -&gt;       ApplyMsg(c1)</span><br><span class="line">                        [committed(n2)]   &lt;- reply(n1)                  [execute(c1)]</span><br><span class="line">                        [execute(c2)]</span><br><span class="line">        &lt;- reply(c2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Problem 1: How Raft works?</p><h3><span id="raft-review">Raft Review</span><a href="#raft-review" class="header-anchor">¶</a></h3><ol><li><p>State machine safety: once a server has applied a log entry at a given index to its state machine, no other servers can apply a different log entry for the same index.</p><p>State machine safety is the key safety property of Raft.</p></li><li><p>Log matching property: a follower only accepts an append at index <code>i</code> if it already has the leader’s entry at <code>i-1</code> with the same term.</p></li><li><p>Raft determines a more up-to-date log by comparing the index and term of the last entries in the log. If the term is different, the log with a higher term is more up-to-date. If the term is the same, whichever log is longer is more up-to-date.</p></li></ol><p>Considering a case where a follower is unavailable while the leader commits several log enries and then is elected leader and overwrites these entries, how Raft solve this problem by puting constraints on candidates?</p><ol><li>A candidate can’t win an election unless its log has all commited entries.</li><li>Raft never commits log entries from previous terms by counting replicas.</li></ol><p>A leader may only use replica counting to commit entries from its current term. When it commits a current-term entry at index <code>N</code>, it atomically advances its commitIndex to <code>N</code>. When the current-term entry can be commited, it also implies all earler entries less than <code>N</code> with older terms become commited indirectly.</p><p>The prohibition is only against declaring an <em>older-term</em> entry “committed” merely because it is on a majority. You must first commit some current-term entry at or past that index. Then all prior uncommited entries will be commited.</p><p>Analysis of Figure 8d:</p><p>S1 was leader earlier and had an older-term entry at index 2 (say term 2) spread to a majority, but not safely committed. If S1 crashes before committing any current-term entry, S5 (whose log has a conflicting entry at index 2 from term 3) can win the next election and overwrite index 2 again.</p><p>Raft prevents case d by commit of a current-term entry, not just by whom elections are won. Once that current-term entry is committed:</p><ol><li><code>commitIndex</code> advances past it, so all earlier entries (including the old index 2) are committed indirectly.</li><li>Any future leader must contain that committed term 4 entry (RequestVote’s “up-to-date” rule + majority intersection), so a node like S5 can’t win unless it also has that entry, meaning it can’t overwrite index 2.</li></ol><p>If S1 were elected term 4 but crashed before committing any term-4 entry to a majority, then (d) could still happen: S5 might win and overwrite index 2.</p><h3><span id="leader-election">Leader Election</span><a href="#leader-election" class="header-anchor">¶</a></h3><p>Leader (srv, term): the term helps servers to follow latest leader.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Election diagram:</span><br><span class="line"></span><br><span class="line">Follower (S0, term+1) -&gt; Candidate (S0, term+1)  -&gt;  Leader (S0, term+1), if maj</span><br><span class="line">    (election timeout)                      (voting)</span><br><span class="line"></span><br><span class="line">Leader (S1, term)</span><br></pre></td></tr></table></figure><p>Election results:<br>Each term has one leader at most despite failures (network partitions, server crashes).</p><ol><li>One leader is newly elected:</li></ol><ul><li>The leader sends heartbeat messages to followers in a heartbeat interval.</li><li>A server learns about newly elected leader from heartbeats with a higher term number in AppendEntries requests.</li></ul><ol start="2"><li>Election failed for less than a maj of votes: New election starts with new term number. Old candidates quit.</li></ol><ul><li>Split votes</li><li>Not enough reachable servers</li></ul><ol start="3"><li>Old leader holds hallucination that it is still a leader.</li></ol><p>Election rules:</p><ul><li>A peer stays follower if it hears from current leader with heartbeat message.</li><li>A peer starts leader election when it doesn’t receive the heartbeat message from current leader for an <code>election timeout</code>.</li><li>Each server can cast one vote per term.<ul><li>A candidate will vote for itself.</li><li>A peer will vote for the first candidate that asks</li></ul></li><li>A candidate becomes a leader when it receives votes from a majority of peers for a given term.</li></ul><p>Problem 1.1: how does Raft avoid split votes?</p><p>Split votes can happen when simultaneous candidates ask for votes from a equal number of peers. Raft uses random election timeout to avoid this problem. The election timeout must be chosen wisely. It should be at least a few heartbeat intervals in case of network delays, long enough to elect a leader before the next election starts. It should also be short enough to allow retries and react to failures quickly.</p><h3><span id="log">Log</span><a href="#log" class="header-anchor">¶</a></h3><p>Keeping a log for old commands is common. But changing leader is the reason to have an ordered log which helps leader to check follower states.</p><p>Every server should hold an identical log. That means no server can execute a different command for a log entry that has been executed a command by any other server.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Log diagram:</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line"></span><br><span class="line">A leader (S2 or S3) for term 3 crashes before sending last AE to all.</span><br><span class="line"></span><br><span class="line">S1:  3           &lt;- term #</span><br><span class="line">S2:  3  3</span><br><span class="line">S3:  3  3</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line"></span><br><span class="line">Next election, S2 is elected and crashed for term 4.</span><br><span class="line">Next election, S3 is elected and crashed for term 5.</span><br><span class="line"></span><br><span class="line">    10 11 12 13  &lt;- log entry #</span><br><span class="line">S1:  3</span><br><span class="line">S2:  3  3  4</span><br><span class="line">S3:  3  3  5</span><br><span class="line"></span><br><span class="line">Leader (S3, 6)</span><br><span class="line"></span><br><span class="line">    10 11 12 13  &lt;- log entry #</span><br><span class="line">S1:  3</span><br><span class="line">S2:  3  3  4</span><br><span class="line">S3:  3  3  5  6</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><u>The first question is could this scenario arise and how.</u></p><p>Example 2: AE(log entry) details after Leader (S3, 6):</p><ol><li>S3 is chosen as new leader for term 6.<ul><li>nextIndex[S2] = 13, nextIndex[S1] = 13</li></ul></li><li>It sends AE(13) with prevLogIndex=12, prevLogTerm=5</li><li>S2 replies false, mismatched prevLogTerm.</li><li>S3 decrements nextIndex[S2] to 12 (roll-back scheme, roll back one entry at a time)</li><li>S3 sends AE(12+13) with prevLogIndex=11, prevLogTerm=3</li><li>S2 deleted its entry 12<br>The same for S1.</li></ol><p>The result of roll-back: followers hold the identical log with the leader by deleting the tail of log with mismatched term and accepting leader’s entries after that point.</p><p>It’s ok to forget about S2’s (12, 4) entry. It’s not received by any server yet and hence not committed. The client will resend the discarded commands of that term by and by.</p><p><strong>New leader would not roll back committed entries from end of previous term.</strong><br>-&gt; Raft needs to ensure elected leader has all committed log entries.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Example 3:</span><br><span class="line"></span><br><span class="line">S1: 5 6 7</span><br><span class="line">S2: 5 8</span><br><span class="line">S3: 5 8</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Example 3: the longest log wins? -&gt; disclose voting details.</p><p>step 1: S2 or S3 wins election for term 5. It sends AEs to all.</p><p>step 2: S1 incurs network partition: S1 is isolated from S2 and S3.</p><p>step 3:</p><ul><li>S1: it doesnot hear from leader. Next election for term 6 starts. Can’t get maj and start new election for term 7…</li><li>S2 or S3: happily lives after S1 is disconnected since one of them will get maj and become leader.</li></ul><p>The problem is why won’t happy server choose 6 as next term?</p><p>Backing things up a litter, S1 is leader for term 6; crash + reboot; leader in term 7; crash and stay down. It crashes after it only sends AE to itself.</p><p>Because of leader (S1, 7), one of S2 or S3 learns about the last term is 7 while voting. So the next term will be 8.</p><p>All peers reboot. While S1 holds the longest log, it can’t be a leader since entry 8 could have committed.</p><p>end of section 5.4.1:<br><code>election restriction</code>, voters only cast votes for candidate who is <strong>at least as up-to-date</strong>.</p><ul><li>candidate has higher term in last log entry, or</li><li>candidate has same last term and same length or longer log</li></ul><p>The next leader will be S2 or S3. They vote for each other even if network connectivity is intact.<br>Because they have higher term.</p><p>Then S1 will be forced to discard 6,7. -&gt; not committed -&gt; clients will resend the discarded commands</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Example 4:</span><br><span class="line"></span><br><span class="line">Leader (S2, 6); S1 crash+reboot; S2 sends AEs</span><br><span class="line"></span><br><span class="line">    Case 1      Case 2       Case 3</span><br><span class="line">S1: 4 5 5       4 4 4        4</span><br><span class="line">S2: 4 6 6 6 or  4 6 6 6  or  4 6 6 6</span><br></pre></td></tr></table></figure><p>end of section 5.3: a faster roll-back scheme than backs up one entry per request</p><p>How to roll back quickly?</p><p>S2: AE(prevLogTerm=6)<br>-&gt; Reply: S1 rejects with (XTerm, XIndex, XLen)</p><ol><li>case 1, leader doesn’t have XTerm -&gt; nextIndex[S1] = XIndex</li><li>case 2, leader has XTerm -&gt; nextIndex[S1] = leader’s last entry for XTerm</li><li>case 3, follwer’s log too short -&gt; nextIndex[S1] = XLen</li></ol><p>(? binary search)</p><p>Phrases:<br>XTerm: term in the conflicting entry (if any)<br>XIndex: index of first entry with that term (if any)<br>XLen: log length</p><h3><span id="persistence">Persistence</span><a href="#persistence" class="header-anchor">¶</a></h3><p>After a server crashes, we can repair it by replacing with a fresh (empty) server or reboot the crashed server.</p><ol><li>new: requires transfer of entire log/snapshots to new server, slow but necessary in case failure is permanent.</li><li>old: requires state that persists across crashes. Must support this for simultaneous power failures. -&gt; persistence</li></ol><p>What to remember?</p><ul><li>Essential info to let a Raft server rejoin the group. Save them after each change or before sending RPCs.</li><li>log[], a server that has latest log entries needs to keep that for furture use of new leader.</li><li>currentTerm, to ensure terms of system only increase. Each term has at most one leader to detect RPCs from stale leaders and candidates.</li><li>votedFor, a server needs to remember who it voted for in the currrent term in case it is rebooted and votes for a different candidate.</li></ul><p>What can be volatile?</p><p>If a state will be reset after reboot, it doesn’t need to be persistent.</p><p>Performance cost:</p><ul><li>Persistence is often the bottleneck for performance.<ul><li>SSD (0.1ms per write) writes 100 times faster than a hard disk (10 ms per write), limiting us to 100-10,000 ops/sec.</li></ul></li><li>optimizations<ul><li>batch many log entries per disk write</li><li>persist to faster storage (battery-backed RAM)</li></ul></li><li>Another bottleneck RPC takes &lt;&lt; 1 ms on a LAN</li></ul><p>How does the service recover its state after a crash+reboot?</p><ul><li>Simple approach: start with empty state and re-play Raft’s entire log.</li><li>Faster approach: snapshot + replay the tail of the log (that snapshot didn’t cover)</li></ul><h3><span id="log-compaction-and-snapshots">Log Compaction and Snapshots</span><a href="#log-compaction-and-snapshots" class="header-anchor">¶</a></h3><p>State = operation history</p><p>service states are usually much smaller than the complete log. A server can’t discard un-executed entries which is not yet reflected in the state and un-committed entries which could be part of leader’s majority.</p><p>To solve the problem of huge replicated log, service periodically creates persistent “snapshot”. A snapshot includes copy of service state and index of last included log entry. Service tells Raft it is snapshotted through some log index so Raft can discard log before that index. A server can create a snapshot and discard prefix of log whenever.</p><p>In the case of crash+restart, service reads snapshot from disk and tells Raft last included index to avoid duplicate applying of log entries.</p><p>When follower’s log ends before leader’s log starts, that part p is lost and can’t be recovered by AppendEntries RPCs. Instead leader sends InstallSnapshot RPCs.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L:           |-p-|xxxxxxxxxxxxxx|</span><br><span class="line">F: |xxxxxxxxx|</span><br></pre></td></tr></table></figure><h3><span id="linearizability">Linearizability</span><a href="#linearizability" class="header-anchor">¶</a></h3><p>notion of correctness for strong consistency: linearizability</p><p>An execution history is linearizable if one can find a total order of all operations, that matches real-time (for non-overlapping ops), and in which each read sees the value from the write preceding it in the order.</p><p>A history is a record of client operations, each with arguments, return value, time of start, time completed.</p><p>draw the constraint arrows by time rule + value rule</p><ul><li>the order obeys value constraints (W -&gt; R)</li><li>the order obeys real-time constraints</li></ul><p>Notation:</p><ul><li>Wx1 means write value 1 to record x, Rx1 means a read of rocord x yielded value 1.</li><li>the history is client-centric view of requests. It is linearizable if there is no cycle</li><li>the form of overlapping operations denotes concurrent operations</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">example 4:</span><br><span class="line"></span><br><span class="line">C1: |-Wx3-|          |-Wx4-|</span><br><span class="line">C2:          |-Rx3-------------|</span><br><span class="line">order: Wx3 Rx3 Wx4</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>From the examples in the lecture, it is known that:</p><ol><li>service can pick either order for concurrent operations</li><li>all clients must see the writes in the same order expecially in the cases of replicas and caches</li><li>reads must return fresh data. Stale values aren’t linearizable</li><li>Duplicate request handling:<ul><li>supposing clients re-send requests if they don’t get a reply, leader remembers client requests it has seen and replies with saved response from first execution when it sees duplicate.</li><li>it is linearizable to return the old saved value in this case. The reason is that the duplicate request is seen as the same process of the failed first request, which is concurrent to the write request.</li></ul></li></ol><h3><span id="duplicate-rpc-detection">Duplicate RPC Detection</span><a href="#duplicate-rpc-detection" class="header-anchor">¶</a></h3><p>Q: what should a client do if an operation times out? -&gt; Re-send th request</p><ul><li>server is dead or request dropped</li><li>server executed but request lost. Client still needs the result.</li></ul><p>The idea is duplicate RPC detection. Client picks an ID for each request. Re-sends will use the same ID in same RPC. Service keeps track a table indexed by ID and records value after executing. If the second RPC arrives with the same ID, the service knows it’s a duplicate and generates reply from the old saved value in the table.</p><p>Q: When can we delete table entries?</p><ul><li>If new leader takes over, how to get the duplicate table?<ul><li>No need. Every server updates their duplicate table as they execute.</li></ul></li><li>If server crashes, how to restore its table?<ul><li>replay of log populates the table or snapshots which contains a copy of the table</li><li>as discussed in linearizability section, it is allowed to return the old saved value in this case.</li></ul></li></ul><p>To keep the table small, service has one table entry per client rather than one per request. Each client numbers requests sequentially. When server receives a client request with new number, it can forget about client’s lower entries and update the table entry with the new request.</p><p>If a duplicate req arrives before the original executes, the service just call Start() again. Server won’t execute a req that is already seen.</p><h3><span id="read-only-operations">Read-only Operations</span><a href="#read-only-operations" class="header-anchor">¶</a></h3><p>end of section 8</p><p>Q: does the Raft leader have to commit read-only operations in the log before replying?</p><p>e.g. Get(key)?</p><p>Leader cannot respond immediately to a read-only operation using its current content. The reason is that a server might have lost the recent election but not realized it yet in cases of network partitions. Then a new leader processes Put()s for the key so that value in that server becomes stale. Thus leader must commit read-only operations.</p><p>But read-heavy workload are quite normal. Committing read-only operations can take a long time. In practice, people are often willing to exchange higher performance with stale data.</p><p>The idea is leases. Modify Raft as follows: defining a lease period, after each time the leader gets an AE maj, it is entitled to respond to read-only requests for a lease period without committing those requests to the log (w/o sending AEs).</p><p>A new leader can’t execute write requests until previous lease period has expired. So followers keep track of the last time they responded to an AE, and tell the new leader in the RequestVote reply.</p><p>As a result, we get faster read-only operations and the history is still linearizable.</p><h2><span id="paxos">Paxos</span><a href="#paxos" class="header-anchor">¶</a></h2><h3><span id="paxos-review">Paxos Review</span><a href="#paxos-review" class="header-anchor">¶</a></h3><p>Assumptions: non-Byzantine failures. Allows failures of missing messages and unordered requests.</p><p>P1. An acceptor must accept the first proposal that it receives.</p><p>For the acceptance of majority, one acceptor must accecpt &gt;= 1 proposals. Assign number to the proposal as (seq_number, value).</p><p>A value is chosen only when it is accepted by a majority of acceptors. -&gt; A value is chosen only when the proposal is chosen.</p><p>If multiple proposals are chosen, then it is guaranteed that all chosen proposals have the same value.</p><p>P2. If a proposal with value v is chosen, then every higher-numbered proposal <u>that is chosen</u> has value v.<br>-&gt; 2a. accepted by any acceptor<br>-&gt; 2b. issued by any proposer<br>-&gt; 2c. For any v and n, if a proposal(n, v) is issued, then there is a set S consisting of a majority of acceptors such that either (a) no acceptor in S has accepted any proposal numbered less than n, or (b) v is the value of the highest-numbered proposal among all proposals numbered less than n accepted by the acceptors in S.</p><p>To prove 2c, the proposer (n, v) controls future acceptance by <strong>requesting a promise from acceptors that no more such acceptances of proposals numbered less than n</strong>.</p><p>Proposer’s algorithm:<br>(1) a <code>prepare</code> req<br>A proposer send a prososal (n)  and demands its acceptors to respond with:</p><ol><li>a promise never again to agree a proposal numbered less than n</li><li>the proposal with the highest number less than n that it has accepted (previous accepted value), if any.</li></ol><p>After the proposer gets the responses from a majority of the acceptors, it is getting into phase 2.</p><p>(2) an <code>accept</code> req, sharing the same set of acceptors as phase-1.<br>The proposer issues a proposal (n, v) where v is the value either the highest-numbered proposal among the responses or the any one selected by the proposer if reported no proposals.</p><p>P1a. An acceptor can accept a proposal numbered n iff it has not responded to a prepare request having a number greater than n.</p><p>Phase 1:<br>(1) proposer: sends a prepare req (n)<br>(2) acceptor: responds the proposal(n, v) or null</p><p>Phase 2:<br>(1) proposer: sends an accept req (n, v) to the same majority group of acceptors<br>(2) acceptor: accepts (n, v) unless there are prepare requests numbered greater than n.</p><p>Optimizations:</p><ol><li>acceptors ignore the prepare requests numbered less than its accepted request number.</li><li>acceptors notify the proposers the highest number of its prepare requests so that proposers can drop the proposals with lower numbered req.</li></ol><p>Phase 3: learner: the acceptors can respond their acceptances to some set of distinguished learners.</p><p># of distinguished learners^, reliability^ &amp; communication complexity^.</p><p>Termination policy: a distinguished proposer must be selected as the only one to issue proposals. A reliable algorithm for electing a proposer must use either randomness or real time (timeouts).</p><p>implementation:</p><p>Paxos chooses a leader to perform the role of the distinguished proposer and the distinguished learner.</p><p>For persistence, an acceptor records its response in storage before sending. And each proposer keeps the highest-numbered proposal in storage before issuing.</p><blockquote class="colorquote blue"><p>Suppose that the acceptors are <em>A</em>, <em>B</em>, and <em>C</em>. <em>A</em> and <em>B</em> are also proposers. How does Paxos ensure that the following sequence of events can’t happen? What actually happens, and which value is ultimately chosen?</p><ol><li><em>A</em> sends prepare requests with proposal number 1, and gets responses from <em>A</em>, <em>B</em>, and <em>C</em>.</li><li><em>A</em> sends <code>accept(1, &quot;foo&quot;)</code> to <em>A</em> and <em>C</em> and gets responses from both. Because a majority accepted, <em>A</em> thinks that <code>&quot;foo&quot;</code> has been chosen. However, <em>A</em> crashes before sending an <code>accept</code> to <em>B</em>.</li><li><em>B</em> sends prepare messages with proposal number 2, and gets responses from <em>B</em> and <em>C</em>.</li><li><em>B</em> sends <code>accept(2, &quot;bar&quot;)</code> messages to <em>B</em> and <em>C</em> and gets responses from both, so <em>B</em> thinks that <code>&quot;bar&quot;</code> has been chosen.</li></ol></blockquote><p>After step 2, B and C have had the prepare message from A which is #1. After step 3, B would get response from C with value “foo” and gets null from B. At step 4, B will not send accecpt(2, “bar”) but (2, “foo”).</p><h3><span id="inference">Inference</span><a href="#inference" class="header-anchor">¶</a></h3><p>There are protocols such as Paxos, Raft, Viewstamped Replication, Raft, Zookeeper providing strong consistency. Paxos is different for its simplicity and wide application. Many other protocols can be viewed as variants of Paxos.</p><p>Two topics are:</p><p>Problem 1: How Paxos works?</p><p>Agreement is hard :(</p><ul><li>multiple rounds for the op, tentative initialy but don’t know when agreement is permanent</li><li>Agreement has to be able to complete even with failed servers. some servers decides a value but other servers don’t respond. Can’t distinguish between network partition (servers are running but cannot be reached by other partition) or failed servers.</li></ul><p>Two main ideas in Paxos to address these problems:</p><ul><li>many rounds are possible but they will converge on one value</li><li>majority rule: a key point is any two majorities overlap. At least one server with earlier majority is shared by the later majority.</li></ul><p>Paxos sketch:</p><ul><li>each server consists of three logical entities, acceptor, proposer, learner. Maybe more than one proposer when multiple clients submit requests to different servers at the same time.</li><li>Proposers contacts acceptors to assemble a majority. if not get a majority, new round.</li></ul><p>The crucial property:</p><ul><li>If a value was chosen, any subsequent choice must be the same value</li><li>chosen is system-wide property</li></ul><p>Why n?</p><ul><li>It distingushes among multiple rounds. Later rounds can supersede earlier rounds.</li><li>n = &lt;time, server_id&gt;, n must be unique and roughly follow time.</li><li>round(=proposal) numbers are WITHIN a particular instance.</li></ul><p>What’s the commit point?</p><p>i.e. a point that agreement has reached or a server has executed the op</p><p>After a majority has the same (v_a, n_a). Neither v_a nor n_a is sufficient.</p><p>Thinking (discussing with Claude):</p><ol><li>why does the proposer need to pick v_a with highest n_a?</li></ol><p>The proposer needs to pick an accepted value which is associated with the highest proposal number that acceptors have seen. It represents the most recent accepted value.</p><ol start="2"><li>why does prepare handler check that n &gt; n_p?</li></ol><p>It picks a proposal number that is higher than current highest prepare seen. The proposer should not send a proposal that is older than previous ones.</p><ol start="3"><li>why does accept handler check n &gt;= n_p?</li></ol><p>The acceptor promises not to accept any proposal with number less than n_p.</p><ol start="4"><li>why does accept handler update n_p = n?</li></ol><p>The accept handler updates n_a because it’s accepting a value. The real question is why n_p is updated too. If n_p &lt; n, then n_p &lt; n_a. The proposal with n_p will be rejected by the acceptor.</p><ol start="5"><li>what if proposer S2 chooses n &lt; S1’s n?</li></ol><p>It will be rejected by any acceptor that has seen S1’s proposal.</p><ol start="6"><li>what if an acceptor crashes after receiving accept?</li></ol><p>Assume that an acceptor receiving accept means that states were updated but it didn’t send accept_ok, then the proposer will retry with a new proposal number and get rejected since the acceptor is dead.</p><p>One acceptor crash will not affect the the system as long as the majority of the paxos peers is alive. Since the paxos lab is not persistent, the peer will lost its states. It will get updated when it is alive.</p><ol start="7"><li>what if an acceptor reboots after sending prepare_ok?</li></ol><p>The next accept will be rejected because the acceptor forgets the previous prepare which updates n_p.</p><p>Paxos gets stuck:</p><ul><li>not a majority that can communicate</li><li>propsers retry immediately after accept_reject (should retry after a random amount of time)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">example 1 (normal operation):</span><br><span class="line">  S1, S2, S3</span><br><span class="line">  but S3 is dead or slow</span><br><span class="line">  S1 starts proposal, n=1 v=A</span><br><span class="line">S1: p1    a1A    dA</span><br><span class="line">S2: p1    a1A    dA</span><br><span class="line">S3: dead...</span><br><span class="line">&quot;p1&quot; means Sx receives prepare(n=1)</span><br><span class="line">&quot;a1A&quot; means Sx receives accept(n=1, v=A)</span><br><span class="line">&quot;dA&quot; means Sx receives decided(v=A)</span><br><span class="line">these diagrams are not specific about who the proposer is</span><br><span class="line">(I like the diagram in the lecture handout, very concise)</span><br><span class="line"></span><br><span class="line">proposer - acceptor exchange:</span><br><span class="line">    prepare(n) -&gt;</span><br><span class="line">    &lt;- prepare_ok(n, n_a, v_a)</span><br><span class="line">    accept(n, v&#x27;) -&gt;</span><br><span class="line">    &lt;- accept_ok(n)</span><br><span class="line">    decided(v&#x27;) -&gt;</span><br><span class="line"></span><br><span class="line">--- Paxos Proposer ---</span><br><span class="line"></span><br><span class="line">proposer(v):</span><br><span class="line">  while not decided:</span><br><span class="line">    choose n, unique and higher than any n seen so far</span><br><span class="line">    send prepare(n) to all servers including self</span><br><span class="line">    if prepare_ok(n, n_a, v_a) from majority:</span><br><span class="line">      v&#x27; = v_a with highest n_a; choose own v otherwise   </span><br><span class="line">      send accept(n, v&#x27;) to all</span><br><span class="line">      if accept_ok(n) from majority:</span><br><span class="line">        send decided(v&#x27;) to all</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Paxos Acceptor ---</span><br><span class="line"></span><br><span class="line">acceptor state on each node (persistent):</span><br><span class="line"> n_p     --- highest prepare seen</span><br><span class="line"> n_a, v_a --- highest accept seen</span><br><span class="line"></span><br><span class="line">acceptor&#x27;s prepare(n) handler:</span><br><span class="line"> if n &gt; n_p</span><br><span class="line">   n_p = n</span><br><span class="line">   reply prepare_ok(n, n_a, v_a)</span><br><span class="line"> else</span><br><span class="line">   reply prepare_reject</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">acceptor&#x27;s accept(n, v) handler:</span><br><span class="line"> if n &gt;= n_p</span><br><span class="line">   n_p = n</span><br><span class="line">   n_a = n</span><br><span class="line">   v_a = v</span><br><span class="line">   reply accept_ok(n)</span><br><span class="line"> else</span><br><span class="line">   reply accept_reject</span><br></pre></td></tr></table></figure><p><u>Problem 2: How to integrate Paxos into a real system?</u></p><p>Paxos-based replication:</p><p>Each client ops are appended to a replicated log of servers with a separate proposal number.<br>Log entries are numbered, called instances (seq). Paxos reaches agreement on each log entry.</p><p>Paxos provides:</p><ul><li>interface:<ul><li>Start (seq, v): Propose v for seq, without waiting for agreement to complete</li><li>fate, v := Status(seq): find out the agreed value for seq. Only check local states, w/o communications between servers.</li></ul></li><li>correctness: once any agreement reached, never changes. After agreement, servers may update state</li><li>fault tolerance: tolerate non-reachability of a minority of servers</li><li>liveness: will reach agreement if a majority of servers can communicate for long enough</li></ul><p>Example (context): Server Si uses Paxos to get all servers to agree that a log entry x holds a client op (Get,  Put, Append).</p><p>Why a log is better than all replicas to agree on each op in lock-step:</p><ul><li>when state is small: agree on entire state -&gt; a tie</li><li>when state is very large: log describes changes -&gt; win</li><li>log helps to recover from failures: slow, miss messages, crash, start</li></ul><p>Summary of how to use Paxos for RSM:</p><p>A log of Paxos instances (client op). Different instances’ Paxos agreements are <strong>independent</strong>.</p><h2><span id="case-study-zookeeper-2010">*Case Study: ZooKeeper 2010</span><a href="#case-study-zookeeper-2010" class="header-anchor">¶</a></h2><p>ZooKeeper: Wait-free coordination for Internet-scale systems</p><p>Read: 1-2</p><blockquote class="colorquote blue"><p>Problem 0: One use of Zookeeper is as a fault-tolerant lock service (see the section “Simple locks” on page 6). Why isn’t possible for two clients to acquire the same lock? In particular, how does Zookeeper decide if a client has failed and it can give the client’s locks to other clients?</p></blockquote><p>Because a lock can only be created once and held by one client. Once a lock is created, another client that tries to acquire the same lock will read the znode with the watch flag set. Zookeeper decides a client has failed by watch events.</p><p>&gt; Claude: The key safety guarantee comes from combining these mechanisms: locks are typically implemented using ephemeral znodes, and session expiration is what ultimately determines if a client has failed. A client’s lock (ephemeral znode) will only be released when its session expires, ensuring no two clients can hold the same lock simultaneously</p><p>Zookeeper is a Raft-like service with leader-based replication.  We care about Zookeeper from two perspectives:</p><ol><li><p>APIs for a general purpose  coordination service</p></li><li><p>performance of replication: will Nx replica server bring Nx performance?</p><p>Normally, it wouldn’t for leader-based replication. The server requires leader to replicate one by one, slowing down the performance inverse proportionally to the number of replicas.</p></li></ol><p>When a replica servers read-only client requests from their local state w/o other peers, reads from followers are not linearizable because they may return stale data. Even if a client is reading from an up-to-date replica, it still risks the possibility of seeing data values go backwards in time.</p><p>Zookeeper avoids this issue by changing the definition of correctness. It looses the constraints of linearizability by allowing reads to yield stale data so that clients are able to read from all replicas, changing total read capacity from O(1) to O(# servers). That highly increases the performance for read-heavy workloads.</p><p>Ordering guarantees:</p><ul><li>linearizable writes: writes are ordered with <code>zxid</code> and execute in zxid order.</li><li>FIFO client order</li></ul><img src="/sg/2023/07/28/ds_basics/zab.png" class title="zab"><ol><li><p>API overview</p></li><li><p>atomicity for mini-transaction: Zookeeper is good for small piece of data like 100MB, not as big as 100GB.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mini-transaction example</span><br><span class="line">while true:</span><br><span class="line">x, v := getData(&quot;f&quot;)</span><br><span class="line">if setData(x + 1, version=v):</span><br><span class="line">break</span><br><span class="line">(sleep)</span><br></pre></td></tr></table></figure></li></ol><p>Scalable lock compared to threaded lock of Go:</p><p>: service creates sequential files. Each lock at most has one file requests to acquire. For example, supposing files are numbered with 0 - 3 and f0 holds the lock, the other files trying to acquire the lock look like the following diagram.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Locks w/o herd effect</span><br><span class="line">f0                   f1              f2          f3</span><br><span class="line">holds the lock &lt;-  wait for f0 &lt;- wait for f1 &lt;- wait for f2</span><br><span class="line"></span><br><span class="line"># Locks w/ herd effect</span><br><span class="line">f0                   f1              f2          f3</span><br><span class="line">holds the lock &lt;-  wait for f0   wait for f0   wait for f0</span><br><span class="line"> ^ |                 |           |</span><br><span class="line"> |--------------------------------------------------</span><br></pre></td></tr></table></figure><h2><span id="case-study-chubby-2006">*Case Study: Chubby 2006</span><a href="#case-study-chubby-2006" class="header-anchor">¶</a></h2><p>The Chubby lock service for loosely-coupled distributed systems</p><p>Terms:</p><ol><li>Advisory locks are a type of locking mechanism where processes voluntarily check and respect locks, but the system doesn’t enforce the locks.</li><li>Whole-file reads refer to a pattern where applications read entire files from beginning to end, rather than accessing random portions or small parts of files. This was one of the key workload assumptions in systems like Google File System (GFS).</li></ol><p>This paper introduces Chubby, a distributed lock service, for use within a distributed system consisting of fairly large numbers of small machines connected by a high-speed network. It aims to deal with the problem of electing a leader from among a set of servers. The authors only want to discuss the design and implementation through real experience.</p><h2><span id="case-study-harp-1991">*Case Study: Harp 1991</span><a href="#case-study-harp-1991" class="header-anchor">¶</a></h2><p>Replication in the Harp File System</p><p>Read: 1, 3-6</p><blockquote class="colorquote blue"><p>Question: Figures 5-1, 5-2, and 5-3 show that Harp often finishes benchmarks faster than a conventional non-replicated NFS server. This may be surprising, since you might expect Harp to do strictly more work than a conventional NFS server (for example, Harp must manage the replication). Why is Harp often faster? Will all NFS operations be faster with Harp than on a conventional NFS server, or just some of them? Which?</p></blockquote><p>Harp is often faster because it applies three approaches to increase performance.</p><p>First, for non-modification operations, the primary node doesn’t send requests to backups and processes by local content.</p><p>Furthermore, since read operations in a file system are modifiled which changes the last viewed time of files upon reading, Harp makes a concession of consistency by allowing read requests to return to the client immediately from the primary. Such requests don’t have to wait for the acknowledgements of backups and increase performance. The rest of processing read requests between primary and backup is running at the background.</p><p>Secondly, a part of work is put background compared to unreplicated NFS server which is:</p><ol><li>in the phase 2 of 2PC, backups are informed about the commit</li><li>committed records of event are applies to file system (apply)</li></ol><p>Harp is a file service in a distributed network which was designed for small clusters. It adopts primary copy replication technique and write-ahead log, providing users similar interface to NFS at that time. Additional hardwares are used for reliable storage and UPS (uninterruptible power supply) which persists the log despite (short) power failures.</p><p>Environment: nodes are connected via a network; synchronized clocks allows a skew of &lt;100ms, node failures include network, hardware, power; a crash of node is fail-stop.</p><p>Problem: how replication works?</p><p>The structure of section 4 is: overview, system behavior of failure cases, no failure case (normal case processing), failure case (fail-over), atomicity of transactions</p><p>The things I noticed are:</p><ol><li>Some familiar stuff: Harp uses primary/back replication model + WAL (limited size; volatile; redo log, not undo) to achieve reliability, consistency, correctness, availability.<ul><li>The replication models applies 2PC + view servers</li><li>It is fault-tolerant, allowing &lt;maj # of node failures</li><li>It is able to tolerate simultaneous failures.</li><li>reduce log size by exchanging and comparing LB and GLB.</li></ul></li><li>loosely synchronized clocks with a skew of &lt; 100ms.</li><li>Harp speeds up read op processing by using leases and sacrifice of a little consistency of last viewed time. When T(primary’s clock) &gt; T (backup’s clock) + t (promised by backup which won’t start a new view less than this time), the read requests are sent to backups. Otherwise, the primary returns the result of reads directly.</li><li>The member of Harp’s group has three roles: primary, backup, witness. Harp distributes work to all members by assigning roles with unmatched group. For example, in a system with three nodes A, B, C, A  could be primary of g0, backup of g1, and witness of g2.</li><li>Witness servers don’t store files because only (n+1) servers to store is enough for a system to tolerate n failure nodes. A witness server can be promoted and demoted.</li><li>A view of the system is numbered. The higher, the most recent. Harp avoids simultaneous view changes which slow down fail-over.</li></ol><p>Other things I wasn’t aware of:</p><ol><li>Harp uses Raft-like replication techniques, pre-dating Raft by 20+ years. It describes complete replicated systems and how it adapts to state machine abstraction.</li><li>question: how does it handle n/w partition for modified operations?</li><li>q: When can Harp form a new view?</li><li>Optimizations of Harp: pipelining of requests to backup (numbered event records?)</li></ol><p>Reference:</p><ol><li><a href="http://nil.csail.mit.edu/6.824/2015/notes/l-paxos.txt">http://nil.csail.mit.edu/6.824/2015/notes/l-paxos.txt</a></li><li><a href="http://nil.csail.mit.edu/6.824/2015/notes/paxos-code.html">http://nil.csail.mit.edu/6.824/2015/notes/paxos-code.html</a></li><li><a href="http://nil.csail.mit.edu/6.824/2022/notes/l-raft.txt">http://nil.csail.mit.edu/6.824/2022/notes/l-raft.txt</a></li><li><a href="http://nil.csail.mit.edu/6.824/2022/notes/l-raft2.txt">http://nil.csail.mit.edu/6.824/2022/notes/l-raft2.txt</a></li><li><a href="http://nil.csail.mit.edu/6.824/2015/notes/l-harp.txt">http://nil.csail.mit.edu/6.824/2015/notes/l-harp.txt</a></li><li><a href="http://nil.csail.mit.edu/6.824/2020/notes/l-zookeeper.txt">http://nil.csail.mit.edu/6.824/2020/notes/l-zookeeper.txt</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.824 distributed systems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>出狱札记</title>
      <link href="/sg/2023/06/27/summer/"/>
      <url>/sg/2023/06/27/summer/</url>
      
        <content type="html"><![CDATA[<p>身体的囚牢和心灵的囚牢同样可怕，而这概括了我的大学。每个时期我所困惑的问题都在变化。</p><ul><li><p>大一：自学cs而不是选择这个专业的决定正确吗？<br>我给自己一个学期想出答案，逐渐意识到社会上对非科班从事cs的偏见，于是选择转专业，最后转专业失败。</p></li><li><p>大二：为什么总是不能独立做出一些公开课的题或lab？总想着独立解决问题但总是无法做到，是拒绝想别人问问题的时期。<br>选择放着等待之后解决，开始补一些基础知识和学了一点c。</p></li><li><p>大三：</p><ul><li>厌倦在琐碎无聊的事情上分配时间，用了一种比较极端的方式逃避，导致成绩单变得很难看<br>一点一滴的积累，这段时间练习了许多东西。靠之前c的基础和练习的部分在比同期较晚的时间有了个暑期实习。</li><li>peer pressure: 选择想做的事还是同辈们在做的事？<br>选择了想做的事。</li><li>career wonderings: 职业初期什么最重要？应该养成什么样的学习习惯？<br>从 mentors 那里从0开始一窥 system programming，能够问问题和读大型项目的相关代码。改善沟通能力，和更多的专业人士交流同时也受到许多人的帮助。<img src="/sg/2023/06/27/summer/email.png" class title="email"></li></ul></li><li><p>大四：坎坷曲折的一年。</p><ul><li><p>迷失暗淡的日子对我的人生有任何帮助吗？这一年充满了变故，先是 Zero Policy 然后是很多厂的 hiring freeze，导致某个很想去的实习最终不能成行。<br>心存希望。以为的结束其实只是一切开始的起点，我要找到一个适合的地方给自己足够的时间继续磨炼能力和增加见识。</p></li><li><p>开始做延伸任务，看不懂一些背后的代码逻辑<br>在问问题的过程中豁然开朗<br>线路：zoned emulation -&gt; full emulation (block driver) -&gt; + qcow2 driver -&gt; NVMe ZNS emulation</p></li><li><p>读一些 pr/proposal/slides 总觉得看不透<br>多看多想多练</p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.046 dynamic programming</title>
      <link href="/sg/2023/01/25/6.046_dp/"/>
      <url>/sg/2023/01/25/6.046_dp/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#introduction">Introduction</a></li><li><a href="#basic">Basic</a><ul><li><a href="#rectangualar-blocks">Rectangualar blocks</a></li><li><a href="#longest-palindromic-seq">Longest Palindromic Seq</a></li></ul></li><li><a href="#medium">Medium</a><ul><li><a href="#optimal-bsts">Optimal BSTs</a></li><li><a href="#alternating-coins-game">Alternating Coins Game</a></li></ul></li><li><a href="#all-pairs-shortest-paths">All-Pairs Shortest Paths</a><ul><li><a href="#dp1">DP1</a></li><li><a href="#matrix-multiplication">Matrix multiplication</a></li><li><a href="#dp2-floyd-warshall-algorithm">DP2, Floyd-Warshall algorithm</a></li><li><a href="#johnson-s-algorithm">Johnson’s algorithm</a></li></ul></li><li><a href="#olc">OLC</a></li></ul><!-- tocstop --></div><p>DP notion:</p><ol><li>Characterize the structure of an optimal solution</li><li>Recursively define the value of an optimal solution based on optimal solutions of subproblems</li><li>Compute the value of an optimal solution in bottom-up fashion (recursion &amp; memoization)</li><li>Construct an optimal solution from the computed information</li></ol><h2><span id="introduction">Introduction</span><a href="#introduction" class="header-anchor">¶</a></h2><p>The main idea of dp: subtract and solve the subproblem, then reuse the results</p><p>Runtime: the number of unique problems+ the amount of merge work</p><p>In the recitation, a simple dp example is to solve the number of unique paths from (1, 1) to (M, N).</p><ul><li><img src="/sg/2023/01/25/6.046_dp/Screenshot-4617420.png" class title="Screenshot-4617420"></li><li>Subproblem: To the points on the edge, just one path; to the middle points, path to the left point + path the right point</li><li>Runtime: # subproblems = O(MN)</li><li>olc: I misunderstood that the subproblems should start from (M-1, N-1) -&gt; (M, N) which makes solutions hard to get.</li></ul><p><u>Make change example:</u> Make changes for N cents. There are 1=S1 &lt; S2 &lt; … &lt; S_M cent of coin. Find the minimal number of coins needed.</p><ul><li>Subproblem: do a exhaustive search. Pick Si, then MC(N) = min{1 + MC(N-Si)}. N &gt; maximum of subproblems of min{MC(N-Si)}</li><li>Runtime: O(MN).</li><li>It’s similar to knapsack problems (NP-complete). The linear solution here is due to the size of input is log(N), thereby it’s still exponential.</li></ul><h2><span id="basic">Basic</span><a href="#basic" class="header-anchor">¶</a></h2><h3><span id="rectangualar-blocks">Rectangualar blocks</span><a href="#rectangualar-blocks" class="header-anchor">¶</a></h3><p>problem: A set of n blocks, {1, 2, …, n}, l_i, w_i, h_i. J on top i, require l_j &lt; l_i, w_j &lt; w_i. Rotating not allowed. Find the maximum height.</p><p>? RB(1, 2, …, n)</p><ul><li>olc: the subproblem is whether to put the next block j on top of current (j-1) blocks.</li></ul><p>Rec:</p><p>Approach 1: exhaustive search</p><ul><li><p>RB(1, 2, …, n) = max{h_i + RB(…except i…)} -&gt; messy constraints l, w</p></li><li><p>redefine a compatible set C, then RB(1, 2, …, n) = max{h_i + RB(C_i)}</p><img src="/sg/2023/01/25/6.046_dp/Screenshot-4619728.png" class title="Screenshot-4619728"></li><li><p>Runtime: O (n^2), # subproblems = n.</p><ul><li><img src="/sg/2023/01/25/6.046_dp/Screenshot-4620149.png" class title="Screenshot-4620149"></li><li>what’s in the compatible sets C? How to find C?<ul><li>O(n^2): Scan the entire set, find the minimum for each one</li><li>O(nlogn)?</li></ul></li></ul></li></ul><p>Approach 2: weighted interval scheduling</p><p>Sorted by length and then width {1, …, n}</p><p>RB(1, 2, …, n) = max{(h1 + RB(C_i)), RB(2, …, n)}</p><p>Runtime: O(n), # subproblems = n; + O(nlogn), sort; + O(n^2)/O(nlogn) find C set.</p><h3><span id="longest-palindromic-seq">Longest Palindromic Seq</span><a href="#longest-palindromic-seq" class="header-anchor">¶</a></h3><p>Input: a sequence of letters -&gt; a string X[1…n], n &gt;=1</p><p>Output: (limits) answer &gt;=1</p><p>Strategy: L(i, j) is the length of longest palindromic subsequences of X[i…j] for i &lt;= j.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">X = <span class="string">'underqualified'</span></span><br><span class="line">n = <span class="built_in">len</span>(X)</span><br><span class="line"><span class="type">Dict</span> = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">L</span>(<span class="params">i, j</span>):</span><br><span class="line"><span class="keyword">if</span> (<span class="type">Dict</span>[i][j] != <span class="number">0</span>): <span class="comment"># memoization</span></span><br><span class="line"><span class="keyword">return</span> <span class="type">Dict</span>[i][j]</span><br><span class="line"><span class="keyword">if</span> i == j:</span><br><span class="line"><span class="type">Dict</span>[i][j] = <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> X[i] == X[j]:</span><br><span class="line"><span class="keyword">if</span> i + <span class="number">1</span> == j:</span><br><span class="line"><span class="type">Dict</span>[i][j] = <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> + L(i+<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="type">Dict</span>[i][j] = <span class="built_in">max</span>(L(i+<span class="number">1</span>, j), L(i, j-<span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="type">Dict</span>[i][j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="built_in">print</span>(<span class="type">Dict</span>[i])</span><br></pre></td></tr></table></figure><p>Problem 1: How to trace backwards to generate output sequence?</p><ul><li><p>ChatGPT: use dp array to trace back and print the result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printLPS</span>(<span class="params">i, j</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; j:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">if</span> i == j:</span><br><span class="line">        <span class="keyword">return</span> X[i]</span><br><span class="line">    <span class="keyword">if</span> X[i] == X[j]:</span><br><span class="line">        <span class="keyword">return</span> X[i] + printLPS(i+<span class="number">1</span>, j-<span class="number">1</span>) + X[j]</span><br><span class="line">    <span class="keyword">if</span> <span class="type">Dict</span>[i][j-<span class="number">1</span>] &gt; <span class="type">Dict</span>[i+<span class="number">1</span>][j]:</span><br><span class="line">        <span class="keyword">return</span> printLPS(i, j-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> printLPS(i+<span class="number">1</span>, j)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Longest Palindromic Sequence: "</span>,printLPS(<span class="number">0</span>, <span class="built_in">len</span>(X)-<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li></ul><p>Problem 2: How to write dp iteratively?</p><ul><li><strong>Iterating</strong>: solve subproblems in order of increasing j − i so smaller ones are solved first</li></ul><p>Analysis: # subproblems * time to solve each subproblem</p><ul><li>Suppose X[i] are distinct, T(n) is running time on input of length n, T(n) = 2^(n-1)<ul><li>1, n=1</li><li>2T(n-1), n&gt;1</li></ul></li><li>But there are only C(n, 2) = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.166ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2283.6 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(858,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1894.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> distinct subproblems: (i, j) pairs with i &lt; j.</li><li>Given that smaller ones are solved, lookup is O(1)</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.256ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 4975 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(858,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1894.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2505.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(3228,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(3697,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(4086,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(4586,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li><li><strong>memoizing</strong>, hash, lookup hash table or recurse</li></ul><h2><span id="medium">Medium</span><a href="#medium" class="header-anchor">¶</a></h2><h3><span id="optimal-bsts">Optimal BSTs</span><a href="#optimal-bsts" class="header-anchor">¶</a></h3><p>Given: keys K1, K2, …, Kn, K1 &lt; K2 &lt; … &lt; Kn, WLOG Ki = i</p><p>weights W1, W2, …, Wn (search probability)</p><p>Find BST T that minimizes: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="27.575ex" height="2.563ex" role="img" focusable="false" viewbox="0 -789.6 12187.9 1132.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="msub" transform="translate(2453.3,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mi" transform="translate(977,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="mo" transform="translate(3946.5,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mo" transform="translate(4668.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5057.7,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(5577.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(6043.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"/></g><g data-mml-node="mi" transform="translate(6546.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="msub" transform="translate(6907.7,0)"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(609,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="mo" transform="translate(8064.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(8453.5,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"/></g><g data-mml-node="mi" transform="translate(9342.5,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(9687.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10298.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mn" transform="translate(11298.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(11798.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, which is minimizing expected search cost. Frequently accessed keys are closer to the root and thus accessed faster.</p><ul><li>BST invariant: e(i, j) = cost of optimal BST on Ki, K_(i+1)…, Kj. Then the subproblems are {sets &lt; Kr} and {sets &gt; Kr}.</li><li>Want e(1, n).</li></ul><p>Enumeration: draw trees when n=2, 3</p><p><u>Greedy solution?</u>: Pick Kr in some greedy fashion, e.g., Wr is maximum. Use the key with maximum Wr as root node.</p><ul><li><p>Greedy heuristic: the maximum weight node should have absolute minimum depth.</p></li><li><p>Why greedy does not work?</p><ul><li>Intuition: when the maximum weight node happens to be Kn, the tree is highly unbalanced with all the nodes on the left of root node.</li><li>Nick Davis ex: Kn = 4, weights: 1, 10, 8, 9<ul><li><img src="/sg/2023/01/25/6.046_dp/Screenshot-3984876.png" class title="Screenshot-3984876"></li></ul></li></ul></li></ul><p><u>DP solution?</u>:</p><ul><li>First question: what is the root node? Guess!<ul><li>Make a linear number of guesses corresponding root node</li><li>e(i, j) = e(1, r-1) + e(r+1, j), one level below e(i, j)</li><li>e(i, j) =<ul><li>wi, if i = j</li><li>MIN(e(i, r-1) + e(r+1, j) + W(i, j)), i&lt;=r&lt;=j</li></ul></li><li>W(i, j) is sum of the weights from i to j. The weights add up when it goes deeper in recursion.</li></ul></li><li>Complexity: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="19.665ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 8692.1 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(858,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1894.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2505.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(3228,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(3697,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4086,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4686,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5352.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(6408.6,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(6877.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(7266.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(8303.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>. When j-i = 1, e(i, j) is certain and that makes up of C(n, 2) pairs.</li></ul><h3><span id="alternating-coins-game">Alternating Coins Game</span><a href="#alternating-coins-game" class="header-anchor">¶</a></h3><p>Question: Row of n coins of values V1, … , Vn, <u>n is even</u>.  In each turn, a player selects either the first or last coin from the row, removes it permanently, and receives the value of<br>the coin.</p><p>Can the first player always win? -&gt;Guaranteed not to lose<br>Try:   4 42 39 17 25 6</p><p><u>Strategy?</u></p><ul><li>Compare V1+V3+…+Vn-1 against V2+V4+…+Vn and pick the greater one</li><li>only pick from the chosen subset during the game</li></ul><p>Problem: maximize the amount of money won for the player moving first?</p><p><u>Optimal Strategy</u>: assume the opponent always pick best move for it -&gt; modeling in the middle</p><ul><li><p>V(i, j): max val the player can win if it is its turn and only coinds Vi, …, Vj remain. V(i, j) =</p><ul><li><p>V(i, i), pick i (model the opponent behavior)</p></li><li><p>V(i, i+1), pick the maximum of the two</p></li><li><p>V(i, i+2), V(i, i+3), …</p></li></ul></li><li><p>V(i, j) = max {pick Vi, pick Vj}</p><ul><li><u>complication</u>: V(i+1, j) is not the board in front of the first player that it can control. It should be the board that gets back after the opponent moves.</li><li>max {&lt;range (i+1, j)&gt; + Vi, &lt;range(i, j-1)&gt; + Vj}</li></ul></li><li><p>V(i+1, j) subproblems with opponent picking</p><ul><li>min {V(i+1, j-1), V(i+2, j)} Vs. the opponent picks Vj or Vi+1</li><li>Certain.</li></ul></li><li><p>V(i, j) = max{min{V(i+1, j-1), V(i+2, j)} + Vi, min{V(i+1, j-2), V(i+1, j-1)} + Vj}</p></li><li><p>Complexity: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.256ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 4975 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(858,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(1894.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2505.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(3228,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(3697,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mn" transform="translate(4086,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(4586,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p></li></ul><h2><span id="all-pairs-shortest-paths">All-Pairs Shortest Paths</span><a href="#all-pairs-shortest-paths" class="header-anchor">¶</a></h2><p>Notations+:</p><ul><li>edge-weighted graph, G = (V, E, w)</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.162ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2723.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1405,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1849.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2334.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> is the weights from u to v</li><li>Dijkstra for SSSP: O(E + VlgV)</li><li>assume w(u, v) = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 1000 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"/></g></g></g></svg></mjx-container> if (u, v) <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.486ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="2.106ex" role="img" focusable="false" viewbox="0 -716 667 931"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2209" d="M196 25Q84 109 84 250Q84 372 166 450T360 539Q361 539 375 539T413 540T460 540L547 707Q550 716 563 716Q570 716 575 712T581 703T583 696T505 540H568Q583 532 583 520Q583 511 570 501L484 500L366 270H568Q583 262 583 250T568 230H346L247 38Q284 16 328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 447 -40T419 -41Q304 -41 228 3Q117 -211 115 -212Q111 -215 104 -215T92 -212T86 -204T84 -197Q84 -190 89 -183L196 25ZM214 61L301 230H124V228Q124 196 147 147T214 61ZM321 270L440 500Q353 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H321Z"/></g></g></g></svg></mjx-container> E</li><li>E = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.683ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 2511.9 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"/></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(858,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(2122.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> in sparse case</li><li>Bellman-Ford analysis to detect no negative cycles:  no negative <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="5.613ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 2481.1 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1767,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container></li></ul><p>Question: given G = (V, E, w), find <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.162ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2723.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1405,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1849.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2334.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> for all u,v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V</p><ul><li><img src="/sg/2023/01/25/6.046_dp/Screenshot-3994587.png" class title="Screenshot-3994587"></li><li><p>Simple solution: APSP = run SSSP for each of V = |V| * Dijkstra</p></li><li><p>Johnson’s algorithm beats general Bellman-Ford and achives the general Dijkstra complexity bound.</p></li></ul><p>Goal: achieve <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.348ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 2805.9 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2416.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> first and <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.075ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 7105.3 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(1921,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(2907.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msup" transform="translate(3907.4,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(5172.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(5470.3,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(5947.3,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(6716.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> then</p><h3><span id="dp1">DP1</span><a href="#dp1" class="header-anchor">¶</a></h3><ol><li>subproblems: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="4.014ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1774 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = weight of shortest path u-&gt;v <u>using &lt;= m edges</u></li><li>guess: WLOG, guess last edge (x,v)</li><li>recurrence: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="4.014ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1774 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="20.606ex" height="2.965ex" role="img" focusable="false" viewbox="0 -1060.7 9107.8 1310.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1823,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msubsup" transform="translate(2212,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2045,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2545,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-138.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(5111.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(6112.1,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(6828.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(7217.1,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(7789.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(8233.8,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(8718.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> for x <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V)<ul><li>base case: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.576ex;" xmlns="http://www.w3.org/2000/svg" width="3.055ex" height="2.463ex" role="img" focusable="false" viewbox="0 -833.9 1350.4 1088.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = 0 if u =v; <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 1000 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"/></g></g></g></svg></mjx-container> otherwise</li></ul></li><li>acyclic (tological order): for m = 0, 1, …, n-1: for u and v in V:</li><li>original problem: if no negative cycles, then <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.162ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2723.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1405,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1849.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2334.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="5.613ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 2481.1 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1767,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="3.569ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1577.4 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = … (In the worst case, traverse through all vertices without revisiting any vertex)</li></ol><p>Analysis</p><ul><li>relaxation step is: if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="15.088ex" height="1.927ex" role="img" focusable="false" viewbox="0 -694 6668.8 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g><g data-mml-node="mo" transform="translate(1628.2,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"/></g><g data-mml-node="msub" transform="translate(2684,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(4318.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(5318.3,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> then <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="15.088ex" height="1.927ex" role="img" focusable="false" viewbox="0 -694 6668.8 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g><g data-mml-node="mo" transform="translate(1628.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2684,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(4318.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msub" transform="translate(5318.3,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container></li><li>Complexity: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.076ex" height="2.47ex" role="img" focusable="false" viewbox="0 -841.7 10199.7 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2416.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3028.1,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(3750.3,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(4513.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4902.3,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(5671.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6338.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(7393.9,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(8156.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(8545.9,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g></g><g data-mml-node="mo" transform="translate(9810.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, no better than general Bellman-Ford</li><li>relaxation step can be: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="4.014ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1774 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.997ex" height="2.965ex" role="img" focusable="false" viewbox="0 -1060.7 8396.6 1310.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1823,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msubsup" transform="translate(2212,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1267,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(1767,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(2267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-138.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g></g></g><g data-mml-node="mo" transform="translate(4915.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msubsup" transform="translate(5915.5,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1267,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(1767,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mo" transform="translate(2267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container>for x <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V) with overall running time of <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="8.942ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 3952.6 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mi" transform="translate(2188.6,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(2486.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(2963.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3563.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> time</li></ul><h3><span id="matrix-multiplication">Matrix multiplication</span><a href="#matrix-multiplication" class="header-anchor">¶</a></h3><ol><li>standard matrix multiplication computes <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.287ex" height="1.805ex" role="img" focusable="false" viewbox="0 -716 4547 798"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2093.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"/></g><g data-mml-node="mo" transform="translate(3065.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(3788,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g></g></g></svg></mjx-container>, both n*n matrices. <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="16.649ex" height="2.563ex" role="img" focusable="false" viewbox="0 -789.6 7358.7 1132.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g><g data-mml-node="mo" transform="translate(1329.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="munderover" transform="translate(2384.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,477.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(521,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1299,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="msub" transform="translate(4962.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="TeXAtom" transform="translate(562,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g><g data-mml-node="msub" transform="translate(6186.9,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"/></g><g data-mml-node="TeXAtom" transform="translate(462,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></svg></mjx-container></li><li>The fast running time is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.476ex" height="2.468ex" role="img" focusable="false" viewbox="0 -841 4188.3 1091"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"/><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(778,0)"/><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278,0)"/><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1778,0)"/><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(2278,0)"/></g></g></g><g data-mml-node="mo" transform="translate(3799.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> comparing to standard algorithm being <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="5.832ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 2577.6 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mn" transform="translate(633,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2188.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li><li>connection to shortest paths:<ul><li>define <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.507ex" role="img" focusable="false" viewbox="0 -583 778 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2295" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z"/></g></g></g></svg></mjx-container> = min, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.507ex" role="img" focusable="false" viewbox="0 -583 778 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2299" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM682 250Q682 322 649 387T546 497T381 542Q272 542 184 459T95 250Q95 132 178 45T389 -42Q515 -42 598 45T682 250ZM311 250Q311 285 332 304T375 328Q376 328 382 328T392 329Q424 326 445 305T466 250Q466 217 445 195T389 172Q354 172 333 195T311 250Z"/></g></g></g></svg></mjx-container> = +, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.991ex;" xmlns="http://www.w3.org/2000/svg" width="11.741ex" height="3.391ex" role="img" focusable="false" viewbox="0 -1060.7 5189.5 1498.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="TeXAtom" transform="translate(861,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mo" transform="translate(2359.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msubsup" transform="translate(3415.5,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="TeXAtom" transform="translate(553,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(553,-293.8) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.247ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5855.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mo" transform="translate(1325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2381.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2770.6,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(3486.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3875.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4220.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4665.2,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g><g data-mml-node="mo" transform="translate(5077.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5466.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, V = {1,2, …, n}</li><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="31.85ex" height="2.209ex" role="img" focusable="false" viewbox="0 -893.3 14077.8 976.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="TeXAtom" transform="translate(861,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mo" transform="translate(2359.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(3415.5,0)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="TeXAtom" transform="translate(861,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(2045,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2545,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g><g data-mml-node="mo" transform="translate(6623.4,0)"><path data-c="2299" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM682 250Q682 322 649 387T546 497T381 542Q272 542 184 459T95 250Q95 132 178 45T389 -42Q515 -42 598 45T682 250ZM311 250Q311 285 332 304T375 328Q376 328 382 328T392 329Q424 326 445 305T466 250Q466 217 445 195T389 172Q354 172 333 195T311 250Z"/></g><g data-mml-node="mi" transform="translate(7623.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mo" transform="translate(8949.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msup" transform="translate(10005.2,0)"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="TeXAtom" transform="translate(1136.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(433,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(778,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1229,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(1662,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1960,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mo" transform="translate(2426,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2815,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(3693,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></g></svg></mjx-container></li><li>computation: semiring is * and +</li><li><u>complication</u>: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.71ex" height="2.021ex" role="img" focusable="false" viewbox="0 -893.3 2082 893.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="TeXAtom" transform="translate(861,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1267,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></g></g></svg></mjx-container> is circle-multiplication of W with itself m times</li><li>complexity:  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.076ex" height="2.47ex" role="img" focusable="false" viewbox="0 -841.7 10199.7 1091.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2416.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3028.1,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(3750.3,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(4513.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4902.3,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(5671.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(6338.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(7393.9,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(8156.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(8545.9,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"/></g></g><g data-mml-node="mo" transform="translate(9810.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li></ul></li><li>optimize matrix multiplication: repeated squaring<ul><li>( ( <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.484ex" height="1.937ex" role="img" focusable="false" viewbox="0 -833.9 1539.8 855.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="mn" transform="translate(1136.2,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g></g></g></svg></mjx-container> )^2 )^(2…) = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.688ex" height="1.937ex" role="img" focusable="false" viewbox="0 -833.9 2514.1 855.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"/></g><g data-mml-node="TeXAtom" transform="translate(1136.2,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(600,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1378,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g></g></g></svg></mjx-container>, mutliplied by <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="3.519ex" height="1.932ex" role="img" focusable="false" viewbox="0 -853.7 1555.3 853.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(298,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(775,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></g></svg></mjx-container> times</li><li>assume no negtive cycles, complexity is <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="9.841ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 4349.9 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mi" transform="translate(2416.9,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(2714.9,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(3191.9,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3960.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, better than general Bellman-Ford</li></ul></li><li>transitive closure: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.666ex;" xmlns="http://www.w3.org/2000/svg" width="2.216ex" height="2.082ex" role="img" focusable="false" viewbox="0 -626 979.3 920.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="TeXAtom" transform="translate(394,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D457" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"/></g></g></g></g></g></svg></mjx-container> = 1 if <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.258ex" height="1.57ex" role="img" focusable="false" viewbox="0 -694 556 694"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="2203" d="M56 661T56 674T70 694H487Q497 686 500 679V15Q497 10 487 1L279 0H70Q56 7 56 20T70 40H460V327H84Q70 334 70 347T84 367H460V654H70Q56 661 56 674Z"/></g></g></g></svg></mjx-container> path i-&gt;j; 0 otherwise.<ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.507ex" role="img" focusable="false" viewbox="0 -583 778 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2295" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM364 542Q308 539 251 509T148 418T96 278V270H369V542H364ZM681 278Q675 338 650 386T592 462T522 509T458 535T412 542H409V270H681V278ZM96 222Q104 150 139 95T219 12T302 -29T366 -42H369V230H96V222ZM681 222V230H409V-42H412Q429 -42 456 -36T521 -10T590 37T649 113T681 222Z"/></g></g></g></svg></mjx-container> = OR, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.188ex;" xmlns="http://www.w3.org/2000/svg" width="1.76ex" height="1.507ex" role="img" focusable="false" viewbox="0 -583 778 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2299" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM682 250Q682 322 649 387T546 497T381 542Q272 542 184 459T95 250Q95 132 178 45T389 -42Q515 -42 598 45T682 250ZM311 250Q311 285 332 304T375 328Q376 328 382 328T392 329Q424 326 445 305T466 250Q466 217 445 195T389 172Q354 172 333 195T311 250Z"/></g></g></g></svg></mjx-container> = AND</li><li>for dense graph <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.348ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 2805.9 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2416.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> is best</li></ul></li></ol><h3><span id="dp2-floyd-warshall-algorithm">DP2, Floyd-Warshall algorithm</span><a href="#dp2-floyd-warshall-algorithm" class="header-anchor">¶</a></h3><ol><li>subproblems: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="3.246ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1434.5 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(910,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = weight of shortest path u-&gt;v whose <u>intermediate vertices</u> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> {1, 2, …k}. F-W insight on 70s</li><li>guess: is k <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> the path</li><li>recurrence: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="3.246ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1434.5 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(910,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.735ex;" xmlns="http://www.w3.org/2000/svg" width="25.527ex" height="3.135ex" role="img" focusable="false" viewbox="0 -1060.7 11282.8 1385.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1223,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1823,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msubsup" transform="translate(2212,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(910,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1688,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2188,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g><g data-mml-node="mo" transform="translate(4550.2,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msubsup" transform="translate(4994.9,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(910,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1688,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2188,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g><g data-mml-node="mo" transform="translate(7555.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msubsup" transform="translate(8555.5,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mo" transform="translate(910,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1688,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(2188,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-317.1) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="mi" transform="translate(521,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g><g data-mml-node="mo" transform="translate(10893.8,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container><ul><li>base case: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.576ex;" xmlns="http://www.w3.org/2000/svg" width="12.653ex" height="2.463ex" role="img" focusable="false" viewbox="0 -833.9 5592.6 1088.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g><g data-mml-node="mo" transform="translate(1541.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(2597,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(3313,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(3702,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4274,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(4718.6,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(5203.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, not to use any intermediate vertices</li></ul></li><li>acyclic: for k: for u and v in V:</li><li>original problem: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.162ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2723.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1405,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1849.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2334.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> = <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="3.372ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1490.4 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container> . Negative weight cycle is negative <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.334ex;" xmlns="http://www.w3.org/2000/svg" width="3.372ex" height="2.733ex" role="img" focusable="false" viewbox="0 -1060.7 1490.4 1208.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="TeXAtom" transform="translate(466,530.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(989,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g><g data-mml-node="TeXAtom" transform="translate(466,-139.6) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(572,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g></g></g></g></g></svg></mjx-container></li></ol><p>Analysis</p><ul><li>complexity: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.348ex" height="2.451ex" role="img" focusable="false" viewbox="0 -833.2 2805.9 1083.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(1152,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"/></g></g><g data-mml-node="mo" transform="translate(2416.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container>, compared to DP1the guessing time is constant and same # of subproblems.</li></ul><h3><span id="johnson-s-algorithm">Johnson’s algorithm</span><a href="#johnson-s-algorithm" class="header-anchor">¶</a></h3><ol><li>idea: change weights on edges so no negative weights exist, then run Dijkstra on it. Translate to old weights and get the result.</li><li>steps<ul><li>find h: V -&gt; R such that <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="35.879ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 15858.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="mo" transform="translate(1206.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1595.3,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2167.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2612,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(3097,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3763.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(4819.5,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(5535.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5924.5,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6496.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(6941.2,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(7426.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(8037.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(9037.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(9613.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(10002.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10574.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(11185.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(12186.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(12762.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(13151.1,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(13636.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(14302.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mn" transform="translate(15358.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"/></g></g></g></svg></mjx-container> for all u,v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V.</li><li>Run Dijkstra on (V, E, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.729ex" height="1.359ex" role="img" focusable="false" viewbox="0 -443 1206.3 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g></g></g></svg></mjx-container>) from s <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V =&gt; get <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.271ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3214 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="mo" transform="translate(934.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1323.3,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1895.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2340,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2825,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> for all u,v <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="1.509ex" height="1.312ex" role="img" focusable="false" viewbox="0 -540 667 580"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"/></g></g></g></svg></mjx-container> V</li><li>Compute <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="6.162ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 2723.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1405,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1849.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2334.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> by <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="7.271ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3214 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="mo" transform="translate(934.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1323.3,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1895.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(2340,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2825,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li></ul></li><li>Proof of correctness: the shortest path is preserved but offset.</li><li>Analysis: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="58.496ex" height="2.452ex" role="img" focusable="false" viewbox="0 -833.9 25855.3 1083.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(763,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(1921,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(2907.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(3907.4,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(4671.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5282.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(6282.9,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(7045.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(7434.9,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(8203.9,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(9190.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msup" transform="translate(10190.3,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(11455.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(11753.2,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(12230.2,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(12999.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(13610.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(14610.6,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(15373.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(15762.6,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(17027.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(17694.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(18750,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mo" transform="translate(19513,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(19902,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mi" transform="translate(20671,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mo" transform="translate(21657.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msup" transform="translate(22657.5,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mn" transform="translate(861.3,363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mi" transform="translate(23922.3,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(24220.3,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"/></g><g data-mml-node="mi" transform="translate(24697.3,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(25466.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li></ol><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.111ex" height="1.645ex" role="img" focusable="false" viewbox="0 -705 3143.3 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1058,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1587,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1932,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2810,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(1058,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(1587,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(1932,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(2810,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"/></g></g></g></g></svg></mjx-container>  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="30.5ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 13481.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mo" transform="translate(444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(833,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(1405,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(1849.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(2334.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(3001.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(4057.2,0)"><g data-mml-node="mi"><path data-c="1D6FF" d="M195 609Q195 656 227 686T302 717Q319 716 351 709T407 697T433 690Q451 682 451 662Q451 644 438 628T403 612Q382 612 348 641T288 671T249 657T235 628Q235 584 334 463Q401 379 401 292Q401 169 340 80T205 -10H198Q127 -10 83 36T36 153Q36 286 151 382Q191 413 252 434Q252 435 245 449T230 481T214 521T201 566T195 609ZM112 130Q112 83 136 55T204 27Q233 27 256 51T291 111T309 178T316 232Q316 267 309 298T295 344T269 400L259 396Q215 381 183 342T137 256T118 179T112 130Z"/></g><g data-mml-node="mi" transform="translate(477,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="mo" transform="translate(4991.5,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(5380.5,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(5952.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(6397.2,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(6882.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(7493.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(8493.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(9069.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(9458.6,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10030.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(10641.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(11642.1,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(12218.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(12607.1,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(13092.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><p><em>Proof.</em> For any u-&gt;v path p in the graph G, say p is v0 -&gt; v1 -&gt; … -&gt;vk, where v0 = u and vk = v.</p><ul><li><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.777ex;" xmlns="http://www.w3.org/2000/svg" width="23.909ex" height="2.966ex" role="img" focusable="false" viewbox="0 -967.8 10567.7 1311.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1206.3,0)"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">§</text></g></g><g data-mml-node="mo" transform="translate(2084.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="munderover" transform="translate(3139.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"/></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="msub" transform="translate(5593.2,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g></g><g data-mml-node="mo" transform="translate(6799.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(7188.4,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="TeXAtom" transform="translate(518,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g></g></g><g data-mml-node="mo" transform="translate(8904.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(9348.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mi" transform="translate(9833.7,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(10178.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></li><li>Hence …</li></ul></blockquote><p>Problem: How to find the weight function h?</p><ul><li>triangle inequality: <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="21.078ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 9316.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(576,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(965,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(1450,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(2061.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(3061.4,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mo" transform="translate(3637.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(4026.4,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(4598.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(5265.2,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"/></g><g data-mml-node="mi" transform="translate(6321,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"/></g><g data-mml-node="mo" transform="translate(7037,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(7426,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(7998,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="mi" transform="translate(8442.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"/></g><g data-mml-node="mo" transform="translate(8927.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container> for all (u, v) in V, called <strong>a system of difference constraints</strong></li><li>application: can think as an event v is happening before event u with constraint w</li></ul><blockquote class="colorquote grey"><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.234ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 4081.3 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> <strong><em>1</em>.</strong> If (V, E, w) has a negative-weight cycle, there exists no solutioon to the above system of difference constraints.</p><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="9.234ex" height="1.595ex" role="img" focusable="false" viewbox="0 -694 4081.3 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mpadded"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g><g data-mml-node="mspace"/><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(55.3,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g><g data-mml-node="mi" transform="translate(704,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"/></g><g data-mml-node="mi" transform="translate(1280,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(1746,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"/></g><g data-mml-node="mi" transform="translate(2231,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(2682,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(3148,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g></g></g></g></svg></mjx-container> <strong><em>2</em>.</strong> If (V, E, w) has no negative-weight cycle, then we can find a solution to the difference constraints.</p></blockquote><h2><span id="olc">OLC</span><a href="#olc" class="header-anchor">¶</a></h2><ol><li><p>Bottom-up starts with the smallest subproblems first and build up to larger subproblems. Top-down starts with the original problem and breaks it down into smaller subproblems.</p></li><li><p>Bottom up via relaxation means solve subproblems by relaxing edges.</p></li><li><p>DP guess is linear.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.046 augmentation</title>
      <link href="/sg/2023/01/20/6.046_augmentation/"/>
      <url>/sg/2023/01/20/6.046_augmentation/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#easy-tree-augmentation">Easy tree augmentation</a></li><li><a href="#order-statistics-trees">Order-statistics trees</a></li><li><a href="#finger-search-trees">Finger search trees</a><ul><li><a href="#level-linking">Level linking</a></li><li><a href="#search-x-from-y">Search (x from y)</a></li><li><a href="#data-in-the-leaves">Data in the leaves</a></li></ul></li><li><a href="#range-trees">Range trees</a><ul><li><a href="#1-d">1-D</a></li><li><a href="#orthogonal-range-searching">Orthogonal range searching</a></li></ul></li></ul><!-- tocstop --></div><p>The main idea of augmentation is to modify existent (off-the-shelf) data structures to store additional information.</p><h2><span id="easy-tree-augmentation">Easy tree augmentation</span><a href="#easy-tree-augmentation" class="header-anchor">¶</a></h2><p>Goal: store x.f (subtree rooted at x) at each node x</p><p>Theorem: Suppose x.f  can be computed (updated) in O(1) time from x,  children and children.f.  Then, modification a set S  of nodes costs O(# of ancestors of S) to update x.f.</p><ol><li>updating x means to walk up the tree to the root</li><li>Doing a logn rotation spreading out will likely cost O(log^2(n)) time. Because the sum of ancestors may be O(log^2(n)), whereas a single path in easy trees taking O(logn) time as AVL tree and B 2-3 tree.</li></ol><h2><span id="order-statistics-trees">Order-statistics trees</span><a href="#order-statistics-trees" class="header-anchor">¶</a></h2><p>Goal: design an ADT interface that supports insert(x), delete(x), successor(x), rank(x), select(i)</p><p>Rank(x): find x in sorted order</p><p>Select(i): find the element of ith rank</p><p>Idea: rank(x) = # elements of all that is less than x + 1. Walk up the tree to the root and recursively calcutate x’.left.size + 1(depending on the initial index) where x’ is less than x.</p><p>Select(i) takes advantage of special case of rank(x) to avoid recursive calls. The rank of root x is equal to x.left.size + 1. Then just walk down the tree and search ith element.</p><p>Problem: why not store ranks or depths (count down from the root) of nodes into the tree?</p><p>Shortcomings: Inserting (-inf) or the elements with decreasing order to the tree will cost linear time to update the augmented information. The rank of every element goes down by one. Meanwhile, the depths of nodes are hard to maintain due to rotations affecting most nodes. Height(x) is not affected by that because the distance from root to x is not changed.</p><ul><li><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4199697.png" class title="Screenshot-4199697"></li></ul><h2><span id="finger-search-trees">Finger search trees</span><a href="#finger-search-trees" class="header-anchor">¶</a></h2><p>More sophisticated operations are involved.</p><p>Idea 0: Level-linked 2-3 trees.</p><h3><span id="level-linking">Level linking</span><a href="#level-linking" class="header-anchor">¶</a></h3><p>store Left -&gt; Right &amp; Right -&gt; Left pointers for each nodes. =&gt; Easy to maintain in constant time</p><ul><li><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4201292.png" class title="Screenshot-4201292"></li></ul><p>Finger search property: expect searching x nearby y after searching y to run fast. =&gt; constant time + worst search time O(logn)</p><h3><span id="search-x-from-y">Search (x from y)</span><a href="#search-x-from-y" class="header-anchor">¶</a></h3><p>problem 1: how far it achieves?</p><ol><li>idea 1: log difference of ranks, O(log|rank(y) - rank(x)|= <strong>O(log(k))</strong></li><li>distance from x and y, varying in different data structures where b tree has level length and bst does not.</li></ol><p>Problem 2:</p><p>in 2-3 tree, x is y’s predecessor with constant rank difference and logn height, thereby it’s incorrect to use log difference of ranks of nodes.</p><ul><li><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4202057.png" class title="Screenshot-4202057"></li></ul><h3><span id="data-in-the-leaves">Data in the leaves</span><a href="#data-in-the-leaves" class="header-anchor">¶</a></h3><p>Idea 2: store data in leaves.</p><p>b tree, bst tree: put one key in one spot</p><p>b+ tree: put keys only in leaves. Most info is originally stored in leaves by space. Others else are the same as b tree.</p><ul><li><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4202657.png" class title="Screenshot-4202657"></li><li><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4202717.png" class title="Screenshot-4202717"></li></ul><p>Search: augment to store min &amp; max of subtrees</p><p>Insert: split and merge</p><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4203211.png" class title="Screenshot-4203211"><p>Initialize v to the leaf node containing y (given), then while: xxxxxx</p><p>example: <a href="https://www.youtube.com/watch?v=xVka6z1hu-I&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=13">51:00</a></p><h2><span id="range-trees">Range trees</span><a href="#range-trees" class="header-anchor">¶</a></h2><p>Goal: prepocess n points in d-D dimension to support query:</p><p>given box, find 1) # points in the box,</p><p>and 2) k points in the box -&gt; theta(k) for output</p><p>=&gt; O(log^d(n) + |output|)</p><h3><span id="1-d">1-D</span><a href="#1-d" class="header-anchor">¶</a></h3><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4207235.png" class title="Screenshot-4207235"><p>sorted array: O(logn + k)</p><p>(not balanced) BST: O(logn + klogn)</p><p>level-linked b tree: O(logn + k)</p><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4207161.png" class title="Screenshot-4207161"><p>1-D range tree: perfectly balanced BST (AVL) =&gt; O(logn + k)</p><p>Range-query(a, b): find the least common ancestor (LCA) of a and b and return the nodes and the root nodes of subtrees “in between”</p><ul><li><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4208177.png" class title="Screenshot-4208177"></li></ul><p>Notes:</p><ul><li>node and subtree of that node</li><li>left parent, right parent</li></ul><h3><span id="orthogonal-range-searching">Orthogonal range searching</span><a href="#orthogonal-range-searching" class="header-anchor">¶</a></h3><p>2-D case: Fixed y, project (x, y) to the x axis as range tree. Then the problem becomes range-search(a, b) in 1-D range tree just like before, thereby doing another 1-D range tree searching on those points projecting to the y-axis to solve it. d-D case can be done by nested searching in the same manner.</p><p>space complexity: each key k lives in O(logn) rooted subtrees which are all the ancestors of k.</p><ul><li>It means total space is O(nlogn). In d dimensions, O(nlg^(d−1)n).</li><li><img src="/sg/2023/01/20/6.046_augmentation/Screenshot-4209577.png" class title="Screenshot-4209577"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Tour of NVMe</title>
      <link href="/sg/2023/01/14/qemu_nvme/"/>
      <url>/sg/2023/01/14/qemu_nvme/</url>
      
        <content type="html"><![CDATA[<p>Content: NVMe Specification (Section 2-2.2.1 [p15-p19] + Section 3.3.1 [p79-p83]), NVMe-tutorial (slides 1-11)</p><p>Recently, I’ve been working on making the metadata for QEMU NVMe ZNS emulation persistent across QEMU restarts. The state of namespace zones does not persist and will reverse to the empty state once QEMU is restarted. With the support of the mentors in QEMU community through weekly discussions, my searching graph for this task is as follows:</p><ol><li><p>What is this task and why? I’ve read a little related work about NVMe emulation metadata: 1) Dmitry Fomichev<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> , use another file to store metadata for NVMe ZNS emulation. If the file is not specified, then the metadata is not persistent as before; 2)  Klaus Jensen<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, the metadata for NVMe emulation is stored at the end of the namespace backing block device.</p><p>(I didn’t quite understand NVMe-specific things mentioned in the source code back then)</p><p>-&gt; read about NVMe ZNS spec, NVMe spec, slides, tutorials</p></li><li><p>How to design?  Two ways: 1) extensible design: use feature bits, which can represent different zone descriptors or APIs, 2) use different sets of interfaces. The things I was not clear were the aim for an interface. Now I think it means to unify interfaces for necessary cases. Regarding to zoned storage emulation, there are three cases supposed to take in considerations, zoned emulation, full emulation and NVMe ZNS emulation. Think about the design semantically and have a thorough plan through discussion before implementing anything. As it goes further, designing skeleton must be based on the implementations in source code. It reminds me of the idea Damien talked about for zone append command of zoned format driver. Different from the way in file-posix driver where append write command emulates through regular write and wp array model, a new approach could be something similar to <code>file append</code>. The old way still works but a new method can bring more insights.</p><p>? <u>However, I didn’t think through the relation between file append and zone append write…</u></p></li><li><p>What NVMe ZNS emulation in QEMU can emulate and how much of that is doable with the new zoned.c block driver? This question was brought out in the first week of metadata design discussion by Stefan. I was unable to answer it until further looking into spec and source code.</p><p>-&gt; Existing NVMe ZNS metadata support</p><p>-&gt; How to make file-posix and zoned format driver as underlying storage of NVMe ZNS devices?</p><p>-&gt; Consider supporting persistent metadata for one zoned namespace before enabling multiple zoned namespaces.</p></li><li><p>Very naive design of the task. Checks and new problems.</p><p>Store the metadata (write pointers and configurations) at the end of the zoned namespace.</p><p>-&gt; Where to put the metadata inside the disk? I am not favored to use another file to store metadata for each namespace. Could it lead to one namespace with one file or N namespaces with one file?</p></li><li><p>Review for debugging zoned emulation. New tests. Think back to the command line for zoned emulation with considerations of real applications use QEMU. (Going back to the starting point)</p></li><li><p>Stuck at the 4th step. What’s the next step to implement? Found the gap…</p></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://lists.nongnu.org/archive/html/qemu-block/2020-06/msg00738.html">https://lists.nongnu.org/archive/html/qemu-block/2020-06/msg00738.html</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://gitlab.eduxiji.net/duskmoon314/qemu/-/commit/bc3a65e99254cfe001bd16a569a5aa7d20f930e8">https://gitlab.eduxiji.net/duskmoon314/qemu/-/commit/bc3a65e99254cfe001bd16a569a5aa7d20f930e8</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结</title>
      <link href="/sg/2022/12/31/2022/"/>
      <url>/sg/2022/12/31/2022/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#li-ming-qian-de-chang-pian-xu-mu">黎明前的长篇序幕</a><ul><li><a href="#man-yi-pai-de-ren-sheng-jie-zou">慢一拍的人生节奏</a></li><li><a href="#kai-yuan-chu-tan">开源初探</a></li><li><a href="#sheng-huo-zhu-jiao">生活注脚</a><ul><li><a href="#sai-er-da-chuan-shuo">塞尔达传说</a></li><li><a href="#huo-yan-wen-zhang">火焰纹章</a></li><li><a href="#ji-le-di-si-ke">极乐迪斯科</a></li><li><a href="#wen-ming-6">文明6</a></li><li><a href="#chen-si-lu-ao-le-liu">沉思录（奥勒留)</a></li><li><a href="#an-duo-andor">安多 Andor</a></li><li><a href="#wo-de-di-gu">我的低谷</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="li-ming-qian-de-chang-pian-xu-mu">黎明前的长篇序幕</span><a href="#li-ming-qian-de-chang-pian-xu-mu" class="header-anchor">¶</a></h1><p>今年从各种角度来说都和往年不一样了，而那个转折点正如预期般是暑期的开源实习。我仍然处在另一种困顿中，但如愿的有了一个新起点，可以重新审视和改变当前生活的位置。三个月的实习给了我第一次开始独立生活的支点，从6月开始到现在。我妈也变得能理解我和身边同学的不同选择，意外地支持我的决定，或许是知道她们已经无法改变我的选择了。</p><p>拖住我脚步的一直都是以学校为代表的旧体制，这四年来我的精力和生活质量与平时生科课程的浓度成反比。在我不以为意时学校总能给我以重击。上半年我晃晃荡荡地在摆着生锈仪器的实验室里把时间切成碎片，下半年我乘车或地铁往返于学校与出租屋间只为混个全勤。生活水平的提高没能让我免于封城和防控，我所追求的目标在学院的老师前似乎只是天方夜谭镜花水月。然后我再一次意识到在所谓公平的规则面前没有合理性及不容置喙。如果前一年的我面对这学期同样的课程，尚未理解工程项目复杂度的我更可能会在泥潭里越陷越深。</p><p>我认为探索生活的边界比平稳宁静的生活更重要，所以在暑期实习结束后我就买票返校并准备租房。防控政策的收紧正是在我再踏入这方城市感受到的，下了车站后的身份登记，三天两检，和校门口保安坚持查码。在有次踩着拖鞋去南门外买吃的结果回来被拦住由于没有24h核酸后，我决定第二日就搬到新住处结果那天竟是封城的开始。封城的这两周或许对比上海或乌鲁木齐不算长，但也足够让我看到很多。在搬家当天乘车路上看到来往行人提着沉甸甸的东西匆匆忙忙地拥挤在道路一旁，在短暂的放风途中看到紧闭着门的空空荡荡的街道，盒马越来越紧张的运力，排着长队做核酸的核酸检测处。</p><h2><span id="man-yi-pai-de-ren-sheng-jie-zou">慢一拍的人生节奏</span><a href="#man-yi-pai-de-ren-sheng-jie-zou" class="header-anchor">¶</a></h2><p>从今年6月开始就听说我们这届在互联网寒冬下首当其冲，不少人早早地从提前批开始面。提前批的时间也越来越早，今年从6月份就开始了。我往年本打算从9月开始面试，但现实是这一年我仍旧没开始写课程项目，简历上乏善可陈。同时，外企大厂纷纷缩减 hc 和大环境普遍的裁员及经济萧条，再加上国内也没有多少和存储相关的岗位，我越来越厌烦找工作和前期拟合准备。对比起来，ng 直接找国外工作的难度几乎和从国内找差不多了，因为都不怎么招人。那为什么不继续做想做的事？而如果想要在国际市场上有普遍的竞争力，我必须完成明年日本的至少两个月的实习或足够的课程项目。</p><h2><span id="kai-yuan-chu-tan">开源初探</span><a href="#kai-yuan-chu-tan" class="header-anchor">¶</a></h2><p>我仍然在继续完成暑期项目的相关任务，并有幸能继续得到社区的 mentor 的反馈和指导。明年去日本的实习在 Damien 的有力推动下也定了，能够继续我在社区做的事和玩一些新硬件。为了使之成行，体验了 hard 模式办护照，冷清期打第三针疫苗，申办银行卡，和准备签证材料。在只差签证时被学校临时的政策打乱只能被迫延期和缩短行程。</p><p>我生活的一点亮色就是参与开源社区了。非常感恩这途中遇到的朋友和各位 mentor，让我看到了开源项目的可能性和职业起点。我尤其感激社区的两位 mentor, Stefan Hajnoczi 和 Damine Le Moal，在职业方向选择和项目上给了我很多实用的建议和指导。Damien 是第一个知道我本科专业是生科仍然鼓励我继续追求自己理想职业方向的人，这让我第一次正视自己实现理想的可能性。</p><ul><li><img src="/sg/2022/12/31/2022/Screenshot-2505749.png" class title="fall"></li><li>Stefan 帮拍的照片 :)<img src="/sg/2022/12/31/2022/IMG_6326.JPG" class title="IMG_6326"></li></ul><h2><span id="sheng-huo-zhu-jiao">生活注脚</span><a href="#sheng-huo-zhu-jiao" class="header-anchor">¶</a></h2><p>比较放松的时候就是玩游戏和与朋友吃吃喝喝。比较难忘的时刻应该是上半年和朋友在操场的看台上被月光掩盖着喝酒。那会开源实习申请结果还未知，我对未来只有迷茫。尤其是面试那几天比较紧张，会约着她一起走一走。</p><img src="/sg/2022/12/31/2022/IMG_6454.jpeg" class title="IMG_6454"><p>在实习一周后出去吃饭。</p><img src="/sg/2022/12/31/2022/IMG_5906.jpeg" class title="IMG_5906"><p>我很喜欢观察咖啡与奶融合在一起的过程。</p><ul><li><img src="/sg/2022/12/31/2022/IMG_6496.jpeg" class title="IMG_6496"></li><li><img src="/sg/2022/12/31/2022/IMG_5643.jpeg" class title="IMG_5643"></li></ul><h3><span id="sai-er-da-chuan-shuo">塞尔达传说</span><a href="#sai-er-da-chuan-shuo" class="header-anchor">¶</a></h3><p>塞尔达传说怪没打多少，图大致跑了个遍。</p><img src="/sg/2022/12/31/2022/IMG_6176.PNG" class title="IMG_6176"><img src="/sg/2022/12/31/2022/IMG_0139.PNG" class title="IMG_0139"><img src="/sg/2022/12/31/2022/IMG_0137.PNG" class title="IMG_0137"><img src="/sg/2022/12/31/2022/IMG_0138.PNG" class title="IMG_0138"><img src="/sg/2022/12/31/2022/IMG_0135.PNG" class title="IMG_0135"><img src="/sg/2022/12/31/2022/IMG_0142.jpeg" class title="IMG_0142"><img src="/sg/2022/12/31/2022/IMG_0141.jpeg" class title="IMG_0141"><img src="/sg/2022/12/31/2022/IMG_0144.jpeg" class title="IMG_0144"><h3><span id="huo-yan-wen-zhang">火焰纹章</span><a href="#huo-yan-wen-zhang" class="header-anchor">¶</a></h3><p>红花线里王女总算能有个好的结局。游戏里支持以纹章为基础的等级划分和反对的分为两个阵营，支持纹章的为传统正义的一方。但走过教堂线后我才意识到这两方其实并没有什么区别，也无所谓正义。战争中受伤的永远会有平民，信念要看自己相信什么而不是相信大多数人相信的。</p><h3><span id="ji-le-di-si-ke">极乐迪斯科</span><a href="#ji-le-di-si-ke" class="header-anchor">¶</a></h3><img src="/sg/2022/12/31/2022/boat.png" class title="boat"><img src="/sg/2022/12/31/2022/disco.png" class title="disco"><h3><span id="wen-ming-6">文明6</span><a href="#wen-ming-6" class="header-anchor">¶</a></h3><p>去年和年初爱玩的游戏。</p><img src="/sg/2022/12/31/2022/civil.png" class title="civil"><h3><span id="chen-si-lu-ao-le-liu">沉思录（奥勒留)</span><a href="#chen-si-lu-ao-le-liu" class="header-anchor">¶</a></h3><p>书中很多处背后的逻辑都是万事万物自有其理性，在千万年以后都不存在或化成自然的一部分，情感的扰动莫过于此。</p><h3><span id="an-duo-andor">安多 Andor</span><a href="#an-duo-andor" class="header-anchor">¶</a></h3><p>很喜欢星战中的小人物在乱世浮沉中的飘零岁月。初时的安多虽然被帝国摧毁了家园和奴役了许多岁月，但一开始并未想反抗帝国统治。正义哪有能够吃饭睡觉重要？在抢劫了某个帝国的驻军后他打算用丰厚的佣金接上养母过随心所欲的生活，却在某次去商店购物时被风暴兵以他行迹鬼鬼祟祟和破坏帝国军抓捕犯人丢进了牢房。安多的争辩又成为帝国加重判刑的借口，从六个月的刑期改成了六年的劳动改造。</p><p>这段牢狱生活正是坚定安多反抗帝国统治信念的起点。是在压迫中送上帝国继续奴役人民的武器还是死于争取自由的途中？补了侠盗一号的故事后，安多的故事更显得悲怆。加入反叛军的五年后，他死于盗取死星地图的任务，和他的同伴们一起送上了战胜帝国的唯一可能性。他是看起来平淡却很真实的反抗者。从最开始守好自己家的一亩三分地到主动加入反叛军，再到五年后侠盗一号故事里的就义，他的态度转变着重刻画了在身处完全绝望无理性的社会环境里，在反抗是异类大多数人臣服于暴政时一个普通人的选择和舍弃。</p><p>Nemik:  “There will be times when the struggle seems impossible. I know this already. Alone, unsure, dwarfed by the scale of the enemy. Remember this. Freedom is a pure idea. It occurs spontaneously and without instruction. Random acts of insurrection are occurring constantly throughout the galaxy. There are whole armies, battalions that have no idea that they’ve already enlisted in the cause. Remember that the frontier of the Rebellion is everywhere. And even the smallest act of insurrection pushes our lines forward. And then remember this. The Imperial need for control is so desperate because it is so unnatural. Tyranny requires constant effort. It breaks, it leaks. Authority is brittle. Oppression is the mask of fear. And know this, the day will come when all these skirmishes and battles, these moments of defiance will have flooded the banks of the Empire’s authority and then there will be one too many. One single thing will break the siege. Remember this. Try.”</p><h3><span id="wo-de-di-gu">我的低谷</span><a href="#wo-de-di-gu" class="header-anchor">¶</a></h3><p>又是一段比较长的困顿期。在4月我在日记里描述是 “the lowest of the low&quot;，前路的迷茫和没有落点交织在一起。而到12月我又遇到了另一个低点。随之而来的是感冒，室友阳了，托福延期。回家之后就陷入了一种深深的无力感，开始质疑身边的事和自己，好像深陷在泥潭里。有一天下午突然决定出去走一走，两天内去重庆和西安晃悠了下。回来后的第二天又和几位 mentor 讨论了下拖延了快一个月的一个任务，终于有了点方向感。</p><p>找工作算是毕业前的主任务，但我目前的想法还是想先刷刷简历，在合适的时机寻找合适的机会。我更看重的还是把过程当作目标，而不仅仅结果才是值得享受的。虽然心理压力也一直很大，毕竟周围的人基本都有 offer 了，无论是出国，保研还是工作。但是我还是很难现在决定毕业后会做什么，也希望能够在5月前找到我的那条路。</p><p>在这段空白期又回顾了一遍星战和自己的失败人生。</p><img src="/sg/2022/12/31/2022/IMG_0192.jpeg" class title="IMG_0192"><img src="/sg/2022/12/31/2022/IMG_0249.jpeg" class title="IMG_0249"><img src="/sg/2022/12/31/2022/IMG_0229.jpeg" class title="IMG_0229"><p><u>2022 resolution</u></p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_0" checked="true" disabled="true"><label for="cbx_0"> start intern programs</label></li><li class="task-list-item"><input type="checkbox" id="cbx_1" checked="true" disabled="true"><label for="cbx_1"> explore open source world by participating in some communities</label></li><li class="task-list-item"><input type="checkbox" id="cbx_2" checked="true" disabled="true"><label for="cbx_2"> meet a few new friends on the way</label></li></ul><p>2023 resolution:</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" id="cbx_3" disabled="true"><label for="cbx_3"> <s>finish WD internship (2 or 3 months)</s>, cancelled</label></li><li class="task-list-item"><input type="checkbox" id="cbx_4" checked="true" disabled="true"><label for="cbx_4"> find a suitable job related to storages <s>in half a year (before graduation)</s>, after graduation</label></li><li class="task-list-item"><input type="checkbox" id="cbx_5" disabled="true"><label for="cbx_5"> <s>travel in different cities: HK,  Japan, Thailand…</s>, Non of them was visited</label></li><li class="task-list-item"><input type="checkbox" id="cbx_6" disabled="true"><label for="cbx_6"> <s>learn a new language at least in the medium level (choosing from Japanese, Germany)</s>, not happening</label></li></ul>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to Zoned Storage Emulation</title>
      <link href="/sg/2022/11/17/qemu_zbd/"/>
      <url>/sg/2022/11/17/qemu_zbd/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#zoned-block-devices">Zoned block devices</a></li><li><a href="#zoned-emulation">Zoned emulation</a></li><li><a href="#starting-the-journey-with-open-source">Starting the journey with open source</a></li><li><a href="#conclusion">Conclusion</a></li></ul><!-- tocstop --></div><p>Originally written at: <a href="https://www.qemu.org/2022/11/17/zoned-emulation/">https://www.qemu.org/2022/11/17/zoned-emulation/</a></p><p>This summer I worked on adding Zoned Block Device (ZBD) support to virtio-blk as part of the <a href="https://www.outreachy.org/">Outreachy</a> internship program. QEMU hasn’t directly supported ZBDs before so this article explains how they work and why QEMU needed to be extended.</p><h2><span id="zoned-block-devices">Zoned block devices</span><a href="#zoned-block-devices" class="header-anchor">¶</a></h2><p>Zoned block devices (ZBDs) are divided into regions called zones that can only be written sequentially. By only allowing sequential writes, SSD write amplification can be reduced by eliminating the need for a <a href="https://en.wikipedia.org/wiki/Flash_translation_layer">Flash Translation Layer</a>, and potentially lead to higher throughput and increased capacity. Providing a new storage software stack, zoned storage concepts are standardized as <a href="https://zonedstorage.io/docs/introduction/smr#governing-standards">ZBC (SCSI standard), ZAC (ATA standard)</a>, and <a href="https://zonedstorage.io/docs/introduction/zns">ZNS (NVMe)</a>. Meanwhile, the virtio protocol for block devices (virtio-blk) should also be aware of ZBDs instead of taking them as regular block devices. It should be able to pass such devices through to the guest. An overview of necessary work is as follows:</p><ol><li>Virtio protocol: <a href="https://lwn.net/Articles/914377/">extend virtio-blk protocol with main zoned storage concept</a>, Dmitry Fomichev</li><li>Linux: <a href="https://www.spinics.net/lists/linux-block/msg91944.html">implement the virtio specification extensions</a>, Dmitry Fomichev</li><li>QEMU: <a href="https://lists.gnu.org/archive/html/qemu-devel/2022-10/msg05195.html">add zoned storage APIs to the block layer</a>, Sam Li</li><li>QEMU: implement zoned storage support in virtio-blk emulation, Sam Li</li></ol><p>Once the QEMU and Linux patches have been merged it will be possible to expose a virtio-blk ZBD to the guest like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-blockdev node-name=drive0,driver=zoned_host_device,filename=/path/to/zbd,cache.direct=on \</span><br><span class="line">-device virtio-blk-pci,drive=drive0 \</span><br></pre></td></tr></table></figure><p>And then we can perform zoned block commands on that device in the guest os.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># blkzone report /dev/vda</span><br><span class="line">start: 0x000000000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x000020000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x000040000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x000060000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x000080000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x0000a0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x0000c0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x0000e0000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 0(nw) [type: 1(CONVENTIONAL)]</span><br><span class="line">start: 0x000100000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]</span><br><span class="line">start: 0x000120000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]</span><br><span class="line">start: 0x000140000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]</span><br><span class="line">start: 0x000160000, len 0x020000, cap 0x020000, wptr 0x000000 reset:0 non-seq:0, zcond: 1(em) [type: 2(SEQ_WRITE_REQUIRED)]</span><br></pre></td></tr></table></figure><h2><span id="zoned-emulation">Zoned emulation</span><a href="#zoned-emulation" class="header-anchor">¶</a></h2><p>Currently, QEMU can support zoned devices by virtio-scsi or PCI device passthrough. It needs to specify the device type it is talking to. Whereas storage controller emulation uses block layer APIs instead of directly accessing disk images. Extending virtio-blk emulation avoids code duplication and simplify the support by hiding the device types under a unified zoned storage interface, simplifying VM deployment for different types of zoned devices. Virtio-blk can also be implemented in hardware. If those devices wish to follow the zoned storage model then the virtio-blk specification needs to natively support zoned storage. With such support, individual NVMe namespaces or anything that is a zoned Linux block device can be exposed to the guest without passing through a full device.</p><p>For zoned storage emulation, zoned storage APIs support three zoned models (conventional, host-managed, host-aware) , four zone management commands (Report Zone, Open Zone, Close Zone, Finish Zone), and Append Zone. The QEMU block layer has a BlockDriverState graph that propagates device information inside block layer. The file-posix driver is the lowest level within the graph where zoned storage APIs reside.</p><p>After receiving the block driver states, Virtio-blk emulation recognizes zoned devices and sends the zoned feature bit to guest. Then the guest can see the zoned device in the host. When the guest executes zoned operations, virtio-blk driver issues corresponding requests that will be captured by viritio-blk device inside QEMU. Afterwards, virtio-blk device sends the requests to the file-posix driver which will perform zoned operations using Linux ioctls.</p><p>Unlike zone management operations, Linux doesn’t have a user API to issue zone append requests to zoned devices from user space. With the help of write pointer emulation tracking locations of write pointer of each zone, QEMU block layer can perform append writes by modifying regular writes. Write pointer locks guarantee the execution of requests. Upon failure it must not update the write pointer location which is only got updated when the request is successfully finished.</p><p>Problems can always be solved with right mind and right tools. A good approach to avoid pitfalls of programs is test-driven. In the beginning, users like qemu-io commands utility can invoke new block layer APIs. Moving towards to guest, existing tools like blktests, zonefs-tools, and fio are introduced for broader testing. Depending on the size of the zoned device, some tests may take long enough time to finish. Besides, tracing is also a good tool for spotting bugs. QEMU tracking tools and blktrace monitors block layer IO, providing detailed information to analysis.</p><h2><span id="starting-the-journey-with-open-source">Starting the journey with open source</span><a href="#starting-the-journey-with-open-source" class="header-anchor">¶</a></h2><p>As a student interested in computer science, I am enthusiastic about making real applications and fortunate to find the opportunity in this summer. I have a wonderful experience with QEMU where I get chance to work with experienced engineers and meet peers sharing same interests. It is a good starting point for me to continue my search on storage systems and open source projects.</p><p>Public communication, reaching out to people and admitting to failures used to be hard for me. Those feelings had faded away as I put more effort to this project over time. For people may having the same trouble as me, it might be useful to focus on the tasks ahead of you instead of worrying about the consequences of rejections from others.</p><p>Finally, I would like to thank Stefan Hajnoczi, Damien Le Moal, Dmitry Fomichev, and Hannes Reinecke for mentoring me - they have guided me through this project with patience and expertise, when I hit obstacles on design or implementations, and introduced a fun and vibrant open source world for me. Also thank QEMU community and Outreachy for organizing this program.</p><h2><span id="conclusion">Conclusion</span><a href="#conclusion" class="header-anchor">¶</a></h2><p>The current status for this project is waiting for virtio specifications extension and Linux driver support patches got accepted. And the up-to-date patch series of zoned device support welcome any new comments.</p><p>The next step for zoned storage emulation in QEMU is to enable full zoned emulation through virtio-blk. Adding support on top of a regular file, it allows developers accessing a zoned device environment without real zoned storage hardwares. Furthermore, virtio-scsi may need to add full emulation support to complete the zoned storage picture in QEMU. QEMU NVMe ZNS emulation can also use new block layer APIs to attach real zoned storage if the emulation is used in production in future.</p>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>From Virtualization to Virtual Machines</title>
      <link href="/sg/2022/09/27/SD_virtulization/"/>
      <url>/sg/2022/09/27/SD_virtulization/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#client-server-organization">Client/server organization</a></li><li><a href="#virtual-links">Virtual links</a><ul><li><a href="#coordination-of-concurrent-activities">coordination of concurrent activities</a></li><li><a href="#lock-machanisms">lock machanisms</a></li></ul></li><li><a href="#enforce-modularity-in-memory">Enforce modularity in memory</a><ul><li><a href="#controlled-sharing">controlled sharing</a></li></ul></li></ul><!-- tocstop --></div><p>chapter 5 Enforcing Modularity with Virtualization</p><p>Problem: how to build a virtual computer? how to build as many computers as we want for running the desired modules?</p><p><u>Model</u>: client and service modules connect through network</p><ol><li>bounded buffers -&gt; communication linkes</li><li>virtual memory -&gt; memory</li><li>thread -&gt; processors</li></ol><h2><span id="client-server-organization">Client/server organization</span><a href="#client-server-organization" class="header-anchor">¶</a></h2><ol><li><p>modularity/isolation offers</p><ul><li>reduce errors propagating</li><li>security, fault tolerance(geo-distributed)</li></ul></li><li><p>virtualization methods</p><ul><li>many VM -&gt; Multiplexing one physical instance</li><li>one VM -&gt; Emulation: preserve existing interfaces</li><li>one big VM -&gt; Aggregation: provide with many physical instance</li></ul></li><li><p>virtualize computers</p><ul><li>thread of execution: data, text, heap, stack -&gt; thread manager in the context of os(processors)</li><li>interrupt -&gt; interrupt handler in the context of os (processors, if one processor is processing an interrupt already, next interrupt may interrupt another processor)</li><li>exception -&gt; exception handler in the context of the interrupted thread</li></ul></li><li><p>Processors share the same physical memory. -&gt; controlled sharing is required -&gt; virtual memory manager(a hw gadget) in the context of os</p></li><li><p>why emulation costs a lot?</p><p>steps to interrept the instructions of the emulated machine: decode the simulated instructions -&gt; perform the operations -&gt; update the state of the simulated processors</p><p>-&gt; result to *10 overhead</p><p>-&gt; method: virtual machines: use M physical processors to emulation M virtual objects</p></li></ol><p>Ex: Editor want to send ‘x’ to File service to store.</p><ul><li><img src="/sg/2022/09/27/SD_virtulization/Screenshot-1835251.png" class title="Screenshot-1835251"></li></ul><h2><span id="virtual-links">Virtual links</span><a href="#virtual-links" class="header-anchor">¶</a></h2><p>Scenario : how to share a bounded buffer between SENDER and RECEIVER?</p><p>Fact: all threads share the same physical memory</p><p>problem: sequence coordination, one event in thread 1 must precede an event in another thread</p><p>If the bounded buffer is a fixed array N, and there are only one sender, one receiver, then coordinations are easy to handle:</p><p>by following this rule:</p><ol><li>if room = (IN - OUT) &lt; N, sender can put more messages to the buffer</li><li>if IN &gt; OUT, receiver can consume more messages from the buffer</li></ol><p>otherwise, it loops until conditions are satisfied, which is called spin loops(loops in which a thread is waiting for an event without giving up its processor).</p><p>six assumptions to guarantee the correctness of the program:</p><ol><li>one writer principle</li><li>Spin loops require one processor for thread</li><li>data overflow -&gt; Integers of width 64 or 96 bits/ in/out modulo N</li><li>Read/write coherence: the shared memory should make sure LOAD variable from right thread</li><li>Before-or-after atomicity of multistep LOAD and STORE sequence<ul><li>fact: a 64-bit or 96-bit integer require multiple memory cells</li><li>update in/out will require multiple LOAD/STORE</li></ul></li><li>result of executions is visible to other threads<ul><li>fact: out-of-order, an optimizing processor or compiler reorders statements to achieve better performance</li></ul></li></ol><p>Coordinations will get complicated when one-writer-principle breaks when:</p><ol><li>More than one sender/receiver(multiple sending threads, receiving threads) -&gt; break spin loops’ assumption</li><li>the bounded buffer is implemented in a different way. Like linked list where the sender and receriver can update a shared variable at the same time.</li></ol><p>Then, these updates need to be coordinated.</p><h3><span id="coordination-of-concurrent-activities">coordination of concurrent activities</span><a href="#coordination-of-concurrent-activities" class="header-anchor">¶</a></h3><blockquote><p>Concurrent programming needs the attention of specialists: all it takes is one subtle change to make a correct program wrong.</p></blockquote><p>when sequence coordinations go wrong?</p><p>by removing above assumptions one by one:</p><ol><li><p>race condition: it depends on the exact timing of two threads. The results caused by different scenarios are the same, which is that a particular ordering of the instructions of the threads disrupts the correctness of the program. In our case, it can be ranged from multiple senders to updating long integers required two instructions.</p></li><li><p>before-and-after actions: introduce locks</p><p>The before-and-after atomicity has been realised in many contexts. We should know they describe the same things when using different names. For example, atomicity/atomic actions, isolation/isolated actions, mutual exclusion/critical sections. The idea behind this is to find the race conditions and to avoid it in our systems.</p></li><li><p>deadlock: new problem introduced due to locks</p><img src="/sg/2022/09/27/SD_virtulization/Screenshot-4268665.png" class title="Screenshot-4268665"><p>Rule: enumerate all lock usages and ensure that all threads of the program acquire  the locks in the same order.</p></li><li><p>Livelock:  an interaction among a group of threads in which each thread is repeatedly performing some operations but is never able to complete the whole sequence of operations.</p></li></ol><h3><span id="lock-machanisms">lock machanisms</span><a href="#lock-machanisms" class="header-anchor">¶</a></h3><ol><li><p>Single-acquire protocol : only one thread can acquire the lock</p></li><li><p>Multiple-reader, one-writer protocol protocol</p></li></ol><p>Notice: all threads can still access the shared variables unless it is told not to. Instead of mechanically protecting the shared resources, locks serve as a flag to indicate if one thread holds the variable, the other thread should wait for it.</p><p>how to avoid those cases?</p><p>problem:  how the protected shared variables will be used?</p><p>Bootstrapping: Reduce a general problem to some narrower particular version of the same problem. Then solve the narrow problem using special cases. Finally, construct the solution to the general problem which is a mthod for solving the special case and a mthod for reducing problem. (sounds like divide-and-conquer method for me)</p><p>In the case of ACQUIRE:</p><p>making multistep operations on shared variables before-or-after actions</p><p>-&gt; making an operation on a single shared lock a before-or-after action</p><p>-&gt; build a hw instruction that is a before-or-after action</p><p>arbiter: how arbiters can fail? 5.2.8</p><h2><span id="enforce-modularity-in-memory">Enforce modularity in memory</span><a href="#enforce-modularity-in-memory" class="header-anchor">¶</a></h2><p>Scenario: enforce mudularity on sharing memory which is assumed to have a large address space.</p><p>Invariant: a thread can access only its references.</p><ul><li><img src="/sg/2022/09/27/SD_virtulization/Screenshot-4283451.png" class title="Screenshot-4283451"></li></ul><p>Threads need more features:</p><ol><li>one thread needs more than one domains</li><li>one thread cannot change to another domain by itself (modularity, it cannot access other thread’s references, aka data)</li></ol><h3><span id="controlled-sharing">controlled sharing</span><a href="#controlled-sharing" class="header-anchor">¶</a></h3><ul><li><p>cliend thread and server thread share the bounded buffer.</p><ul><li><img src="/sg/2022/09/27/SD_virtulization/Screenshot-4281799.png" class title="Screenshot-4281799"></li></ul></li><li><p>the trade-offs involved in implementing parts of the memory manager in software 5.4.4</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS books </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Naive View of Career in Storages</title>
      <link href="/sg/2022/08/02/outr_career/"/>
      <url>/sg/2022/08/02/outr_career/</url>
      
        <content type="html"><![CDATA[<p>Update in 21/05/2023: It’s strange how things turn out to be like this. I have continued working on the project with the QEMU mentors’ help till now. In all those dark days of the last year, it’s something that gives me strength to go forward.</p><hr><p>Fun fact, I learned the word CAREER from a friend when I was a junior high student and I mistook it for car. Ok, it’s off-topic.</p><p>What you want to do in the five years is a not easy question to answer for most people and so am I. At this stage, I am still trying things and find out what I like according to the experience. Luckily, I grow an interest in open source projects during this internship and decide to take further investigation on storage systems<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> afterwards. That leads to my answer. I would like to be an infrastructure engineer in storage systems and keep working on the open source projects.</p><h2><span id="reality-reviews">Reality reviews</span><a href="#reality-reviews" class="header-anchor">¶</a></h2><p>Generally, finding a job in CN is really difficult nowadays due to the pandemic and global economic recession. And finding a job with work life balance is even harder. Less job positions, more people. The situation can get worse in future because of various reasons. I do wish everyone can find the job they like.</p><p>Database is a hot spot and many companies work on it including most of the big domestic techs and several start-ups. As for the jobs related to storages that I know of, excluding the database techs, the handful techs open such positions like ByteDance, databend.</p><p>Finding a job abroad as graduates is a different question to ponder. A friend told me it’s difficult but possible and gave me some examples of success. So I will at least send a resume when I am ready for such interviews.</p><h2><span id="personal-review">Personal review</span><a href="#personal-review" class="header-anchor">¶</a></h2><p>I always ask myself one question for those years: Can I do it?  I jumped into the university with the naive belief that I can study computer science by myself. It turns out way harder than I think :) However, studying open courses is fun as you learn more about it. My current goal is to finish some course projects left for so long. It is only for practice purpose since it’s more like toy project.</p><p>On the other side, I’ve become more confident to take the road I choose. There are some constraints that should not exist not only in school but also in work. In my school, one of the constraints that will not satisfy the threshold of transferring to Computer Science related majors is GPA lower than 3.6(4.0). The list can go on and on. However, I don’t think it can hide people’s interests and passion. What defines who we are, I think, is the actions taken and thoughts to change.</p><h2><span id="later-on">Later on</span><a href="#later-on" class="header-anchor">¶</a></h2><p>I will be graduated in June in 2023 and plan to work since then. What I am interested is open source jobs related to system programming and storages. Hope I can make it :)</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>I am not sure “storage system” is a defined word but it is in this <a href="https://course.ece.cmu.edu/~ece746/schedule.html">course page</a> so I just go with it. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> Outreachy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Zoned Storage Emulation So Far</title>
      <link href="/sg/2022/08/01/qemu_pj_mid/"/>
      <url>/sg/2022/08/01/qemu_pj_mid/</url>
      
        <content type="html"><![CDATA[<p>Looking back to what I’ve accomplished so far, it is quite a journey. As for the original internship project timeline, I was thinking too naively about the timeline and took no regard of difficulty of certain project task.</p><p>For the rest of the internship, the major goal is to finish the first part of the original proposal - Extending zoned storage emulation support in virtio-blk device - and get it merged. Besides, I think it’s possible to finish part two - Adding support to NVMe ZNS for guest driver testing - before the project ends. Maybe not if unexpected issues appear :)</p><p>If I were starting the project over, I would ask questions earlier rather than get stuck at sth for a really long time. It’s important to ask questions, which is a way to investigate more and find out what is wrong or unknown. I read several slides about the block device and QEMU structure, zoned storage website, and codes in virtio-blk.c etc before the internship starts. It’s not very helpful because I did not know what to ask at first.</p><p>What I’ve done in last two months is finishing the most of zoned storage emulation, except zone append emulation part. One project task took longer than expected is the zone report emulation. It bothers me that I’ve taken this long to have a simple workable version. At first, I thought it’s a three-week task after talking to my mentors about the developing plan in the first week. However, I have underestimated a lot of details that can mostly be spotted only during the implementations. Going through the major issues in the last several weeks, I found that:</p><ol><li>set up a full guest VM. &lt;1 week&gt;</li><li>no fake zones -&gt; Use real zoned device information.(methods switching)/right way to test &lt;1 week&gt;</li><li>errors when booting the guest os(driver side, kernel side) -&gt; no errors, the guest os gets stuck &lt;2 weeks&gt;</li><li>fix the issue of the zoned feature bit &lt;1 week&gt;</li></ol><p>The most interesting I’ve learned so far is to get the device communicate with the guest driver so that the zone report emulation can work. My mentors helped me a lot during the debugging process where I’ve learned incrementally about what happens exactly in both device side and driver side.</p>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Zoned Block Devices</title>
      <link href="/sg/2022/07/05/qemu_pj_intro/"/>
      <url>/sg/2022/07/05/qemu_pj_intro/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#brief-introduction">Brief introduction</a><ul><li><a href="#zoned-storage">Zoned storage</a></li><li><a href="#virtio-blk-device">Virtio-blk device</a></li></ul></li><li><a href="#zone-state-machine-apis">Zone state machine &amp; APIs</a></li></ul><!-- tocstop --></div><p>As the <a href="https://www.qemu.org/">homepage</a> says, QEMU is a generic and open source machine emulator and virtualizer. The project I’ve been working on is adding zoned device support to virtio-blk emulation<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><p>QEMU is a big project which looks a bit intimidating at first (and afterward :). It’s also lots of fun investigating different parts to solve problems in the way. Sometimes, I feel like a lousy detective trying to figure out how things fit together. Luckily, my mentors in this project always give me a hand when I am stuck at wrong directions.</p><h2><span id="brief-introduction">Brief introduction</span><a href="#brief-introduction" class="header-anchor">¶</a></h2><table><thead><tr><th>Terminology</th><th>Abbr.</th><th>Concept</th></tr></thead><tbody><tr><td>Shingled Magnetic Recording</td><td>SMR</td><td>write data in zones of overlapped tracks</td></tr><tr><td>Perpendicular/Conventional Magnetic Recording</td><td>PMR/CMR</td><td>write data in discrete tracks</td></tr><tr><td>write pointer</td><td>WP</td><td>it points to the lowest LBA(Logic Block Address) that have not been written of that zone</td></tr><tr><td>sequential write required</td><td>SWR</td><td>Host Managed Model(HM): write operations must be sequential</td></tr><tr><td>sequential write preferred</td><td>SWP</td><td>Host Aware Model(HA): unconstrained writes possible</td></tr><tr><td>open zone resource</td><td>OZR</td><td>the open zone resource in a zone block device is limited</td></tr></tbody></table><h3><span id="zoned-storage">Zoned storage</span><a href="#zoned-storage" class="header-anchor">¶</a></h3><p>Imagining the shingles in the roof, SMR writes data in a similar overlapping manner.  BY removing the gaps, more data tracks placing on each magnetic surface reflects in wider write head of design. The recording head will advance partial width of one data track after a write. Such overlapping tracks are grouped into zones. The gaps between zones prevents data overwrite from write head changing from one zone to another. (Ignoring-physics version)</p><p>What we want to take advantage of SMR in the project is the SWR property. For example, if LBA <code>x</code>, <code>x+a</code> is in zone 1, we can’t write <code>x+a</code> after write <code>x</code> because it is potentially under another zone. The area dencity of SMR results in higher disk capacity, better erasure coding, reducing adjacent-track interference exposure. Meanwhile, SMR also supports random read like CMR. Therefore SWR is good for data detection and recovery.</p><img src="/sg/2022/07/05/qemu_pj_intro/Screenshot-4060048.png" class title="HDD drives"><p>The main purpose of zoned storage emulation is to let VM Guest OS see a zoned block device file on the Host OS. However QEMU sees the zoned device as regular block device right now. Meanwhile, I should enable guest driver testing in NVMe ZNS so we can test if our previous works and benchmark it, which would be a nice topic for another blog(once I figure out how benmarking works :)</p><p>The cool vision about this project is to enable zoned storage on a regular file. It means VM Guest OS can see a regular file as zoned block device file, which is helpful for development related to zoned storage on a machine without such support. Whereas I have some doubts about the overhead and design of such improvement. For example, why should we emulate such zoned device if it maybe not offer enough performance for using? Again, another topic’s saving later.</p><img src="/sg/2022/07/05/qemu_pj_intro/linux-iopath-3ad49009873f1211b8e873f9ba540a38.png" class title="Linux Zoned block device support overview"><p><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h3><span id="virtio-blk-device">Virtio-blk device</span><a href="#virtio-blk-device" class="header-anchor">¶</a></h3><p>Virtio-blk device is a storage controller that presents host’s block devices to the guest. The structure of storage layers is designed for extensibility and performance. There is a BlockDriverState graph involved with block layers. BlockBackend provides a interface connecting block drivers to other part like qemu-io or virtio-blk device. It has a root pointer points to other nodes in the BlockDriverState graph. Format node and filter node are above protocal node. It is good for adding a BlockDriver inside the big project.</p><p>The overview of the emulation part is: the guest os sends a request of zoned commands which contains parameters to its virtio-blk driver. Then virtio-blk device receives the request which is basically a big chunk of memory and transforms it to the QEMU’s struct so that block layers can execute correlated commands on the zoned block device. After that, we can transform the results to the guest’s struct and send it back.</p><p>I haven’t though through the performance of virtio-blk device brings in though. Roughly speaking, zoned block devices can offer better performance than regular one especially above HDD level.</p><img src="/sg/2022/07/05/qemu_pj_intro/Screenshot-6787937.png" class title="vm overview"> <h2><span id="zone-state-machine-amp-apis">Zone state machine &amp; APIs</span><a href="#zone-state-machine-amp-apis" class="header-anchor">¶</a></h2><p>Zone state machine tracks open zone resource of zoned block devices. Sufficient open zone resource are required for open state in HDD. Zone operations will change states in the write pointer zone models.</p><p>The basic structs of zoned block devices handling is: zone_descriptors, zone_dev, zone_report_struct. Other than the five operations ioctl provides, we would like to add zone append write in the emulation.</p><img src="/sg/2022/07/05/qemu_pj_intro/Screenshot-6799625.png" class title="Block I&#x2F;O stack"><p>​<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>The project idea can be found at <a href="https://wiki.qemu.org/Internships/ProjectIdeas/VirtIOBlkZonedBlockDevices">here</a>. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>The picture is from <a href="https://zonedstorage.io/docs/linux/overview#overview">Damien Le Moal’s website</a>. You can find more about zoned storage from: <a href="https://zonedstorage.io/">https://zonedstorage.io/</a>. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>It is from a very old 2016 presentation <a href="https://www.snia.org/sites/default/files/SDC/2016/presentations/smr/DamienLeMoal_ZBC-ZAC_Linux.pdf">ZBC/ZAC support in Linux</a>  when the initial SMR support for the kernel was still being developped. The first support release in 2017 (kernel 4.10) ended up being quite different from what this picture shows. E.g., there is no “zone cache” and no “workqueue” for report zones in the kernel.(annotations from Damien) <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Deep Dive to OCW (Chinese)</title>
      <link href="/sg/2022/06/21/deep_dive_to_ocw/"/>
      <url>/sg/2022/06/21/deep_dive_to_ocw/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#dong-ji">动机</a><ul><li><a href="#ke-cheng-zi-yuan">课程资源</a></li><li><a href="#ke-cheng-ping-jie-wang">课程评价网</a></li></ul></li><li><a href="#sys-basics">Sys basics</a></li><li><a href="#shi-xi">实习</a><ul><li><a href="#xing-ye-guan-cha">行业观察</a></li><li><a href="#xue-xi-gui-hua">学习规划</a></li><li><a href="#kai-yuan-huo-dong">开源活动</a></li><li><a href="#yuan-cheng-gong-zuo">远程工作</a></li></ul></li><li><a href="#chang-jian-wen-ti">常见问题</a><ul><li><a href="#chu-qi">初期</a></li><li><a href="#zhong-qi">中期</a></li></ul></li></ul><!-- tocstop --></div><p>前言：<strong>本文是一篇对 MIT open course ware 及 MIT 系公开课程的推广</strong>。</p><p>因为我经常看到网上有对 ucb, stanford, harvard 公开课的强推，但很少有 mit 系列的。珠玉在前，我希望能够写出一些真实的问题和分享一些个人体验。在自学计算机中，我尤其受到两个人的影响，因此坚定了实践（learn things by doing）才是学懂一件事的最佳途径。其起点又分别来源于两篇文章：</p><ol><li>Alex Chi： <a href="https://survivesjtu.gitbook.io/survivesjtumanual/fu-lu/ben-ke-sheng-zhuan-ye-jie-shao-todo/cs-zi-jiu-zhi-bei">CS自救指北 - SurviveSJTUManual</a></li><li>Hu Jinming: <a href="https://conanhujinming.github.io/post/tips_for_interview/">19CS小硕校招面试心得与自学CS经验及找工作分享 | Jinming Hu</a></li></ol><p>我在这个过程中遇到了许多问题，由于我是一个非常慢的学习者，其它自学的小伙伴们能够比我快很多的刷一门公开课，而我却常常死磕在一个坑里走不出来。非常幸运的是我遇到了一些朋友帮助，不至于在这条路上是完全孤独无助。然而，自学公开课并不能保证一份完美的工作/出色的绩点/许多其它认为有的东西。</p><h2><span id="dong-ji">动机</span><a href="#dong-ji" class="header-anchor">¶</a></h2><p><strong>问题1:为什么要自学？</strong></p><p>这更多只是个人的兴趣爱好和偏好的学习方式，并不是对未来生活的保证。据我所了解到的，“公开课只能保证一个人（面试者）的下限”（来自某面试官）。同时，计算机相关的同学有不少的人正在自学计算机系统方向的几门课程，无论是作为面试的项目，还是作为基础巩固专业知识。不过，自学这些课程可以提供一个继续深入相关领域的切入口，探索自己真正喜欢的想从事的行业。尽管这听起来有些幼稚，毕竟我还是个尚未接受过太多社会直接摧残的大学生，但这对我来说是一个值得反思回顾的起点。</p><p><strong>问题2: 什么是自学？</strong></p><p>我认为自学就是指一个人能够去学习自己感兴趣的任何东西。由于疫情的影响，2020 后的公开课雨后春笋般得出现。对苦学校老旧的培养体系已久的广大大学生来说算是个福音。OCW 的不同在于其长期以来对教育公平的促进。在北美的诸多高校中，MIT 的 CS 课程 无疑是在这一方面做出最多的，其最大程度的开放了相关资源让全世界的人都能学习到顶尖的课程。</p><p><strong>问题3: 怎么自学？</strong></p><p>我认为学习是一件比较私人的事，每个人有 ta 适合的学习方法，学习习惯。我更想介绍一些在学习中遇到的问题。</p><h3><span id="ke-cheng-zi-yuan">课程资源</span><a href="#ke-cheng-zi-yuan" class="header-anchor">¶</a></h3><p>先简要介绍一下 MIT 系的公开课程来源有：</p><ol><li><a href="https://ocw.mit.edu/">OCW</a>: 主要公开课来源。最近改版后的 OCW 的亮点在于搜索功能更强了。排版的改进和 MIT 其它的公开课学习平台风格（edx 风格）差不多了。</li><li><a href="https://mitxonline.mit.edu/">MITx</a> 和 <a href="https://openlearning.mit.edu/courses-programs/open-learning-library">MIT Open Learning Library | Open Learning</a> ：作为 ocw 和 edx 上部分课程的存档，作为对 edx 上有时期限制的课程的补充。</li><li>直接的课程网页。MIT 大部分 CS 课程都有独立的课程主页，并且有不小数量是开放的。我在大一下时经常没事就根据 <a href="http://catalog.mit.edu/degree-charts/computer-science-engineering-course-6-3/">6-3 课程计划</a>去搜一下相关课程，了解一下之后想学什么。虽然当时我主要在 edx 看编程基础，数学类，物理，化学，生物的课程。</li><li><a href="https://stellar.mit.edu/classlink/course6.html">Stellar: Electrical Engineering and Computer Science (Course 6)</a> : 每个学期开设的课程单子。无意中搜到的一个网页，有 public 显示的会开放部分资源。不过大部分课程都是仅限校内的，除了 6.006 几乎会把每学期的课程资料都放在上面以外。</li></ol><p>个人认为一门适合自学的课程至少需要具备的条件是，有 lecture videos + recitations + hw + solutions。年代是否最近得具体看课程质量，比如我认为 6.006 算法课就是 10 版本讲得比 20 版本的更好，尤其是 recitation 部分，助教讲的东西仍然是现在人们所看重的问题。但作业最好做最近版本的。</p><h3><span id="ke-cheng-ping-jie-wang">课程评价网</span><a href="#ke-cheng-ping-jie-wang" class="header-anchor">¶</a></h3><p>虽然现在知名度更高的是一位北大同学的 <a href="https://csdiy.wiki/">CS 自学指南</a>，但其实还有一份内容更详实的<a href="https://conanhujinming.github.io/comments-for-awesome-courses/">名校公开课程评价网</a>。在这两个项目初期都有些了解，前者的目标是希望同学能够设计出自己的课程计划方案，去探索个人兴趣。而后者的目标是为了给之后自学的同学指出一些坑和合适的学习方式。</p><h2><span id="sys-basics">Sys basics</span><a href="#sys-basics" class="header-anchor">¶</a></h2><p>刚开始很难知道想做哪个方向，但不去试试你不会知道自己真正想要的东西。我在刚升学时只是大致坚定想学计算机，但具体是什么我并不清楚，大学前两年尝试了一些事以及和同伴聊了很久后才逐渐有了模糊的方向感。大一我主要明白科学计算和软件工程完全是两个不同的方向。而且，相比应用，我对纯数学理论没有太大兴趣。当时我还跟风玩了短暂时间的 WolframAlpha 和 一些别的计算软件。</p><p>一个比较有效判断是否对某门课程感兴趣的方式就是听完第一节课和完成第一份作业。如果在第一节课就打瞌睡，那可能这门课程并不是很合适深入了解。大一下我打瞌睡的课分别有：读公正的课后阅读，微观经济学，修辞学，生物导论，计算思维导论，统计学；大二上有机器学习（python）。</p><p>无法完成一门公开课是一件正常的事。在不同阶段总会有一些特别的原因导致这种停滞，因人而异。这并不代表智商低下，而是这些事情的理解学习本来就需要时间，尤其是在自学时。我很喜欢的积极心理学的一句话：</p><blockquote><p>Learn to fail, or fail to learn.</p></blockquote><p>同样的，这些问题由自己决定是否能够解决。一个理想的情况是：这个课里的 lab 都会做，bug free。当看到其它人能很快的做完一门课的课程项目时难免就会怀疑自己。这种怀疑可以从智商，学历水平，数学能力，前置知识到无助放弃。</p><p>我对研究一个复杂系统有很大的兴趣。因此我也希望自己能够独立地真正学好一门课程。</p><h2><span id="shi-xi">实习</span><a href="#shi-xi" class="header-anchor">¶</a></h2><p>首先，本人在各方面都是一个小白，以下更多是分享一些这个暑假前后的学习计划和对行业的一点看法。科技行业职业发展的方向挺多的，由于我目前对存储系统最感兴趣，会主要讲述这个方向相关的想探索的实习方向。同时，同龄人中做数据库方向的人也挺多的，也会谈一些非常粗浅的想法。</p><h3><span id="xing-ye-guan-cha">行业观察</span><a href="#xing-ye-guan-cha" class="header-anchor">¶</a></h3><p>对存储系统（软件方向）更感兴趣。我认为至少可以从三个方向测试和学习这一方向。</p><ol><li>storage device (current state)</li><li>database storage engines</li><li>cloud storage</li></ol><p>存储感觉到背后总会交集在某个地方，关键是要把简单的事做对，而不是重复做某一件事。最近发现这个实习项目背后和另一些熟悉的人的工作连接起来，觉得很巧合。</p><details open style="display: block; position: relative; outline: none; color: rgb(34, 34, 34); font-family: Helvetica, Arial, sans-serif; font-size: 15.008px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"><summary style="display: block; outline: none; cursor: pointer;"><span>&nbsp;</span>5</summary><p style="display: block; line-height: 27.0144px; margin-bottom: 10px;">有时候比较羡慕别人能够那么快就确定投入一个行业方向，有很多同龄人去从事数据库开发方向了，在一些初创公司做内核开发。比如现在众多人都向往的 s 厂（singularity data) 成长得就很快和 p 社（Pingcap)。经常听到有人说数据库开发是可以做很久的行业。但我目前对数据库没有太大的偏好。看了一些在相关厂工作几年后记录工作的文章，我对这样的生活没有特别向往。</p></details><details open style="display: block; position: relative; outline: none; color: rgb(34, 34, 34); font-family: Helvetica, Arial, sans-serif; font-size: 15.008px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"><summary style="display: block; outline: none; cursor: pointer;"><span>&nbsp;</span>6/21: update</summary><p style="display: block; line-height: 27.0144px; margin-bottom: 10px;">在和一些人聊过后豁然开朗，前期我不用太纠结于具体做系统编程的哪个方向，做存储可能没有搞数据库的人看起来光鲜亮丽，但只要是自己喜欢做的事，才能更长久地发展。</p></details><h3><span id="xue-xi-gui-hua">学习规划</span><a href="#xue-xi-gui-hua" class="header-anchor">¶</a></h3><details open style="display: block; position: relative; outline: none; color: rgb(34, 34, 34); font-family: Helvetica, Arial, sans-serif; font-size: 15.008px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;"><summary style="display: block; outline: none; cursor: pointer;"><span>&nbsp;</span>22/5/28：</summary><p style="display: block; line-height: 27.0144px; margin-bottom: 10px;">其实写这篇文有部分原因是对下周一开始的实习感到有些害怕。新的生活总有一些担忧的问题，新的交流，认识更多的人。不过也正是因为这样，我能够在这三个月里尽我所能地去学习新的东西，搞懂之前没懂的东西。比起犯错，更糟糕的是自以为没错。早发现问题才能早解决。</p></details><h3><span id="kai-yuan-huo-dong">开源活动</span><a href="#kai-yuan-huo-dong" class="header-anchor">¶</a></h3><p>现在比较活跃的开源活动有：GSOC, Outreachy, CNCF, OSPP(开源之夏), MLFx, Pingcap’s talent plan。</p><p>最近有个小小的感触，在这些活动中女性比例好少。今年 GSOC 中选人里有显示的大概低于10%。在观察某个行业方向的技术从业人员时，我也几乎没看到女性开发者的存在。</p><p>开源活动真的非常神奇，一个好的项目背后聚集的是来自全世界的专业人才，不同时区地点贡献代码。</p><h3><span id="yuan-cheng-gong-zuo">远程工作</span><a href="#yuan-cheng-gong-zuo" class="header-anchor">¶</a></h3><p>我认为工作最重要的是效率而不是怼时长。我还在适应这种工作方式，目前的认为比较合理的时间分配是：9-12，12-1（午饭），1-6。之后的问题就是如何能够利用这段时间高效地完成任务。然而实际执行中，时间安排会更加灵活，可能一天很忙一天很闲，看自己怎么分配工作了。</p><h2><span id="chang-jian-wen-ti">常见问题</span><a href="#chang-jian-wen-ti" class="header-anchor">¶</a></h2><h3><span id="chu-qi">初期</span><a href="#chu-qi" class="header-anchor">¶</a></h3><p>问题1: 学什么？</p><p>学习是一件需要投入时间精力的事，我一直认为兴趣是最好的老师。在刚开始对这个专业还一无所知时，我们会倾向于看别人尤其推荐的。比如 <a href="https://github.com/izackwu/TeachYourselfCS-CN">TeachYourselfCS-CN</a>，<a href="https://github.com/ossu/computer-science-cn">Open Source Society University</a>，或者知乎上某篇列举了各个北美某校课程名的文章。这些推荐内容有一个问题：列举的课程太多而没有实际经验，里面的坑没有说明。而课程评价网可以给出比较贴合实际情况的评述，因为大多数人是自己上手去做了课程项目的，在主页中也详细说明了可能的问题。</p><p>问题2: 遇到自己难以解决的问题怎么办？</p><p>联系和交流。和了解这方面的人交流，问对问题。</p><h3><span id="zhong-qi">中期</span><a href="#zhong-qi" class="header-anchor">¶</a></h3><p>问题1: 学完一门公开课的标准？</p><p>刚开始我以为学完一门课指的是做每一道练习题，看每一页课后阅读，最后结果就像背单词只背abandon 一样。尤其是在遇到不会的题，受挫感直线上升，导致很长的停滞。我失败学完的公开课实在是有点多了，因为不同的原因。</p><p>另一个误区就是过高的标准下没有合适的思考问题的方式。比如我有段时间在想写 binary search tree 时，试了几遍不对我就开始怀疑自己太傻了，花了这么长时间没什么进展。但其实在写还不熟悉的东西时， test drive development 才是比较好的方式。我当时估计连基本的语法结构都没搞清楚……</p><p>问题2: 怎样才算学好一门课？比如能够写在简历的课程项目。</p><p>通过最近的实习相对完整得过了一遍完成一个中等项目（450+150h）流程，我发现了一些自己之前理解有偏差的地方，梳理如下。</p><ol><li>先进行相对简单的任务，当对依托的项目不太了解时。好处是可以在难度不太高的任务中熟悉所需理解的部分结构。然后再完成相对困难的任务时，不必再经历一遍不熟悉某些 callback 的坑。</li><li>阅读先从感兴趣的部分开始。作为有点囤积狂的人，我经常扔一堆东西到收藏夹，但大部分内容只是草草地略读了一下，并没有太多深入的思考。最近想出了一个办法或许可以解决这个问题，选择自己最感兴趣的一个主题，相关的资料（包含代码，练习等）可以放在一个文件夹里，然后集中时间阅读学习。然后可以附一个 topic_log.md 在相同路径下。</li><li>做课程项目（只适用于 lab 间没有依靠性）可以跳跃式地选择感兴趣的任务先完成。同样的，最近打算试试这样能否解决挤压的太多课程任务。</li><li>做课程项目的过程同样是学习样例，test case 的过程。独立思考很重要，但从学这些（不是说抄袭）开始可以更好地延伸思考，不然老卡在一个 task（在说我自己）。</li><li>在开始一个较大的项目时，除了思考大致的任务需要完成哪些（设计）以外，在开始入手实现时可以先思考一个最小的可以实现测试的单元 (Test driven development)。比较好查 bug</li></ol><p>问题3: 当学习公开课程时，我们在学什么？</p><p>近一年投入到某个开源项目下的某个任务中，出现过几次醍醐灌顶的时刻，突然就理解了之前觉得非常生硬的理论和定位到更小的问题。学系统类课程应该也和实现任务有同样的思路和方法，衡量标准为通过测试，但每个人缺失的部分和对过程的领会都是不同的。如果我不知道自己在学什么，就很难继续进行下去。</p>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> OCW </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>A Vocabulary Term</title>
      <link href="/sg/2022/06/17/outr_vocab/"/>
      <url>/sg/2022/06/17/outr_vocab/</url>
      
        <content type="html"><![CDATA[<p>Looking back, the first vocabulary term that comes to mind is “building from source.” Throughout the application process, I was required to compile a new kernel and library from source. Though I was unfamiliar with the term, I figured it couldn’t be that difficult to look it up on Google.</p><p>The goal of this task is to allow QEMU to use new liburing APIs, which requires a new kernel that supports them. At the start of the application process, I was hesitant to ask the mentors at QEMU. All of them are senior engineers. A stupid question could make me look bad. It would be better if I tried every method I could find first.</p><p>The most difficult problem I encountered was when I thought I understood the issue but facts revealed otherwise. During that time, I had several misunderstandings:</p><ol><li>Debugging the Linux kernel rather than compiling a host kernel.</li><li>Building a gues os image rather than a host kernel from source.</li><li>Researching io uring in QEMU/Linux.</li><li>Installing a liburing package (v2.0) rather than compiling it from source.</li></ol><p>I thought the QEMU development environment was proper. So I moved to next step which is io uring testing. I couldn’t figure out how the testing framework in QEMU fit together. So I attempted to contact Roosh, the former intern working on io uring support in QEMU. Though it can be intimidating to connect with people, I can’t think of a better way to figure out my problems. She was very nice and recommended that I try Fedora Linux, which makes building a kernel much easier.</p><p>The misunderstandings lingered on. After seeking assistance from the mentors at QEMU, I finally understood the real issue of the task. The seeking graph was as follows<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-&gt; gdb/tracing problems? </span><br><span class="line">-&gt; Nope! </span><br><span class="line">-&gt; Kernel problem(#1,#2) found</span><br><span class="line">-&gt; Kernel set. Still not working </span><br><span class="line">-&gt; liburing version check</span><br><span class="line">-&gt; Package built. Still not working</span><br><span class="line">-&gt; liburing problem found(#4)</span><br><span class="line">-&gt; Build from source. Right version. Still not working</span><br><span class="line">-&gt; Compilation error. </span><br><span class="line">-&gt; Change to newest liburing.git. Working.</span><br></pre></td></tr></table></figure><p>It is difficult to determine whether or not to ask questions. During my internship, I am experiencing the same issue, and my mentors provide me with sound advice. Don’t be afraid to ask if you spend more than an hour researching or debugging something. The sooner we can find problems, the better we will be able to solve them.</p><p>One concern about asking questions at open source events is what we can give back to those who help us all the time. I believe the answer is to do our best to contribute to the community.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>The details can be found in my previous blog: <a href="https://sgzerolc.github.io/sg/2022/04/15/qemu-develop/">Begginner’s Guide to Setting up QEMU Devel Env</a>. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> Outreachy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Applying to Outreachy</title>
      <link href="/sg/2022/06/03/outr_intro/"/>
      <url>/sg/2022/06/03/outr_intro/</url>
      
        <content type="html"><![CDATA[<p>Hi there :)</p><p>I’m Sam Li, a Chinese junior student studying computer science on my own. The first two years were especially difficult for me because I had to balance my course plan and school courses, and I had many failures to find the right way to study a CS course. However, along the way, I met several friends who share my interests and we have a lot of fun talking about it. That’s where I first learned about open source organizations, which eventually led me to GSOC and Outreachy.</p><p>It is a great honor for me to be chosen by QEMU for Outreachy 2022, and it is the happiest moment of my life thus far. Besides, I’ve had the best mentors in the world. At the start of the application process, I assumed that this journey would help me develop my characters. Several changes have occurred in my life during the first week of work. I start running again, and I run a little longer each day. Moreover, I have a more consistent schedule for working remotely. In comparison to the time when I was very shy in public speaking, I am now more open to communicating with others. It may not always be very productive. But, thanks to the mentors’ help, I believe I am on the right track.</p><p>There is more to my personality. I enjoy reading history and science fiction. It’s fascinating how history depicts the past while science fiction depicts the future, both of which reflect some reality for the present. Dead Poets Society is my favorite film. I’m always disappointed by the endings and Neil’s fate. Civilization VI is a game that I enjoy playing. It’s a turn-based board game in which you can shape the path of the civilization.</p><p>Authenticity, meaningful work, and adventure are three of my core values.</p><p>My values are built on the foundation of authenticity. Honesty, in my opinion, is the best way to treat people. It’s also how I handle things. I can’t stand untruths and would rather get to the bottom of it. The desire to discover what things really are prevents me from giving up when I face adversity. And here I am, in this project, to learn system programming.</p><p>Meaningful work is also very important to me. What’s the point of doing something if you’re not proud of it? There are various criteria that vary depending on the individual. For me, I’ve discovered an interest in storage systems, and I’ll try to figure out what specific goal I want to achieve in the internship before graduating from university.</p><p>I feel alive when I’m on an adventure. Most of the time, adventure entails risks. I am not interested in following the mainstream, where some people believe that a higher degree automatically solves some life problems, such as the high unemployment rate in these years. So I give up something in order to figure out what I really want to do with my life. It may sound naive, but I really want to see more of the world, either geographically or professionally. I’d like to thank Roosh, Zhi Guo, and all of my mentors Stefan, Damien, Hannes, and Dmitry for their support and guidance along the way, as well as Outreachy for this opportunity.</p>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> Outreachy </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>&lt;OS Lab Notes</title>
      <link href="/sg/2022/05/20/os_xv6/"/>
      <url>/sg/2022/05/20/os_xv6/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#lab1-unix-utilities">Lab1 unix utilities</a><ul><li><a href="#primes">primes</a></li><li><a href="#find">find</a></li><li><a href="#xargs">xargs</a></li></ul></li><li><a href="#lab2-syscalls">Lab2 syscalls</a><ul><li><a href="#trace">trace</a></li><li><a href="#sysinfo">sysinfo</a></li></ul></li><li><a href="#lab3-page-tables">Lab3 page tables</a><ul><li><a href="#print-pt">print pt</a></li><li><a href="#kernel-page-table">kernel page table</a></li><li><a href="#copyin">copyin</a></li></ul></li><li><a href="#tool">Tool</a><ul><li><a href="#valgrind">valgrind</a></li><li><a href="#address-sanitizer">address sanitizer</a></li><li><a href="#c">C</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="lab1-unix-utilities">Lab1 unix utilities</span><a href="#lab1-unix-utilities" class="header-anchor">¶</a></h2><h3><span id="primes">primes</span><a href="#primes" class="header-anchor">¶</a></h3><p>Problem: run commands in pipeline</p><p>Few gaps I didn’t think straight for the first time:</p><ul><li><p>Write process tree: pass array as input<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pass ints to pipe</span></span><br><span class="line">write(fd, &amp;<span class="type">int</span>, <span class="keyword">sizeof</span> <span class="type">int</span>);</span><br></pre></td></tr></table></figure></li><li><p>Pipe usage: the meaning of “create one process that reads from its left neighbor over a pipe and writes to its right neighbor over another pipe” is as follows. Thinking about a pipeline like a | b | c, the process is read from pipe(a_to_b) and write(b_to_c). Don’t forget to <code>pipe</code> the int array before using the pipe.</p></li><li><p>Understood this we could break this lab into two parts, the main part feeds numbers to a function which will produce primes from the numbers. Feeding is in the parent process and function execution is in the child process. In this way, the function can share the parent’s data memory and they can run simultaneously.</p></li><li><p>Fd resources: fds are limited.<br><u>Read blocks until it is impossible for new data to arrive (book).</u><br>Princle: close file descriptors that a process doesn’t need.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span><br><span class="line">    close(<span class="number">0</span>);</span><br><span class="line">    dup(numbers[<span class="number">0</span>]);</span><br><span class="line">    close(numbers[<span class="number">1</span>]);</span><br><span class="line">    getPrimes(numbers);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    close(numbers[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= RANGE; ++i) &#123;</span><br><span class="line">        write(numbers[<span class="number">1</span>], &amp;i, <span class="keyword">sizeof</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    close(numbers[<span class="number">1</span>]);</span><br><span class="line">    wait(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Leaves of the process tree: hang because read blocks somehow.</p></li></ul><h3><span id="find">find</span><a href="#find" class="header-anchor">¶</a></h3><p>c basics: <a href="https://stackoverflow.com/questions/18481740/pointer-expressions-ptr-ptr-and-ptr">++, pointer</a></p><ul><li>value of ++p is p after the increment, value of p++ is p before the increment,</li><li>*ptr++, *(ptr++), first dereferences the pointer, then increments the pointer<br>*++ptr, first increments the pointer, then dereferences the pointer<br>++*ptr, first dereferences the pointer, then increments dereferenced value</li><li><a href="https://stackoverflow.com/questions/24853/what-is-the-difference-between-i-and-i">i++ vs ++i</a><br>“++i” is known as the pre-increment operator, which increments the value of ‘i’ immediately and returns the incremented value. On the other hand, “i++” is known as the post-increment operator, which increments the value of ‘i’ but returns the original value that ‘i’ held before being incremented (from codeforce answers).</li></ul><h3><span id="xargs">xargs</span><a href="#xargs" class="header-anchor">¶</a></h3><p>c basics: <a href="https://stackoverflow.com/questions/8824057/pointer-to-string-array-in-c">string array</a></p><ul><li>r/w in low level, read char to lines</li><li>int getline(char line[], int lim); int readlines(char *lineptr[], int maxlines);<br>Btw, the “many $” sentence is an explanation not a bug.</li></ul><h2><span id="lab2-syscalls">Lab2 syscalls</span><a href="#lab2-syscalls" class="header-anchor">¶</a></h2><p>Create a syscall in xv6: uapp.c -&gt; user.h -&gt; <s>user/usys.pl</s> usys.S -&gt; <code>ecall</code>| -&gt; syscall -&gt; process</p><h3><span id="trace">trace</span><a href="#trace" class="header-anchor">¶</a></h3><p>Problem: what is a trace?</p><p>Trace is a user call helping to track one particular syscall in the execution process.<br>Problem: what’s the relation between sys_call and sys_proc?</p><h3><span id="sysinfo">sysinfo</span><a href="#sysinfo" class="header-anchor">¶</a></h3><p>It’s easy to overlook the spelling error. One bracket makes you question about everything:)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (copyout(myproc()-&gt;pagetable, addr, (<span class="type">char</span> *)&amp;info, <span class="keyword">sizeof</span>(info) &lt; <span class="number">0</span>); <span class="comment">// off-by-one-bracket error</span></span><br><span class="line"><span class="keyword">if</span> (copyout(myproc()-&gt;pagetable, addr, (<span class="type">char</span> *)&amp;info, <span class="keyword">sizeof</span>(info)) &lt; <span class="number">0</span>);  <span class="comment">// correct one</span></span><br></pre></td></tr></table></figure><h2><span id="lab3-page-tables">Lab3 page tables</span><a href="#lab3-page-tables" class="header-anchor">¶</a></h2><h3><span id="print-pt">print pt</span><a href="#print-pt" class="header-anchor">¶</a></h3><p>You can’t write it without knowing the page table implementation in xv6. At first, it needs a simple and straightforward solution and then optimize it. I was thinking about using iteration or recursion, which took a while.</p><h3><span id="kernel-page-table">kernel page table</span><a href="#kernel-page-table" class="header-anchor">¶</a></h3><ol><li>problem: When to start paging? -&gt; page table set up: panic</li><li>Hypothesis:<ul><li>Traps due to missing mappings</li><li>scheduler</li></ul></li><li>Experiment:<ul><li>modify allocproc: seems correct</li><li>modify scheduler: move around w_satp, errors occur -&gt; scheduler goes wrong</li></ul></li><li>Problem 1: how scheduler goes wrong? -&gt; Key point: context switching (thanks to @GuoZhi)<ul><li><code>pit</code>: Problem 2: why truncate2 OK but truncate3 not? -&gt; We shouldn’t be worried if we can get grade part ok. And it’s time to move to real problem.</li><li>aside: Problem 3: lost some freepages in kernmem</li></ul></li><li>Observations:<ul><li>Allocproc sets up one process’s kernel stack</li></ul></li></ol><h3><span id="copyin">copyin</span><a href="#copyin" class="header-anchor">¶</a></h3><p>Task: add user mappings to user process’s kernel page table</p><ol><li>Problem: when user mappings  are changed in <code>exec</code> ? what should be done in <code>exec</code> ?</li><li>Hypothesis:</li><li>Experiment:<ul><li><code>pit</code>: no need to change copyin_new yet. The task is to make it work.</li></ul></li><li>Predictions:</li><li>Observations:</li></ol><h2><span id="tool">Tool</span><a href="#tool" class="header-anchor">¶</a></h2><h3><span id="valgrind">valgrind</span><a href="#valgrind" class="header-anchor">¶</a></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valgrind -leak-resolution=high -leak-check=full -show-reachable=yes -track-fds=yes ./program</span><br></pre></td></tr></table></figure><img src="/sg/2022/05/20/os_xv6/p2.png" class title="p2"><h3><span id="address-sanitizer">address sanitizer</span><a href="#address-sanitizer" class="header-anchor">¶</a></h3><p>flags.</p><h3><span id="c">C</span><a href="#c" class="header-anchor">¶</a></h3><ol><li><a href="https://stackoverflow.com/questions/4437527/why-do-we-use-the-volatile-keyword">volatile</a> means variables can be changed from outside the program which compiler is not aware of.</li><li>function pointer: void (*func)())</li></ol><p>Qemu 5.1<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, Mac m1, Riscv-toolchain 10.1</p><p>6.s081 20fall labs</p><img src="/sg/2022/05/20/os_xv6/step-by-step-debugging.png" class title="step-by-step-debugging"><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>stuck for a long time due to not very familiar with C in 21/03/20 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>build from source. Configure prefix to /opt/qemu. More can be found <a href="https://github.com/BASARANOMO/xv6-labs-2020/issues/1">here</a>. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.s081 operating systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Programming Lab Reports</title>
      <link href="/sg/2022/05/14/ex_python/"/>
      <url>/sg/2022/05/14/ex_python/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#lab1">Lab1</a></li><li><a href="#lab-2-snekoban">Lab 2 snekoban</a></li></ul><!-- tocstop --></div><p>goal: design and implement data structures in labs and practice python programming</p><h2><span id="lab1">Lab1</span><a href="#lab1" class="header-anchor">¶</a></h2><p>Problem: correlation</p><h2><span id="lab-2-snekoban">Lab 2 snekoban</span><a href="#lab-2-snekoban" class="header-anchor">¶</a></h2><p>Problem 0: why assertion in test fails while it can run correctly in the GUI?</p><p>Answer: do not modify the input game.</p><p>time: stuck for one hour</p><p>where (goes wrong): Figured out in assertionErrors in vscode: somehow the pytest in pycharm lost the critical information: modify the input game type</p><p>Experiment 1: disable the assertions for checking modifications</p><p>Result: passed all the basic tests.</p><p>Experiment 2: is dict deep copied?</p><p>Result: no. It turns out that dict(some_dict) or some_dict.copy() is shallow copy. Deep copy should use copy.deepcopy(some_dict) or be a lamb :) to copy every element in the dict.</p><p>Thus it solves the problem.</p>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
          <category> 6.009 programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flash SSD Operations</title>
      <link href="/sg/2022/04/28/storages_ssd_op/"/>
      <url>/sg/2022/04/28/storages_ssd_op/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#nand-flash-ssds">Nand Flash SSDs</a><ul><li><a href="#basics">basics</a></li><li><a href="#performance">performance</a></li><li><a href="#garbage-collection">garbage collection</a></li><li><a href="#mapping-table">mapping table</a></li><li><a href="#wear-leveling">wear leveling</a></li></ul></li><li><a href="#disk-drive-modeling">Disk drive modeling</a></li></ul><!-- tocstop --></div><h2><span id="nand-flash-ssds">Nand Flash SSDs</span><a href="#nand-flash-ssds" class="header-anchor">¶</a></h2><h3><span id="basics">basics</span><a href="#basics" class="header-anchor">¶</a></h3><ol><li><p>Terminology in flash: banks consist of blocks; and blocks consist of pages.</p><ul><li>banks/planes: consist of a large number of cells</li><li>blocks: size 128 KB or 256 KB</li><li>pages: size 4 KB</li><li>cell level<ul><li>one level: store a single bit into a transistor(1/0)</li><li>multi-level: store two bits into different levels of charge(00/01/10/11)… etc</li></ul></li></ul><ul><li><p>Flash-based SSDs</p><ul><li>Flash translation layer(FTL)</li><li>Logical block address(LBA)</li></ul></li></ul></li><li><p>basic flash operations</p><ul><li>Read(a page)</li><li>Erase(a block)</li><li>Program(a page)</li></ul></li><li><p>Page has state: <code>INVALID</code>, <code>ERASED</code>, <code>VALID</code></p></li><li><p>raw flash performance</p><ul><li>device property: <strong>a page can be written until the entire block first be erased.</strong></li><li>Given above property: program-erase cycle<ol><li>latency: we should move data that is about to be erased to another place.</li><li>Problem of reliability: wear out</li></ol></li></ul></li><li><p>FTL organization</p><ul><li>direct mapped: an operation to logical page N is mapped to physical page N.<ul><li>Bad: causing the flash constantly overwritten and worn out eventually</li></ul></li><li>log structured: in-memory mapping table<ul><li>Good:use logging to speedup recovery</li></ul></li></ul></li></ol><h3><span id="performance">performance</span><a href="#performance" class="header-anchor">¶</a></h3><p>Performance problem:</p><ol><li><p>Flash operation: erase &gt;&gt; program(10*) &gt;&gt; read (10*)</p><ul><li>How to improve:<ol><li>parallel</li><li>reduce write amplification</li></ol></li></ul></li><li><p><u>garbage collection</u>(Log-structured FTL): old versions of data takes over the space.</p><p>Overwritten -&gt; garbage data -&gt; data migration</p></li><li><p>high cost of in-memory <u>mapping table</u>(Log-structured FTL)</p></li></ol><p>Riliability problem:</p><ol><li><p>Wear out</p><p>(Head crash in mechanical disk in contrast)</p><ul><li><u>wear leveling</u>: spread writes across the blocks evenly</li></ul></li><li><p>Disturbance: When accessing a page within a flash, some bits can get flipped in neighboring pages.</p><ul><li>sequential programming: write pages in order can reduce the disturbance.</li></ul></li></ol><h3><span id="garbage-collection">garbage collection</span><a href="#garbage-collection" class="header-anchor">¶</a></h3><p>…</p><h3><span id="mapping-table">mapping table</span><a href="#mapping-table" class="header-anchor">¶</a></h3><h3><span id="wear-leveling">wear leveling</span><a href="#wear-leveling" class="header-anchor">¶</a></h3><h2><span id="disk-drive-modeling">Disk drive modeling</span><a href="#disk-drive-modeling" class="header-anchor">¶</a></h2><p>os view of storage device: linear array of logical blocks.</p>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> storage systems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Programming Excercises in CSAPP</title>
      <link href="/sg/2022/04/23/ex_cpp/"/>
      <url>/sg/2022/04/23/ex_cpp/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ps0">Ps0</a></li><li><a href="#sec-1">Sec 1</a></li><li><a href="#ps1-a-debugging-memory-allocator">Ps1: a debugging memory allocator</a></li></ul><!-- tocstop --></div><h2><span id="ps0">Ps0</span><a href="#ps0" class="header-anchor">¶</a></h2><p>seems nice.</p><h2><span id="sec-1">Sec 1</span><a href="#sec-1" class="header-anchor">¶</a></h2><ol><li><p>can’t call ++it when it == container.end(), otherwise segmentation fault.</p></li><li><p>Prefer ++i than i++</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1</span>;</span><br><span class="line">j = ++i; <span class="comment">//(i is 2, j is 2)</span></span><br><span class="line">   </span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">j = i++; <span class="comment">// (i is 2, j is 1)</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="ps1-a-debugging-memory-allocator">Ps1: a debugging memory allocator</span><a href="#ps1-a-debugging-memory-allocator" class="header-anchor">¶</a></h2><p>Context:</p><ol><li>malloc is not perfect and can fail due to various reasons such as size was too big/memory is exhausted/…</li><li>undefined behavior: any program that invokes undefined behavior has no meaning.</li></ol><p>Syntax:</p><ol><li><p>const</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const pointer point to const member function which takes const pointer </span></span><br><span class="line"><span class="comment">// to a const int. The last const means this is a const member function</span></span><br><span class="line"><span class="comment">// (can&#x27;t modify variables of the this instance)</span></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> <span class="title">myClassMethod</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> &amp; param)</span> <span class="type">const</span></span>; </span><br></pre></td></tr></table></figure></li><li><p>type casting</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// internal metadata</span></span><br><span class="line">std::unordered_map&lt;<span class="type">uintptr_t</span>, <span class="type">size_t</span>&gt; payload;</span><br><span class="line">payload.<span class="built_in">insert</span>(&#123;(<span class="type">uintptr_t</span>)ptr, sz&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>Problem:</p><ol><li>How to count the allocations?<ul><li>augmentation</li></ul></li><li>When will allocation fail?<ul><li>Stuck for two hours. I thought I could not modify funcation signature(return type). Therefore I overlooked the right direction.</li><li><s>?relation in heap max address and failed allocations.</s> Answer: when malloc fails, base_alloc(malloc) will return a nullptr, which is the usual case.</li></ul></li><li>allocated address of heap: overlap with other regions<ul><li>Key: heap_first</li><li>Answer: should set heap_min only once</li></ul></li></ol><p>Design:</p><ol><li>Basic version:<ul><li>use hash table(pointer value/address: size)</li><li>bounded metadata: last N freed allocations, and set N = 10.<ul><li>should check size once updates data</li></ul></li></ul></li><li>augmentation: use a struct</li></ol><img src="/sg/2022/04/23/ex_cpp/Screenshot-3286619.png" class title="Screenshot-3286619"><p>Problem:</p><ol><li>where to put metadata?<ul><li>global use</li></ul></li><li>How to bound metadata?<ul><li>First, what is bounded metadata?<ul><li>ex: a <em>bounded</em> amount of metadata about freed allocations, such as statistics or a list of the last N freed allocations.</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
          <category> cs 61 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Beginner&#39;s Guide to Setting up QEMU Devel Env</title>
      <link href="/sg/2022/04/15/qemu-develop/"/>
      <url>/sg/2022/04/15/qemu-develop/</url>
      
        <content type="html"><![CDATA[<p>Example: test io_uring.c in QEMU</p><p>Environment: Fedora 35</p><p>It requires a host<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> os having a new kernel, QEMU and liburing.git(one specific version).</p><p><strong>build the kernel from source</strong>:</p><p>various mistakes can arrive when installing new kernel from source. However, there are certain steps requiring more attention.</p><p>When I found a seemly <a href="https://www.cyberciti.biz/tips/compiling-linux-kernel-26.html">good tutorial</a> and tried it: Read error message to know which type of error and google it.</p><ol><li><p>security check in config file(this part is literally killing me :): you can disable security check by <a href="https://askubuntu.com/questions/1329538/compiling-the-kernel-5-11-11">modifying config file</a>.</p><p>If you meet a SSL error when <code>make modules_install</code> like me after disabling the security check above and discover that <a href="https://askubuntu.com/questions/820883/how-to-resolve-ssl-error-during-make-modules-install-command">sign file missing</a>, you may check  <code>CONFIG_SYSTEM_TRUSTED_KEYS='certs/signing_key.pem'</code> and remake again.</p></li><li><p>Orders of make commands:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make menuconfig</span><br><span class="line">make -j 8</span><br><span class="line">make modules</span><br><span class="line">make bzImage</span><br><span class="line">sudo make modules_install</span><br><span class="line">sudo make install</span><br><span class="line">sudo kernel-install add &lt;version&gt; /boot/vmlinuz-&lt;version&gt;  <span class="comment"># Fedora linux</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>build QEMU from source</strong>: Follow the documentation</p><p><strong>build liburing from source:</strong> After this step, liburing support can be found in config with version 2.2 and QEMU should run correctly.</p><ol><li><p>check a few things before <code>make install</code>:</p><ul><li><p>right kernel version:  <code>uname -ra</code> -&gt; <code>5.17-rc7</code></p></li><li><p>No liburing package(liburing and liburing-devel) installed</p></li></ul></li><li><p>Orders of commands: configure it first</p><p>after fetching liburing.git:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --libdir=/usr/lib64 --libdevdir=/usr/lib64  <span class="comment"># /usr/lib for Ubuntu Linux</span></span><br><span class="line">make &amp;&amp; sudo make install</span><br></pre></td></tr></table></figure></li></ol><p>It should work by now.</p><p><strong>Qemu:</strong></p><p>it is better to know common commands to trace, debug, test.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># default setting:</span></span><br><span class="line">x86_64-softmmu/qemu-system-x86_64 -m 512 --enable-kvm</span><br><span class="line"></span><br><span class="line"><span class="comment"># create img:</span></span><br><span class="line">./qemu-img create -f qcow2 test.qcow2 16G</span><br><span class="line">./qemu-img create test.img 2G</span><br><span class="line"></span><br><span class="line"><span class="comment"># add test</span></span><br><span class="line">path/to/qemu-system-x86_64 -m 1024 -enable-kvm -drive <span class="keyword">if</span>=virtio,file=path/to/test.img,format=raw,aio=io_uring,cache=none</span><br><span class="line"></span><br><span class="line"><span class="comment"># trace</span></span><br><span class="line"><span class="comment"># want to trace: ioq_*, luring_*, qemu_luring_* and write into txt files.</span></span><br><span class="line">./configure --target-list=x86_64-softmmu --enable-kvm --enable-debug --enable-trace-backends=simple</span><br><span class="line"><span class="comment"># in qemu dir:</span></span><br><span class="line">path/to/qemu-system-x86_64 -m 1024 -enable-kvm -drive <span class="keyword">if</span>=virtio,file=path/to/test.img,format=raw,aio=io_uring,cache=none --trace events=reach.txt</span><br><span class="line"><span class="comment"># gdb</span></span><br><span class="line">gdb -q --args path/to/qemu-system-x86_64 -drive file=test.img,<span class="keyword">if</span>=virtio,aio=io_uring --enable-kvm -smp 2 -m 1G</span><br></pre></td></tr></table></figure><p><strong>Err log:</strong></p><p>I have met a lot of issues<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> when setting up the enviroument. Luckily, the mentors of QEMU are very good and patient to go through this with me.</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>it should be noticed that the host and guest in QEMU stand for. QEMU host is where QEMU runs and guest is to run on QEMU. In QEMU’s term, “–enable-kvm” ensures QEMU is running on the host and “-kernel” implies a guest os running. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>Attach a <a href="https://gist.github.com/sgzerolc/9a142bcc544fa13819db523397898685">log</a> here. I will reorganize it when outreachy application term finishes. <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《孙子兵法译注》——读记</title>
      <link href="/sg/2022/04/15/read_art_of_war/"/>
      <url>/sg/2022/04/15/read_art_of_war/</url>
      
        <content type="html"><![CDATA[<blockquote><p>知彼知己，百战不殆；不知彼而知己，一胜一负；不知彼，不知己，每战必殆。 （3，20）</p></blockquote><p>know yourself 不管在哪都是永恒的话题。</p><blockquote><p>昔之善战者，先为不可胜，以待敌之可胜。不可胜在己，可胜在敌。</p><p>故善战者，能为不可胜，不能使敌之必可胜。</p><p>故曰：胜可知，而不可为。</p><p>不可胜者，守也；可胜者，攻也。守则不足，攻则有余。</p><p>善守者，藏于九地之下。善攻者，藏于九天之上。</p><p>故能自保而全胜也。   （4，21）</p></blockquote><p>攻守是根据自己的强弱决定的。不过战争和决策不同的是，战争要减少损伤，而决策的成本相对更低。所以战争要全胜，而决策要考虑结果的重要性。</p><blockquote><p>古之所谓善战者，胜于易胜者也。故善战者之胜也，无智名，无勇功。故其战胜不忒。</p><p>不忒者，其所措必胜，胜已败者也。</p><p>故善战者，立于不败之地，而不失敌之败也。</p><p>是故胜兵先胜而后求战，败兵先战而后求胜。（4，22）</p></blockquote><p>这里是说要先有取胜的形，而形来自于战前部署。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>IO_uring&#39;s API and Implementation in QEMU</title>
      <link href="/sg/2022/04/08/qemu_iouring/"/>
      <url>/sg/2022/04/08/qemu_iouring/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#qemu-structures">Qemu structures</a></li><li><a href="#brief-introducation">brief introducation</a></li><li><a href="#api">API</a></li><li><a href="#implementation">Implementation</a></li></ul><!-- tocstop --></div><h2><span id="qemu-structures">Qemu structures</span><a href="#qemu-structures" class="header-anchor">¶</a></h2><table><thead><tr><th>Terminology</th><th>Concept</th></tr></thead><tbody><tr><td>Protocols</td><td>file system, block device, NBD, Ceph, gluster</td></tr><tr><td>virtio</td><td>behave like a memory-mapped register bank, different register layout</td></tr><tr><td>Network cards</td><td>e1000 card on the PCI bus</td></tr><tr><td>Host formats</td><td>raw, qcow2, qed, vhdx</td></tr></tbody></table><ol><li><p>what?</p><p>QEMU is a virtual machine trying to emulate OS without actual hw so as to run multiple OS in single machine.</p></li><li><p>why?</p><p>The general purpose of virtual machine is to trick the guest os that it is running on the real host os. Qemu is designed to manage this big memory to achieve better formance in emulation.</p></li><li><p>how?</p><ul><li>“Accelerator”: Trap and emulate</li><li>“Paravirtualization”: tradeoff between virtualization in os and emulation in devices -&gt; virtio</li></ul></li></ol><img src="/sg/2022/04/08/qemu_iouring/Screenshot.png" class title="Screenshot"><p>I/O path in VM<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>: host view of qemu is like additional RAM(a big chunk of memory and that’s it)</p><img src="/sg/2022/04/08/qemu_iouring/Screenshot-9477410.png" class title="Screenshot-9477410"><h2><span id="brief-introducation">brief introducation</span><a href="#brief-introducation" class="header-anchor">¶</a></h2><p>Terminology in QEMU’s event loop:</p><table><thead><tr><th>Event sources</th><th>Abbr.</th><th>Usage</th></tr></thead><tbody><tr><td>Bottom-halves</td><td>BHs</td><td>Invoke a function in another thread or deferring a func call to avoid reentrancy</td></tr><tr><td>Asynchronous I/O context</td><td>aio_ctx</td><td>Event loop</td></tr></tbody></table><ol><li><p>Io_uring is a kernel ring buffer for asynchronous communication with kernel.</p><ul><li>Current integration into qemu: use epoll for completion check; use io_uring_enter() for submission; check completion on irq</li><li>Improvement: want to use fd registration</li></ul></li><li><p>Two ways to solve blocking mode problems(blocked processes are suspended): nonblocking mode, I/O multiplexing syscalls(async IO).</p><p>Async IO syscalls like select, poll, epoll</p><ol><li>Scenario: server wants to know if new input comes. Run program to know states -&gt; Ask Linux kernel which file changes -&gt; monitor file descriptors</li><li>poll: choose specific fds to monitor. Select:choose a range of fds to monitor.</li><li>Poll and select need kernel to check fds whether are available for writing, which takes a lot of time. Epoll(not for regular files) avoids the problem: create, control<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, wait</li></ol></li><li><p>Coroutines in qemu: write multiple processes in a sequential way compared to callback<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup> for correct order in scheduling.</p><ol><li><p>rules of scheduling:</p><ul><li>Explicit: other cpu sees coroutines.</li><li>only one coroutine executes at a time; can’t be interrupted</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># using callbacks: the list can go on and on</span><br><span class="line">start():</span><br><span class="line">send(&quot;ask&quot;,step1)</span><br><span class="line">step1():</span><br><span class="line">read(step2)</span><br><span class="line">step2():</span><br><span class="line">send(&quot;hi, %s&quot;,name, step3)</span><br><span class="line">step3():</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"># using coroutines</span><br><span class="line">coroutine_say_hi():</span><br><span class="line">co_send(&quot;ask&quot;)</span><br><span class="line">name = co_read()</span><br><span class="line">co_send(&quot;hi, %s&quot;, name)</span><br><span class="line"># done here</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>API<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><p>Struct: coroutine</p><p>Transfer of control: enter, yield</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">void</span> coroutine_fn <span class="title function_">CoroutineEntry</span><span class="params">(<span class="type">void</span> *opaque)</span>;</span><br><span class="line">Coroutine *<span class="title function_">qemu_coroutine_create</span><span class="params">(CoroutineEntry *entry, <span class="type">void</span> *opaque)</span>;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>event loop in QEMU</p><p>two stucts appear in io_uring: AioContext, BH.</p><p>common APIs<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup> in even loop are: aio_set_fd_handler(),  aio_set_event_handler(), aio_timer_init(), aio_bh_new()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QEMUBH</span> &#123;</span></span><br><span class="line">    AioContext *ctx;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    QEMUBHFunc *cb;</span><br><span class="line">    <span class="type">void</span> *opaque;</span><br><span class="line">    QSLIST_ENTRY(QEMUBH) next; <span class="comment">// point to next eleent</span></span><br><span class="line">    <span class="type">unsigned</span> flags;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AioContext</span> &#123;</span></span><br><span class="line">    BHList bh_list;</span><br><span class="line">    QSIMPLEQ_HEAD(, BHListSlice) bh_slice_list;</span><br><span class="line">...</span><br><span class="line">    QSLIST_HEAD(, Coroutine) scheduled_coroutines;</span><br><span class="line">    QEMUBH *co_schedule_bh;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadPool</span> *<span class="title">thread_pool</span>;</span></span><br><span class="line">...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2><span id="api">API</span><a href="#api" class="header-anchor">¶</a></h2><h2><span id="implementation">Implementation</span><a href="#implementation" class="header-anchor">¶</a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://archive.fosdem.org/2020/schedule/event/vai_io_uring_in_qemu/attachments/slides/4145/export/events/attachments/vai_io_uring_in_qemu/slides/4145/io_uring_fosdem.pdf">Io_uring in qemu</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.com/torvalds/linux/blob/v4.10/fs/eventpoll.c#L1849">linux/eventpoll.c</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>Callback function is reentrant code meaning it can be called even while a call to it is underway. Like recv(pkt, via_ron), it is called when a packet arrives for the client program. <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://github.com/qemu/qemu/blob/master/include/qemu/coroutine.h#L58">qemu/include/qemu/coroutine.h</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://github.com/qemu/qemu/blob/master/include/block/aio.h#L466">qemu/include/block/aio.h</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> FOSS </category>
          
          <category> QEMU </category>
          
      </categories>
      
      
        <tags>
            
            <tag> code reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>os virtual machine</title>
      <link href="/sg/2022/04/06/os_virtual_machine/"/>
      <url>/sg/2022/04/06/os_virtual_machine/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#what-and-why">what and why</a></li><li><a href="#trap-and-emulate">Trap and emulate</a><ul><li><a href="#procedure">procedure</a></li><li><a href="#page-table">Page table</a></li><li><a href="#device">device</a></li></ul></li><li><a href="#hardware-support">hardware support</a></li></ul><!-- tocstop --></div><p>After taking a glance at QEMU, I decide to review this lecture to gain more understandings of virtual machine.</p><h2><span id="what-and-why">what and why</span><a href="#what-and-why" class="header-anchor">¶</a></h2><ol><li>Virtual machine: simulation of a computer</li><li>Why: we want run lots of guest service in one physical machine</li></ol><h2><span id="trap-and-emulate">Trap and emulate</span><a href="#trap-and-emulate" class="header-anchor">¶</a></h2><h3><span id="procedure">procedure</span><a href="#procedure" class="header-anchor">¶</a></h3><img src="/sg/2022/04/06/os_virtual_machine/Screenshot-9333584.png" class title="Screenshot-9333584"><h3><span id="page-table">Page table</span><a href="#page-table" class="header-anchor">¶</a></h3><p>Shadow page table in VMM</p><ul><li><img src="/sg/2022/04/06/os_virtual_machine/Screenshot-9334514.png" class title="Screenshot-9334514"></li></ul><p>Problem: It can’t be allowed that guest pgtbl satp escapes and modifies host pgtbl</p><p>To prevent guest escaping from VMM, guest can’t run in host supervisor mode. VMM will modify virtual state to provide illusions for guests.</p><h3><span id="device">device</span><a href="#device" class="header-anchor">¶</a></h3><ol><li>emulation: trap and emulate</li><li>Virtual device: device interface is designed to decrease trap times, which saves houndreds of CPU cycles</li><li>Pass-through: NIC</li></ol><h2><span id="hardware-support">hardware support</span><a href="#hardware-support" class="header-anchor">¶</a></h2><img src="/sg/2022/04/06/os_virtual_machine/hs.png" class title="hardware_support">]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.s081 operating systems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Intro to xv6</title>
      <link href="/sg/2022/04/01/os_basics/"/>
      <url>/sg/2022/04/01/os_basics/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#design-points">Design points</a></li><li><a href="#interfaces">Interfaces</a><ul><li><a href="#process">Process</a></li><li><a href="#file-descriptor-and-i-o">File descriptor and I/O</a></li><li><a href="#pipe">Pipe</a></li><li><a href="#fs">Fs</a></li></ul></li><li><a href="#organization">Organization</a></li><li><a href="#virtual-memory-techniques">Virtual memory techniques</a><ul><li><a href="#page-tables">Page tables</a></li></ul></li><li><a href="#traps">Traps</a><ul><li><a href="#trap-machanism">Trap machanism</a></li><li><a href="#page-fault-exceptions">Page fault exceptions</a></li><li><a href="#device-interrupts">Device interrupts</a></li></ul></li><li><a href="#concurrency-control">Concurrency control</a><ul><li><a href="#lock">Lock</a></li><li><a href="#threads">Threads</a></li></ul></li><li><a href="#file-systems">File systems</a></li><li><a href="#case-study-ext3">case study: ext3</a></li><li><a href="#network-stack">Network stack</a></li><li><a href="#case-study-meltdown">case study: meltdown</a></li><li><a href="#case-study-rcu">case study: RCU</a><ul><li><a href="#design">Design</a></li><li><a href="#mechanisms">Mechanisms</a></li><li><a href="#usages">Usages</a></li></ul></li><li><a href="#basics">Basics</a><ul><li><a href="#c">C</a></li><li><a href="#risc-v-convention">RISC-V convention</a></li><li><a href="#gdb">GDB</a></li><li><a href="#lookup-table">Lookup table</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="design-points">Design points</span><a href="#design-points" class="header-anchor">¶</a></h2><ol><li>Few mechanisms provide enough generality: xv6 provides a Unix-like interface which contains the basic concepts to resolve the tradeoff between supporting many devices and using a simple interface.</li><li>What is one syscall in xv6? Xv6 has one <code>kernel</code> runs programs (<code>process</code>), process in the user space calls (<code>syscall</code>) kernel to provide services.<ul><li>Each process has memory which cantains instructions, data and stack. Stacks manages procedure calls.</li><li>Kernel provides services as process, memory, fd, pipes, fs.</li><li>Shell is a command-line user interface. It’s a user program.</li></ul></li><li>Chap1: xv6 provides simplicity and generality for Unix-like os flavour but it does not follow POSIX standard and follow users notion. All xv6 processes run as root. The functionalities it misses are user-level threads, … (Intended to develop this)</li><li>Chap2:<ul><li>xv6 runs entire os in kernel. The concept is monolithic though it provides less kernel services than some microkernel.</li><li>xv6’s process has one thread. Modern os supports several threads within a process</li></ul></li><li>Chap3: 3-level page table to save memory when most va is not mapped. The idea is to allocate pages on demand.</li><li>Chap4:  Xv6 kernel handles all traps. It has separate io path for three cases for convenience (<s>for commonality only single path</s>): traps from user space, traps from kernel space, timer interrupts.<ul><li>k/u isolation security: Xv6 simplifies the CPU h/w’s trap handling sequence by making kernel s/w switch to kpgtbl, kstack and save regs except pc.</li></ul></li><li>Chap5: device and timer interrupts while executing in the kernel and user programs.</li><li>Chap7: the scheduling policy is running processes in turn as is <code>round robin</code></li><li>Chap8: xv6 provides Unix-like fs and stores data on a virtio disk for persistence.</li></ol><h2><span id="interfaces">Interfaces</span><a href="#interfaces" class="header-anchor">¶</a></h2><h3><span id="process">Process</span><a href="#process" class="header-anchor">¶</a></h3><ol><li>Xv6 time-shares processes by switching the available CPU between the process waiting to execute.</li><li>Xv6 allocates memory for each process implicitly:<ul><li><code>fork</code> allocates the enough memory for its child process (copy of the parent’s memory), <code>exec</code> allocates the memory for the executable file</li><li>run-time memory is changed by <code>sbrk(n)</code>, which grows the data memory of process by n.</li></ul></li><li>Xv6 manages processes:<ul><li>create: <code>fork</code></li><li>close: <code>exit</code>, <code>wait</code> (wait for the child’s process)</li><li>replace the process memory of calling process with new file img: <code>exec</code></li></ul></li></ol><h3><span id="file-descriptor-and-i-o">File descriptor and I/O</span><a href="#file-descriptor-and-i-o" class="header-anchor">¶</a></h3><ol><li><p>File descriptors abstract I/O objects like device, file, pipes.</p></li><li><p>Every fd has its own offset. Fds share the offset of the file if the fd is crated by <code>dup</code> or <code>fork</code>. That’s why I/O direction in the shell is easy to implement.</p><ul><li><p><code>fork</code> copies parent’s fd table as well while <code>exec</code> preserves the fd table of calling process. So exec can change the original fd.</p></li><li><p><code>dup</code>: <code>ls existing-file non-existing-file &gt; tmp1 2&gt;&amp;1</code>, &amp;1 means dup(1) which shares err files with output file tmp1, therefore tmp1 would have correct and wrong ones.</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cat &lt; input.txt </span></span><br><span class="line"><span class="comment">// Read from stdin</span></span><br><span class="line"><span class="type">char</span> *argv[<span class="number">2</span>];</span><br><span class="line">argv[<span class="number">0</span>] = <span class="string">&#x27;cat&#x27;</span>;</span><br><span class="line">argv[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span><br><span class="line">  close(<span class="number">0</span>);</span><br><span class="line">  open(<span class="string">&quot;input.txt&quot;</span>, O_RDONLY);</span><br><span class="line">  exec(<span class="string">&quot;cat&quot;</span>, argv);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// (echo hello; echo world) &gt;output.txt</span></span><br><span class="line"><span class="comment">// fork version: </span></span><br><span class="line"><span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// write 1 hello;</span></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  wait(<span class="number">0</span>); </span><br><span class="line">  <span class="comment">// write 1 world</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dup version:</span></span><br><span class="line">fd = dup(<span class="number">1</span>);</span><br><span class="line">write(<span class="number">1</span>, );</span><br><span class="line">write(fd, );</span><br></pre></td></tr></table></figure></li><li><p>Processes have 3 private fds, 0 for stdin, 1 for stdout, 2 for stderr.</p><ul><li><code>read</code>, <code>write</code>: returns 0 if data r/w completes, &gt; 0 if in the process, &lt; 0 if err occurs</li><li><code>pipe</code>: A pipe is a kernel buffer. It has a pair of fds, one for read and one for write.They share the data read from or written to.</li></ul></li></ol><h3><span id="pipe">Pipe</span><a href="#pipe" class="header-anchor">¶</a></h3><ol><li><p>The read on the pipe blocks until it’s improssible to receive new data.</p><p>If stdin is associated with either end of pipe, then exec will wait if there is the new data waiting to r/w. So the pipe ends before write/read are alway closed in this chunk.</p><ul><li>Pipe[0] read, pipe[1] write.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wc &lt; &quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>) &#123;</span><br><span class="line">close(<span class="number">0</span>); </span><br><span class="line">dup(p[<span class="number">0</span>]); <span class="comment">// p[0] donates its data to file descriptor 0</span></span><br><span class="line">close(p[<span class="number">0</span>]); <span class="comment">// p[0] no longer needed in child since stdin is a copy</span></span><br><span class="line">close(p[<span class="number">1</span>]);</span><br><span class="line">exec(<span class="string">&quot;/bin/wc&quot;</span>, argv);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">close(p[<span class="number">0</span>]);</span><br><span class="line">write(p[<span class="number">1</span>], <span class="string">&quot;hello world\n&quot;</span>, <span class="number">12</span>);</span><br><span class="line">close(p[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Process tree: <code>grep fork sh.c | wc -l</code></p><p>The child process creates a pipe to connect the left end of the pipe with the right end. Fork + runcmd will then run the cmd of the left end and the right end. The right end of the pipeline can also be a pipe. Therefore a processes tree generates.</p><ul><li><code>echo hi | wc</code></li><li><code>sleep 10 | echo hi</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PIPE:</span><br><span class="line">  pcmd = (<span class="keyword">struct</span> pipecmd*)cmd;</span><br><span class="line">  <span class="keyword">if</span>(pipe(p) &lt; <span class="number">0</span>)</span><br><span class="line">    panic(<span class="string">&quot;pipe&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span>(fork1() == <span class="number">0</span>)&#123;</span><br><span class="line">    ... <span class="comment">//p[1]</span></span><br><span class="line">    runcmd(pcmd-&gt;left);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(fork1() == <span class="number">0</span>)&#123;</span><br><span class="line">    ... <span class="comment">//p[0]</span></span><br><span class="line">    runcmd(pcmd-&gt;right);</span><br><span class="line">  &#125;</span><br><span class="line">... <span class="comment">// close pipe ends</span></span><br><span class="line">  wait(<span class="number">0</span>);</span><br><span class="line">  wait(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></li><li><p>Pipe vs temp files: in memory vs in disk</p><ul><li><code>echo hello world | wc</code></li><li><code>echo hello world &gt;/tmp/xyz; wc &lt;/tmp/xyz</code></li></ul></li></ol><h3><span id="fs">Fs</span><a href="#fs" class="header-anchor">¶</a></h3><ol><li><p>Fs -&gt; data files -&gt; File/Dir -&gt; filename + inode -&gt; type +length + location + Links -&gt; (filename, reference/to/inode)</p></li><li><p>Find file: path/to/file, <code>/</code> is the root path; relative path.</p></li><li><p>Create file/device file: <code>mkdir</code>, <code>mknod</code>. Mknod associates kernel device with the major and the minor device numbers. The kernel diverts syscalls to the device implementation instead of fs.</p></li><li><p>A file has an underlying file called inode. It cantains metadata.</p><ul><li><code>fstat</code></li></ul></li><li><p>Fs utilities are user-level programs. The command line interfaces can add the same user-level programs to provide such utilities. However,<code>cd</code> is built into the shell because the forked child process cannot change the memory of the parent process.</p></li></ol><h2><span id="organization">Organization</span><a href="#organization" class="header-anchor">¶</a></h2><ol><li>Os MUST provides time-sharing resources and applicable isolation(interact when required) among processes.<ul><li>Fancy terms: <code>multiplexing, isolation, interaction</code></li></ul></li><li>Let’s count what does xv6 have:<ul><li>1 monolithic kernel</li><li>many processes (the unit of isolation)</li><li>runs on a multi-core RISC-V microprocessor: 64-bit, “LP64” C</li><li>hardwares: RAM, ROM, screen, disk (simulated by qemu -machine virt)</li></ul></li><li>Design points:<ul><li>Abstract physical resources: Library Vs Outside manager<ul><li>Library: Applications access devices like a library. App decides when to leave the process.</li><li>Manager: Os manages who enters/leaves the process and when.</li></ul></li><li>Provide strong isolation: if one process is down, others should not be corrupted by it.<ul><li>hw support of CPU when executes instructions: RISC-V provides three modes: <code>machine, supervisor, user</code>.</li><li>privileged instruction - kernel space, user-mode instruction - user space</li><li>A user app invoking kernel service must transit to the kernel space first: RISC-V  <code>ecall</code> . It switches CPU u -&gt; k and enters k at an entry point controlled by k</li></ul></li><li>What part of os runs in supervisor mode:<ul><li>Term: <code>monolithic kernel</code>: all. Good to coperate/share and bad side is unsafe.</li><li>Term: <code>microkernel</code>: part. Good side is safe and bad to coperate/share.</li><li>Term: Os running processes as service is called <code>server</code></li></ul></li></ul></li><li>Process provides strong isolation<ul><li>mechanisms implementing process: user/super mode flag, address spaces, time-slicing of threads</li><li>hw support: Xv6 manages process memory via page tables (RISC-V support).</li></ul></li><li>Process internals:<ul><li>Process has private memory system/address space. An address space contains user memory starting at va 0. Xv6 uses 38 bits of 39 bits. Max address is 2^38 - 1.<br>| user text and data | user stack |  heap| trapframe|trampoline|<br>0 ------------------------------------------------------------&gt;                              MAXVA</li><li>Process has kernel states and user states. Kernel states are its pgtbl, kernel stack, run state.</li><li>A process has a <u>thread</u> of execution that <u>executes the process’s instructions</u>. Thread state (local variables, function call,return address) is stored on the thread’s stacks.</li><li>A process has two stacks: u stack, k stack.</li><li>A process makes sys call by <code>ecall</code>, exit k space by <code>sret</code>.</li></ul></li><li>I/O path<ul><li>Initialization: console,  vm stuff (page table,process table, trap vector, interrupt handler, device interrupts), fs stuff (buffer cache, inode cache, file table, hard disk)</li><li>Boot xv6 and start the first process<ul><li>RISC-V Machine mode -&gt; Supervisor mode; xv6 jumps to kernel space<img src="/sg/2022/04/01/os_basics/boot.png" class title="boot"></li></ul></li></ul></li></ol><h2><span id="virtual-memory-techniques">Virtual memory techniques</span><a href="#virtual-memory-techniques" class="header-anchor">¶</a></h2><ol><li><p>paging hardware:</p><ul><li>terms<ul><li>RISC-V hw supports page table. Its instructions deals with <code>va</code>.</li><li>Sv39 RISC-V only uses the bottom 39 bits to represent <code>va</code>.</li><li>Storage cell DRAM is where r/w physical memory.</li><li>Virtual memory is not physical as va and pa but the abstraction and machanisms to manage va and pa.</li></ul></li><li>geometry: <code>va</code> (39 bit) = PTE_index (27 bit) +  flag bit (12 bit). PA (56 bit) = PPN (upper 44 bits of the PTE) + offset (lower 12 bits of VA). 2^27 = # of PTE.</li><li><code>satp</code>: supervisor address translation and protection, reserves the <code>pa</code> of page tables.<ul><li><img src="/sg/2022/04/01/os_basics/pt.png" class title="pt">   </li></ul></li></ul></li><li><p>Cache of (VA, PA) is Translation Lookside Buffer when finding PA for the VA</p><ul><li>TLB will be cleared when switching page table. RISC-V instruction for that is:<code>sfence_vma</code></li></ul></li><li><p>Address space:</p><ul><li><p>Xv6 maintains 1 page table per process in the user space and 1 page table for kernel space.</p></li><li><p>Kernel uses <u>direct mapping</u> to get access to RAM and memory mapped devices.</p></li><li><p>Not directly mapped: high-memory mapping</p><ul><li>trampoline page</li><li>stack pages: have an unmapped guard page with PTE invalid.</li></ul></li><li><p>process address space and kernel address space</p><img src="/sg/2022/04/01/os_basics/vm.png" class title="vm">     </li></ul></li><li><p>I/O path</p><ul><li>physical memory allocation: free pages are stored in the linked list.</li><li>Syscall<ul><li>sbrk: grow/shrink the memory</li><li>exec: create the user part of an address space</li></ul></li></ul></li></ol><h3><span id="page-tables">Page tables</span><a href="#page-tables" class="header-anchor">¶</a></h3><p>Translation of <code>va</code> to <code>pa</code>: Page tables are stored as a three-level tree in physical memory. The 27 bits of a virtual address denote the indices of three levels. The root level tree is a 4KB page which holds 512 PTEs which point to the next-level page via the physical address (PPN) stored at the PTE. Each of those pages hold the 512 PTEs for the final level in the tree. If any PTE required by the va is not there, a page fault exception occurs.</p><p>High-memory mapping indirectly maps trampoline page and kernel stack (along with the guard page) high of virtual address space. They are also accessiable through direct mapping, making one virtual address mapped twice. Using direct mapping only would waste physical memory whose corresponding virtual memory is unmapped for allocating guard pages. If a kernel stack page in the kernel address space overflows, kernel panics for invalid mapping of the correspnding guard page.</p><p>Each process has a page table. If the user stack of a process overflows, the hardware generates a page-fault exception for invalid mapping. The kernel is not a process. A process is a running program together with all the state the kernel needs to manage it.</p><p>The limitations of xv6’s paging mechanism:</p><ol><li>Direct mapping and known address of the physical RAM supported by QEMU.</li><li>The RISC-V feature of protection at the level of physical address is not used.</li><li>Xv6 allocates 4096-byte pages. It doesn’t support small allocations and thus cannot use sophicated data structures that require dynamic allocation.</li></ol><h2><span id="traps">Traps</span><a href="#traps" class="header-anchor">¶</a></h2><h3><span id="trap-machanism">Trap machanism</span><a href="#trap-machanism" class="header-anchor">¶</a></h3><ol><li>What: <code>trap</code> refers to event that mandatorily forces a transfer of control from the execution of ordinary instructions to special code that handles the event. Three kinds of such event are.syscalls, exception and device interrupt.<ul><li>syscalls: <code>ecall</code></li><li>exception: u/k illegal instruction, e.g. divide by zero, invalid virtual address</li><li>device interrupt: device signals when r/w req finishes</li></ul></li><li>RISC-V machinery:<ul><li>The kernel writes address/value to registers to control io path (risc-v detects regs)<ul><li><code>stvec</code>, addr of trap handler</li><li><code>sepc</code>, risc-v saves program counter when a trap occurs. <code>sret</code> copies <code>sepc</code> to <code>pc</code> when returned from trap.</li><li><code>scause</code>, risc-v saves the cause of the trap</li><li><code>sscratch</code>, a value at the start of a trap handler (as from scratch)</li><li><code>sstatus</code>, <code>SIE</code> set if interrupts are enabled. <code>SPP</code> tells user/supervisor mode a trap came from and controls what <code>sret</code> returns</li></ul></li><li>The registers related to traps handled in supervisor mode. Xv6 has a similar set of registers for traps handled in machine mode.</li><li>Each CPU has its own set of registers. &gt;=1 CPU may be handling a trap at anytime.</li><li>Procedures of risc-v h/w: if an interrupt -&gt; no, disable SIE -&gt; <code>pc =&gt; sepc</code>, <code>sw SPP =&gt; sstatus</code> -&gt; set scause, su mode -&gt; <code>stvec =&gt; pc</code> -&gt; execute new pc</li></ul></li><li>Trap machanism<ul><li><img src="/sg/2022/04/01/os_basics/trap.png" class title="trap"></li></ul></li><li>Traps from user space</li><li>Traps from kernel space</li></ol><h3><span id="page-fault-exceptions">Page fault exceptions</span><a href="#page-fault-exceptions" class="header-anchor">¶</a></h3><p>key mechanism: when a CPU cannot translate a virtual address to a physicall address, the CPU generates page-fault exception.</p><p>Copy-on-write (COW) fork</p><ul><li>fork allocates physical memory for the child and copies parent’s memory into it. The idea of COW fork is to share the parent’s memory to the child. We cannot let the parent and the child to directly access the physical memory because of disruption of multiple writes.</li></ul><p>However, a safer way is to share memory with the read-only permission.</p><ol><li>If either parent or child can write a given page, the CPU raises a page-fault exception.</li><li>The trap handler responds by allocating a new physical page and copying the memory from the physical page that the faulted address points to.</li><li>The kernel then changes the PTE in the faulting process’s page table to point to the copy and to allow r/w. After that, it resumes the faulting process.</li><li>The process will write to the new physical page (copy).</li><li>Meanwhile, the users of that original physical page can still read it without copying.</li></ol><p>COW fork needs book-keeping to track when the physical page can be freed. An optimization is that if there is only one user of the physical page, no copy is needed.</p><p>COW is an optimization mechanism and needed for a case when two or more processes have separate memory spaces and are isolated[^4]. The kernel optimizes it by allowing copies only when it is needed such as writes. It’s different than the case of shared memory model where multiple processes modify the same memory space and see the change.</p><p>Lazy allocation: When an application asks for more memory, the kernel is aware of the size increase but doesn’t allocate physical memory until a page fault incurs on one of those address.</p><p>Demand paging: The kernel creates the page table for the user address space and marks it invalid.</p><ul><li>Paging to disk: store only a fraction of user pages in RAM and map the rest on disk in a paging area. The pages on disk (paged out) are marked invalid and must be read from disk to RAM (paged in)  for an application to access, which is triggered by a page fault on a invalid memory access.</li><li>If there is no physical RAM, a RAM page must be evicted to the paging area on disk (paged out) and marked invalid.</li><li>Eviction is expensive.</li></ul><p>Demand paging is advantageous when the memory is scarce.</p><p>Memory mapped file</p><p>MMAP creates a new mapping of the contents of a file on disks in the virtual address space of the calling process/program. The program then accesses the file pages as if they reside in memory. OS automatically evicts unused pages if memory fills up.</p><p>The procedures of MMAP are:</p><ol><li>Mmap retruns a pointer to the memory-mapped file contents.</li><li>The OS reserves a part of virtual address space of the calling process/program.</li><li>The program accesses the file’s contents via the pointer.</li><li>The OS attempts to retrieve a page (<code>va</code>).</li><li>If no valid mapping exists for the va, a page fault exception occurs which loads the file’s content on disk to physical pages and creates a new mapping from the <code>va</code> to the new <code>pa</code>. The initiating CPU core also caches this PTE in its local translation lookaside buffer (TLB).</li></ol><h3><span id="device-interrupts">Device interrupts</span><a href="#device-interrupts" class="header-anchor">¶</a></h3><ol><li>Interrupts are one type of trap. Trap handler recognizes a device interrupt and calls the driver’s interrupt handler.</li><li>Device drivers execute in two contexts:<ul><li><code>Top half</code>: run in a process’s kernel thread, read/write()</li><li><code>Bottom half</code>: interrupt handler copies the input data to buffer and wake up top-half code to do op. It runs in the <code>interrupt context</code> which is also referred to <code>atomic context</code>, unable to block.</li><li>Linux has opposite names for those two contexts.</li></ul></li><li>Terms<ul><li><code>interrupt context</code> is time-critical that is not associated with processes. Interrupt handler putting one process sleep may let other process blocking therefore it cannot sleep in this context.</li><li><code>process context</code> is the mode of operation the kernel is in while it is executing on behalf of a process (LKD3 Chap7). Process can sleep or invoke the schedulor</li></ul></li><li>Driver is programmed by memory mapped I/O.</li><li>How xv6 displays “$” in console?<br>device -&gt; (uart-&gt;interrupt -&gt;) console</li><li>How xv6 displays “ls” in console?<br>key stroke -&gt; keyboard -&gt; (uart input -&gt; merge to byte -&gt; interrupt)-&gt;interrupt handler</li><li>Riscv interrupts related registers: SIE(supervisor interrupt enable), SSTATUS(supervisor status), SIP(supervisor interrupt pending), SCAUSE: means interrupts, STVEC: program counter of user program that cpu runs when trap/interrupts/page faults occur</li><li>timer interrupts: to maintain its clock and enable it to switch among processes. Execute in the machine mode.<ul><li>CLINT (core-local interruptor)</li><li>time-slice CPU</li></ul></li><li>Interrupts have high CPU overhead, ways to reduce the need for interrupts<ul><li>single interrupt for a batch of incoming requests</li><li>disable interrupts and check the device for attention: <code>polling</code>, wastes CPU time when the device is mostly idle</li><li>dynamically switch between interrupts and polling</li></ul></li><li>Date movement to h/w<ul><li>programmed I/O: UART driver, kernel buffer =&gt; user buffer =&gt; h/w, low speed</li><li>DMA (direct memory access): most modern drivers, user-space buffers &lt;=&gt; device hardware, high speed</li></ul></li></ol><h2><span id="concurrency-control">Concurrency control</span><a href="#concurrency-control" class="header-anchor">¶</a></h2><h3><span id="lock">Lock</span><a href="#lock" class="header-anchor">¶</a></h3><ol><li>Xv6 has two locks: spinlocks and sleeplocks<ul><li>spinlocks<ul><li>continue polling for the lock. Hold a lock for a short time. Cannot <code>yield CPU</code> (a thread switch).</li><li>Cost: polling</li><li><strong>disable interrupts</strong>: if a lock can be interruptted, then the interrupt acquires the same lock that is being used which leads to dead lock.  -&gt; concurrency in same CPU</li><li>sw vs atomic_swap: sw differs in different CPU settings. It may have one more instruction which disables the atomicity. -&gt; concurrency in different CPU</li></ul></li><li>Sleeplocks:<ul><li>sleep until certain condition occurs. Hold a lock for a long time. Can yield CPU. (ex, mutex)</li><li>Cost: high CPU overhead due to context switch (open another kernel thread)</li><li><code>locked</code>, a word that is zero when the lock is available and non-zero when it is held.</li></ul></li></ul></li><li>Why locks: one data stucture are accessed by multiple processes(race condition) -&gt; atomicity in critical section.</li><li>How? system designers should define orders of locks for the purpose of performance and correctness</li><li>memory barrier: tells the compiler and CPU to <strong>not reorder</strong> loads or stores across the barrier, <code>__sync_synchronize()</code></li></ol><p>Scenario 1: race condition in kfree()</p><p>Attempt 1: corse-grain locking/two processs are accessing one sharing data structure and one of them updates the data.</p><p>scenario 2: rename files: rename(“d1/x”, “d2/y”)</p><p>Attempt 2: lock operations not data structures.</p><p>Terminology:</p><ol><li>Deadlock: unlocking A requires B, unlocking B requires A, A and B are locked. example: deadly embrace</li></ol><p>Limitations of xv6: xv6 avoids lock-free programming. Although, programming with locks is also hard.</p><h3><span id="threads">Threads</span><a href="#threads" class="header-anchor">¶</a></h3><ol><li><p>Why threads? Run parallel programs</p></li><li><p>What: One thread is the state of one serial execution. Thread states include PC, REGS, STACK, [state:runnning, runable, sleeping]</p></li><li><p>How: problems of implementing threads</p><p>Assumption: one core(CPU) one thing -&gt; thread either sleeps or runs on one core</p><ul><li>how to switch between processes(scheduling)</li><li>What to save and restore in switching</li><li>Compute-bound threads: long-running program</li></ul></li><li><p>Cooperative scheduling is user processes explicitly give up control to kernel</p></li><li><p>Scheduling policies:</p><ul><li>+priority: fairness Vs throughput<ul><li><code>priority inversion</code>: low-priority process and high-priority process share a lock</li><li><code>convoys</code>: many high-priority processes are waiting for a low-priority process that acquires a shared lock</li></ul></li><li>implementation: sleep+wakeup<ul><li><code>sleep</code> disabled interrupts -&gt; single-CPU</li><li><code>sleep</code> + lock -&gt; xv6 (multiprocessor systems), FreeBSD</li><li>use explicit process queue,<code>waitqueue</code> -&gt; Linux</li></ul></li><li><code>wakeup:signal</code>, wakeup one/all process<ul><li>many processes are waiting for that particular channel, <code>thundering herd</code></li></ul></li></ul></li><li><p>scheduler</p><ul><li>A kernel thread gives up its CPU (<code>sched</code>) and switches to the kernel thread which previously-called <code>sched</code> in <code>scheduler</code>.</li><li>xv6 holds <strong>p-&gt;lock</strong> in <code>swtch</code>: the caller of <code>swtch</code> acquires p-&gt;lock in one thread and the callee of <code>swtch</code> releases it in other. This breaks convention of locks where the holder of a lock will also release it.</li></ul></li></ol><p>Problem1: what if the process runs for a long time?  -&gt; [Pre-emptive scheduling]  the process is:</p><ul><li>user processes run</li><li>time interrupts make it give up control to kernel</li><li>kernel then yields the CPU</li></ul><p>Problem2: lost wake-up problem, wakeup before sleeping and no wakeup while sleeping</p><ul><li>another process blocking (acquire lock that is not released by sleep(object)) while sleeping -&gt; Fixed by sleep(lock, object). Sleep will realese the lock after sleeping. It holds the lock before sleeping.</li><li>sleep/wakeup + spinlock, a synchronization method</li></ul><p>Example of <u>context switching</u> <code>swtch</code> between a kernel thread and a scheduler thread (kernel/proc.c):</p><ul><li><p>The xv6 scheduler has a dedicated <strong>thread (saved registers and stack)</strong> per CPU. A register set is called <code>context</code>. In xv6, the context struct contains the process and cpu structs.</p></li><li><p>Switching threads means saving the registers of the old thread and restoring the previously-saved registers of the new thread.</p></li><li><p>Switching plan: <code>swtch</code> saves <code>ra</code>, <code>sp</code> where swtch was called and the current context in p-&gt;context. Then it restores regs from new context.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># sched:swtch(&amp;p-&gt;context, &amp;mycpu()-&gt;context);</span><br><span class="line">swtch:</span><br><span class="line">        sd ra, 0(a0)</span><br><span class="line">        sd sp, 8(a0) # sw contents of sp, Offset(RegSource)</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        ld ra, 0(a1) # ld RegDest, Offset(RegSource)</span><br><span class="line">        ld sp, 8(a1)</span><br><span class="line">        ...</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure></li></ul><h2><span id="file-systems">File systems</span><a href="#file-systems" class="header-anchor">¶</a></h2><p>Design points:</p><ol><li>on-disk data structures for dir and files tree</li><li>crash recovery</li><li>coordinate multi-process to maintain invariants</li><li>in-memory cache for fast retrieval of data</li></ol><img src="/sg/2022/04/01/os_basics/Screenshot-6244321.png" class title="A file on disk"><h2><span id="case-study-ext3">case study: ext3</span><a href="#case-study-ext3" class="header-anchor">¶</a></h2><h2><span id="network-stack">Network stack</span><a href="#network-stack" class="header-anchor">¶</a></h2><h2><span id="case-study-meltdown">case study: meltdown</span><a href="#case-study-meltdown" class="header-anchor">¶</a></h2><h2><span id="case-study-rcu">case study: RCU</span><a href="#case-study-rcu" class="header-anchor">¶</a></h2><p>Readings:</p><ol><li>RCU Usage In the Linux Kernel: One Decade Later, 2013</li><li>LWN<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>: rcu basics, <a href="https://lwn.net/Articles/262464/">https://lwn.net/Articles/262464/</a></li></ol><p>Terms:</p><ol><li>detry, directory entry metadata</li><li>NMI, non maskable interrupts (cannot be disabled)</li><li>type safe memory is memory that keeps its type after being deallocated.</li><li>explicit tracking includes reference counts, reader-writer locks, events, etc.</li></ol><blockquote><p>The most basic form of RCU is a way of waiting for things to finish. … The greatest advantage of RCU is that it can wait for each of 20,000 different things without having to explicitly track each and every one of them, and without worrying about performance, deadlock scenarios and memory-leak hazards etc. that are inherent in schemes using explicit tracking.</p></blockquote><p>RCU is faster than other synchronization mechanisms in the kernel by allowing a single updater and multiple readers. It caters three needs: read while updating, low computation + storage overhead (a few bytes/dentry) and deterministic completion.</p><h3><span id="design">Design</span><a href="#design" class="header-anchor">¶</a></h3><ol><li>It has a read-side critical section and a synchronization section.<ul><li>Read_lock, read_unlock: By disabling thread preemption (a thread cannot context switch in the critical section). Can be called many times. -&gt; non-blocking</li><li>call_rcu, synchronize_rcu: wait for the completion of all the previous caller of rcu into the critical section. It does not wait for the caller after synchronize_rcu is invoked.</li></ul></li><li>The design is based on scheduler context switch, maintaining state shared between CPUs.</li><li>Handles compiler and memory reordering (processor) carefully. Assign_pointer, dereference.</li><li>RCU maintains multiple versions of objects and only frees them until all pre-existing critical sections completes.</li></ol><h3><span id="mechanisms">Mechanisms</span><a href="#mechanisms" class="header-anchor">¶</a></h3><ol><li><p>publish-subscribe: enforce ordering for insertions and reads</p><p>This mechanism is designed to cope with behaviors of CPU and compiler.</p><ul><li>There is not guarantee that the sequential assignments are in-order from the views of compiler and CPU. <code>Rcu_assign_pointer</code> enforces the assignment of gp is the last one of current assignments.</li><li>The value-speculation compiler optimizations: compiler guesses p, fetches p-&gt;a, p-&gt;b and p-&gt;c, then fetches the actual p value to check if the guess is right. <code>Rcu_dereference</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #1 publication: allow assignment without values uninitialized </span></span><br><span class="line"><span class="comment">// and avoid using memory barriers.</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">  <span class="type">int</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> *<span class="title">gp</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">p = kmalloc(size, GFP_kernel);</span><br><span class="line">p-&gt;a = <span class="number">1</span>;</span><br><span class="line">p-&gt;b = <span class="number">2</span>;</span><br><span class="line">p-&gt;c = <span class="number">3</span>;</span><br><span class="line">rcu_assign_pointer(gp, p) <span class="comment">// gp = p</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// #2</span></span><br><span class="line">p = gp;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">  do_something_with(p-&gt;a, p-&gt;b, p-&gt;c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// subscribtion: subscribe to a given value of the specifiled pointer </span></span><br><span class="line"><span class="comment">// and make sure the deference ops see initialization before any </span></span><br><span class="line"><span class="comment">// publish op</span></span><br><span class="line">rcu_read_lock();</span><br><span class="line">p = rcu_dereference(gp);</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line">  do_something_with(p-&gt;a, p-&gt;b, p-&gt;c);</span><br><span class="line">&#125;</span><br><span class="line">rcu_read_unlock();</span><br></pre></td></tr></table></figure></li><li><p>wait for pre-existing rcu readers to complete, for deletion</p><ul><li>It is implied that read-side critical sections have completed before the next context switch. Because no sleep or blocking is allowed in the critical sections.</li><li>A grace period waits for completion of pre-existing reads and will extend as needed.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">foo</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">list</span>;</span></span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  <span class="type">int</span> b;</span><br><span class="line">  <span class="type">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line">LIST_HEAD(head);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* . . . */</span></span><br><span class="line">p = search(head, key);</span><br><span class="line"><span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">  <span class="comment">/* Take appropriate action, unlock, and return. */</span></span><br><span class="line">&#125;</span><br><span class="line">q = kmalloc(<span class="keyword">sizeof</span>(*p), GFP_KERNEL);</span><br><span class="line"><span class="comment">// read-copy-update: copies</span></span><br><span class="line">*q = *p; </span><br><span class="line"><span class="comment">// and updates</span></span><br><span class="line">q-&gt;b = <span class="number">2</span>; </span><br><span class="line">q-&gt;c = <span class="number">3</span>;</span><br><span class="line">list_replace_rcu(&amp;p-&gt;<span class="built_in">list</span>, &amp;q-&gt;<span class="built_in">list</span>);</span><br><span class="line"><span class="comment">// do context_switch() on each CPU.</span></span><br><span class="line">synchronize_rcu();</span><br><span class="line">kfree(p);</span><br></pre></td></tr></table></figure></li><li><p>multiple versions of recently updated objects, for reader</p><ul><li>Deletion example: two versions of one pointer values are only kept in the critical sections. After exiting, on readers references that pointer and it will be safely freed.</li></ul></li></ol><h3><span id="usages">Usages</span><a href="#usages" class="header-anchor">¶</a></h3><ol><li>wait for completion. Put a spin_lock around rcu critical section. The NMI sys runs every NMI handler in the critical section.</li><li>reference counting. Users of the data item execute in the critical section. When freeing a data item, use call_rcu to free the memory after no other threads using the data item. It’s efficient for getting rid of updates, memory barriers, atomic operations, etc…</li><li>type safe memory. Reverse page map maps a physical page (page_t) to all the virtual address (anon_vma_t) mappings that include that physical page.   Deallocating a page without waiting for all threads to relinquish the pointer to the page.</li><li>publish-subscribe. Rcu_assign_pointer publishes a pointer and concurrent readers read through rcu_dereference.</li><li>read-write lock alternative. Read in the critical section, write synchronize with other writes using spin locks.</li></ol><h2><span id="basics">Basics</span><a href="#basics" class="header-anchor">¶</a></h2><h3><span id="c">C</span><a href="#c" class="header-anchor">¶</a></h3><ol><li><p><a href="https://stackoverflow.com/questions/8011700/how-do-i-extract-specific-n-bits-of-a-32-bit-unsigned-integer-in-c">bit mask</a>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Want the last X bits</span></span><br><span class="line"><span class="type">unsigned</span>  mask;</span><br><span class="line">mask = (<span class="number">1</span> &lt;&lt; X) - <span class="number">1</span>; <span class="comment">// -1 is like fliping the bit</span></span><br><span class="line">lastXbits = value &amp; mask;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Want X bits in the middle</span></span><br><span class="line"><span class="type">unsigned</span>  mask;</span><br><span class="line">mask = ((<span class="number">1</span> &lt;&lt; X) - <span class="number">1</span>) &lt;&lt; startBit;</span><br><span class="line">isolatedXbits = value &amp; mask;</span><br></pre></td></tr></table></figure></li><li><p>struct vs packed struct: if the fileds aligned</p><ul><li>Fact: misaligned load/store can be slow or unsupported (platform-dependent)</li></ul></li></ol><h3><span id="risc-v-convention">RISC-V convention</span><a href="#risc-v-convention" class="header-anchor">¶</a></h3><p>Understanding RISC-V Calling Convention by Nick Riasanovsky:</p><ol><li><p>RISC-V abstract machine: Base ISA: Program counter, 32 general-purpose registers (x0–x31).</p><ul><li><p>Unlike high-level programming language, convention is a choice to organize code like naming and line &lt; 80. Assembly is built on convention. Three parts is key to understand assembly: <strong>registers, function calls, and entering/exiting a function (prologue/epilogue)</strong>.</p></li><li><p>.section; .global means it can call this function from other files; .text means it’s executable code<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p></li></ul></li><li><p>Registers</p><ul><li>RISC-V has 32 registers. <code>sp</code> holds the current base of the stack. <code>ra</code> return address. <code>pc</code> holds the address of the current instruction.  <code>t</code> for temporary. <code>a</code> regs -&gt; 8 arguments, 2 return values in <code>a0-a1</code>.<ul><li><img src="/sg/2022/04/01/os_basics/Screenshot-9679149.png" class title="Screenshot-9679149"></li><li><code>f</code> reg for floating point</li></ul></li></ul></li><li><p>Function calls</p><ul><li>Used after a function call(), <code>s</code> regs; unused after a call(), <code>t</code> regs.</li><li>(not persistent) Making a call, pass arguments in <code>a2-a7</code>; (persistent) after a call, get return values in <code>a0-a1</code></li></ul></li><li><p>Prologue/Epilogue</p><ul><li><p>guarantees:</p><blockquote><ul><li>The sp will have the same value when exiting the function that it did entering (unless we store return values on the stack).</li><li>All s registers will have the same value exiting the function that they did entering.</li><li>The function will return to the value stored in ra, assuming no abnormal execution.</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def prologue():</span><br><span class="line">sp -= space of (s registers + local var);</span><br><span class="line">store any saved regs used;</span><br><span class="line">store ra if call();</span><br><span class="line"></span><br><span class="line">def epilogue():</span><br><span class="line">reload any saved regs;</span><br><span class="line">reload ra;</span><br><span class="line">sp = previous sp;</span><br><span class="line">jump back to return address</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>Stack Frames: stack grows downwards and heap grows upwards</p><ul><li>return address, to prev.frame(fp), saved registers, local variables… (higher &lt;- lower addr)</li></ul></li><li><p>Why this convention? Avoid to save every regs</p></li><li><p>Debug tips using convention</p><blockquote><ul><li>Check that you stored <code>ra</code> properly. For recursion make sure you link <code>ra</code> for each recursive call. You can test this by putting a break point at the end of the epilogue and seeing where you return.</li><li>Check that you don’t use any <code>t</code> registers after a function call.</li><li>Check that <code>sp</code> enters and exits with the same value.</li><li>Check the number of times you enter the prologue equals the number of times you enter the epilogue.</li><li>Make sure you restore every register you modified.</li></ul></blockquote></li><li><p>Instructions</p><ul><li><p><code>w</code> (word) is 32 bit in RISC-V, <code>d</code> (double) is 64 bit, <code>i</code> (immediate) is constant (see 6.004 isa reference card for the maximum value it can represent)</p></li><li><p>Reg is 32-bit (4 byte) wide in RV32; 64 bit in RV64 etc.</p></li><li><p><code>ra</code> is the destination reg</p></li><li><p><code>csrr</code>: Read CSR (Control System Register)</p></li><li><p><code>mhartid</code> is Hart ID Register: The mhartid CSR is an MXLEN-bit read-only register containing the integer ID of <u>the hardware thread running the code</u> (Riscv privileged spec 3.1.5)</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">csrr a1 mhartid</span><br><span class="line">csrr rd, csr  -&gt; csrrs rd, csr, x0</span><br></pre></td></tr></table></figure></li><li><p><code>jal</code>, jump and link; <code>jalr</code>, jump and link register;</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// call()</span><br><span class="line">jal ra lable // link ra with pc + 4 (store pc + 4 in ra), jump to lable (pc = lable); </span><br><span class="line">jalr ra rd imm // link ra with pc + 4, jump to reg (pc = rd + imm)</span><br><span class="line"></span><br><span class="line">// no call(), just jump to lable</span><br><span class="line">jal x0 lable // j lable</span><br><span class="line">jalr x0 rd imm // jr rd imm</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3><span id="gdb">GDB</span><a href="#gdb" class="header-anchor">¶</a></h3><p>gdb notes from lecture and csapp, <a href="https://sourceware.org/gdb/onlinedocs/gdb/">more</a>:</p><ol><li><p><code>file filename</code>: read symbols from that file</p></li><li><p>show source code:<code>tui enable</code>, <code>layout split</code> -&gt; both C and asm,  <code>layout source</code> -&gt; only C</p><ul><li><code>layout reg</code>, <code>layout asm</code>: show reg, assembly</li><li><code>layout next</code>: steps through layouts</li></ul></li><li><p>info: breakpoints, program, functions, stack, frame, registers,</p><ul><li><code>info b</code></li></ul></li><li><p>execution: <code>step</code>, <code>continue</code>, <code>finish</code>, <code>run</code>, <code>until</code></p><ul><li><p><code>until 3</code>: run until breakpoint 3</p></li><li><p><code>si</code>: execute one instruction</p></li></ul></li><li><p>breakpoints: you can disable/enble, break/delete it</p><ul><li>conditional breakpoints: break, only when a condition holds (e.g. variable has a certain value)</li><li><code>clear sum</code>: Clear any breakpoints at the entry to function sum</li></ul></li><li><p>watchpoints: break when a memory location changes value, <code>wa</code></p><ul><li><code>watch -l address</code>: when the address contents change</li><li><code>watch expression</code>: when expression changes</li></ul></li><li><p>examine data:</p><ul><li><code>print /[format] $rax</code></li><li><code>print /d (int)$rax</code>: Print contents of %rax in decimal after sign-extending lower 32-bits. -&gt; negative value</li><li><code>print *(int *) 0xbffff890</code>: Print integer at address 0xbffff890</li><li><code>print *(int *) ($rsp+8)</code> : Print integer at address %rsp + 8</li><li><code>print (char *) 0xbfff890</code>: Examine a string stored at 0xbffff890</li><li><code>x/[num][size][format] where </code>:  <code>num</code>, number of objects to display, <code>size</code> = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word)), <code>format</code> = how to display each object (d=decimal, x=hex, o=octal, t=binary etc.)</li></ul></li><li><p>Example</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//malloc can fail</span></span><br><span class="line"><span class="type">int</span> *a = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">12</span>*<span class="keyword">sizeof</span>(<span class="type">int</span>)); <span class="comment">//allocated memory is not initialized, should change to alloc(12,sizeof(int))</span></span><br><span class="line"><span class="keyword">if</span> (a == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//macro shouldnot be used interchangeably.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MULT(x,y) ((x)*(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MULT(x,y) (x * y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD(x,y) x + y</span></span><br></pre></td></tr></table></figure></li></ol><h3><span id="lookup-table">Lookup table</span><a href="#lookup-table" class="header-anchor">¶</a></h3><p>RISC-V regs:</p><table><thead><tr><th>reg</th><th style="text-align:center">name</th><th>saver</th><th>description</th></tr></thead><tbody><tr><td>x0</td><td style="text-align:center">zero</td><td>-</td><td>hardwired zero, always 0</td></tr><tr><td>x1</td><td style="text-align:center">ra</td><td></td><td>return address</td></tr><tr><td>x2</td><td style="text-align:center">sp</td><td>callee</td><td>stack pointer</td></tr><tr><td>x3</td><td style="text-align:center">gp</td><td>-</td><td>global pointer</td></tr><tr><td>x4</td><td style="text-align:center">tp</td><td>-</td><td>thread pointer</td></tr><tr><td>x5-7</td><td style="text-align:center">t0-2</td><td></td><td>temporary registers</td></tr><tr><td>x8</td><td style="text-align:center">s0/fp</td><td>callee</td><td>saved register / frame pointer</td></tr><tr><td>x9</td><td style="text-align:center">s1</td><td>callee</td><td>saved register</td></tr><tr><td>x10-11</td><td style="text-align:center">a0-1</td><td></td><td>function arguments / return values</td></tr><tr><td>x12-17</td><td style="text-align:center">a2-7</td><td></td><td>function arguments</td></tr><tr><td>x18-27</td><td style="text-align:center">s2-s11</td><td>callee</td><td>saved registers</td></tr><tr><td>x28-31</td><td style="text-align:center">t3-6</td><td></td><td>temporary registers</td></tr><tr><td>pc</td><td style="text-align:center">-</td><td>-</td><td>program counter</td></tr></tbody></table><p>Related readings:</p><ol><li>A nice blog explains pipe and inter-process communication in details: <a href="https://www.rozmichelle.com/pipes-forks-dups/">https://www.rozmichelle.com/pipes-forks-dups/</a></li><li>risc-v examples: <a href="https://marz.utk.edu/my-courses/cosc230/book/example-risc-v-assembly-programs/">https://marz.utk.edu/my-courses/cosc230/book/example-risc-v-assembly-programs/</a></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Rcu <a href="https://docs.kernel.org/RCU/index.html">doc</a>. More rcu readings: <a href="https://docs.kernel.org/RCU/rcu.html">https://docs.kernel.org/RCU/rcu.html</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>RISC-V Assembler Reference, <a href="https://michaeljclark.github.io/asm.html">https://michaeljclark.github.io/asm.html</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.s081 operating systems </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Carpe Diem</title>
      <link href="/sg/2022/03/30/april/"/>
      <url>/sg/2022/03/30/april/</url>
      
        <content type="html"><![CDATA[<p>3月有半个月处于闲置状态。先是被辅导员约谈导致对当前状态的烦躁不安，看了一周的闲书；调整好了状态学了一周后又感冒😷了一周。唯一的好消息就是 outreachy 初申过了，这意味着我可以继续尝试下一阶段的测试。</p><p>最好的学习方式就是练习，这是老生常谈了。本文尝试说明如何练习以及我会做的一些实践，这些个人实验不一定会有结果，但对我来说去做了就是对 carpe diem 的最佳实践。由于我不是个聪明的人，和同伴相比又缺乏卷的精神。不过最坏情况就去咖啡店打工好了，我对金钱的追逐仅限于维持一个极简的高质量生活组成。比起鳞次栉比的商场，我更喜欢自然的纯粹。今天从实验室洗瓶子出来后发现空中的好多只鹤穿梭在茂密的树林之上，有只撑着两条大长腿停在了单薄的树叶上，也是蛮奇特的。不明白他为什么能够这样立着。（扯远了）</p><p>课程学习计划打算在这 ??? 个月大致结束。更重要的是我可以通过 gsoc/outreachy 的某些开源组织给的项目做一些针对 os, db 的练习，关键是从这个过程得到工程项目的实践机会。</p><p>编程语言我主要使用 c/c++ ，python 练算法题，稍微了解 go, rust, java 。别的小工具看情况。</p><p>很多人的数据库存储方向的学习路线是：公开课项目 -&gt; 自己写个小型存储引擎/数据库/实习 * N(maximal) 。我应该会根据得到的实际机会考虑未来几年的从业方向。</p><img src="/sg/2022/03/30/april/e4dd1718fe09a4da.jpeg" class title="virtual">]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>db execution</title>
      <link href="/sg/2022/03/17/db_execution/"/>
      <url>/sg/2022/03/17/db_execution/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#sorting">Sorting</a></li><li><a href="#aggregations">Aggregations</a></li><li><a href="#joins">Joins</a><ul><li><a href="#nested-loop-join">Nested loop join</a></li><li><a href="#sort-merge-join">Sort-merge join</a></li><li><a href="#hash-join">Hash join</a></li></ul></li></ul><!-- tocstop --></div><p>Execution process: the operators are arranged in a tree.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7600728.png" class title="Screenshot-7600728"><h2><span id="sorting">Sorting</span><a href="#sorting" class="header-anchor">¶</a></h2><p>supported feature: ORDER BY, DISTINCT, GROUP BY</p><p>Problem: can’t guarantee sorting data to fit in memory</p><p>Approach: external merge sort: splits the data set into separate runs, sorts them individually, and then combine into larger sorted runs.</p><ol><li>run: a list of key/value pairs.<ul><li>Key: attributes to compare</li><li>Value: record id/tuple</li></ul></li></ol><img src="/sg/2022/03/17/db_execution/Screenshot-7652824.png" class title="Screenshot-7652824"><ol start="2"><li><p>Procedure</p><ul><li><p>Sorting: sort in memory and then write back to a file on disk</p></li><li><p>Merging: combine sorted sub-files into single file</p></li></ul></li><li><p>2-way external merge sort</p><ul><li><p>data set = N pages, buffer pool = B pages</p></li><li><p>Pass:read and write each page in file.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7653767.png" class title="Screenshot-7653767"></li><li><p>Number of passes = 1 + log<sub>2</sub><sup>N</sup></p><ul><li><p>1 represents pass 0 which reads every B pages of the table into buffer pool(memory).</p></li><li><p>In this case, B &gt;= 3(2I, 1O).</p></li></ul></li><li><p>totoal I/O cost: 2N*(# of passes)</p><img src="/sg/2022/03/17/db_execution/Screenshot-7653299.png" class title="Screenshot-7653299"></li><li><p><u>Problem</u>:  the worker blocks on disk I/O -&gt; more buffer pages won’t help in this case</p><ul><li>Approach:<strong>double buffering optimazation</strong>: <strong>prefetching</strong> the next run in the background and storing it in a second buffer while the system is processing the current run.</li><li>pro: reduce the wait time for I/O requests</li><li>Multi-thread env</li></ul></li></ul></li><li><p>General(k-way) merge sort</p><p>let k = B -1, #of runs = N/B * B</p><p>#of sorted runs = N/B, merge k runs</p><p>#of passes = 1 + log<sub>B-1</sub><sup>(N/B)</sup>   , total I/O cost = 2N*(# of passes)</p></li><li><p>optimize sorting by using b+ tree: Retrieve tuples in desired sort order by simply traversing the leaf pages of the tree.</p><p>The point is <strong># of I/O access</strong>.</p><p>Case 1: clustered b+ tree: if the index is a clustered index, traverse the tree</p><img src="/sg/2022/03/17/db_execution/Screenshot-7655087.png" class title="Screenshot-7655087"><p>case 2: unclustered b+ tree: else, don’t do it.</p></li></ol><h2><span id="aggregations">Aggregations</span><a href="#aggregations" class="header-anchor">¶</a></h2><ol><li><p>Aggregations: Collapse values for a single attribute from multiple tuples into a single scalar value.</p><ul><li>two approaches for implementations: sorting, hashing</li><li>-&gt; GROUP BY, DISTINCT</li></ul></li><li><p>Sorting -&gt; ordering query</p><p>optimization: perform filter first: reduce the amount of data requiring to be sorted.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7657643.png" class title="Screenshot-7657643"></li><li><p>Hashing -&gt; no ordering</p><p>Like sorting algorithms, DBMS spills data to disk when data doesn’t fit in memory. Two phases for external hashing aggregate: partition, rehash.</p><p>The point is the location of operations given context.</p><ul><li><p>problem 1: what to split?</p><ol><li>partition: one or more pages that contain the set of keys with the same hash value.</li></ol></li><li><p>problem 2 : how to split?</p><ol><li><p>hash function: used to split tuples into partitions on disk</p><img src="/sg/2022/03/17/db_execution/Screenshot-7658353.png" class title="Screenshot-7658353"></li><li><p>rehash: Build <strong>in-memory hash table</strong> for each partition and compute the aggregation</p><p>Assume: each partition fits in memory.</p><img src="/sg/2022/03/17/db_execution/Screenshot-7658396.png" class title="Screenshot-7658396"></li></ol></li><li><p>summarization: result form: (GroupKey -&gt; RunningVal)</p><p>scenario: Insert new tuples(G’, R’) into the hash table</p><ul><li>like dictionary insertion: G’ existed, update R to R’; G’ not existed, insert (G’, R’)</li></ul></li></ul></li></ol><h2><span id="joins">Joins</span><a href="#joins" class="header-anchor">¶</a></h2><ol><li><p>inner equijoin algorithm: joins tables where keys are equal.</p></li><li><p>goal: minimize repetitions</p></li><li><p>Join operators: choose what to join and smart joins</p></li><li><p>operator output: For a tuple r ∈ R and a tuple s ∈ S that match on join attributes, the join operator concatenates r and s together into a new output tuple.</p><ul><li><p>early materialization (data): Copy the values for the attributes in outer and inner tuples into a new output tuple. -&gt; no need to go back in the query plan</p><img src="/sg/2022/03/17/db_execution/Screenshot-7661256.png" class title="Screenshot-7661256"></li><li><p>late materialization( record ids): Only copy the joins keys along with the record ids of the matching tuples -&gt; suits for column store</p><img src="/sg/2022/03/17/db_execution/Screenshot-7661462.png" class title="Screenshot-7661462"></li></ul></li><li><p>cost analysis criteria: # of disk I/Os used to compute join</p><p>Only count input costs. Because outputs depend on the date computed afterwards.</p><p>The point is to find appropriate algorithms in certain scenario.</p></li><li><p>Variables used in this lecture:</p><ul><li>M pages in table R (Outer Table), m tuples total</li><li>N pages in table S (Inner Table), n tuples total</li></ul></li></ol><h3><span id="nested-loop-join">Nested loop join</span><a href="#nested-loop-join" class="header-anchor">¶</a></h3><ol><li><p>Nested loop join: two nested FOR loops that iterate over the tuples in both tables and compares each unique of them.</p><ul><li><p>locality:DBMS uses smaller table as the outer table and buffers it in memory.</p></li><li><p>Index: find matches</p></li></ul></li><li><p>Stupid/Simple NLJ:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foreach tuple r ∈ R:</span><br><span class="line">foreach tuple s ∈ S:</span><br><span class="line">emit, if r and s match</span><br></pre></td></tr></table></figure></li><li><p>Block NLJ:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foreach block B_R ∈ R:</span><br><span class="line">foreach block B_S ∈ S:</span><br><span class="line">foreach tuple r ∈ B_R: </span><br><span class="line">foreach tuple s ∈ B_s:</span><br><span class="line">emit, if r and s match</span><br></pre></td></tr></table></figure></li><li><p>Index NLJ</p></li></ol><h3><span id="sort-merge-join">Sort-merge join</span><a href="#sort-merge-join" class="header-anchor">¶</a></h3><ol><li><p>Sort-merge join: sorts the two tables on their join key(s)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sort R,S on join keys</span><br><span class="line">cursorR ← Rsorted, cursorS ← Ssorted</span><br><span class="line">while cursorR and cursorS:</span><br><span class="line">if cursorR &gt; cursorS:</span><br><span class="line">increment cursorS</span><br><span class="line">if cursorR &lt; cursorS:</span><br><span class="line">increment cursorR</span><br><span class="line">elif cursorR and cursorS match:</span><br><span class="line">emit</span><br><span class="line">increment cursorS</span><br></pre></td></tr></table></figure></li><li><p>Cost analysis: sort + merge</p></li></ol><h3><span id="hash-join">Hash join</span><a href="#hash-join" class="header-anchor">¶</a></h3><ol><li>hash join: use a hash table to split up the tuples into smaller chunks based on their join attribute(s).</li><li>basic hash join</li><li>Grace hash join/Hybrid hash join</li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-445 databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>22岁生日——转折期</title>
      <link href="/sg/2022/03/12/22/"/>
      <url>/sg/2022/03/12/22/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ge-ren-jiao-yu">个人教育</a><ul><li><a href="#zao-qi">早期</a></li><li><a href="#chu-shi-ocw">初识 ocw</a></li><li><a href="#shi-cuo">试错</a></li></ul></li><li><a href="#zhi-ye-fa-zhan">职业发展</a></li><li><a href="#wu-yong-zhi-xue">无用之学</a></li></ul><!-- tocstop --></div><p>和前两年相比，现在的状态比之前好得多了，而我希求的对个人生活的完全掌控也就在眼前。比起20岁时转专业面试受到的打击和21岁困顿在各种生科课程间学习 CS 基础课，我有更大的可能在这一年完成 CS 系统方向基础课程的学习和开始真正的试炼。我不是个聪明的人，会有一些天马行空的想法和个人理想主义。自我教育也是纠正我的一些性格缺陷的过程，在《积极心理学》里我终于认识到完美主义导致的拖延症。而在近三年学习公开课程的经历里，我遇到了很多失败，也改变了很多初时的想法，但我没有放弃入学时的信念——我要学好计算机课程。这之间讽刺的地方在于：填志愿时这所学校（即使分够）没填任何 CS 相关专业然后在五分钟的转专业面试中被刷了。不过我的生活里讽刺之处到处都是:)</p><h2><span id="ge-ren-jiao-yu">个人教育</span><a href="#ge-ren-jiao-yu" class="header-anchor">¶</a></h2><p>我的学习方式方法经历了很多变化，但我始终认为<strong>教育</strong>是一个人改变自己的最好途径。</p><h3><span id="zao-qi">早期</span><a href="#zao-qi" class="header-anchor">¶</a></h3><p>高考结束后我迷上了“自我提升”的说法，定了一些不太可行的小目标。这种过度简化的词会模糊真正的想法和所处的真实环境，而我当时又比较容易相信外来信息和权威，造成一些错误判断。比如“某校转专业政策宽松“，”MIT 科技评论：生物与计算机结合是未来“，“某校A-学科：生物”…</p><h3><span id="chu-shi-ocw">初识 ocw</span><a href="#chu-shi-ocw" class="header-anchor">¶</a></h3><p>我认为国外名校公开课的实践意义是最强的，显然最开始我并没有这样想。从初中时就从朋友那里得知网易公开课，但当时阅历尚浅，没有足够的判断能力，学习经验和设备去有效学一门课程，只加入收藏夹积灰了。到高一时我又开始尝试学公开课，比如 stanford cs106A ，然而我2000块的破旧电脑没法安装 Eclipse 以及我的英语能力看讲义有一些困难，最重要的是当时我对计算机没有偏好，当解决不了网络设备的问题后我就没有继续下去。我仍然记得那门课是通过一个机器人前后左右移动来完成程序设计介绍的，如果有更多编程练习会是一门不错的课程。高考那年经历了一些事后决定今后要学计算机课程，第一次接触 ocw 是在大学里，我觉得受益匪浅。虽然我从开学时就开始看 6.0001 和数学物理的导论课程，但受限于网络我没能够接触更多课程资源。然而 edx, coursera, khan academy 等在线课程教育平台仍让我看到了自我教育的可能性，然后就是公开课学习试错了。</p><h3><span id="shi-cuo">试错</span><a href="#shi-cuo" class="header-anchor">¶</a></h3><ol><li>GitHub 上不少关于自学 CS 的课程表：有些课程比较旧了，没有合适的资源，不符合个人课程学习目标</li><li>MIT GIR 的基础课程：包括生物，数学，物理，化学等基础学科的导论课。学过。</li><li>MIT 在开放的数学/计算机/电子类课程：发现自己没兴趣/学不懂太深入的数学课程，比如常微分方程只学了三分之一就不再学了。虽然听说信号那门课程很棒，但仍不是兴趣所在，没学。差不多在大一下决定按 MIT 6-3 的课程计划，但学不懂 6.042J 一度让我怀疑自己到底适不适合学 CS, 6.004 17 edx 课程也提不起兴趣学。</li><li>6-3/edx 课程：大学前两年的生科的事让我觉得非常难受，在课程间隙学习课程的状态也很糟糕。大二上感觉什么东西都学不懂，重拾6.042看书看得头疼，题又没有答案；学6.009 lab1 的 correlation 逻辑想了很久也想不出来，看讲义也感觉只是纸上谈兵；翻了下 effective python 感觉没什么用；edx 上机器学习的一门课程也没什么兴趣。然后就看到了胡 Sir （@胡津铭）的公开课学习的帖子和博客，加了群后打算改学 Berkeley 61B/C 。后来又看到迟 Sir（@Alex Chi）的文字，觉得学以致用才是我学习最主要的目标。</li><li>Berkeley 61B/C 课程：大二后半段时间就是在这两门课上挣扎了，期间学了CS 106L。没有掌握合适的学习技巧和测试是自学非常大的难题。如果不能知道所写的代码是否正确，就不能有效的学习和改正。</li><li>6-3 课程继续：大三上开始我又开始继续这部分课程，学了 6.006, 6.031, 6.033, 6.004, 6.046的部分内容，写了点 os, db 的代码。对扎实基础的渴求让我没法在没搞懂这些代码时开始实习，春招之后或许没有合适的实习机会，但我还是不得不这么做。我需要有一个能够从头开始的起点，这样以后不管遇到怎样的难题，我都可以重新站在这个起点思考问题的发展。</li><li>HASS 课程：我认为社科课程的学习能让我更理解这个社会各个系统的运作方式。可惜我大一下在看相关课程时，比如微观经济学，公正，修辞学，都基本上在第一节课睡着了，公正是看讲义看困的。而经过了新冠和一些社会事件后，我认为我应该明白怎样去看待这些事情，我需要知道怎样改善心理健康，于是看了政治哲学和积极心理学的导论课。世界的变化是这样快，独立思考是一个需要长期学习的课程，只有在现实中才能检验和纠正。</li></ol><h2><span id="zhi-ye-fa-zhan">职业发展</span><a href="#zhi-ye-fa-zhan" class="header-anchor">¶</a></h2><p>我今后要从事存储系统相关的工作，遇到的困难会有很多，但我只需要把可以改变的部分做了。</p><h2><span id="wu-yong-zhi-xue">无用之学</span><a href="#wu-yong-zhi-xue" class="header-anchor">¶</a></h2><p>[null]</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>db index</title>
      <link href="/sg/2022/03/05/db_index/"/>
      <url>/sg/2022/03/05/db_index/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#hash-tables">Hash tables</a><ul><li><a href="#static-hashing">Static hashing</a></li><li><a href="#dynamic-hashing">Dynamic hashing</a></li></ul></li><li><a href="#b-tree">B+ tree</a><ul><li><a href="#design-choices">Design choices</a></li><li><a href="#optimizations">Optimizations</a></li></ul></li><li><a href="#index">Index</a><ul><li><a href="#trie-index">Trie index</a></li><li><a href="#radix-tree">Radix tree</a></li><li><a href="#inverted-index">Inverted index</a></li></ul></li><li><a href="#concurrency-control">Concurrency control</a><ul><li><a href="#locks-vs-latches">Locks vs. latches</a></li><li><a href="#latch-designs">Latch designs</a></li><li><a href="#practice">Practice</a></li></ul></li></ul><!-- tocstop --></div><p>DBMS’s execution engine needs to access pages before doing operation on those.</p><p>Design decisions when implementing data structures for the DBMS:</p><ol><li>Data organization: memory layout and information to store -&gt; access</li><li>Concurrency: multiple threads to access without causing problems -&gt; efficient access</li></ol><p>There are two types of data structures: hash table, trees.</p><h2><span id="hash-tables">Hash tables</span><a href="#hash-tables" class="header-anchor">¶</a></h2><ol><li><p>Complexity: space: O(n); runtime: amortized O(1) lookup</p></li><li><p>hash tables implementations:</p><ul><li><p>hashing functions: collision rate</p></li><li><p>schemes: <em>handle key collisions</em> after hashing</p></li></ul></li></ol><h3><span id="static-hashing">Static hashing</span><a href="#static-hashing" class="header-anchor">¶</a></h3><p>The size of the hash table is fixed. DBMS has to rebuild a larger hash tables if it runs out of storage space.</p><p>Assume: knowing the number of elements it wants to store.</p><ol><li><p>Linear probe hashing</p><ul><li><p>collision: linearly seach the adjacent slots until an open one is found</p><img src="/sg/2022/03/05/db_index/Screenshot-7503728.png" class title="Screenshot-7503728"></li><li><p>Non-unique keys: the same key may be associated with multiple different values or tuples</p><ul><li>approach 1: separate linked list</li><li>approach 2: redundant keys: store the same key multiple times in the table</li></ul></li><li><p>deletion: removing the entry from the slot -&gt; can’t find the slots having collisions with the deleted one.</p><ul><li><p>approach 1: tombstone: instead of deletion, replace it with magic entry indicating to keep scanning for future lookups.</p><img src="/sg/2022/03/05/db_index/Screenshot-7504450.png" class title="Screenshot-7504450"></li><li><p>Approach 2: movement:  shift the adjacent data after deleting an entry to fill the now empty slot.</p><img src="/sg/2022/03/05/db_index/Screenshot-7504407.png" class title="Screenshot-7504407"></li></ul></li></ul></li><li><p>Robin Hood Hashing: steals slots from “rich” keys and give them to “poor” keys</p><p>Each key tracks the number of positions they are from where its <em>optimal position</em> in the table</p><img src="/sg/2022/03/05/db_index/Screenshot-7509790.png" class title="Screenshot-7509790"></li><li><p>Cuckoo Hashing: Use multiple hash tables with different hash function seeds.</p><img src="/sg/2022/03/05/db_index/Screenshot-7510112.png" class title="Screenshot-7510112"><img src="/sg/2022/03/05/db_index/Screenshot-7510099.png" class title="Screenshot-7510099"></li></ol><h3><span id="dynamic-hashing">Dynamic hashing</span><a href="#dynamic-hashing" class="header-anchor">¶</a></h3><p>property: Dynamic hash tables resize themselves on demand</p><ol><li><p>Chained hashing: linked list to handle collisions</p><img src="/sg/2022/03/05/db_index/Screenshot-7510352.png" class title="Screenshot-7510352"></li><li><p>extendible hashing: splits buckets in case of letting chains to grow forever</p><p>Local/global depth bit: track slots</p><p>problem 1: what to split: data movement: move data within the buckets of the <em>split chain</em>; all other buckets are left untouched.</p><p>problem 2: when to split: if the bucket is full, splits the bucket and reshuffle its elements.</p><p>observe: the changed pointers to slots are on the split chain.</p><img src="/sg/2022/03/05/db_index/Screenshot-7510635.png" class title="Screenshot-7510635"><img src="/sg/2022/03/05/db_index/Screenshot-7510667.png" class title="Screenshot-7510667"></li><li><p>linear hashing: maintains a split pointer that keeps track of the next bucket to split instead of immediately splitting a bucket when it overflows.</p><p>Procedures:</p><ol><li>Add a new slot in split pointers, and create a new hash function</li><li>Decide whether to apply the new hash fuction on new query index.</li><li>Delete original hash function and replace with new hash function when run out of slots.</li></ol><ul><li><p>Insertion -&gt; when buckets are full</p></li><li><p>Deletion: reverse of insertion: pointers move backwards -&gt; when buckets are empty</p><img src="/sg/2022/03/05/db_index/Screenshot-7511632.png" class title="Screenshot-7511632"><img src="/sg/2022/03/05/db_index/Screenshot-7513367.png" class title="Screenshot-7513367"></li></ul></li></ol><p>​</p><h2><span id="b-tree">B+ tree</span><a href="#b-tree" class="header-anchor">¶</a></h2><ol><li>table index: index of a table’s attributes. The table is stored in the sort order specified by the primary key. Can be either heap- or index-organized storage</li><li>Trade-off on the number of indexes to create per database: storage overhead Vs. maintenance overhead</li></ol><p>Overview:</p><ol><li><p>b+ tree: a self-balancing tree data structure that keeps data sorted and allows searches, sequential access, insertion, and deletions in O(log(n)). Good at read/write large blocks of data.</p><img src="/sg/2022/03/05/db_index/Screenshot-7514359.png" class title="Screenshot-7514359"></li><li><p>difference with b tree: b+ tree stores values only in leaf nodes; b tree store values in all nodes.</p></li></ol><p><strong>Structure:</strong></p><ol><li><p>Key-value pair: inner node: store pointers; leaf node: values.</p><img src="/sg/2022/03/05/db_index/Screenshot-7515275.png" class title="Screenshot-7515275"><ul><li>Leaf node values have two approaches: 1) record IDs: pointers to the location of tuple; 2) tuple data: store the actual contents of the tuple in each node</li></ul></li><li><p>node: Arrays at every node are sorted by the keys.</p></li></ol><p><strong>Operations:</strong></p><ol><li><p>Insertion:</p><p>Split leaves when the tree got too full</p><ul><li>Leaf node: copy up middle key</li><li>inner node: push up middle key</li></ul></li><li><p>deletion</p><p>Redistribute by borrowing from sibling when lead is not half full; Merge nodes when redistribution fails.</p><ul><li>Leaf node: delete the key</li><li>Inner node: delete entry in parent pointing to the key</li></ul></li><li><p>selection conditions: Support search provides <em>any</em> of the attributes of the search key.</p><p>-&gt; Hash index requires <em>all</em> attributes in the search key.</p></li><li><p>Non-unique indexes</p><p>like hash tables: 1) duplicate keys, 2)store value lists.</p><img src="/sg/2022/03/05/db_index/Screenshot-7517327.png" class title="Screenshot-7517327"></li><li><p>duplicate keys approaches</p><ul><li><p>Append record IDs</p><img src="/sg/2022/03/05/db_index/Screenshot-7517457.png" class title="Screenshot-7517457"></li><li><p>overflow leafnodes: Allow leaf nodes to spill into overflow nodes that contain<br>the duplicate keys.</p><ul><li>complex to maintain</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7517477.png" class title="Screenshot-7517477"></li></ul></li><li><p>Clustered indexes: If a table does not contain a primary key, the DBMS will automatically make a hidden row id primary key</p><p>(think about VEB tree)</p><img src="/sg/2022/03/05/db_index/Screenshot-7517887.png" class title="Screenshot-7517887"><p>Sorting:</p><ol><li>heap clustering: tuples are sorted in the heap’s pages using the order specified by a clustering index. DBMS can jump directly to the pages if clustering index’s attributes are used to access tuples</li></ol><img src="/sg/2022/03/05/db_index/Screenshot-7517956.png" class title="Screenshot-7517956"><ol start="2"><li>index scan page sorting: sort all the tuples that it needs based on their page id.</li></ol><img src="/sg/2022/03/05/db_index/Screenshot-7517996.png" class title="Screenshot-7517996"></li></ol><h3><span id="design-choices">Design choices</span><a href="#design-choices" class="header-anchor">¶</a></h3><ol><li><p>node size</p><ul><li><p>~ storage device: the faster the storage device is, the smaller the node size is. Because we want to reduce the number of accesses in slower device like HDD compared with RAM. And the amortized runtime of read over large chunk of data is more optimal.</p></li><li><p>~ workload: there are two types of workload: point query; sequential scan. A point query would prefer small pages to reduce extra info while sequential scan likes large pages to reduce the number of fetches.</p></li></ul></li><li><p>merge threshold</p><ul><li>like lazy allocation in os</li><li>Delaying merge to reduce the amount of reorganization like expensive write latches.</li></ul></li><li><p>variable length keys</p><ul><li><p>good in a way: 1)space saving: reduce a small subset of large keys lead to lot of wasted space</p></li><li><p>approach 1: pointers  -&gt; embedded devices: registers, cache</p><p>Store the keys as pointers to the tuple’s attribute</p></li><li><p>approach 2: Variable Length Nodes -&gt; infeasible: large memory management overhead</p><p>allow nodes to have variable length.</p></li><li><p>approach 3: padding -&gt; infeasible: big waste of memory</p><p>Set each key’s size to the size of the max key and pad out all the shorter keys.</p></li><li><p>approach 4: key map/indirection</p><p>Embed an array of pointers that map to the key + value list within the node. Place prefix of each key alongside the index.</p><ul><li>unlike approach 1, a4 stores the dictionary index that needs small space not the key pointers, which allows storing prefix alongside of the index.</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7569559.png" class title="Screenshot-7569559"></li></ul></li><li><p>Intra-node search: search within the node</p><ul><li><p>A1: linear: Scan node keys from beginning to end.</p></li><li><p>A2: binary: Jump to middle key, pivot left/right depending on comparison</p></li><li><p>A3: interpolation: Approximate location of desired key based on known distribution of keys -&gt; infeasible: limited applicability to keys with certain properties and complexity, only seen in academic use</p><p>take advantage of metadata(max, min ,avg …) and infer approximate location</p><img src="/sg/2022/03/05/db_index/Screenshot-7578914.png" class title="Screenshot-7578914"></li></ul></li></ol><h3><span id="optimizations">Optimizations</span><a href="#optimizations" class="header-anchor">¶</a></h3><ol><li><p>Prefix compression: extract prefix and store unique suffix for each key -&gt; keys in the same node have overlapping prefix</p><img src="/sg/2022/03/05/db_index/Screenshot-7578988.png" class title="Screenshot-7578988"></li><li><p>duplication: write key once and maintain a list of record ids with the key -&gt; non-unique keys</p><p>~ MVCC</p><img src="/sg/2022/03/05/db_index/Screenshot-7579194.png" class title="Screenshot-7579194"></li><li><p>suffix truncation:  only storing the minimum differentiating prefix of each key at a given inner node.  -&gt; No need to search the entire key</p><ul><li>leave few redundant digits: fault tolerance -&gt; indeterminable insertion/deletion  due to an identical prefix</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7579249.png" class title="Screenshot-7579249"></li><li><p>bulk insert: sort the keys and build the index from the bottom up -&gt; fastest way to build a new b+ tree</p><ul><li>Trade-off: leaving vacancy or not when packing the leaves depends on context</li></ul><p>Keys: 3, 7, 9, 13, 6, 1; sorted keys: 1, 3, 6, 7, 9, 13</p><img src="/sg/2022/03/05/db_index/Screenshot-7579810.png" class title="Screenshot-7579810"></li><li><p>Pointer swizzling: store raw pointers instead of page ids for pinned page in the buffer pool  -&gt; reduce expensive buffer pool fetches</p><img src="/sg/2022/03/05/db_index/Screenshot-7580430.png" class title="Screenshot-7580430"></li></ol><h2><span id="index">Index</span><a href="#index" class="header-anchor">¶</a></h2><ol><li><p>what is index: provide fast access to data items.</p></li><li><p>methods</p><ul><li><p>implicit indexes: provide primary key with integerity constraints</p></li><li><p>partial indexes: Create an index on a subset of the entire table. -&gt; reduce full page fetches overhead</p><img src="/sg/2022/03/05/db_index/Screenshot-7581006.png" class title="Screenshot-7581006"></li><li><p>covering indexes(index-only scans): locate data records in the table and not to return data -&gt; reduces contention on the DBMS’s buffer pool resources</p><img src="/sg/2022/03/05/db_index/Screenshot-7581138.png" class title="Screenshot-7581138"></li><li><p>index include columns: Embed additional columns in indexes<br>to support index-only queries.</p><ul><li>Extra columns are only stored in the leaf nodes and are not part of the search key</li></ul><img src="/sg/2022/03/05/db_index/Screenshot-7581440.png" class title="Screenshot-7581440"></li><li><p>Function/expression indexes: use expressions when declaring an index. store the output of a function or expression as the key instead of the original value. -&gt; ? which queries can use that index</p><img src="/sg/2022/03/05/db_index/Screenshot-7581987.png" class title="Screenshot-7581987"></li></ul></li></ol><h3><span id="trie-index">Trie index</span><a href="#trie-index" class="header-anchor">¶</a></h3><ol><li><p>make oberservations: the inner node keys in a B+Tree cannot tell you whether or not a key exists in the index -&gt; at least one buffer pool page miss per level in the tree</p></li><li><p>approach: trie index</p><ul><li><p>Properties: complexity in operations and space</p></li><li><p>trie key span: digital representation of keys</p><ul><li><p>Fan-out of node, height of tree</p><p>图中：空表示该值不存在，指针指向下一个位置，使用0/1的二进制表示</p><img src="/sg/2022/03/05/db_index/Screenshot-7584309.png" class title="Screenshot-7584309"></li></ul></li></ul></li></ol><h3><span id="radix-tree">Radix tree</span><a href="#radix-tree" class="header-anchor">¶</a></h3><p>variant of trie index. Omit all nodes with only a single child.</p><img src="/sg/2022/03/05/db_index/Screenshot-7584321.png" class title="Screenshot-7584321"><img src="/sg/2022/03/05/db_index/Screenshot-7584401.png" class title="Screenshot-7584401"><h3><span id="inverted-index">Inverted index</span><a href="#inverted-index" class="header-anchor">¶</a></h3><ol><li><p>make observations: Tree indexs above are useful for point and range queries; not good for keyword searches</p></li><li><p>Approach: inverted index(full-text search index) -&gt; keyword search</p><p>stores a mapping of words to records that contain those words in the target attribute.</p></li><li><p>supported query type:</p><ul><li>phrase searches: records that contain a list of words in the given order</li><li>proximity searches: two words occur within n words of each other</li><li>wildcard searches:words that match some pattern (e.g., regular expression).</li></ul></li><li><p>design decisions</p><ul><li>decision 1: what to store: depend on the context</li><li>decision 2: when to update: update is expensive. So stage updates and then update in batches</li></ul></li></ol><h2><span id="concurrency-control">Concurrency control</span><a href="#concurrency-control" class="header-anchor">¶</a></h2><ol><li>make observations: multi-threads world means that cpu cores and disk I/O stalls matters.</li><li>come up with a protocol: a protocol needs criteria<ul><li><em>logical correctness</em>: thread view</li><li>Physical correctness: internal representation of object soundness -&gt; memory leak</li></ul></li></ol><h3><span id="locks-vs-latches">Locks vs. latches</span><a href="#locks-vs-latches" class="header-anchor">¶</a></h3><ol><li>Locks: protects the contents of a database (e.g., tuples, tables, databases) from other transactions -&gt; object view</li><li>Latches: protects critical sections the DBMS’s internal data structures (e.g., data structure, regions of memory) from other threads -&gt; operation view<ul><li>Read mode: Multiple threads are allowed to read the same item at the same time</li><li>write mode: Only one thread is allowed to access the item.</li></ul></li></ol><h3><span id="latch-designs">Latch designs</span><a href="#latch-designs" class="header-anchor">¶</a></h3><p>latch takes advantage of CPU’s atomic compare-and-swap(CAS) instruction. A thread can check the contents of a memory location to see whether it has a certain value.</p><p>Definition: <a href="https://stackoverflow.com/questions/15059958/what-is-a-scalable-lock">scalability</a> of latches means if latches perform well when there is a lot of contention.</p><p>Approaches:</p><ol><li><p>Blocking OS mutex: os build-in mutex infra.</p><p>User space -&gt; kernel space -&gt; fail/blocked -&gt; descheduled</p><ul><li><p>Pro: no extra work for DBMS</p></li><li><p>Con: ~ os scheduling: Non-scalable (about 25ns per lock/unlock invocation)</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::mutex m;</span><br><span class="line">m.<span class="built_in">lock</span>();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">m.<span class="built_in">unlock</span>();</span><br></pre></td></tr></table></figure></li><li><p>Test-and-set spin latch(TAS)</p><p>use CAS to update value -&gt; fail -&gt; DBMS’s choice now(keep trying/descheduled)</p><ul><li>Spin latch: a location in memory that  threads try to update.</li><li>pro: efficient operations</li><li>con: not scalable nor cache-friendly</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ex: std::atomic&lt;T&gt;</span></span><br><span class="line">std::atomic_flag latch;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">while</span> (latch.<span class="built_in">test_and_set</span>(...))&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Reader-writer locks</p><p>based on two modes of latches, keep track of reads and writes.</p><img src="/sg/2022/03/05/db_index/Screenshot-7590990.png" class title="Screenshot-7590990"><ul><li><p>pro: concurrent reads</p></li><li><p>con: extra work for DBMS management; larger storage overhead</p></li></ul></li></ol><h3><span id="practice">Practice</span><a href="#practice" class="header-anchor">¶</a></h3><ol><li><p>Hash table</p><ul><li><p><strong>observation 1: Limited ways threads access the data structure（top-down)</strong> -&gt; no deadlock problem -&gt; global latch</p></li><li><p>Trade-off: Parallelism vs. storage, computational overhead of accessing the table, efficiency</p></li><li><p>approach 1: page latches</p><img src="/sg/2022/03/05/db_index/Screenshot-7591456.png" class title="Screenshot-7591456"><img src="/sg/2022/03/05/db_index/Screenshot-7591517.png" class title="Screenshot-7591517"></li><li><p>approach 2: slot latches</p><img src="/sg/2022/03/05/db_index/Screenshot-7591600.png" class title="Screenshot-7591600"></li></ul></li><li><p>b+tree</p><p>Observation 1: several way to access b+ tree(top-down/sibling pointers/…) -&gt; come up with a protocol to allow multiple threads to read and update a b+ tree</p><p>Problem 1: modify same node at the same time</p><p><u>Problem 2</u>: one thread traversing the tree while another thread splits/merges nodes</p><img src="/sg/2022/03/05/db_index/Screenshot-7594900.png" class title="Screenshot-7594900"><ul><li><p>Solution: latch crabbing/coupling protocol -&gt; top-down direction</p><ul><li>define safe node: A “safe” node is one that will not split or merge when updated (not full on insertion or more than half full on deletion -&gt; write view(insert/delete)</li><li>Procedures:<ol><li>get latch for the parent</li><li>get latch for the child</li><li>release latch for the parent if it is deemed “safe”</li></ol></li></ul></li><li><p>Basic latch crabbing protocol for operations</p><ul><li><p>Search: top-down</p></li><li><p>Insert/delete: If latched child is safe, release latches on all its ancestors</p><p>Delete 38:<img src="/sg/2022/03/05/db_index/Screenshot-7595740.png" class title="Screenshot-7595740"></p><p>Insert 25:<img src="/sg/2022/03/05/db_index/Screenshot-7595952.png" class title="Screenshot-7595952"></p></li></ul></li><li><p>observation 2: first step of all the updates on the b+tree is <strong>taking a write latch on the root.</strong> -&gt; <strong>bottleneck with higher concurrency</strong></p><ul><li>No need to acquire write latch on the safe node update.</li></ul></li><li><p>Better latching algorithm: assume the target leaf node is safe, use READ latches on the way. If it the node is not safe, apply the old method(WRITE latch on the root)</p></li></ul><p><u>Problem 3</u>: leaf node scan -&gt; dead lock</p><ul><li><p>observation: threads acquire locks in two directions at the same time</p><img src="/sg/2022/03/05/db_index/Screenshot-7597088.png" class title="Screenshot-7597088"></li></ul><p>Problem 4: delayed parent updates</p><p>Problem 5: versioned latch coupling</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-445 databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hw3 dynamic programming</title>
      <link href="/sg/2022/03/05/hw3_dp/"/>
      <url>/sg/2022/03/05/hw3_dp/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ps8">ps8</a></li><li><a href="#recitation">Recitation</a></li></ul><!-- tocstop --></div><p>key word: state, dependency</p><h2><span id="ps8">ps8</span><a href="#ps8" class="header-anchor">¶</a></h2><ol><li><p>Problem 1: reduce state? We can easily think of at lease one state in this case which is the number of peppers Peter can pick.</p></li><li><p>(Rethink dp problem in a week)</p><ul><li><p>Problem 1.1: in which way sorting affect the results?</p><p>-&gt; data structures/algorithms</p></li><li><p>problem 2: how to make it acyclic?</p><p>in building block problem, the key problem is pre-processing part.</p></li></ul></li><li><p>princess plum: define subproblems?</p><p>a bottom-up way:</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">count_paths</span>(<span class="params">F</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Input:  F | size-n direct access array of size-n direct access arrays</span></span><br><span class="line"><span class="string">              | each F[i][j] is either &#x27;t&#x27;, &#x27;m&#x27;, or &#x27;x&#x27;</span></span><br><span class="line"><span class="string">              | for tree, mushroom, empty respectively</span></span><br><span class="line"><span class="string">    Output: m | the number of distinct optimal paths in F</span></span><br><span class="line"><span class="string">              | starting from (0,0) and ending at (n-1,n-1)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    n = <span class="built_in">len</span>(F)</span><br><span class="line">    K = [[-<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * (n+<span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">    X = [[<span class="number">0</span>] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> F[i - <span class="number">1</span>][j - <span class="number">1</span>] == <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">and</span> j == <span class="number">1</span>:</span><br><span class="line">                K[<span class="number">1</span>][<span class="number">1</span>], X[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> F[i - <span class="number">1</span>][ j - <span class="number">1</span>] == <span class="string">&#x27;m&#x27;</span>: m = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: m = <span class="number">0</span></span><br><span class="line">            K[i][j] = <span class="built_in">max</span>(K[i-<span class="number">1</span>][j], K[i][j-<span class="number">1</span>]) + m</span><br><span class="line">            <span class="keyword">if</span> K[i][j-<span class="number">1</span>] + m == K[i][j]: X[i][j] += X[i][j-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> K[i-<span class="number">1</span>][j] + m == K[i][j]: X[i][j] += X[i-<span class="number">1</span>][j]</span><br><span class="line">    <span class="keyword">return</span> X[n][n]</span><br></pre></td></tr></table></figure></li></ol><p>ps9</p><p>Techniques:</p><ol><li>store parent pointers to track info.</li></ol><h2><span id="recitation">Recitation</span><a href="#recitation" class="header-anchor">¶</a></h2><p>Problem: <strong>state</strong>, dependency?</p><ol><li>longest increasing subsequence</li></ol><p>Iterative / Recursive: A Fibonacci example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">    a0 = <span class="number">0</span></span><br><span class="line">    a1 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(a0)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(a1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">sum</span> = a0 + a1</span><br><span class="line">            a0 = a1</span><br><span class="line">            a1 = <span class="built_in">sum</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">  <span class="comment"># without memoization recursive version</span></span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> fib(n-<span class="number">1</span>) + fib(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>Partitions</p><ol><li>subset sum: solve with dp in O(nS) time</li></ol><p>Complexity</p><p>problem: how does running time compare to input?</p><ol><li>Decision problems: assignment of inputs to No (0) or Yes (1).<ul><li>Classes: R, EXP, P(focus in this class)</li></ul></li><li>Decidablilitiy: problem is decidable if runtime of existing program is finite.</li><li>Reductions: solve problem A -&gt; by solving problem B we know how to solve</li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《那不勒斯四部曲》—— 真实的虚构</title>
      <link href="/sg/2022/03/03/elena/"/>
      <url>/sg/2022/03/03/elena/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#bei-jing">背景</a></li><li><a href="#jiao-yu">教育</a></li><li><a href="#hun-yin-sheng-yu-chi-hun">婚姻/生育/离婚</a></li><li><a href="#du-li-he-gong-zuo">独立和工作</a></li><li><a href="#qing-gan-guan-xi">情感关系</a></li></ul><!-- tocstop --></div><p>最初接触到这套书还是18年时，断断续续地今天才算看完。我一直对讲述地过于真实的书不忍卒读，这本书把两位主人公莱农（格雷科），莉拉（赛鲁罗）间复杂的友谊刻画地非常有亲切感，我在看这套书时总会发现自己既有莱农的一些特质也有莉拉的一面，书中的文字让我反思这些特点是怎样影响我的世界观的。不仅如此，这套书讲述了一个残酷的关于女性的真相，穿杂的情节即使在现实中发生也不会突兀。那就是女性受到的系统性偏见不会由于阶级的提升而发生改变，无论这个女人是工人阶级，中产阶级还是上流社会，都不可避免地陷入一些特殊的牢笼中，比如教育，生育，家庭暴力，情感关系等。由于我对现实生活中中产阶级及以上的家庭模式不太了解，所以本文的讨论仅限于此书发生的地点年代设想，尽管我怀疑现实中的模式并不会偏离太多。</p><h2><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">¶</a></h2><p>主人公出生的地方是二十世纪三四十年代那不勒斯一个破败的社区，所在的家庭都在生存线上挣扎。莱农是家中长女，有一个妹妹，两个弟弟，父亲在市政府做门房。莉拉有个哥哥，父亲是个鞋匠。社区中大多都是这样的家庭，除了卡拉奇家和索拉拉家。卡拉奇家开了肉食店在早期很赚钱，而索拉拉家通过放高利贷和一些灰色产业在整个那不勒斯都横行霸道。</p><img src="/sg/2022/03/03/elena/Screenshot-6311043.png" class title="Screenshot-6311043"><p>她们的友谊互相支撑着彼此走过了很艰难的时刻。尝试着写了几遍但感觉自己的文笔写不出她们之间深刻而充满矛盾的关系，就作罢了。</p><h2><span id="jiao-yu">教育</span><a href="#jiao-yu" class="header-anchor">¶</a></h2><p>我认为教育和家庭是人生中最重要的东西，这一点是受苏姿丰那篇演讲的影响也是个人在实践中的体会。然而教育不只代表着学校的教育，我认为教育中最重要的一部分就是自我教育，如果不知道最后的目标具体是什么，那么现在又能有什么支点呢？书中莉拉和莱农接受到的教育是明显不同的，莱农凭借努力考上了当时最有名的学府之一比萨高师，是经过规范训练的大学生；而莉拉小学辍学后就再也没有受到任何正规的教育。我非常敬佩两位主人公的求知欲，莉拉在知道不能在上学后没有自暴自弃而是到社区里唯一一家图书馆用一家四口人的名字借书，之后也陆续学习了拉丁语和希腊语，因为莱农告诉过她初中高中就学这些东西。而在失败的婚姻结束后，她迷上了计算机知识，于是开始学习函授的计算机课程，最后通过技术改变了自己的生活，创立了一家相关的公司。而莱农尽管没有像同学一样显赫的家世，但她一直努力学习着自己欠缺的有力的语言表达能力，思考怎样去有力地组织语言。在父母不同意她去上大学浪费钱时，她坚定地表明了自己的观点。</p><p>然而城区的同龄人并没有这样的幸运，大多数人都是早早辍学。和她们一起长大的女生没能够得到改变的机会，在后来的很多事上只能任人摆布，动辄打骂。当时的索拉拉兄弟经常开着车在城区里找青春期的女生，有女生甚至会羡慕被欺凌的拖进车里的人。只有莉拉知道他们到底会对那个女孩做什么事，并告诉莱农如果她被这么对待一定要叫她。她会划破索拉拉兄弟的喉咙。性教育在社会中普遍是个难以启齿的话题，本来只是了解一些正常的生理常识和手段，但却未能受到家长和学校的重视。想到林奕含发生的悲剧，我至今也没能读完她写的那本书。</p><img src="/sg/2022/03/03/elena/IMG_0236.PNG" class title="IMG_0236"><img src="/sg/2022/03/03/elena/IMG_0237-6316928.PNG" class title="IMG_0237"><h2><span id="hun-yin-sheng-yu-chi-hun">婚姻/生育/离婚</span><a href="#hun-yin-sheng-yu-chi-hun" class="header-anchor">¶</a></h2><p>婚姻的本质是一种契约关系，包含权利和义务，虽然社会上常以爱情来矫饰它。我认为没有爱情缔结这样的关系是非常不可靠的，我还认为爱情是一种流动的状态，并不能被婚姻所包括。</p><p>主人公的婚姻都是不同方向的悲剧。莉拉在结婚当天发现温和外表的丈夫下的伪善和暴力，并被婚内强暴，经历了漫长时间的折磨终于抛下一切离开了丈夫。莱农的婚姻或许更常见的被看成一个幸福的婚姻吧。莱农嫁给了一个学阀家族的儿子，离开了破旧的老城区到比萨生活，有独栋房子，丈夫有丰厚的收入。然而事实是她在温吞如水的生活中被母职困住，每天忙着做各种家务事。生孩子养孩子几乎都是莱农一个人在忙，丈夫没有帮助她任何事情，失去了学习和写作的自由。她于是想难道自己上了大学那么多年就是为了做这些事请吗？莱农虽然表面上有精致的生活，有权势大的婆家，有大学教授的丈夫，但是她在繁杂的琐碎家务事中无法做想做的事情。丈夫在小孩刚出生时完全不管，只顾着自己写作看书学习，孩子哭了只能莱农去哄和照顾。这样在如死水的环境里过了很多年。</p><h2><span id="du-li-he-gong-zuo">独立和工作</span><a href="#du-li-he-gong-zuo" class="header-anchor">¶</a></h2><p>我一直认为现代女性最重要的一点就是要独立。独立不是指孤立，是指不用依附任何人，在生活中以平等合作的态度对人。而独立离不开工作，工作能产生个人价值，给人一个支点前进。</p><p>莉拉没离开丈夫前只能依附着丈夫存在，直到她离开后找到了一份肉食厂工作她才觉得自己找到了一种长久失去的自由。而莱农长久被困在家庭中不能够继续写作，所写的文字丈夫从来都不会看只是敷衍了事，直到重新开始写作后才理顺了自己的想法，有了更近一步的思考。她们都在生活中逐渐找到了自己的位置，然后开始发明创造。</p><h2><span id="qing-gan-guan-xi">情感关系</span><a href="#qing-gan-guan-xi" class="header-anchor">¶</a></h2><p>书中一个很争议的人物就是尼诺。尼诺的虚伪的不同在于他伪装自己成一个关心女性，赞美女性，鼓励女性摆脱压迫的人，实际上他对妻子也是和大多数男性同样的方式。书中和剧里尼诺都展现出帅气有魅力学识的人，但实际上他只是个和他父亲一般虚伪自私的人。书中形容他的才华是没有根基的，他相信权威，是个追名逐利的技术官僚。他可以对任何一个女人——对他有利的——说爱她，然后转头离开后就不闻不问，直到自己哪天需要借用她的帮助再回来。他抛弃过莉拉——当时莉拉以为他们是真心相爱，互相帮助学习的——留下怀孕的莉拉在偏僻的住处里无人问津，他抛弃过一个迷恋他才华的女学生——后来有了一个小孩——之后就完全抛诸脑后了…</p><p>（改天再写）</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>recitation ds</title>
      <link href="/sg/2022/03/01/recitation_ds/"/>
      <url>/sg/2022/03/01/recitation_ds/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#gfs">GFS</a></li><li><a href="#mapreduce">Mapreduce</a></li><li><a href="#zfs">ZFS</a></li><li><a href="#consistency-guarantees">consistency guarantees</a><ul><li><a href="#design-process">Design process</a></li><li><a href="#baseball-example">Baseball example</a></li><li><a href="#some-thinking">Some thinking</a></li></ul></li><li><a href="#raft">Raft</a><ul><li><a href="#background">Background</a></li><li><a href="#consensus-algorithms">Consensus algorithms</a></li><li><a href="#intuition-of-terms">Intuition of terms</a></li><li><a href="#olc-notes">olc notes</a></li></ul></li></ul><!-- tocstop --></div><p>本文主要记录对分布式系统部分的设计细节和实现部分相关问题的想法。</p><h2><span id="gfs">GFS</span><a href="#gfs" class="header-anchor">¶</a></h2><p>GFS: machine failures</p><p>简单来说，GFS是一个使用拷贝的文件系统，它的结构包含controller, chunk server, client。这些角色的交互来完成拷贝的功能，以防止大集群中某个机器的崩溃。它和unix文件系统的区别在于，GFS更能适用有很大工作量写入写出读入读出的情况（有数百TB计的存储量的数千磁盘在数千机器上的大集群收到数百用户并行的访问）</p><h2><span id="mapreduce">Mapreduce</span><a href="#mapreduce" class="header-anchor">¶</a></h2><p>…</p><h2><span id="zfs">ZFS</span><a href="#zfs" class="header-anchor">¶</a></h2><p>…</p><h2><span id="consistency-guarantees">consistency guarantees</span><a href="#consistency-guarantees" class="header-anchor">¶</a></h2><p>What: Consistency guarantee is a contract between the data provider and clients. It can affect a system in three aspects: consistency, performance and availability.</p><p>How: A system designer should understand the particular kind of need of clients and how the system operates to decide which consistency guarantee.</p><p>Why: It matters because the system can be the best version for client’s needs, faster without loss of correctness.</p><ul><li><img src="/sg/2022/03/01/recitation_ds/sixcg.png" class title="six consistency guarantees"></li></ul><h3><span id="design-process">Design process</span><a href="#design-process" class="header-anchor">¶</a></h3><blockquote><p>Data availability is a term used by computer storage manufacturers and storage service providers to describe <strong>how data should be available at a required level of performance in situations ranging from normal through disastrous</strong>.</p></blockquote><p>The paper describes four intermediate consistency protocols between strong consistency and eventual consistency, which gives more flexibility while preserving correctness. Giving the example of baseball game, it lists six peoples to use the data store for different purposes. Here, I will give the reasoning process to the table 2.</p><p>The consitency and performance have inverse correlation. In other words, if the data is more consistent, it means the server which updates the data needs to pass on the new data to every other servers. One server crashed would cause the wrong data got transferred. Therefore strong consistency model has excellent consistency and poor performance and vice versa.</p><p>The four intermediate consistency models can get higher performance than strong consistency due to partial correctness of the data. They don’t need the data in every server is consistent at the same time giving the specific applications providing. Bounded staleness has poor availability as the strong consistency for the same reason of requirement for time. The server can not guarantee the correctness in specific time.</p><ul><li><img src="/sg/2022/03/01/recitation_ds/tradeoffs.png" class title="tradeoffs"></li></ul><h3><span id="baseball-example">Baseball example</span><a href="#baseball-example" class="header-anchor">¶</a></h3><p>A baseball game example: minimal consistency of read operation in a simple data store(replicated storage systems) containing only two teams’ scores.</p><ol><li><p>Official scorekeeper: the scorekeeper is the only person to write the data. They need the most updated scores so that strong consistency seems the appropriate one. However they are the only server to write the data and pass on to others. Therefore read my writes would be sufficient.</p></li><li><p>umpire: strong consistency. They can’t provide wrong scores because it’s a fair game.</p></li><li><p>Radio reporter: They need tell the audience a more updated scores than before. Consistent prefix is not enough because they are using scorekeeper’s data and old scores can emerge later than new ones. Therefore it have to maintain the monotonic reads at the same time. Alternatively, monotonic reads with bounded staleness can achieve the same goal.</p></li><li><p>sportswriter: bounded staleness. They need the most updated scores but not in a hurry. So they can wait for the final score at least it is correct one.</p></li><li><p>statistician: for one team’s score, they need strong consistency; for one season’s score, they need read my writes for the same reason as scorekeeper.</p></li><li><p>stat watcher: eventual consistency. It’s ok to provide out-of-date data.</p><img src="/sg/2022/03/01/recitation_ds/line_score.png" class title="line_score"><img src="/sg/2022/03/01/recitation_ds/scores_read.png" class title="scores_read"></li></ol><h3><span id="some-thinking">Some thinking</span><a href="#some-thinking" class="header-anchor">¶</a></h3><ol><li><p>What systems need weaker consistency? I think the systems that incline to performance and donot heavily rely on real-time computing results such as bank accounts. For example, social media systems like twitter. Updates of tweets are not critical for users.</p></li><li><p>I think understandability is a worthy design goal. If even the developers can hardly understand the protocol, how can they make improvements based on the customer needs and develop relevent features on top of it.</p></li><li><p>To decide on a particular consistency model, I think it requires a thorough study of current target customers and future costs it may bring giving the current design goal. Different cloud storage providers have made different decisions. Amazon S3 uses eventual consistency to improve the performance and availibility<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. It gains more availibility with the proliferation of geo-replicated services.  However Azure aims for specific organizations which needs strong consistency for correctness. I think they are targeting different customer bases.</p></li></ol><h2><span id="raft">Raft</span><a href="#raft" class="header-anchor">¶</a></h2><p>What is Raft<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>?</p><p>Raft is a protocol for implementing distributed consensus algorithms so that distributed system can reach agreements having same states. Simply speaking, it’s a way that makes client and its many servers have x = 3 when the client sets x to 3.</p><p>Rules: A Raft cluster has several servers (&gt;=5). A server node has 3 states: follower, candidate, leader. Each node has a log and a state machine.</p><ul><li><p>state machine of servers: an election term</p><img src="/sg/2022/03/01/recitation_ds/state_machine.png" class title="state machine"></li><li><p>Time is split into <code>terms</code>, like logical clocks in Raft.</p></li><li><p>Raft servers communicate through RPCs in parallel. Servers retry RPC if they donot receive a response in a timely manner.</p><ul><li>RequestVote RPCs</li><li>AppendEntries RPCs</li></ul></li></ul><p>Problem 1: a split vote if 2 nodes become candidates at the same time in leader election</p><p>Re-elect until one node becomes leader (receive a <strong>majority</strong> of votes. Majority means over a half of members.). Majority != max.</p><p>Problem 2: network partition in log replication</p><p>The system will reach consensus again when the network partition is healed for following reason. When a node sees the higher election term, it will step down, which means to roll back its uncommitted entries and match the new leader’s log.</p><h3><span id="background">Background</span><a href="#background" class="header-anchor">¶</a></h3><ol><li><p>Goal of Raft is understandability without losing performance.</p></li><li><p>Backgroud: Paxos, the previous main-stream consensus algorithms, is hard to understand and complicate to maintain the systems built on top of that.</p></li><li><p>Replicated state machine, a replicated log containing the state machine commands from clients. Consensus algorithms usually have properties as: safety (network delay/partition, packet loss, duplication, reordering), availabilty (if a majority of servers in the system is running, the sys can work. The failed ones can work after recovering from state on storage), time irrelevant consistency, <strong>Majority Rules</strong>.</p></li><li><p>Why leave Paxos? Error prone, hard to implement/maintain/understand</p><p>(lol a section to describe why Paxos is so hard)</p><ul><li><p>Single-decree decomposition is hard to maintain replicated log where it separates partial logs of the system and then merges them into one in the end. Consensus algorithms should have constraints on the order of committed logs.</p></li><li><p>Big gap between the theory and real systems in multi-Paxos. And correctness is hard to maintain when the system built on top of Paxos eventually produces its own architecture.</p></li></ul></li><li><p>Raft improves understandability by</p><ul><li>divide and conquer: decompose consensus to independent part: leader election, log replication, safety and membership changes</li><li>simplify state space: reduce #states to consider. Ex: randomization: introduce non-determinism with random timeout settings, which reduces state space</li></ul></li></ol><h3><span id="consensus-algorithms">Consensus algorithms</span><a href="#consensus-algorithms" class="header-anchor">¶</a></h3><p>First, keep in mind that Raft is a protocol to manage replicated logs.</p><p>Problem 1: what is the leader of a Raft cluster? How it works?</p><ol><li>A leader manages the replicated log</li><li>A leader’s tasks<ul><li>receives/handles requests from client: client -&gt; leader; client -&gt; follower -&gt; leader</li><li>sends messages to all its followers: replicates its log entries/heartbeat</li></ul></li><li>A follower that receives no communication over a period of time will become a candidate with <code>current_term += 1</code> &amp; state transition.</li><li>Randomized retry approach: Raft randomly chooses election timeouts from a fixed interval (150-300 ms) to reduce the frequency of mulitple servers having timeouts together. It means each candidate has random election timeout. This approach is to solve the availability issues that a ranking systems can not.</li><li>Eventually, after a leader is elected, the log consistency converges due to consistency check of appendEntries RPCs.</li></ol><p>Problem 2: log replication</p><ol><li>A log entry is <strong>committed</strong> when the leader replicates it on a <strong>majoritiy</strong> of the servers.</li><li>A log entry represents a command not the result of a command, which makes preceding entries trackable.</li><li>Consistency check:<ul><li>send (i): [entry(i-1)][entry(i)] to server S_i, S_i checks if entry(i-1) in its log and only replicates entry(i) when the check passed.</li><li>if the follower is inconsistent with the leader, the check will find the latest entries that both servers agree and overwrite the following with the leader’s after that point.</li></ul></li><li>A <code>nextIndex</code> approach.</li><li>A leader’s right<ul><li>A leader can modify its followers’ log entries.</li><li>A leader can append new entries to its own log (but cannot delete/overwrite its log)</li></ul></li></ol><img src="/sg/2022/03/01/recitation_ds/fig6.png" class title="fig6"><p>Operation sequences lead to the failure cases:</p><ol><li>has missing entries<br>(a) server a crashed at term 6<br>(b) server b crashed at term 4</li><li>has extra uncommitted entries<br>(c) server c was the leader for term 6, added serveral entries to its log but only committed some of its entries.<br>(d) server d was the leader for term 7, added serveral entries to its log but committed none of its entries.</li><li>has missing entries and extra uncommitted entries<br>(e) server e was the leader for term 4, added serveral entries to its log but only committed some of its entries. Then it crashed and remained down for several terms.<br>(f) &gt; Server f was the leader for term 2, added several entries, then crashed before committing any of them. It restarted quickly and became the leader for term 3, behaved the same as term 2. Then it crashed again and never came back for several terms.<br>-&gt; Implies that a server having more entries than other servers in one term could be the leader for that term.<br>-&gt; And no entries will get replicated after a server receiving the entries crashed. No entries will get committed after a leader crashed.</li></ol><img src="/sg/2022/03/01/recitation_ds/fig7.png" class title="fig7"><p>Problem 3: Why does Raft need a leader?</p><p>Problem 4: Safety measures and restrictions</p><p>Problem 5: failures</p><ol><li>leader crashes: consistency guarantees</li><li>follower/candidate crashes: retry RPCs indefinitely. Supported by idempotent property of Raft RPCs.</li><li>network partition</li></ol><p>Problem 6: cluster membership changes. Operatiosn like replacing disks/servers, changing the degree of replication.</p><img src="/sg/2022/03/01/recitation_ds/fig10.png" class title="fig10"><p>Problem 7: log compaction</p><p>Snapshotting in Raft</p><h3><span id="intuition-of-terms">Intuition of terms</span><a href="#intuition-of-terms" class="header-anchor">¶</a></h3><ol><li><p><code>Leader Election</code>: When an election term starts, the candidate sends <code>&quot;VOTE FOR ME&quot;</code> messages to others. If the receiving node hasn’t voted yet in this term then it votes for the candidate and the node resets its <code>election timeout</code>. Once a candidate has a majority of votes it becomes leader and the node resets its election timeout. The leader begins sending out <code>Append Entries</code> messages to its followers. Followers then respond to each <code>Append Entries</code> message in <code>heartbeat timeout</code>. This election term will continue until a follower stops receiving heartbeats and becomes a candidate<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>.</p></li><li><p><code>Log Replication</code>: Leader notifies its followers the committed entry by replicating all changes to all nodes from it. An entry is committed once a majority of followers acknowledge it and a response is sent to the client.</p></li><li><p>Process: follower =&gt; candidate =&gt; leader, If followers don’t hear from a leader then they can become a candidate. The candidate becomes the leader if it gets votes from a majority of nodes.</p></li><li><p>2 timeout settings control election:</p><ul><li><p>The <code>election timeout</code> is the amount of time a follower waits until becoming a candidate, randomized to be between 150ms and 300ms.</p></li><li><p>The leader sends messages to its followers in intervals specified by the <code>heartbeat timeout</code>.</p></li></ul></li><li><p><a href="https://en.wikipedia.org/wiki/Byzantine_fault">Byzantine Fault</a>: a metaphor for untrusted components in systems. Every component can go wrong and it’s hard to infer which one is wrong.</p></li><li><p>An operation is idempotent which means performing the same op multiple times has the same effect as performing it once.</p></li><li><blockquote><p>Availabilty of Raft is the ability of the system to respond to clients in a timely manner.</p></blockquote></li><li><blockquote><p>MTBF, mean time between failures. Typical server MTBFs are several months+</p></blockquote></li></ol><img src="/sg/2022/03/01/recitation_ds/fig2.png" class title="fig2"><h3><span id="olc-notes">olc notes</span><a href="#olc-notes" class="header-anchor">¶</a></h3><ol><li><p>In Raft, a leader is a server that manages replicated log of the system. Leader receives all calls from clients and sends requests to its followers in normal condition.</p></li><li><p>Raft handle the following three types of failures:</p><ul><li>leader failures</li><li>candidate or follower failures</li><li>network partitions</li></ul></li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://stackshare.io/stackups/amazon-s3-vs-microsoft-azure#:~:text=Amazon%20S3%20belongs%20to%20%22Cloud,you%20can%20store%20is%20unlimited.">Amazon S3 vs Microsoft Azure</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>A <a href="https://raft.github.io/">visualization</a> of Raft <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>The explanations of terms come from a visualization of Raft <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《文明6》——看不见的世界</title>
      <link href="/sg/2022/02/17/civilization/"/>
      <url>/sg/2022/02/17/civilization/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#shi-jie-guan">世界观</a></li><li><a href="#shi-jian-jiu-shi-jin-bi">时间就是金币</a></li><li><a href="#wei-ren-de-bang-zhu">伟人的帮助</a></li><li><a href="#yin-shi-li-dao">因势利导</a><ul><li><a href="#guan-cha-shi-jie">观察世界</a></li><li><a href="#jie-dian-cun-dang">节点存档</a></li></ul></li></ul><!-- tocstop --></div><p>文明6是个回合制策略游戏，在寒假70个小时左右的时间里我开了几局存档了十几次，最后只赢了两局。虽然文明用了相对简化的形式展现，文明的发展过程和人对世界的探索有相通之处，这也是吸引我的地方之一。本文主要记录对游戏玩法的思考过程以及一些天马行空的想法。</p><img src="/sg/2022/02/17/civilization/imag.png" class title="imag"><h2><span id="shi-jie-guan">世界观</span><a href="#shi-jie-guan" class="header-anchor">¶</a></h2><p>文明有四种胜利的方式，科技，文化，宗教，统治，如果设定的回合数结束了仍没有任何一方达成胜利，那么分数最高的玩家赢。</p><p>文明的发展分成科技树和市政树，对应的历史发展的不同时期，从氏族，农耕文明，中世纪，文艺复兴，现代，原子能时代到信息时代，不同的科技和市政有相应的前置，达成能够解锁下一步行动。</p><p>玩家选择难度和地图开局。</p><h2><span id="shi-jian-jiu-shi-jin-bi">时间就是金币</span><a href="#shi-jian-jiu-shi-jin-bi" class="header-anchor">¶</a></h2><p>生产力决定建筑完成的回合数，当解锁了主要建筑后，可以用时间或者金币来获得附加建筑。文明里我认为最重要的就是金币，其次是资源。金币可以换取时间，任何能够换得时间的行动都应该采取。</p><p>科技树相比 breadth-first search 采用 depth-first search 最好，在确定目标的情况下这能最大程度的增加科技点。在给定的时期内找到能够有最快发展速度的可能方法，这需要知道可能性大的方式，并且确保走的下一步能够换得更宽的路。</p><h2><span id="wei-ren-de-bang-zhu">伟人的帮助</span><a href="#wei-ren-de-bang-zhu" class="header-anchor">¶</a></h2><p>世界是复杂的，单一方式的想法不能够解决问题。</p><p>文明中伟人的存在能够根据其类别能够给予不同加成，但这种加成是因人而异的。原本我以为只要有大科学家的帮助，那么科技发展就不成问题了。于是某一局里我给所有城市都建了学院，以及附加的建筑，可是其他类别的建筑受到生产力的限制都没能得到很好的发展。而这又影响到了学院的建设，进入恶性循环，数不清多少次都止步于工业时期。</p><p>很高兴的是我最新赢的这局终于获得了图灵。</p><img src="/sg/2022/02/17/civilization/ima.png" class title="ima"><p>虽然文明最强的 buff 是信息时代的大科学家萨拉姆，能够给信息时代所有的科技启动尤里卡时刻。</p><img src="/sg/2022/02/17/civilization/image.png" class title="image"><h2><span id="yin-shi-li-dao">因势利导</span><a href="#yin-shi-li-dao" class="header-anchor">¶</a></h2><p>文明的基础在于城市发展，城市发展繁荣才能获得更多金币，带来更多别的选择。获得新城市的方式有两个，军事掠夺和开拓者自建。从文明发展开始获取新城市是最好的，因为城市够多发展商会和建立贸易路线才能获得更多的金币。每局能够获得500金币左右的加成就算比较好的发展趋势了，这一般需要10个城市左右。我输的几局里城市的数量相对都较少，只有6个城市，发展速度也不行。</p><p>城市自建取决于当前人士的人口和未开发的土地资源。建筑获得有人口数量要求，开拓者会减少一个人口，如果城市发展速度不足那么当前城市发展就会停滞。而军事掠夺只要有比目标城市够强的军队就行。文明里战争设置的难度不高，只有玩家能够选择多个城市打击，而其余电脑用户玩家只有在邻国的军队已经到或过了边界才会攻击（或许之后能找到朋友一起玩）。</p><p>我最新玩的一局选择的是实际地球地图模拟，随机市政科技模式，随机君主是西班牙菲利普三世。他的天赋主要是金币，生产力和宗教。发展重商主义能够获得更多的金币和生产力，而宗教信仰与敌人不同能够使军队获得更多战斗力。玩到中间我觉得通过战争掠夺能够获得更多科技点，于是选择和科技发展第一的邻国刚果（非洲）发动战争。当时军队都在欧洲南部，宣战过后北非最接近刚果的城市在边界就受到了攻击，而大量军队经过五个回合左右到了边界就直接被科技等级更高的刚果打败了，文明等级对战争的直接影响很大。</p><img src="/sg/2022/02/17/civilization/i.png" class title="i"><h3><span id="guan-cha-shi-jie">观察世界</span><a href="#guan-cha-shi-jie" class="header-anchor">¶</a></h3><p>我认为文明里任何的单一因素都对结果没有绝对作用，所以不用在意一时一地的得失。侦察兵去探索其它地方遇到别的文明是必要的，但是基础的是城市发展，周围邻国的发展情况比远方的世界更重要。西班牙所处的地方靠近海但首都马德里并不在海岸，而不能出海就限制了新大陆城市的开拓，所以在最开始我就想办法先发展航海业，同时宁愿花金币扩大边境也不能在某条路上卡死了。</p><p>周边国家可以发动战争的处于同一层次的文明主要有英国，德国，罗马。罗马科技水平比我略高。由于法国君主关系和我不大好，经常谴责我（？），巴黎也阻碍了我往英德那边跑，所以最开始我就占领了巴黎，这导致我的军队主要集中在欧洲。在打刚果失败后，我的打算是通过掠夺英国将军队从火枪手发展到步兵。于是我读取存档到打刚果前，占领了英国两座城市。占领英国后我发现德国的边界线已经被周边国家锁死了，而德国文明还未发展出航海术，相比世界其它国家基本停滞不前于是我又占领了德国，没想到德国只有这一座城市，他们一直被边界锁住没有开拓新的城市。这时候我的军队已经发展到了线列步兵，比步兵低一个等级。</p><p>文明我更倾向的胜利方式一直都是科技胜利，毕竟是个理工生😼。战争掠夺的主要目的也是发展科技。由于军队发展水平仍比不上科技更高的刚果，也为了打开通往别的国家的大门我又占领了相邻的罗马两个城市。这时候军队发展到了步兵程度，城市能够建立机场，贸易路线也开拓得够多，每回合加成300金币左右。同时我发现在世界排名中我最领先的胜利方式是统治胜利，并且统治胜利的程度比三种其它君主领先的方式要高。所以我选定了统治胜利的方式，这才发现需要占领其它所有国家的首都。</p><p>在后来发展过程中刚果的文化胜利程度有一段时间和我的统治胜利程度差不多。由于奇观能带来文化加成，我选择了刚果两座奇观最多的城市作为战略目标。轰炸机和战斗机的出现和文明难度不高的战争模式使西班牙一步步占领了刚果，中国和日本的首都。这时候我确定自己基本上能赢了，剩下的只是时间问题。</p><p>阿兹特克由于在其它大陆，我派出了两艘战舰和两支机械化步兵确定它首都的位置，然后布置飞机在疆域东侧空袭。最后一个首都反而花了额外的时间，虽然之前掠夺过挪威的城市但我忘记自己并未占领它的首都，查看世界排名面板后我才发现有漏网之鱼，确定了最后一个战略目标。攻下后到这里终于获得了统治胜利。</p><img src="/sg/2022/02/17/civilization/m.png" class title="m"><h3><span id="jie-dian-cun-dang">节点存档</span><a href="#jie-dian-cun-dang" class="header-anchor">¶</a></h3><p>游戏能够存档，人生却不能重来。今后我也会遇到更多失败。只要不自己认输，任何事情都有转机。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> game </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Quotes</title>
      <link href="/sg/2022/01/11/algernon/"/>
      <url>/sg/2022/01/11/algernon/</url>
      
        <content type="html"><![CDATA[<h3><span id="flowers-for-algernon">Flowers for Algernon</span><a href="#flowers-for-algernon" class="header-anchor">¶</a></h3><p>“纪尼安小姐如果你有机会读到这个请不要为我难过。我很感机我就像你说的得到生命中的弟二次机会。因为我学到很多我以前甚至不知到这世界上真的存在的事情。我很高兴能够看到这些即使只是很短的时间。我很高兴我发现了所有关于我的家人和我的事。好像在我想起他们并且看过他们之前我并没有家人似的但现在我知到我有家人而且我和大家一样也是一个人。“</p><p>“Any one who has common sense will remember that the bewilderments of the eyes are of two kinds, and arise from two causes, either from coming out of the light or from going into the light, which is true of the mind’s eye, quite as much as of the bodily eye; and he who remembers this when he sees any one whose vision is perplexed and weak, will not be too ready to laugh; he will first ask whether that soul of man has come out of the brighter life, and is unable to see because unaccustomed to the dark, or having turned from darkness to the day is dazzled by excess of light. And he will count the one happy in his condition and state of being, and he will pity the other; or, if he have a mind to laugh at the soul which comes from below into the light, there will be more reason in this than in the laugh which greets him who returns from above out of the light into the den.” (Plato, The Republic)</p><p>有些常识的人都会记得，眼睛的困惑有两种，也来自两种起因，不是因为走出光明，就是因为走进光明所致，不论是人体的眼睛或心灵的眼睛，都是如此。记得这件事的人，当他们看到别人迷茫、虛弱的眼神，他们不会任意嘲笑，而会先询问这个人的灵魂是否刚从更明亮的生命走出来，因为不适应黑暗而无法看清周遭；或是他刚从黑暗走入光明，因为过多的光芒而目眩。他会认为其中一个人的情况与心境是快乐的，并对另一个人产生怜悯。或是，他可能想嘲笑从幽冥走进光明的灵魂，但这总比嘲笑从光明世界回到黑暗洞穴的人更有道理。(上译)</p><h3><span id="dead-poets-society">Dead Poets Society</span><a href="#dead-poets-society" class="header-anchor">¶</a></h3><p>I went to the woods because I wished to live deliberately, to front only the essential facts of life, and see if I could not learn what it had to teach, and not, when I came to die, discover that I had not lived. I did not wish to live what was not life, living is so dear; nor did I wish to practise resignation, unless it was quite necessary. I wanted to live deep and suck out all the marrow of life, to live so sturdily and Spartan-like as to put to rout all that was not life, to cut a broad swath and shave close, to drive life into a corner, and reduce it to its lowest terms, and, if it proved to be mean, why then to get the whole and genuine meanness of it, and publish its meanness to the world; or if it were sublime, to know it by experience, and be able to give a true account of it in my next excursion. For most men, it appears to me, are in a strange uncertainty about it, whether it is of the devil or of God, and have somewhat hastily concluded that it is the chief end of man here to “glorify God and enjoy him forever.”</p><p>我到林中去，因为我希望谨慎地生活，只面对生活的基本事实，看看我是否学得到生活要教育我的东西，免得到了临死的时候，才发现我根本就没有生活过。我不希望度过非生活的生活，生活是那样的可爱；我却也不愿意去修行过隐逸的生活，除非是万不得已。我要生活得深深地把生命的精髓都吸到，要生活得稳稳当当，生活得斯巴达式的，以便根除一切非生活的东西，划出一块刈割的面积来，细细地刈割或修剪，把生活压缩到一个角隅里去，把它缩小到最低的条件中，如果它被证明是卑微的，那么就把那真正的卑微全部认识到，并把它的卑微之处公布于世界；或者，如果它是崇高的，就用切身的经历来体会它，在我下一次远游时，也可以作出一个真实的报道。因为，我看，大多数人还确定不了他们的生活是属于魔鬼的，还是属于上帝的呢，然而又多少有点轻率地下了判断，认为人生的主要目标是“归荣耀于神，并永远从神那里得到喜悦”。（徐迟译）</p><h3><span id="wo-men-nei-xin-de-chong-tu">我们内心的冲突</span><a href="#wo-men-nei-xin-de-chong-tu" class="header-anchor">¶</a></h3><p>有意识地去体验痛苦，虽然令人痛苦，却可以成为一项非常宝贵的资本。我们越去面对冲突，越去寻求自己的解决途径，我们的内心就越自由，越能得到更多的力量。唯有我们自愿去接受正面冲击时，才可能接近我们的理想，做自己人生的船长。而那种由内心迟钝而带来的，形是而实非的所谓安宁，根本不值得羡慕，它会使我们变弱，使我们轻易沦为太多影响的牺牲品。(卡尔·霍尼)</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3 processors</title>
      <link href="/sg/2021/12/31/6.004_processor/"/>
      <url>/sg/2021/12/31/6.004_processor/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#15-cache">15 Cache</a><ul><li><a href="#direct-mapped-cache-problem-conflict-misses">Direct-mapped cache problem: conflict misses</a></li><li><a href="#n-way-set-associative-cache-n-dm-cache">N-way set-associative cache = N DM cache</a></li><li><a href="#associativity-implies-choices">Associativity implies choices</a></li><li><a href="#write-policy">Write policy</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="15-cache">15 Cache</span><a href="#15-cache" class="header-anchor">¶</a></h2><p>Goal: minimize the average memory access time by building a hierarchical memory system that had both low latency and high capacity.</p><p>Choice: block size -&gt; replacement policy -&gt; write policy</p><h3><span id="direct-mapped-cache-problem-conflict-misses">Direct-mapped cache problem: conflict misses</span><a href="#direct-mapped-cache-problem-conflict-misses" class="header-anchor">¶</a></h3><blockquote><p>Assuming a 1024-line DM cache with a block size of 1:</p><p>Consider running the 3-instruction LOOP A code with the instructions located starting at word address 1024 and the data starting at word address 2048 where the program is making alternating accesses to instruction and data, <em>e.g.</em>, a loop of LD instructions.</p><p>Address conflict will cause the current resident of a cache line to be evicted in favor of the new request.</p></blockquote><p>Conflict misses occur when two address call from cpu reflects to the same cache line.</p><p>If we use fully-associative cache instead, there will be no conflict misses since every address call reflects to different cache line at the high cost of specs/time.</p><p>To fix above problem,  it required a cache that could hold two 3-word blocks in DM cache while FA cache needs two of its cache lines and achieve a 100% hit ratio.</p><h3><span id="n-way-set-associative-cache-n-dm-cache">N-way set-associative cache = N DM cache</span><a href="#n-way-set-associative-cache-n-dm-cache" class="header-anchor">¶</a></h3><p>improvements compared to DM cache: reduce confilcting addresses</p><blockquote><p>N-way SA cache can accommodate up to N blocks whose addresses map to the same cache index.</p></blockquote><p>Associativitity: increase the number of cache locations checked on each access.</p><p>similar to how big the block size to achieve higher hit ratio, how many ways do we need to avoid the cache line conflicts in DM cache?</p><p>这里的way主要指cache中有多少条线路能够同时进行tag查询。</p><blockquote><p>The mapping from addresses to cache lines is designed to avoid conflicts between neighboring locations.</p></blockquote><p>we only need to worry about conflicts between the different regions: code, stack and data.</p><blockquote><p>Associativity tradeoffs: there’s little additional impact on the miss ratio beyond 4 to 8 ways.</p></blockquote><h3><span id="associativity-implies-choices">Associativity implies choices</span><a href="#associativity-implies-choices" class="header-anchor">¶</a></h3><p>when conflict misses occur, which location in cache to store new data fetched from main memory? This question leads to the replacement policies with the goal of minimizing the impact on the hit ration in the future.</p><blockquote><p>Idea: If a block has not been recently accessed, it’s less likely to be accessed in the near future. (Principle of locality)</p></blockquote><p>LRU replacement policy: replace the block that was accessed furthest in the past.</p><p>Except random policy and LRU, other strategies will occasionally cause a particular program to execute much more slowly than expected.</p><h3><span id="write-policy">Write policy</span><a href="#write-policy" class="header-anchor">¶</a></h3><p>How to handle memory writes in the cache when updating main memory with the new data?</p><ul><li><p>write-through: whenever the CPU sends a write request to the cache, the cache then performs the same write to main memory.</p><ul><li>pro:CPU locations: up-to-date value</li><li>Con:DRAM write is slow: bottleneck could be</li></ul><blockquote><p>what if the program is constantly writing a particular memory location, <em>e.g.</em>, updating the value of a local variable in the current stack frame?</p></blockquote></li><li><p>Write-behind: let the CPU continue execution while the cache waits for the write to main memory to complete</p><blockquote><p>if there’s another cache miss while the write is still pending, everything will have to wait at that point until both the write and subsequent refill read finish, since the CPU can’t proceed until the cache miss is resolved.</p></blockquote></li><li><p>Write-back(best write policy):  the contents of the cache are updated and the CPU continues execution immediately.</p><blockquote><p>The updated cache value is only written to main memory when the cache line is chosen as the replacement line for a cache miss.</p></blockquote></li></ul><p>write-back minimizes the number of accesses to main memory, preserving the memory bandwidth for other operations.</p><p>Implementation:</p><ul><li>how to replace a cache line?</li></ul><p>We can avoid unnecessary write-backs by adding another state bit to each cache line: the <em>dirty</em> bit. The dirty bit is set to 0 when a cache line is filled during a cache miss.</p>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hw2 graph</title>
      <link href="/sg/2021/12/30/hw2_graph/"/>
      <url>/sg/2021/12/30/hw2_graph/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ps5">ps5</a></li><li><a href="#ps6">ps6</a></li><li><a href="#ps7">ps7</a></li><li><a href="#recitation">Recitation</a><ul><li><a href="#bfs">BFS</a></li><li><a href="#dfs">DFS</a></li><li><a href="#weighted-graph">Weighted graph</a></li><li><a href="#all-pairs-shortest-paths">All pairs shortest paths</a></li></ul></li><li><a href="#olc">olc</a></li></ul><!-- tocstop --></div><h2><span id="ps5">ps5</span><a href="#ps5" class="header-anchor">¶</a></h2><p>BFS</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># BFS</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BFS</span>(<span class="params">Adj, s</span>):</span><br><span class="line">    parent = [<span class="literal">None</span> <span class="keyword">for</span> v <span class="keyword">in</span> Adj]</span><br><span class="line">    parent[s] = s</span><br><span class="line">    level = [[s]]</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt; <span class="built_in">len</span>(level[-<span class="number">1</span>]):</span><br><span class="line">        level.append([])</span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> level[-<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">for</span> v <span class="keyword">in</span> Adj[u]:</span><br><span class="line">                <span class="keyword">if</span> parent[v] <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    parent[v] = u</span><br><span class="line">                    level[-<span class="number">1</span>].append(v)</span><br><span class="line">    <span class="keyword">return</span> parent</span><br></pre></td></tr></table></figure><p>Analysis:</p><ol><li><p>overall runtime of this BFS: O(|V| + |E|) or O(|E|)</p><ul><li>inner loop takes O(|E|) time: it cycles through all deg(v) outgoing edges from vertex v.</li><li>Parent has length |V|</li></ul></li><li><p>Graph radius</p></li><li><p>network</p><p>Approach: construct a graph.</p><p>Idea: add an additional node s (a super node) to the graph with an edge to every entry point.</p></li><li><p>search for connected components</p></li></ol><h2><span id="ps6">ps6</span><a href="#ps6" class="header-anchor">¶</a></h2><p>DFS</p><ol><li><p>topological sort: DAG</p><ul><li>Simple graph has no self-loops, DAG has no loops</li></ul></li><li><p>relaxation</p><ul><li>Tree: In a tree, there is a unique simple path between any pair of vertices, as two distinct simple paths could be used to construct a cycle.</li></ul></li><li><p>DAG relaxation</p></li><li><p>Bellman ford: detect loops and negative weight</p></li><li><p>Input</p></li><li><p>DAG problem</p><ul><li><p>Use DFS to check visiting order is the particular topological order</p></li><li><p>Topological tree has no backward edges/loops.</p></li><li><p>Auxiliary information: index</p></li></ul></li></ol><h2><span id="ps7">ps7</span><a href="#ps7" class="header-anchor">¶</a></h2><ol><li>Feel smooth when thinking it as water flow.<ul><li>How pq breaks ties may change the visiting order</li><li>It should be clear how to implement operations.</li><li>think about connected components （这个图的减小的方式是通过扔掉已经确定是最短路径的点来进行的</li></ul></li><li>negitive weights: detect negative loops<ul><li>connected component C: one vertex can reach any vertex<ul><li>we don’t know if the graph is connected. Likewise, it should be considered if a graph is a DAG/connected/weighted/…(graph’s property)</li><li>how to find a connected component: considering it is a undirected graph, use DFS/BFS to find C.</li></ul></li><li>Whether has negative loops<ul><li>Yes, V in C is -inf, V not in C is inf</li><li>No, use Dijkstra</li></ul></li></ul></li></ol><h2><span id="recitation">Recitation</span><a href="#recitation" class="header-anchor">¶</a></h2><p>Terminology:</p><ol><li>Bipartite graph: a graph whose vertices can be divided into two disjoint and independent sets U and V, that is, every edge connects a vertex in U to one in V.</li><li>DFS search: search a graph from a specific vertex or an entire.</li><li>DAG: A directed graph containing no directed cycle is called a directed acyclic graph or a DAG</li><li>Topological sort: in a DAG G=(V, E), a linear ordering of the vertices such that for each edge (u, v) in E, vertex u appears before vertex v in the ordering.</li></ol><p>The problem solving process: transform raw input to IN, apply the algorithm we are familiar with, read raw output to OUT.</p><p>Then calculate the runtime and prove for correctness and efficiency.</p><img src="/sg/2021/12/30/hw2_graph/Screenshot-7934843.png" class title="Screenshot-7934843"><h3><span id="bfs">BFS</span><a href="#bfs" class="header-anchor">¶</a></h3><p><strong>level sets</strong> L_i is the set of vertices reachable from s via a shortest path of length i. Breadth-first search discovers levels in increasing order starting with i = 0 where L_0 = {s}</p><h3><span id="dfs">DFS</span><a href="#dfs" class="header-anchor">¶</a></h3><p>Relaxation: search for a solution to an optimization problem by sorting with a solution that is not optimal, then iteratively improves the solution until it becomes an optimal solution to the original problem.</p><p>Think of the initial distance values as being very “tight” or “constrained” (e.g., initialized to infinity), and relaxation as <strong>loosening</strong> the constraint when a shorter (better) path is found</p><ul><li>delta (s, v): weight of the shortest path</li><li>d (s, v) = +inf (except d(s, s) = 0)</li><li>if d(s, v) = delta (s, v), d(s, v) fully relaxed</li></ul><p>How to relax? And when to stop relaxing?</p><img src="/sg/2021/12/30/hw2_graph/edge_relaxation.png" class title="edge_relaxation"><p>The definition of topological sort depends on the acyclic property of DAG.</p><p><u>The important part is reasoning process so that we can reason by ourselves to get the answer</u></p><p>edge classification</p><ul><li>tree edge(DFS traverse)</li><li>not tree edge<ul><li>Back/forward/cross edge</li></ul></li></ul><p>Problem 1: how this concept relates to DFS?</p><p>Problem 1.1: how that defers to undirected graph compared with directed graph?</p><p>topological sort -&gt; directed, acyclic, graph</p><p>Problem 2: how this concept relates to topological sort?</p><h3><span id="weighted-graph">Weighted graph</span><a href="#weighted-graph" class="header-anchor">¶</a></h3><p>problem 0: how to build a shortest path algorithm?</p><p>simple case: take an edge, split it up, put in fake nodes. Then use BFS</p><p>Problem 1: shortest path with odd edges?</p><p>比较有趣的是可以把两个状态看成两个平面。</p><p>Idea: track state during path building</p><p>problem 2: fast way, least fuel. An edge has a fixed fuel cost and a varying time cost, depending on the time table Tc (in minutes), where M = 24 × 60</p><p>Idea: choose a more reasonable state to track and reason carefully.</p><h4><span id="bellman-ford">Bellman-ford</span><a href="#bellman-ford" class="header-anchor">¶</a></h4><p>Notice: negative weight</p><p>-&gt; detect loops</p><h4><span id="dijkstra">Dijkstra</span><a href="#dijkstra" class="header-anchor">¶</a></h4><p>Notice: non-negative weight</p><p>讲义中分成两部分来看这个算法。整体上看： Dijkstra 像一个流动的水龙头阀门，水流从起点匀速地流动到下一个开关。算法把连续的过程通过 edge relaxation 离散的表示。</p><ol><li><p>Edge relaxation: priority queue -&gt; extract_min/insert/delete</p></li><li><p>算法的运行时长与 pq 的具体实现有关。可以从三种角度看：</p><p>存一对 (key, value)， 需要实现三个操作。</p><ul><li>当图的点密集时：|E| = Ω(|V|^2) ; direct_access_array; T = O(|V|^2+ |E|)</li><li>当图的点稀疏时：|E| = O(|V|) ; heap; T = O((|V |+ |E|) log |V |)</li><li>介于两者之间：binary heap; T = O(|V |log |V |+ |E|)</li></ul></li></ol><h3><span id="all-pairs-shortest-paths">All pairs shortest paths</span><a href="#all-pairs-shortest-paths" class="header-anchor">¶</a></h3><p>Runtime: at least O(V^2), because we need find all pairs’ path</p><p>naive approach: use n * SSSP algorithms:</p><ul><li>Using Dijkstra for each vertices so as to solve APSP is easy to think but has details to rethink.</li></ul><p><strong>Better:</strong></p><p>tricky part: how to deal with negative weights?</p><ol><li><p>adjusting edge weights</p><p>problem 1: Are shortest paths still shortest paths?</p><ul><li>it’s easy to think of adjusting edge weights by adding a large number to each edge weight. But it will base paths with fewer edges.</li><li>Idea: pick a node u, add 10 to its incoming edges, and subtract 10 from its outgoing edges.</li></ul><p>Problem 2: it’s hard to think a general reweighting functions.</p></li><li><p>making all wights nonnegative</p><p>Clever choice of reweighting function: Add a new node X with weight-0 directed edges (X, v) for each v ∈V , and choose h(v) = d(X, v).</p></li><li><p>Johnson’s algorithm is basically two parts: reweighting function then n * dijkstra.</p><ul><li><p>the essense is the way to construct a new graph G’ with nonnegative weights:</p><p>Add new vertex X and weight-0 edges (X, v) for all v ∈V as above, and run Bellman-Ford from X to compute h(v) = d(X, v)</p></li><li><p>make sure changing back to G.</p><p>The correct d values in G are d(u, v) = d′(u, v) + h(v) −h(u), and the shortest path trees in G′are also shortest path trees in G</p></li></ul></li></ol><h2><span id="olc">olc</span><a href="#olc" class="header-anchor">¶</a></h2><ol><li><p>I think the basic idea is data transformation and build intuition about the problems.</p></li><li><p>why should we know about edge classification…?  because it would help to understand the problem better.</p></li><li><p>Lec 14 notes (19fall) about APSP is worthy reading.</p></li><li><p>Relaxation: it checks for (u,v) in constructing graph</p></li><li><p>python lambda expression</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x: x**<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>Why doesn’t  Dijkstra’s algorithm work with non-negative edge weights?</p><p>I think the tight bound is Dijkstra not allowing negative loops that will destroy its minimal property.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lab RISC-V</title>
      <link href="/sg/2021/12/30/lab_riscv/"/>
      <url>/sg/2021/12/30/lab_riscv/</url>
      
        <content type="html"><![CDATA[<h2><span id="l1">L1</span><a href="#l1" class="header-anchor">¶</a></h2><p><u>Problem</u>: (N-bit)two’s complement convert to decimal</p><p>In two’s complement notation the highest-order bit represents -2^(n-1) instead of +2^(n-1)</p><p>Notice 1: high-order bit of the N-bit repre has negative weight.</p><p>Notice 1.1: all numbers with MSB of 1 are negative</p><p>Notice 1.2: most negative/positive number, range</p><ul><li>Unsigned: 2 ** N - 1;</li><li>2’s complement: 2 ** (N-1) - 1</li></ul><img src="/sg/2021/12/30/lab_riscv/sc.png" class title="hex"><p><u>Problem</u>: addition</p><p>reason the correctness of the result by performing the addition(mod N) and compare the sign bit of the result to the sign bit of one of the addends when the sign bits of the addends are the same.</p><p>Notice 2: overflow when it is needed to drop extra digits.</p><blockquote><p>remark: Note that if you are only given a sequence of bits, you don’t actually know what number they<br>represent.  You also need be told how to interpret those bits: as an unsigned number or as a<br>signed number stored in two’s complement representation.</p></blockquote><p>try to prove:</p><p>Example: Given an unsigned n-bit binary integer = 𝒃𝒏*𝟏… 𝒃𝟏𝒃𝟎 , prove that 𝒗 is a multiple of 4 if and<br>only if 𝒃𝟎= 𝟎 and 𝒃𝟏= 𝟎.</p><h2><span id="l2">L2</span><a href="#l2" class="header-anchor">¶</a></h2><blockquote><p>Fact: <strong>Logical shift</strong> correspond to (left-shift) multiplication by 2, (right-shift) integer division by 2.</p><p><strong>Arithmetic shift</strong> is something related to 2’s-complement representation of signed numbers. In this representation, the sign is the leftmost bit, then arithmetic shift preserves the sign (this is called sign extension).</p></blockquote><ol><li><p>Load/store word instructions are related to address</p><p>sw x4, 4(x3): if register x3 contains 0x2000 and register x4 contains 0x3, the instruction “<u>sw x4, 4(x3)</u>” will store the value 0x3 into the memory location 0x2004.</p><p>lw x2, 8(x1): If register x1 contains 0x1000, then “<u>lw x2, 8(x1)</u> will find the memory address 0x1008 and copy its contents into register x2.</p></li><li><p>computation instructions are related to what is stored in the address/reg</p></li><li><p>Simple computation structure</p><p>1)Load a,b,c with LW</p><p>2)Perform operation</p><p>3)Store result with SW</p></li><li><p>Register -&gt; binary encoding: 5 bit, 32 registers(x0-x31)</p></li><li><p>example of fib logic: mv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// x1 = n </span><br><span class="line">// x2 = final result </span><br><span class="line">bne x1, x0, start // branch if n!=0 </span><br><span class="line">li x2, 0 </span><br><span class="line">j end             // pseudo instruction for jal x0, end </span><br><span class="line">start: </span><br><span class="line">addi x1, x1, -1   // n = n - 1 </span><br><span class="line">li x3, 0          // x = 0 </span><br><span class="line">li x2, 1                      // y = 1 (you&#x27;re returning y at the end, so use x2 to hold y) </span><br><span class="line">loop: </span><br><span class="line">bge x0, x1, end   // stop loop if 0 &gt;= n </span><br><span class="line">addi x5, x3, x2   // tmp = x + y </span><br><span class="line">mv x3, x2         // x = y (pseudo instruction for addi x3, x2, 0) </span><br><span class="line">mv x2, x5         // y = tmp (pseudo instruction for addi x2, x5, 0) </span><br><span class="line">addi x1, x1, -1   // n = n - 1 </span><br><span class="line">j loop            // pseudo instruction for jal x0, loop </span><br><span class="line">end:</span><br></pre></td></tr></table></figure></li></ol><h2><span id="riscv-lab">Riscv lab</span><a href="#riscv-lab" class="header-anchor">¶</a></h2><blockquote><p>An architecture, or more sp ecically an instruction set architecture, is the interface b etween software and hardware. The instruction set architecture precisely sp ecies the resources of the machine and the way programs can access and use them.</p></blockquote><ol><li><p>Convert loop into branches and jumps</p><ul><li><p>Condition at bottom</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">maximum:</span><br><span class="line">li a2, 0 // load immediate 0 into a2 (largest_so_far)</span><br><span class="line">loop:</span><br><span class="line">lw a3, 0(a0) // load word at [[address stored in a0] + 0] into a3 (w)</span><br><span class="line">ble a3, a2, continue // skip next instruction if a3 (w) ≤ a2 (largest_so_far)</span><br><span class="line">...</span><br><span class="line">continue:</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">bnez a1, loop // go to top of lo op if a1 (n) 6= 0</span><br><span class="line">done:</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>Condition at top</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">maximum:</span><br><span class="line">li a2, 0 // load immediate 0 into a2 (largest_so_far)</span><br><span class="line">loop:</span><br><span class="line">beqz a1, done // go to &lt;done&gt; if a1 (n) = 0</span><br><span class="line">lw a3, 0(a0) // load word at [[address stored in a0] + 0] into a3 (w)</span><br><span class="line">ble a3, a2, continue // skip next instruction if a3 (w) ≤ a2 (largest_so_far)</span><br><span class="line">...</span><br><span class="line">continue:</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">j loop // go to top of lo op</span><br><span class="line">done:</span><br><span class="line">...</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ul></li><li><p>interacting with main memory: lw, sw</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lw rd, imm(rs) # we can load the word at address (n+imm) in memory into register rd.</span><br><span class="line">sw rs2, imm(rs1) # we can save the content of rs2 into memory at address (content of rs1 + imm)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2 digital abstraction</title>
      <link href="/sg/2021/12/29/6-004-digit/"/>
      <url>/sg/2021/12/29/6-004-digit/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#4-digital-abstraction">4 digital abstraction</a></li><li><a href="#5-cmos">5 CMOs</a></li><li><a href="#6-combinational-logic">6 combinational logic</a><ul><li><a href="#introduction">introduction</a></li></ul></li><li><a href="#7-sequential-circuits">7 Sequential Circuits</a></li><li><a href="#8-circuits-logic-in-minispec">8 Circuits logic in Minispec</a></li></ul><!-- tocstop --></div><p>Goal: constraints exist in design and what makes our systems most efficient.</p><h2><span id="4-digital-abstraction">4 digital abstraction</span><a href="#4-digital-abstraction" class="header-anchor">¶</a></h2><p>goal: we want  to build a system for storing and processing information.</p><p>Background: analog systems and digital systems serve different direction.</p><p>design goal: the system should tolerate noise</p><p><u>problem</u>: how to represent 0 and 1 using voltage?</p><ul><li><p>naive approach: set one threshold V_T</p></li><li><p>Improvement 1: set two threshold V_L, V_H</p><ul><li>still have the issue dealing with the noise around threshold.</li></ul></li><li><p>improvement 2: divide signals range into input and output area. V_OL &lt; V_IL &lt; V_IH &lt; V_OH.</p><ul><li>an output of a 0 or 1 from some device won’t turn into an undefined or opposite bit when it is read into another input device.</li></ul></li></ul><p>Analysis: analog systems accumulate noise, while digital systems can manage to solve the problem mostly, so that the noise will be canceled at each stage in digital systems.</p><ol><li>Problem: buffer: copy one bit(input-&gt;output)<ul><li>Voltage transfer characteristics: Active components(gain &gt; 1)<img src="/sg/2021/12/29/6-004-digit/test.png" class title="test"></li></ul></li><li>digital circuits: two kinds, combinational circuits and sequential circuits.</li></ol><h2><span id="5-cmos">5 CMOs</span><a href="#5-cmos" class="header-anchor">¶</a></h2><p>Problem: how the gates are built?</p><ol><li><p>CMOs technology(Complementary metal-oxide semiconductor): packaged chip, silicon die, transistors as voltage-controlled switches</p></li><li><p>field effect transistor(FET) has three terminals: gate, source, drain.</p><ul><li><p>Two types: nFETs, pFETs</p><img src="/sg/2021/12/29/6-004-digit/test1.png" class title="t2"></li><li><p>Two examples to explain the behavior</p><ul><li>NOT gate: threshold V_TH, range(if V_IN &lt; V_TH, on; if V_IN &gt; V_DD - V_TH, off)</li><li>NAND gate</li></ul></li></ul></li><li><p><strong>functional behavior of transistors for building logic gates</strong></p><ul><li>complementary behavior: the pullup and pulldown networks are related in a complementary way, so that the pullup is on when the pulldown is off, and vice versa.</li><li>Two problem case<ul><li>Power supply and ground are both connected to the output -&gt; burn the circuit(driven X)</li><li>Output is disconnected</li></ul></li><li>Convention: In CMOS, we always use pFETs to implement the pullup network and nFETs to implement the pulldown network.</li><li>Fact:  individual CMOS gates cannot implement arbitrary Boolean functions.<ul><li>reason: CMOS gates are inverting</li></ul></li></ul><img src="/sg/2021/12/29/6-004-digit/test2.png" class title="t3"></li><li><p>physical design:p-n juctions, capacitor, gate delay…</p></li><li><p>power dissipation for our CMOS gates</p><ul><li>Dissipation comes in two parts: dynamic power, static power</li><li>they are extremely good at having low power consumption.</li></ul></li></ol><h2><span id="6-combinational-logic">6 combinational logic</span><a href="#6-combinational-logic" class="header-anchor">¶</a></h2><h3><span id="introduction">introduction</span><a href="#introduction" class="header-anchor">¶</a></h3><ol><li><p>combinational logic has two part: function spec and timing spec</p><ul><li>Function has two part: truth table and boolean expression.<ul><li>Fact: all combinational functions can be specified with boolean expressions.</li></ul></li><li>Timing: propagation delay</li></ul></li><li><p>static discipline: what is a combinational device</p></li><li><p>problem: how fast are circuits?</p><ul><li>measurement: clock periods, clock frequencies</li></ul><p>processor will change the inputs into our system and read the outputs. So we need to read the inputs correctly before it is changed later.</p><p>Problem 1: we need an upper bound to ensure that we can get the input in the worst-case.</p><p>idea: combinational contract</p><ul><li>Measurement: contamination delay(lower bound)</li></ul></li><li><p>Boolean algebra</p><ul><li><p>Any Boolean algebra can be derived from AND, OR, NOT</p></li><li><p>duality principle holds for all expressions</p></li><li><p>Properties: commutativity, associativity, distributivity…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a + (b * c) = (a + b) * (a + c) # distributivity</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Truth table =&gt; boolean expressions</p><ul><li><p>construct a normal form: sum of products</p></li><li><p>Simplify: minimal sum-of-products -&gt; use algebraic manipulation(reduction, complements…)</p><ul><li><p>to reduce the number of gates</p></li><li><p>Tradeoff: more gates or increase levels leading to increase propagation delay</p><p>(in this class, minispec takes care for us.)</p></li><li><p>remark: synthesizing optimized circuits is a very hard problem</p></li></ul></li></ul></li><li><p>boolean expressions =&gt; circuits: logic synthesis</p><ul><li>Term: logic gate, logic diagram</li></ul></li><li><p>cell library:  xor, nand, nor,xnor</p></li></ol><h2><span id="7-sequential-circuits">7 Sequential Circuits</span><a href="#7-sequential-circuits" class="header-anchor">¶</a></h2><h2><span id="8-circuits-logic-in-minispec">8 Circuits logic in Minispec</span><a href="#8-circuits-logic-in-minispec" class="header-anchor">¶</a></h2>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建博客录</title>
      <link href="/sg/2021/12/29/blog/"/>
      <url>/sg/2021/12/29/blog/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#cao-zuo">操作</a><ul><li><a href="#chan-sheng-xin-ye">产生新页</a></li><li><a href="#fa-bu">发布</a></li></ul></li><li><a href="#wen-jian-jie-gou">文件结构</a><ul><li><a href="#themes">themes</a></li><li><a href="#images">images</a></li></ul></li></ul><!-- tocstop --></div><p>前言：虽然之前也草草弄过几次博客页面，但都不怎么满意当时选用的风格，也没必要自己从头写一个，于是今天花时间寻找了自己喜欢的风格。(10.30)</p><p>我需要的功能是有二级索引，极简风，可读性高，支持markdown以及部署简单。最后选择的是<a href="https://github.com/probberechts/hexo-theme-cactus">cactus</a>风格，用hexo+github pages部署。</p><h2><span id="cao-zuo">操作</span><a href="#cao-zuo" class="header-anchor">¶</a></h2><p>同时参考了<a href="https://zhuanlan.zhihu.com/p/35668237">这篇文章</a>。遇到的坑是刚开始只看选用主题的安装说明不清楚hexo需要先init然后再将风格文件复制到init后的当前文件的theme文件夹下。</p><h3><span id="chan-sheng-xin-ye">产生新页</span><a href="#chan-sheng-xin-ye" class="header-anchor">¶</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about //产生一个新的分页about</span><br><span class="line">hexo new post &quot;hello world&quot; //产生一篇新的博客&quot;hello world&quot;到source/_posts中</span><br></pre></td></tr></table></figure><h3><span id="fa-bu">发布</span><a href="#fa-bu" class="header-anchor">¶</a></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h2><span id="wen-jian-jie-gou">文件结构</span><a href="#wen-jian-jie-gou" class="header-anchor">¶</a></h2><p>每篇文章都包含这个文件的基本信息。</p><p>12.30: 想了下还是使用了这样的分类格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: name</span><br><span class="line">date: 自动生成</span><br><span class="line">tags:</span><br><span class="line">- 子类（课程名）</span><br><span class="line">- 子类（属性）</span><br><span class="line">categories: </span><br><span class="line">- 主类</span><br><span class="line">- 子类</span><br></pre></td></tr></table></figure><h3><span id="themes">themes</span><a href="#themes" class="header-anchor">¶</a></h3><ul><li>color: classic,dart,light,white</li><li><s>tag和catagories是两个独立的分页</s> categories 和 search 是独立的分页</li><li>Markdown 采用两级索引（二，三），最多三级。在第三级前加&quot;&gt;&quot;。否则排版不能表示出分级差异。</li><li>还有很多别的功能，但我不需要这些就没有再弄了。</li></ul><h3><span id="images">images</span><a href="#images" class="header-anchor">¶</a></h3><p><s>图不知道为什么在这个主题下不能用mark down语法的相对路径上传。使用额外的图床有些把问题弄得复杂了，所以博文我会只使用文字，本地笔记文件才会附加图作为提示。（不过传图好麻烦，我选择放弃。本地笔记文件上有图就行了(12.7)。</s></p><p>需求：markdown相对路径引用</p><p>限定：文章/文件的名称不能含空格/中文，否则无法解析。（而我经常用空格在文章名里🙂️</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">&#x27;s/ /_/g&#x27;</span> *  <span class="comment"># 将所有文件名的空格替换为下划线</span></span><br></pre></td></tr></table></figure><ol><li><p>选择图片引用插件：<s>经过测试后选择：<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>, 而不是hexo-asset-…（长时间没有更新，并且只支持绝对路径引用，不符合我需要的条件）</s> 使用 hexo-renderer-markdown-it, 支持更多的功能比如：footnote<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>, 上标，下标。Fixes:</p></li><li><p>更改typora设置</p><img src="/sg/2021/12/29/blog/test0.png" class title="Screenshot2021-12-29 PM 11.01.52"></li><li><p>如果是mac用户，将截屏格式修改成全英文</p><ul><li><p>这个插件根据测试不支持中文名图片</p></li><li><p>后缀不支持时间日期格式</p><ul><li><a href="https://www.idownloadblog.com/2015/04/15/how-to-remove-date-time-screenshots-mac/">更改截屏格式</a>：名称，后缀</li></ul></li></ul></li></ol><p>问题分析：test-first-programming</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>footnote grammar: <code>[^1]</code> , <code>[^1]:</code> , without blank. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> toolbox </category>
          
          <category> tool </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>1 assembly</title>
      <link href="/sg/2021/12/28/6.004_assembly/"/>
      <url>/sg/2021/12/28/6.004_assembly/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#0-introduction">0 introduction</a></li><li><a href="#1-binary-representation">1 binary representation</a></li><li><a href="#2-assembly">2 assembly</a></li><li><a href="#3-procedures">3 procedures</a></li></ul><!-- tocstop --></div><p>with great amounts of help from Andrew Lin’s 20fall 6.004 class notes, I’ve recently reviewed the course.</p><h2><span id="0-introduction">0 introduction</span><a href="#0-introduction" class="header-anchor">¶</a></h2><p>Goal: how to physically implement computation?</p><h2><span id="1-binary-representation">1 binary representation</span><a href="#1-binary-representation" class="header-anchor">¶</a></h2><ol><li>binary representations</li><li>modular arithmetic idea: wheel modulo 2**N</li><li>binary encoding</li><li>two’s complement</li></ol><h2><span id="2-assembly">2 assembly</span><a href="#2-assembly" class="header-anchor">¶</a></h2><ol><li>microprocessor: comprised of: register file, ALU(computation), main memory</li><li>Assembly: comprised of: computation(arithmetic, comparison, logical, shift), load/store, control transfer</li><li>Three-address instructions: reg-imm instructions, reg-reg instructions,…</li><li>see the pattern behind these instructions</li></ol><h2><span id="3-procedures">3 procedures</span><a href="#3-procedures" class="header-anchor">¶</a></h2><p>Problem: hotw to translate high-level program to RISC-V?</p><ol><li><p>Pseudoinstructions: mv, lui, li…</p></li><li><p>Schema</p><ul><li><p>compiling simple expressions into RISC-V code</p><ul><li>Assign variables to regs</li><li>tranlate operators into computational instructions</li><li>use reg-imm instructions</li></ul></li><li><p>conditional statements</p><ul><li><p>if</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># if (expression), then execute (if-body)</span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">beqz xN, endif</span><br><span class="line">compile (if-body) here</span><br><span class="line">endif:</span><br></pre></td></tr></table></figure></li><li><p>if-else</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># if (expression), then execute (if-body), otherwise execute (else-body)</span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">beqz xN, else</span><br><span class="line">compile (if-body) here</span><br><span class="line">j endif (that is, jump straight to endif)</span><br><span class="line">else:</span><br><span class="line">compile (else-body) here</span><br><span class="line">endif</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># do (while-body) while (expression) </span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">beqz xN, endwhile</span><br><span class="line">compile (while-body) here</span><br><span class="line">j while</span><br><span class="line">endwhile</span><br><span class="line"></span><br><span class="line"># reduce branched by putting the comparison at the end instead</span><br><span class="line">j compare (ensuring that we still check the (expression) condition first)</span><br><span class="line">loop:</span><br><span class="line">compile (while-body) here</span><br><span class="line">compare:</span><br><span class="line">compile (expression) into a register xN</span><br><span class="line">bnez xN, loop.</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>calling convention</p><p><u>Problem 1</u>: how to call procedures multiple times without corrupting code?</p><p>Example: set function argument registers: x10-x17</p><p><u>Problem 2</u>: how to go back to place wherever we were at in our main code even calling same function multiple times?</p><p>Example: remember the return address-&gt; RA register</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jal ra, label # ra = 4 + procedure call address</span><br></pre></td></tr></table></figure><p><u>Problem 3</u>: save registers for nested procedures</p><p>Sol: callee, caller, local storage component(activation record, stack)</p><p><u>Fact</u>: This distinction between caller-saved and callee-saved registers is important to keep in mind – the former is not preserved across function calls, but the latter is, so certain arguments must be saved on the stack to preserve values</p></li><li><p>program counter(reg)</p></li><li><p>Problem: how the instructions look like?</p><p>activation records, stack structure(last-in-first-out)</p><p><strong>the memory is always available to us, but we need to return it the way that we found it.</strong></p><p>-&gt; Caller-saved register, not preserved across calls</p><p>-&gt; callee-saved register, preserved</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># push</span><br><span class="line">addi sp, sp, -4</span><br><span class="line">sw a1, 0(sp)</span><br><span class="line"></span><br><span class="line"># pop</span><br><span class="line">lw a1, 0(sp)</span><br><span class="line">addi sp, sp, 4</span><br></pre></td></tr></table></figure></li><li><p>nested procedures: use calling conventions</p><p>Related reg: call func, ret</p></li><li><p>Fact: data structures are implemented with blocks of memory with words that refer to various addresses.</p><p>fact 1: most languages use several distinct memory regions for data: stack, static, heap, text(there is no need to memory it.)</p><p>fact 2: In RISC-V, we put the text, static, and heap regions in memory consecutively, starting from the smallest address 0x0; in contrast, the stack starts from the highest address 0xFF…F and grows towards lower addresses</p><p>Specific pointers: stack pointer, global pointer(static), program counter(current line of code executing)</p><p>Problem: how this related to inputs and outputs?</p></li><li><p>memory mapped IO(MMIO): special dedicated address</p><p>some issues remained? waiting for labs</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PSY sleep</title>
      <link href="/sg/2021/12/28/psy_sleep/"/>
      <url>/sg/2021/12/28/psy_sleep/</url>
      
        <content type="html"><![CDATA[<p><u>问题</u>：失眠。</p><p>焦虑和压力导致我的作息紊乱到了极点，尤其是这周几乎到中午才到图书馆。通过分析近一个月的睡眠记录，我没有能在1点以前入睡的情况，通常在1:30-2:00入睡，但2:00以后到3:00, 4:00, 5:00的情况也有不少，而我其实基本上不熬夜学习，1点差不多就准备睡了。</p><p>今天从2:00睡到11:00左右后的感觉非常糟糕和自责，觉得自己睡多了，情绪也受到了影响。带着这样的问题我去看了积极心理学关于睡眠的部分。</p><ol><li><p>permission to be human</p><p>受到失眠的困扰是非常正常的。Tal以自己失眠为例，与其告诉自己“我要睡觉，我要睡觉…“，不如接受这样的情况，”🤔这是一个很好的反思今天所做的事的机会“，通常他觉得太无聊然后就睡着了。</p></li><li><p>average sleep time of adults; care about your sleep rhythm</p><p>一天睡够8小时。一个正常人平均需要的睡眠时间在8小时左右，然后看看自己在哪段时间更容易入睡。当偶尔睡到9小时，10小时，那大概是由于你正需要这样长的睡眠时间，可能是你正经历艰难的时期或者遇到了其他的困难或者什么事也没有发生。（没有必要觉得自责。</p></li><li><p>enough sleep is a good investment</p><p>足够的睡眠是很好的投资，不管是智力上的，还是健康上。它可以帮助我们解决内心的冲突，学习中卡住的难题，它可以鼓励创造性。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>指环王——责任/自由</title>
      <link href="/sg/2021/12/25/ring/"/>
      <url>/sg/2021/12/25/ring/</url>
      
        <content type="html"><![CDATA[<p>前言：上一次看指环王三部曲还是初中刚毕业的暑假，那时的我尚且不知道世界的基本概念，连自己也不甚了解。在那时看来，指环王不过是一部经典的好莱坞式电影，有着华丽的场景和英勇的主人公们。</p><p>第一印象太容易误导人了。初中时看我以为弗罗多是很惨的主角，被迫接受了一个根本不在自己责任范围内的任务；阿拉贡是个闲散的江湖人士，因为血缘继承王位还娶了精灵作为妻子；弗罗多的伙伴则是不务正业的小混混，只会嬉笑打闹；莱格拉斯像是个外出游历的贵公子；甘道夫刚开始很弱，后来变成白袍巫师后很强；咕噜是个总喜欢说&quot;my precious&quot;的怪物…其他的角色就没有太深的印象了。</p><p>事实上，指环王里的人物每个都有自己的内在精神，他们遇到问题的挣扎和行动映射出了现实的复杂。小时候只知道好人和坏人，黑与白，但现实远比此复杂。有时候正是一些在模糊不清的东西上的选择塑造了一个人的样子。</p><h2><span id="xiao-ren-wu-de-ze-ren">小人物的责任</span><a href="#xiao-ren-wu-de-ze-ren" class="header-anchor">¶</a></h2><p>弗罗多是我误解最深的人物，他的存在表示即使是小人物也可以承担责任，也能够改变现实。他并不是从一开始就决意要承担魔戒的责任，只是因为答应了甘道夫要将戒指带到跃马酒店给他而坚定地执行了这个任务，即使遇到了戒灵穷追不舍的刺杀。而他在戒灵的剑下侥幸得存后，在精灵，矮人，人类，巫师等种族争论魔戒的归属时挺身而出，主动承担了将魔戒送往发源地魔多摧毁的任务，即使他甚至不知道魔多在哪儿。</p><p>而没有萨姆就没有弗罗多。前往魔多的旅程是如此困难和孤独，尽管弗罗多在旅程的最后决定自己一个人继续前行，萨姆仍然不离不弃。在魔戒的暗暗影响和咕噜的挑拨离间中，弗罗多能够活着不能缺少萨姆坚定的支持，即使在弗罗多因误解而勒令萨姆离开后。</p><p>梅里和皮平这对活宝也在乱世中承担起了自己的责任。他们在讨论中意识到如果不能够打败魔多和萨鲁曼，那么他们的家乡——夏尔——也将不复存在。所谓的回到夏尔只是一个遥远的梦，而兽人的铁骑正在肆虐这片土地。因此他们才能让本来不想开战的树人意识到这场战争的不可避免。每个人在这样混乱的局面中都被裹挟着，他们也只能面对现实，无论这现实多么残酷痛苦。</p><p>咕噜则显得悲情了很多。咕噜就如同我们自己，他本来只是个普通人，没能抵抗住魔戒的诱惑杀了人后过着离群索居的生活，被魔戒折磨成了一个没有正常生活的怪物。我大概能够理解魔戒对咕噜的诱惑，那些遥远的美好的梦仿佛只要不停地去想这个梦就会变成现实，或许魔戒对咕噜的诱惑就是表示着他失去的生活的补偿。但是原本就不是我们所想要的，即使它再好又和我们有什么关系呢？</p><h2><span id="xin-nian-he-xing-dong">信念和行动</span><a href="#xin-nian-he-xing-dong" class="header-anchor">¶</a></h2><blockquote><p>You shall not pass!</p></blockquote><p>甘道夫和炎魔的战斗的精彩不在于打斗的绚丽，而是甘道夫其实论实力应该是不及炎魔的，但仍然在阻挡炎魔时站在了最前面。在指环王中这样的场景并不少见，因为有坚定的信念，尽管自己算不上强，但仍然要勉力一试。阿拉贡在最后带领人类军队主动出击像魔多宣战不是因为打赢了刚铎的战役而趁胜追击，而是在兵力不足远小于魔多驻扎的半兽人军队时为了给弗罗多争取时间。坚定的信念让他们在遇到艰难的抉择时不一定做出了正确的行动，但是让他们做出了听从了内心选择的行动。</p><p>我认为能听到内心的声音是很难得的事情。我曾经独处了三年，从来没有听到过内心的声音，不知道自己想要什么，一些所谓的考上某所大学不过是空虚的口号，根本不能够支撑起当下。到现在我也只听到过两次内心的声音。第一次是第一次高考结束我告诉自己&quot;I’m better than this&quot;，然后跑去了复读。还有一次就是现在徘徊着的声音“你在干什么”。我相信如果不把课程计划扎实地学完，这个声音将不会停止。</p><h2><span id="wan-wu-sheng-ling">万物生灵</span><a href="#wan-wu-sheng-ling" class="header-anchor">¶</a></h2><p>中土世界滋养里各种各样的生灵，和甘道夫交好的🦅鹰族，迷雾森林里的大蜘蛛，被萨鲁曼砍倒的巨树，通人性的马🐎，魔王的爪牙乌鸦，精灵领地上的溪流…我最喜欢还是树人，恩特人平时深居简出，隐藏在森林深处；在关键时刻才会聚集起来，开一天的会说早上好，然后继续开会。感觉电影里的Treebeard很可爱，偷偷观察梅里和皮平抽烟，打招呼的样子也很特别。</p><h2><span id="hou-ji">后记</span><a href="#hou-ji" class="header-anchor">¶</a></h2><p>有时间还是得读一遍原著的。真希望熬过这段最艰难的时间。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>黑客帝国——自由的边境</title>
      <link href="/sg/2021/12/24/matrix/"/>
      <url>/sg/2021/12/24/matrix/</url>
      
        <content type="html"><![CDATA[<p>想到黑客帝国会想到什么呢？</p><p>比如一个循环，机器奴役人类-&gt;人类开始反抗，形成根据地Zion-&gt;找到救世主-&gt;和工程师谈判，救世主牺牲，Zion留存部分-&gt;系统更新，机器继续奴役人类。比如在现实和虚拟间的难以抉择，是真实的存在在一个非常糟糕的世界还是沉浸在美好的虚拟现实中享受幸福人生？比如在先知门前的一句话，Know yourself以及延伸出的Nothing in excess。</p><p>我以前不明白史密斯存在的意义，作为黑客帝国的最大反派角色，他存在只是因为是the one的对立吗？我也没看懂火车旁的那对工程师父女和最后Neo和Trinity前往机器大帝时的不顾一切。这些影像显得非常模糊，毕竟距离上一次看黑客帝国已经有三四年了，但又有一些画面里的东西难以忘怀。</p><p>没有意义的程序应该存在吗？</p><blockquote><p>几十亿人没有自己真正的生活，他们却感觉不到。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dm graph</title>
      <link href="/sg/2021/12/18/dm_graph/"/>
      <url>/sg/2021/12/18/dm_graph/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#in-class-problems">In-class problems</a><ul><li><a href="#walks-and-paths">walks and paths</a></li><li><a href="#walk-relation">Walk relation</a></li><li><a href="#dag-scheduling">DAG &amp; scheduling</a></li><li><a href="#partial-orders">partial orders</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="in-class-problems">In-class problems</span><a href="#in-class-problems" class="header-anchor">¶</a></h2><h3><span id="walks-and-paths">walks and paths</span><a href="#walks-and-paths" class="header-anchor">¶</a></h3><p>problem: If you were trying to walk somewhere quickly, you’d know you were in trouble if you came to the same place twice.</p><p>Theorem 10.2.3. A shortest walk from one vertex to another is a path.</p><p>Question 1: tournament digraph.</p><ol><li><p>Prove: if a tournament diagraph is a DAG, then it has most one ranking.</p><p>A ranking is a path that includes all the players（也就是排名顺序）</p><p>proof 0: prove by contradiction…</p><p><u>Idea 1</u>: we should figure out which part could lead to contradiction</p><p>Hypothesis 1: the first two common vertices in two ranking(my idea)</p><p><s>方向反了，由于结构是DAG，两条同起点终点不同序的路不能证明circle的存在。</s></p><p><u>Hypothesis 2</u>: (u, v) (v, u) exist in two different rankings. -&gt; a closed walk from u to u that go through v.</p><p>有证明的可能。将u,v间的两条路合并起来，说明有circle的存在。</p><p>Loophole: 不能证明一定会经过v</p><ol><li><u>approach 1</u>: well ordering principle</li></ol><p>Lemma: The shortest positive length closed walk through a vertex is a cycle.</p><p>Proof 1: suppose <strong>w</strong> is a minimum positive length walk from u to u. we claim <strong>w</strong> is a cycle.</p><p>prove by contradiction: <strong>w</strong> is a cycle.</p><ul><li>case 1: u occurs more than two times in <strong>w</strong></li><li>Case 2: some vertex x != u occurs twice in <strong>w</strong></li></ul><p>2)approach 2: strengthen the hypothesis</p><p>把u-&gt;v和v-&gt;u合并会形成circle</p></li><li><p>Give an example of a tournament with a <u>countably infinite</u> number of players that has no ranking.</p><p>为什么这会影响ranking呢？我认为是因为总有更小的数存在，这会和当前的假设违背。</p></li></ol><h3><span id="walk-relation">Walk relation</span><a href="#walk-relation" class="header-anchor">¶</a></h3><p>problem: whether there is a way to get from one particular vertex to another.</p><p>binary relation,</p><p>我认为这只是符号证明（？）</p><h3><span id="dag-amp-scheduling">DAG &amp; scheduling</span><a href="#dag-amp-scheduling" class="header-anchor">¶</a></h3><p>problem: topological sort</p><h3><span id="partial-orders">partial orders</span><a href="#partial-orders" class="header-anchor">¶</a></h3><blockquote><p>Any digraph is formally the same as a binary relation whose domain and codomain are its vertices.</p><p>Definition 10.6.7. A relation that is transitive and irreflexive is called a strict partial order.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> math </category>
          
          <category> 6.042 discrete math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hw1 data structures</title>
      <link href="/sg/2021/12/18/hw1_structure/"/>
      <url>/sg/2021/12/18/hw1_structure/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ps2">ps2</a></li><li><a href="#ps3">ps3</a></li><li><a href="#ps4">ps4</a><ul><li><a href="#binary-tree">binary tree</a></li><li><a href="#heap">heap</a></li><li><a href="#problem-set">problem set</a></li></ul></li><li><a href="#recitation">recitation</a><ul><li><a href="#avl-tree">AVL tree</a></li><li><a href="#principle-of-algorithm">Principle of algorithm</a></li></ul></li><li><a href="#reminder">Reminder</a><ul><li><a href="#olc">olc</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="ps2">ps2</span><a href="#ps2" class="header-anchor">¶</a></h2><ol><li><p>看题：when all but one is special means only one is not special.</p></li><li><p>set view and sequence view of data structures</p><ul><li><p>Sequences maintain a collection of items in an extrinsic order, where each item stored has a rank. In the sequence, including a first item and a last item. That the first item is “first” is because some external party put it there.</p></li><li><p>By contrast, sets maintains a collection of items based on an intrinsic property involving what the items are, usually based on a unique key, x.key, associated with each item x.</p></li></ul><p>Set: hash table, binary search tree</p><p>Sequence: array, linked list, direct access array</p><p>That’s why sequence has insert/delete_at_somewhere operations while set has a loosen insert/delete items operation and supports order operations to find the items.</p></li><li><p>Merge_sort</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">Arr</span>):</span><br><span class="line">size = <span class="built_in">len</span>(Arr)</span><br><span class="line"><span class="keyword">if</span> size == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> Arr</span><br><span class="line">mid = size//<span class="number">2</span></span><br><span class="line">Left = merge_sort(Arr[:mid])</span><br><span class="line">Right = merge_sort(Arr[mid:])</span><br><span class="line">i,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">start = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> start &lt; size:</span><br><span class="line"><span class="keyword">if</span> j &gt;= <span class="built_in">len</span>(Right) <span class="keyword">or</span> (i &lt; <span class="built_in">len</span>(Left) <span class="keyword">and</span> Left[i] &lt; Right[j]): <span class="comment"># offbyone error</span></span><br><span class="line">Arr[start] = Left[i]</span><br><span class="line">i += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">Arr[start] = Right[j]</span><br><span class="line">j += <span class="number">1</span></span><br><span class="line">start += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> Arr <span class="comment"># missing return value</span></span><br></pre></td></tr></table></figure></li></ol><h2><span id="ps3">ps3</span><a href="#ps3" class="header-anchor">¶</a></h2><ol><li><p>How to use hash tables(its set operations) to implementing sequence operations?</p><p>Read the problem. We are not storing things in order but storing in hash tables.</p><p>idea 1: assign key to each item as index</p><ul><li><p>Seq[key] = value</p></li><li><p>Seq-build(A): set-build(&lt;key, A[i].value&gt; for i = 0,1,2,… )</p></li><li><p>insert/delete_at: iterate all items, insert/delete one, rebuild</p></li><li><p>Insert_last: easy, however insert_first would take linear time</p></li></ul><p>Idea 2: have an extra varibles to track the original index</p><ul><li><p>How many index should we track at least?</p><p>one: First</p><ul><li><ul><li>Store variable <u>first</u> = key of first item(index 0)</li><li>Hashing(map negative index to positive)</li><li><img src="/sg/2021/12/18/hw1_structure/sc.png" class title="sc"></li></ul></li><li><p>Insert_first: decrement first, insert(&lt;key first, value x&gt;)</p></li><li><p>and make tiny fix to previous operations(ex: find(i+first))</p></li></ul></li></ul></li><li><p>best sorting algs: sort n objects by keys</p><p>nagative items: Increase a large enough number then sort. Decrease after sorting.</p><p>String: convert str to a unique number and use radix sort</p><p>Number of fignts fought: counting sort is enough. Or merge sort.</p><p>ratio w_i / f_i (w_i &lt; f_i): it’s a floating number. We need to consider the precision</p><p>Idea: mapping rational number/letters/negative integer to integer</p><p>runtime of radix sort is O(n + nlog_n_(u)), such that it can handle any polynomial u.</p><p>突然想到了data-oriented pattern</p></li><li><p>college construction</p><ol><li>naive approach: check for h - s_i for S_i, this would take O(n**2) time</li></ol><ul><li><p>problem: how to speed up to O(n)?</p><ul><li>use data structures: store the input S in hash table S’: we can search (h - s_i) in S’ for si in S, each find take O(1) time.</li></ul></li></ul><ol start="2"><li>h = 600*n**6, add two things up.</li></ol><p>Idea 1: radix sort</p><ul><li>naive approach: store S in sorted_array_set where sort method is implemented using radix sort. For any S_i, binary search for (h - S_i) in S(know as find_prev).<ul><li>It takes O(n*logn) time</li></ul></li></ul><p>Idea 2: two-finger algorithm</p><ul><li>Improvement 1: linear scan: any S_i greater than h is impossible. Rebuild S’ in the sorted_array_set where S’_i &lt; h.</li><li>Improvement 2:</li></ul></li><li><p>copy detection problem</p></li></ol><h2><span id="ps4">ps4</span><a href="#ps4" class="header-anchor">¶</a></h2><h3><span id="binary-tree">binary tree</span><a href="#binary-tree" class="header-anchor">¶</a></h3><p>Problem 1: why we need a binary tree to store items?</p><p>ans: Compared with linked list which takes O(n) time to traverse all the items, we use binary serach instead. The traverse now takes O(hight of the tree) = O(logn) time.</p><p>Design:</p><ol><li><p>We define the traverse order to meet our needs.</p><ul><li>we can use binary tree to implement sequence(order) or set…</li><li>property: represent binary relation in different way: left-aligned complete binary tree</li></ul></li><li><p>Navigation: first/last, walk down/up the tree</p></li><li><p>Dynamic operation: add or remove items in a binary tree</p><p>problem 2: maintain the tree balance while insertion/deletion</p><p>The logic is that if the skew of node is not in the balance range(-1,0,1) but in the range of (2,-2), we should rebalance the tree. First, we need to detect such conditions. Then we should modify that by rebalance(namely, by rotations). After each rebalance operation, we need to update the subtree height to calculate the updated skew of node. Then we walk up the tree and maintain balance in each recursive step until there is none.</p><ul><li><p>Rotation</p><p>Problem 3: what will happen after rotations?</p><p>just draw the picture.</p><ul><li>Rotate right(D): D becomes its left child’s right child, and subtree_update</li><li>Rotate left(B): B becomes its right child’s left child, and subtree_update</li></ul></li></ul><p>觉得讲义上的 insert B before A 有点怪</p><p>Problem 3: BST and AVL tree have nuances in insertion/deletion.</p><p>这一点我看错了，我把插入节点的大小搞错了，这两个树结构的差异是由于AVL会维持树结构的平衡。</p><p>BST: deletion: swap down predecessor/successor</p></li></ol><p>The difference between BST and AVL is: AVL maintains balance: AVL will check the skew of every node in the traverse order to decide rotation operations; BST maintains binary search.(AVL can use binary search as well)</p><h3><span id="heap">heap</span><a href="#heap" class="header-anchor">¶</a></h3><p>Build heap in linear time:</p><ul><li><p>idea: walk up the heap.</p><p>-&gt; loop backward over array.</p><p>problem: the order of swapping</p></li></ul><img src="/sg/2021/12/18/hw1_structure/sc2.png" class title="sc2"><p>heap doesn’t support ordering.</p><h3><span id="problem-set">problem set</span><a href="#problem-set" class="header-anchor">¶</a></h3><ol><li><p>n items, k largest one list. O(logn) space to write, O(nlog(logn)) runnning time.</p><p>Problem 1: how is logn related to k?</p><p>这两个题目不一样😅，这道题根本没提到k。解法和我之前想的一样</p></li><li><p>SCLR: 设计一个数据结构满足：</p><p>new_bid(d,b), O(logn);</p><p>update_bid(d,b), O(logn);</p><p>get_revenue(), O(1).</p><p>we should ask ourselves these questions before writing down the answer:</p><ul><li>what is stored in data structures? -&gt;</li><li>what is maintaining by operations? -&gt;</li><li>what is querying? -&gt;</li></ul><p>Idea 1: we should maintain a dictionary of (bidder ID, bid) for the update operations. Dictionary can be implemented by AVL tree set or hash table while the latter’s running time is amortized</p><p>Idea 2: we need data structures to preserve the priority we need</p><ul><li>naive approach: use binary heap/AVL tree</li><li>Store n items in one max-heap -&gt; <u>store k largest items in min-heap, n-k items in max-heap</u>, in which case it doesn’t need to use delete_max to find the minimal item in max-heap.</li></ul><p>Idea 3: we need to link two data structures to support fast find.</p><p>Approach: we want to find the bidder’s current bid quickly. -&gt; cross linking</p><ul><li><p>That’s why we don’t save bid directly in the dictionary, in which case we save the time in updating the dictionary every time we change the bidder’s bid.</p></li><li><img src="/sg/2021/12/18/hw1_structure/sc3.png" class title="sc3"></li></ul></li><li><p>It seems right but where goes wrong?</p><p>这部分看了又看,仍旧没发现错误在哪里。后来把问题定位到了一个测试进而找到了问题。忽略了max_temp是所在class的instance，所以在bug版第一个判断语句永远都会返回None.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bug</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subtree_max_in_range</span>(<span class="params">A, d1, d2</span>):</span><br><span class="line">    max_temp = <span class="literal">None</span> // <span class="comment"># fixed by changing all max_temp to another name like temp</span></span><br><span class="line">    <span class="comment"># ------------------------------------ #</span></span><br><span class="line">    <span class="keyword">if</span> A.max_date &lt;= d2 <span class="keyword">and</span> A.min_date &gt;= d1:</span><br><span class="line">        <span class="keyword">return</span> A.max_temp</span><br><span class="line">    <span class="keyword">if</span> A.max_date &lt; d1 <span class="keyword">or</span> A.min_date &gt; d2:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">if</span> d1 &lt;= A.item.key &lt;= d2:</span><br><span class="line">        max_temp = A.item.temp</span><br><span class="line">    <span class="keyword">if</span> A.left:</span><br><span class="line">        l_temp = A.left.subtree_max_in_range(d1, d2)</span><br><span class="line">        <span class="keyword">if</span> l_temp:</span><br><span class="line">            <span class="keyword">if</span> max_temp:</span><br><span class="line">                max_temp = <span class="built_in">max</span>(l_temp, max_temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                max_temp = l_temp</span><br><span class="line">    <span class="keyword">if</span> A.right:</span><br><span class="line">        r_temp = A.right.subtree_max_in_range(d1, d2)</span><br><span class="line">        <span class="keyword">if</span> r_temp:</span><br><span class="line">            <span class="keyword">if</span> max_temp:</span><br><span class="line">                max_temp = <span class="built_in">max</span>(r_temp, max_temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mex_temp = r_temp</span><br><span class="line">    <span class="comment"># ------------------------------------ #</span></span><br><span class="line">    <span class="keyword">return</span> max_temp</span><br></pre></td></tr></table></figure></li></ol><h2><span id="recitation">recitation</span><a href="#recitation" class="header-anchor">¶</a></h2><ul><li><img src="/sg/2021/12/18/hw1_structure/Screenshot-0952489.png" class title="Screenshot-0952489"></li><li><img src="/sg/2021/12/18/hw1_structure/Screenshot-0952518.png" class title="Screenshot-0952518"></li><li><img src="/sg/2021/12/18/hw1_structure/Screenshot-0959596.png" class title="Screenshot-0959596"></li><li>visualization tools: <a href="https://codepen.io/mit6006/full/NOWddZ">BST by 6.006</a>, <a href="https://codepen.io/mit6006/full/KxOpep">binary heap</a>, <a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">Data structure visualization</a></li></ul><h3><span id="avl-tree">AVL tree</span><a href="#avl-tree" class="header-anchor">¶</a></h3><p>full binary tree guarantees the height of O(logn)</p><p>Build an AVL tree with fewer nodes as possible -&gt; prove h = O(logn)</p><p>why rotations -&gt; balance -&gt; tree search</p><p>Rotation:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rotateRight(A):</span><br><span class="line"><span class="comment"># A&#x27;s original parent e; A could be e&#x27;s left/right child =&gt; B</span></span><br><span class="line">B.p = e</span><br><span class="line"><span class="keyword">if</span> e.r == A <span class="comment"># pointer comparison</span></span><br><span class="line">e.r = B</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">e.l = B</span><br><span class="line"><span class="comment"># A&#x27;s original left child B =&gt; A is B&#x27;s right child</span></span><br><span class="line">B.r = A</span><br><span class="line">(A.p = B)</span><br><span class="line"><span class="comment"># B&#x27;s original right child c =&gt; A&#x27;s left child</span></span><br><span class="line">A.l = c</span><br><span class="line">(c.p = A)</span><br></pre></td></tr></table></figure><h3><span id="principle-of-algorithm">Principle of algorithm</span><a href="#principle-of-algorithm" class="header-anchor">¶</a></h3><p><u>thinking process matters</u>: take 30-60 minutes to think about a problem</p><p><u>problem 0</u>: shifted array, find e in N sorted items shifted length of k,</p><ul><li>if k is defined</li><li>if k is undefined, find k =&gt; find min</li></ul><p>How to solve it?</p><ol><li>simplest solution: linear scan, O(N)</li><li>in another way? shift k + binary search, O(k + logN)</li><li>…</li></ol><p><u>Problem 1</u>: find kth smallest in N items in a min-heap, want O(K*logK)time</p><p>How to think about it?</p><ol><li><p>use min-heap: O(klogN), k times find_min in min-heap</p></li><li><p>Find an O(NlogK) algorithms:</p><p>Idea 1: cut out irrelevant layers. We have k levels of heap =&gt; O(k**2) time, given the height is O(k)</p><p>Problem 1.1: how to cut a heap into k elements?</p><p>Problem 1.2: how to split it up into k, (N - k) groups?</p><p>Idea 2: maintain a max-heap of k. Iterate all items and we can get what we want</p></li><li><p>think more about the process of finding the kth smallest items.</p><p>Idea: horizon.</p><p>Idea: augmentation: index of array</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># initialize</span></span><br><span class="line">H, original <span class="built_in">min</span>-heap(array back-based)</span><br><span class="line">Z, horizon</span><br><span class="line">Z.insert(H[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">for</span> ith <span class="keyword">in</span> <span class="built_in">range</span>(K):</span><br><span class="line">  ith, j = Z.extract-<span class="built_in">min</span></span><br><span class="line">  Z.insert H[<span class="number">2j</span>], <span class="number">2j</span></span><br><span class="line">  Z,insert H[<span class="number">2j</span>+<span class="number">1</span>], <span class="number">2j</span>+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> ith</span><br></pre></td></tr></table></figure></li></ol><p><u>Problem 2</u>: find min(e[i,…,j]), e is a list of N items, N = 2**k</p><p>Process: pre-process, then query</p><p>How to think about it?</p><ol><li><p>simple idea: hash into [i,…,j], we can get H[[i,…,j],…], N**2 pair; then take min in O(N) time in each pair</p><p>=&gt; O(N**3) time</p><p>Improve to O(N**2) time by comparing current pair result with previous result which takes O(1) time</p></li><li><p>how to spend time?</p><ul><li>in pre-process: O(N**2) | O(1)</li><li>in query: O(1) | O(N)</li></ul></li><li><p>binary search in two halves recursively</p><img src="/sg/2021/12/18/hw1_structure/sc4.png" class title="sc4"></li></ol><h2><span id="reminder">Reminder</span><a href="#reminder" class="header-anchor">¶</a></h2><ol><li><p>Balance conception: a <strong>skew</strong> of a node is defined as the height of its right subtree minus the height of its left subtree.</p></li><li><p>two-finger algorithm</p></li><li><p>cross linking: by store pointers to another data structures.</p></li><li><p>Proximate sorting</p><blockquote><p>An array of distinct integers is k-proximate if every integer of the array is at most k places away from its place in the array after being sorted, i.e., if the ith integer of the unsorted input array is the jth largest integer contained in the array, then |i −j| ≤ k. In this problem, we will show how to sort a k-proximate array faster than Θ(n log n)</p></blockquote><p>这里关于 insertion sort k-proximate array takes O(nk) time, heap sort takes O(nlogk)time 的讨论还挺有意思的。</p></li><li><p>a general/naive approach and subsequent analysis</p></li><li><p>approriate description</p><ul><li><p>key with</p><p>example 1: in priority queue: Key each Revenger ri with opinion si on the pair (|si|, i) to make keys unique.</p></li></ul></li><li><p>Worst-case, expected, amortized(dynamic operations)</p></li></ol><h3><span id="olc">olc</span><a href="#olc" class="header-anchor">¶</a></h3><p>First we should decide which view:</p><ul><li>ordered or not -&gt; sequence/set view</li><li>does it have priority? -&gt; priority queue -&gt; binary heap/ binary tree</li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hw </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PSY belief</title>
      <link href="/sg/2021/12/12/psy_belief/"/>
      <url>/sg/2021/12/12/psy_belief/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#beliefs">Beliefs</a><ul><li><a href="#the-power-of-the-situation">The power of the situation</a></li><li><a href="#beliefs-become-self-fulfilling-prophecies">Beliefs become self-fulfilling prophecies</a></li><li><a href="#optimism-vs-pessimism">Optimism Vs. pessimism</a></li><li><a href="#realistic-vs-unrealistic-belief">realistic VS. unrealistic belief</a></li><li><a href="#action">action</a></li><li><a href="#reminder">Reminder</a></li></ul></li><li><a href="#focus">Focus</a><ul><li><a href="#adaption">Adaption</a></li><li><a href="#appreciation">Appreciation</a></li></ul></li><li><a href="#goal-setting">Goal setting</a><ul><li><a href="#stress">Stress</a></li><li><a href="#focus">Focus!</a></li><li><a href="#simplify">Simplify!</a></li><li><a href="#reminder-1">Reminder</a></li></ul></li></ul><!-- tocstop --></div><p>Beliefs  -&gt; focus-&gt; change -&gt; goal setting</p><h2><span id="beliefs">Beliefs</span><a href="#beliefs" class="header-anchor">¶</a></h2><p>例子：Roger Bannister，首位历史上4分钟跑1英里的人。当时从医学/生物学上证明是不可能的。</p><p>信念为什么不是一种神秘主义？belief Vs. illusion</p><p>olc: 中学的失败刻骨铭心。</p><p>忽略事实的部分很容易，即使它就在我们面前。</p><h3><span id="the-power-of-the-situation">The power of the situation</span><a href="#the-power-of-the-situation" class="header-anchor">¶</a></h3><p>例子：斯坦福监狱实验: obdient to the authority</p><p><u>Question</u>: how to create a positive situation whether consciously or unconsciously to bring out the best of ourselves?</p><p>Ans: priming with positive words.</p><p>problem: is the message right? 常常言过其实，收效甚微，尽管看起来振奋人心（比如：“Whether you think you can or can’t—you are right”  Henry Ford）</p><ul><li>Coexist with hard work, persistence and failures.</li><li>Self efficacy: malleable</li><li>Self-esteem: belief in ourselves</li></ul><p>mind is powerful. 不是说外在因素没有影响，而是思想的力量同样很强大。</p><h3><span id="beliefs-become-self-fulfilling-prophecies">Beliefs become self-fulfilling prophecies</span><a href="#beliefs-become-self-fulfilling-prophecies" class="header-anchor">¶</a></h3><p>How beliefs impact our performance?</p><ul><li>Motivation inconsistency</li><li>理想和现实存在差距。</li><li>when there is discrepancy or inconsistency between reality and ideal?<ul><li>Update schema</li><li>Ignore/discard the information</li><li>actively seek confirmation</li><li>Create a new reality</li></ul></li><li>interpretation of performance</li></ul><p>olc: 实习选择存在太多偏差。</p><p>Learn to fail, or fail to learn. No short cuts.</p><img src="/sg/2021/12/12/psy_belief/sc.png" class title="sc"><h3><span id="optimism-vs-pessimism">Optimism Vs. pessimism</span><a href="#optimism-vs-pessimism" class="header-anchor">¶</a></h3><p>悲观者设定现实的短期目标和长期目标，乐观者设定期待过高的短期目标和现实的长期目标。悲观者在表现不好时说我的期待值本来就不高，这样就足够了；在表现好时说这只是碰运气。而乐观者虽然由于设定过高的不切实际的短期目标导致表现一直不好，但他会不断反思自己从过去的经历学到了什么重新设定下一次目标，增强自己的信念。而不管需要经过多久，有足够的尝试，努力工作，失败，坚持，乐观者终究会实现自己的信念。</p><p>乐观/悲观只是不同的解释生活的态度。乐观不是盲目的对一切事情表示乐观，而是对生活中挫折的解释。</p><ul><li><p>暂时的/永久的失败。例子：比如一份被一份想要的工作拒了，看成永久的失败——我之后永远也找不到工作了；暂时的失败——这只是暂时的挫折，我能从中学到什么？比如重新锁定求职范围，找到属于自己的理想位置。</p></li><li><p>普遍/特殊化的例子。</p></li></ul><p>learn to interpret things as optimist</p><p>olc: 我竟然属于乐观者…不过中学的我非常悲观。</p><h3><span id="realistic-vs-unrealistic-belief">realistic VS. unrealistic belief</span><a href="#realistic-vs-unrealistic-belief" class="header-anchor">¶</a></h3><p><u>question:</u> how to distinguish between realitic belief and unrealistic belief?</p><p>ans: Right evaluation of reality</p><p><u>question:</u> Do high expectations lead to disappointment?</p><ul><li>关心我们的人常常希望降低我们的期望，因为期待过高常意味着自尊受到打击的机会更大。</li><li>fact：基础幸福感的水平线是一定的，生活的起伏带来的幸福感水平总会回到这一水平</li></ul><h3><span id="action">action</span><a href="#action" class="header-anchor">¶</a></h3><p><u>Problem: how to raise the base level of happiness?</u></p><p>Coping Vs. avoidance</p><p>解决问题而不是逃不问题，允许自己去冒险，走出舒适区，承担失败的风险，去尝试做没做过的事情，去一个想去但在小的时候不敢去的地方。只有处理问题，解决问题能够改变现状。</p><p>我们评价自己所用的方式和评价他人一样，就是看他的行为。</p><p>事实：失败带来的痛苦其实远比想象中失败的痛苦要小的多，幸福感水平总会回到基准线附近。</p><p><u>problem:</u> how to become a optimist?</p><ol><li><p>Just do it! (action)</p><p>单纯的灌输积极信息，无论是从内还是从外都无助于改善现状除非采取行动。</p><p>失败是不可避免的，我们需要给自己失败的机会。但这不是说主动搞砸一件事，而是在一件事失败后不要有太多的负担。</p></li><li><p>Imagine that… (visualization)</p><p>Focus on journey and destination.</p><p>Mistake: focus not just on the destination.</p><p>例子：马丁路德金：我有一个梦想。</p><p>olc: 转专业面试之前我总想象着自己会流畅地度过整个流程，但结果就是支支吾吾地熬过了五分钟（这仅有的面试时间）。失败的原因是没有专门准备面试，人也不够自信，表达能力也欠缺等等，但当时开始停滞的最重要的原因是行动仍旧不够。6.009在大一下那时因为拖延症卡了一次，大二上因为基础不够又卡了一次，现在大三上的我一定要解决这门课程。</p></li><li><p>Cognitive therapy (rational thinking)</p><p>Event -&gt; thoughts(evaluation) -&gt; emotion</p></li></ol><p>误区1: magnify: 过度放大失败而不是把它当成进步的阶梯：one or nothing: perfectionism</p><p>误区2: minimize: tunnel vision-&gt;忽略非理性因素让自己能更理智地看待事情的全局变化</p><p>fact: emotion is personal evaluation of reality, which doesn’t reflect the reality.</p><p>Get real through the question we asked. Look out.</p><h3><span id="reminder">Reminder</span><a href="#reminder" class="header-anchor">¶</a></h3><ul><li>Optimism(believe in myself), passion(love what you do), hard work</li><li>learn to fail, or fail to learn</li></ul><p>有的时候沮丧让人甚至失去了行动能力，这就是我希望增强自己心理健康免疫系统的原因。</p><p>所有的一切都是为了transformation。如果只改变当前的态度，而改变后的态度却不能影响任何行动，那么所有的乐观解释不过是对过去生活的简单记录，没有任何意义。</p><h2><span id="focus">Focus</span><a href="#focus" class="header-anchor">¶</a></h2><p>How focus creates reality?</p><p>P8 32:00开始</p><h3><span id="adaption">Adaption</span><a href="#adaption" class="header-anchor">¶</a></h3><p>我们总是看到事物的反面的原因是我们适应于现有的生活，对好的事习以为常，而对发生的不好的事非常敏感。</p><p><u>Problem:</u> 能否适应糟糕的环境同时不对积极的事物习以为常？</p><p><u>Problem:</u> 是不是只有失去的时候才懂得珍惜？</p><p>Ans: learn to appreciate.</p><h3><span id="appreciation">Appreciation</span><a href="#appreciation" class="header-anchor">¶</a></h3><p>There is always something to appreciate in real. If we don’t appreciate the good things, they depreciates.</p><p><u>problem</u>: what I am grateful for?</p><ul><li>Be grateful for everythings. What we focus on appreciates.<ul><li>Chipping away negativity</li></ul></li><li>express gratitude to ourselves and others.</li></ul><p><u>Question</u> : how to express gratitude?</p><ul><li><p>Take time to reflect</p></li><li><p>Letter, phone, or in-person</p></li><li><p>Regularly (weekly, bi-weekly or monthly)</p></li><li><p>Writing helps even if letter not sent</p></li></ul><h2><span id="goal-setting">Goal setting</span><a href="#goal-setting" class="header-anchor">¶</a></h2><p>拖延症的解决方式。今年9月初开始调整状态，到现在（12月）已经没有了超过两天的拖延。不过仍然存在因为别的事而耽搁学习的情况。</p><p>Setting goal resolves internal conflicts.</p><p>olc: 当你知道你将去哪儿，那么就会获得内心的平静。</p><p>Job -&gt; career -&gt; calling</p><p>Problem: what is your calling?</p><p>Ans: Listen to the inner calls which guide your direction. When we pursue our passion, when we pursue a self-concordant goal and a self-concordant journey, that’s when we become alive.</p><p>这个答案会随着时间变化，可能过了两年又是不同的样子。但是我们打开了可能性，看到的事物的真实性和自己的职责和使命。</p><p>Tips for setting goal:</p><ol><li><p>writing down</p></li><li><p>set lifelines(not DDL): the date by which we want to achieve those certain goals</p></li><li><p>make it specific</p></li><li><p><u>Future goals as means; present experiences as ends.</u></p><p>设定目标的目的不是为了完成它，完成目标与否不应该影响我们情绪的好坏，更重要的是目标是为了激励我们去进行这项旅程。如果我们只关注结果而不关注过程，那么我们就不太可能取得成功。</p><p>常常出现这样的情形：设定了一个目标没有完成它，或者完成了一个目标后就没有新的目标设定。</p></li></ol><h3><span id="stress">Stress</span><a href="#stress" class="header-anchor">¶</a></h3><p>P13 58:24</p><p>Too much to do -&gt; stress(feeling overwhelmed ) -&gt; depression</p><p><u>question</u>: how to deal with distress?</p><p>Ans: take a time-out</p><p><u>problem</u>: Why are so many people stressed? -&gt;<u>What do those who are successful and able to lead a healthy and happy life do?</u></p><p>Ans: Stress is fine as long as we take recovery.</p><p>Solution: <strong>take a break</strong>.</p><ol><li>From marathon to sprint intervals.(sprint-&gt;recovery-&gt;sprint-&gt;recovery…)</li><li>Creating a ritual of both work and recovery: 60-120 minutes of work, 15+ minutes of recovery.</li><li>Maintaining flexibility. 合理安排杂事。</li><li>Take multi-level recovery.</li></ol><h3><span id="focus">Focus!</span><a href="#focus" class="header-anchor">¶</a></h3><p>The key is focus.</p><p>例子：当你放超过一首歌时，就产生了噪音。</p><p>当多件事重叠在一起，那么再好的事情都会变糟糕。</p><ul><li><p>Recovery: Quantity affects quality</p></li><li><p>Work: Reducing multi-tasking</p><ul><li>elimination is not possible.</li></ul></li></ul><p>这里的multi-task指的是在同一时间做超过一件事，比如在写作的时候关注着邮件或消息提示。</p><p>olc:在相同时间里我应该只开一项工作的网页然后关掉再开另一项工作的，之前总是开太多网页结果根本不可能在同一时间兼顾。</p><h3><span id="simplify">Simplify!</span><a href="#simplify" class="header-anchor">¶</a></h3><p>Do less things, the important one.</p><p><strong>Time affluence</strong></p><p><u>problem:</u> how to lead a life with fun and functionality?</p><p><u>Problem:</u> what do we really really really want to do?</p><h3><span id="reminder">Reminder</span><a href="#reminder" class="header-anchor">¶</a></h3><p>有趣的概念</p><ol><li><p>Self-concordant goal</p></li><li><p>加强性格优势对应的能力</p></li><li><p>Multi-level recovery:</p><ul><li>Micro (minutes, hours)</li><li>Mezzo (nights, days)</li><li>Macro (weeks, months)</li></ul></li><li><p>Optimum simplicity:找到一天最优的工作时间</p></li><li><p>可持续发展</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PSY perfection</title>
      <link href="/sg/2021/12/12/psy_perfection/"/>
      <url>/sg/2021/12/12/psy_perfection/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#what-is-perfectionism">What is Perfectionism?</a></li><li><a href="#characteristics">Characteristics</a></li><li><a href="#consequences">Consequences</a></li><li><a href="#sources-of-perfectionism">Sources of Perfectionism</a></li><li><a href="#overcoming-perfectionism">Overcoming Perfectionism</a></li><li><a href="#reminder">Reminder</a></li><li><a href="#olc">olc</a></li></ul><!-- tocstop --></div><p>对我来说最重要的一节课。</p><h3><span id="what-is-perfectionism">What is Perfectionism?</span><a href="#what-is-perfectionism" class="header-anchor">¶</a></h3><p>例子1：（os:感觉教授在整人）Tal先让学生画一个正圆，不停地强调画出他的最好水平。然后画一个假如他三岁能画出的圆。再画一个假如他一岁能画出的圆。最后教授开始打分，给正圆打了勾，其他的歪歪扭扭的曲线打了叉。</p><p>Take away: 在画出一个完美的圆之前需要画很多个不完美的圆才能做到。</p><p>例子2：小婴儿在刚开始学走路总会摔跤很多次，在学会吃饭前总会弄得满嘴都是食物。</p><p>Take away: **Learn to fail or fail to learn.**There is no other way to learn, to grow.</p><p>例子3：进行了一项对医院医护人员犯错的调查问卷。结果反而和现实表现不同：在问卷上犯错较少的人在实际工作中的错误反而更多。实际上这是由于那些问卷上犯错较少的人隐瞒了犯的小错误，只有当错误太大不可隐瞒时才认为这是错误；而问卷上犯错较多的人如实记录下大的或小的错误，他们在工作中的表现也相对比另一类人更好。</p><p>Take away: 平时经历了更多失败的团队成功的概率更高。类似软件工程的fast fail</p><p><u>perfection Vs. excellence</u></p><blockquote><p>def: Perfectionism is an <strong>incapacitating</strong> fear of failure that permeates our lives, especially those areas that we <strong>care about most</strong>.</p><p>It is an approach, a cognitive and emotional schema, that we hold toward <strong>the journey</strong> of our lives, toward the process of getting from point A to point B.</p></blockquote><p>完美主义是一种对失败的失能性恐惧，尤其是对于我们最关心的事。</p><img src="/sg/2021/12/12/psy_perfection/sc.png" class title="sc"><p>olc: 震惊🤯这彻底改变了我对失败的看法。我总是以为事情应该像perfection那样完成，但却忽略了事物认知理解实现的曲线应该是曲折的。这不是说我们应该可以去弯弯绕绕地避开我们真实的目标，而是说即使在实现目标的过程中遇到了失败也是非常正常的，这正是理解和学习的唯一途径。</p><p>在遇到失败时，我没有问正确的问题。完美主义是我经常遇到的问题但我并不知道自己有这种倾向，对失败的恐惧导致我无法真正行动，阻碍了我的学习和成长。学编程最初我以为项目直接从头到尾写就写完了，但事实上是写一点儿，进行简单的测试，再写一点儿，然后继续测试。学离散数学也以为一道题就这么干想就想出来，而忽略了真正的学习过程需要从例题中寻找解法，忽视了recitation的学习。看到了优秀的人的成功，却没有看到他们遇到的失败和怎么去解决这样的失败。</p><h3><span id="characteristics">Characteristics</span><a href="#characteristics" class="header-anchor">¶</a></h3><p>追求perfection的人防御性很强，固执己见；而追求excellence的人对建议/批评保持开放的态度。</p><p>追求perfection的人只关注自己没有完成的一半；而追求excellence的人更关注已经完成的部分。</p><p>追求perfection的人过分概括当前的情况，把一次的失败看成所有事情的失败；而追求excellence的人认清现实，知道只是一次的失败。</p><p>追求perfection的人永远不能真正接受自己；而追求excellence的人对自己无条件接纳，这包括失败与成功。</p><p>追求perfection的人害怕失败，只专注结果/终点，认为事情是静态的，不会再发生变化，比如“他这么强，无论我再怎么努力我也无法赶上他”；而追求excellence的人知道把失败看成对自己的反馈，把关注放在结果/终点和旅程上，知道事情是动态变化的，把重心放在可以改变的部分。</p><h3><span id="consequences">Consequences</span><a href="#consequences" class="header-anchor">¶</a></h3><p>例子：Mr X. X先生从小学起就追求完美主义，他要上最好的中学所以在小学时就非常努力。当他去了最好的中学，他高兴了两周，然后又变得忧虑，这样还不够，他要上最好的大学，于是在中学时他参加各种课外活动，同时在学业成绩上的表现也非常好。当他去了最好的大学，他高兴了两个月，可以歇歇了么？不行，他需要有一份最好的工作，于是他积极参与课外互动，参加领导了三个社团，同时还参加了一个大公司的实习，这样总该休息了吧？X先生始终有一个更完美的目标需要完成，即使他能够短暂地休息两个月，两周，他总会回到那种焦虑失望的状态。在他老的时候，别人问了他一个问题：你想要的生活是什么样的？</p><p>完美主义导致的结果是：他总是只有暂时的轻松解脱；只能看到不可避免的失败；把发生的一些状况外的杂事看成浪费时间；有出现混乱/病症的倾向。由于只看到了失败，他的自尊受到打击，不再相信自己。而这会进一步影响他的人际关系，引起他的焦虑和压力和痛苦。</p><p>追求excellence的结果是：他总是有能够持续的满足感；对比不可避免的失败，他看到的是成功的可能性；对比看成浪费时间的杂事，他看到的是恰当的时间分配；他对焦虑和失落有健康的方法去解决。他看的是持续的改善和变化，而这时他能够成长。虽然他也会遇到焦虑紧张，但这变得可以控制。更少的痛苦同时更多的收益。</p><h3><span id="sources-of-perfectionism">Sources of Perfectionism</span><a href="#sources-of-perfectionism" class="header-anchor">¶</a></h3><blockquote><p>Destination = Reward = Acceptance</p><p>Journey = Unrewarded = Means Only</p></blockquote><p>完美主义的起源时永远只能看到目标，奖励结果。社会环境就是如此，只奖励成功的人。</p><p>但我们应该看到过程和结果，奖励过程，尽管有时失败了。顺应自己的天性，允许自己犯错，接纳自己的失败。</p><h3><span id="overcoming-perfectionism">Overcoming Perfectionism</span><a href="#overcoming-perfectionism" class="header-anchor">¶</a></h3><p><u>problem:</u> how to overcome this: living in the future, being afraid of the present because what if I fail?</p><ol><li><p>being aware of what I want to change? and what I want to maintain?</p></li><li><p>rewarding effort</p></li><li><p>Active acceptance</p><p>误区：用完美主义的方式解决完美主义的问题。</p><p>it’s ok to prone to perfection.</p><p>Accept it, then go ahead and change it</p></li><li><p>Behavior:open to criticism</p><p>putting myself on the line</p></li><li><p>Visualization: 想象自己像追求卓越的人一样行动</p></li><li><p>rough draft: Setting a liberating goal or vision</p><p>例子：直到我写出绝世佳作，其他的是草稿。</p><p>例子：20年后我会到最顶尖的学府教授积极心理学，在那之前都是准备。</p><p>解放自己，享受当下。重点是舍弃当下这种吹毛求疵，完美无缺的生活。</p></li><li><p>The Platinum Rule: have compassion for ourselves</p><p>accepting failures in the same way thatwe accept in others, in people we love.</p></li><li><p>how to help others?</p><p>改变不是从一夜就能完成的。</p><ul><li>By example: people do what you do, not what you say.</li><li>Tell stories about it.</li><li>Rewarding the journey/process/effort</li></ul></li></ol><p><u>Technique:</u></p><p>当面临生活的艰难时刻时，受到焦虑挫折打击时，</p><ol><li><p>Permission</p><ul><li><p>Acceptance</p></li><li><p>Respect for reality</p></li></ul></li><li><p>Positive: reframing question: what is the growth opportunity here?</p><ul><li><p>Benefit finding</p></li><li><p>Failure as opportunity:See the opportunity in failures.</p></li><li><p>Distracting</p><p>分散注意力是说当一种想法或感觉反复出现，而我们也与之做着西西弗斯式的对抗时。在这种情况下沉思反而会在同一种思路里越陷越深，得不到什么结果，同时又让人崩溃。最好的方法是分散自己的注意力。当被焦虑压垮的时候，用其他的事情分散注意力，跑步，听音乐，或者做别的。这和逃避问题不同，逃避是指之后不会再处理生活中的任何问题。</p></li></ul></li><li><p>Perspective</p><ul><li><p>Don’t sweat the small stuff… 别为小事抓狂。</p><p>olc: 比如我差点因为翘课被辅导员约谈。</p></li><li><p>Psychological maturity: willingly to shift perspective</p><blockquote><p>It’s the ability, when we want, to be immersed in the here and now in the present. It’s the ability, when we want, to take a step back, zoom out those in time and in space and ask the question in the big picture “is this gonna matter in one year?”</p></blockquote></li></ul></li></ol><p>例子：教授讲了一个他最近遇到崩溃时，怎么运用以上的技巧改变角度，并改善了生活。</p><p>这些技巧不是疫苗，而像药片。</p><h3><span id="reminder">Reminder</span><a href="#reminder" class="header-anchor">¶</a></h3><p>有趣的概念：</p><ul><li><p>Courage: courage is not about having no fears. Instead, it’s about having fear and go ahead anyway.</p></li><li><p>心理安全</p></li><li><p>flow experiences</p></li><li><p>80/20 Rule:一天20%的时间里干完了80%的事情。</p></li></ul><h3><span id="olc">olc</span><a href="#olc" class="header-anchor">¶</a></h3><p>听从内心的声音，那个声音是完成MIT 6-3 course plan。</p>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PSY introduction</title>
      <link href="/sg/2021/12/09/psy_intro/"/>
      <url>/sg/2021/12/09/psy_intro/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#introduction">Introduction</a><ul><li><a href="#transformation-vs-information">transformation vs information</a></li><li><a href="#subtraction">subtraction</a></li><li><a href="#why-study-happiness-not-depression">why study happiness not depression?</a></li><li><a href="#resilience">Resilience</a></li><li><a href="#ask-the-right-question">Ask the right question!!!</a></li><li><a href="#responsibility">responsibility</a></li><li><a href="#reminder">reminder</a></li><li><a href="#olc">olc</a></li></ul></li><li><a href="#premise">Premise</a><ul><li><a href="#1-bridge-building-vs-division-and-separation">1. Bridge building Vs. Division and separation</a></li><li><a href="#2-change-is-possible-vs-change-is-illusive">2. Change is possible Vs. Change is illusive</a></li><li><a href="#3-internal-factors-vs-external-factors">3. internal factors Vs. external factors</a></li><li><a href="#4-human-nature-must-be-obeyed-vs-perfected">4. Human nature must be: obeyed Vs. perfected</a></li><li><a href="#5-happiness-is-and-ought-to-be-the-ultimate-end-vs-happiness-should-be-a-secondary-pursuit">5. Happiness is and ought to be the ultimate end Vs. Happiness should be a secondary pursuit</a></li><li><a href="#reminder-1">reminder</a></li></ul></li></ul><!-- tocstop --></div><p>这门课吸引我的点在于它是由理论和应用组合起来的。虽然之前就了解到有这么一门课，但是标题让我先入为主地认为这只不过是另一门鸡汤学。直到由于最近因为实习准备相关的事很沮丧今天给自己放了一天假，突然想到了这门课就打算随便看看。第一节introducation教授Tal就提到了学界虽然对积极心理学存在很多有意思的研究，但日常生活中不会有多少人去阅读专业的期刊，甚至可能听都没听过。而这门课的目的之一就是将积极心理学用大众能够理解的程度讲授出来，这门课的效用取决于学生能够多大程度地将课堂中的理论应用到日常生活中，而我也打算如此做来改变现在的境况。</p><p>我的笔记会包含问题，课堂觉得有趣的实用的概念/例子/观点，对一些忽略的事的提醒(Reminder of what we’ve already known)，我在实际生活中采取了的行动和效果等。这将成为我个人实验中的一部分。</p><h2><span id="introduction">Introduction</span><a href="#introduction" class="header-anchor">¶</a></h2><h3><span id="transformation-vs-information">transformation vs information</span><a href="#transformation-vs-information" class="header-anchor">¶</a></h3><p>Transformation：</p><ul><li>difference from information is about how to apply that knowledge in real life. Projects is one way of transformation in computer science study</li><li>interpretation and focus of life</li><li>information is not enough to change the world：Over-promising, under-delivering</li></ul><p>学习不是容纳信息，而是将信息根据实际情况应用。但这里不仅指如此，还在于如何去解释接收到的客观信息。当我们遇到问题，不同的态度会产生不同的想法。</p><p>Either Learn from experience thinking it as opportunity or disaster that you cannot recover from.</p><h3><span id="subtraction">subtraction</span><a href="#subtraction" class="header-anchor">¶</a></h3><p>做减法是指发现自身的天性，不要被外在多余的东西所束缚。</p><p>Chipping away the accessing stone as David:</p><ul><li>Perfectisim</li><li>Limitations,barrier</li></ul><p><u>problem</u>: how to apply it in practice: Introduce behavior,actual change in real life</p><h3><span id="why-study-happiness-not-depression">why study happiness not depression?</span><a href="#why-study-happiness-not-depression" class="header-anchor">¶</a></h3><p>Depression mentioned in course is something I can relate to. I’m familiar with that feeling of dwelling on past failures and not seeing the future. The course reminds me of I should see the positive side of problems and take actions after a right amount of time to feel bad about everything. The difference between active agent and passive victim is that active agent is always to make active move like to take active participation in course when you only write contents you understand or feel interested. Whereas the passive victims would feel sorry for themselves and start to complain about everything in life.</p><p>active participation: 不只是这节课，所有课程都该如此。学习不是教条主义，不是容纳而是理解，选择与接受。</p><p><u>problem</u>: If I don’t have much time, what I want to do?</p><ul><li>olc: the answer is finishing the course plan, design and implement useful things in my internship if there’s any.</li></ul><h4><span id="1-focus-on-what-works">1. focus on what works</span><a href="#1-focus-on-what-works" class="header-anchor">¶</a></h4><p>Nature inclination: what I’m good at? What I can be better at?</p><h4><span id="2-happiness-is-not-the-negation-of-unhappiness">2. Happiness is not the negation of unhappiness</span><a href="#2-happiness-is-not-the-negation-of-unhappiness" class="header-anchor">¶</a></h4><p>回避内心的冲突 vs pationate/engage in what we are doing：</p><p>摆脱痛苦并不代表立即获得幸福，而是一种麻木呆滞的状态。人际关系一直是我回避的问题，因为在中学时深受其害，我避免了几乎所有不必要的社交活动的建立，只和真正感兴趣的人相交。但我觉得这仍然不够，我只是回避了内心的冲突，忽视了真正存在的问题。</p><h4><span id="3-prevention-through-cultivating-capacity">3. Prevention through cultivating capacity</span><a href="#3-prevention-through-cultivating-capacity" class="header-anchor">¶</a></h4><p>Cultivate health/positive side/personal growth：</p><p>当一个人出现神经症时，说明他自身的成长和人际关系(relationship, personal growth)已经停滞不前，他没有关心自己的健康。</p><ul><li>We diminish ourselves, that’s where we become ill.</li><li>Focus your health, strengthen your health</li><li>systematically build competency</li></ul><h3><span id="resilience">Resilience</span><a href="#resilience" class="header-anchor">¶</a></h3><p>什么是克服问题的可习得的品质：</p><ul><li><p>identify the strength, set goal and future-oriented, role-model</p></li><li><p>Admit the weakness</p></li><li><p>Helping people is helping ourselves</p><ul><li>Appreciate the good(be grateful, to grow).</li></ul></li><li><p>?? Tough enough to seek for help</p></li><li><p>find the right community</p></li><li><p>social support-&gt;find the right people: If you ask help for them, they would help.</p></li><li><p>Experience: what I can do to make it meaningful?</p></li></ul><h3><span id="ask-the-right-question">Ask the right question!!!</span><a href="#ask-the-right-question" class="header-anchor">¶</a></h3><p>例子：30s内数一个图里有多少几何图形，然后再问图画的一些细节的简单问题。基本都没法回答那些简单问题，因为在看图时的重点放在了解决那个唯一问题上，而根本没注意细节。</p><p>工作中需要我们去问正确的问题，这往往就是事物的关键所在。但我们并不总是知道自己的问题是否正确，一个问题引发出去探索相应的领域，得到相应的解答。可这只是一部分的真实，而被我们忽略的事情的其他部分可能也同等重要。</p><p>在问正确的问题之前我们首先需要理解问题是什么。</p><h3><span id="responsibility">responsibility</span><a href="#responsibility" class="header-anchor">¶</a></h3><p>承担责任首先需要认识到没有人会为你解决问题。</p><p><u>Responsibility</u> = no one is coming</p><h3><span id="reminder">reminder</span><a href="#reminder" class="header-anchor">¶</a></h3><p>例子：</p><ol><li>讲了一个例子为什么在哈佛毕业的一届学生里一小群人远比别人更加成功，由于他们具备两种因素：自信，相信自己一定能做到；总是问问题，在自己的社会角色变迁的同时，向同事问问题，向导师问问题，向老板问问题…</li></ol><p>有趣的概念：</p><ol><li>Eduction: Question, find the right the question and quest</li><li>become happier，这门课的主要目标不是变得快乐，而是变得比之前快乐。</li><li>study ourselves</li><li>simple, simplicity extracts from otherside of complexity, not just simplicity</li><li>Stillness：安静的重要性。</li><li>best way to learn is to teach: Learn -&gt; do projects on your own -&gt; teach, this way is more reasonable to me.</li><li>Leadership: Be respectful and do the job</li><li>积极心理学：salutogenesis</li></ol><h3><span id="olc">olc</span><a href="#olc" class="header-anchor">¶</a></h3><p>我最近的问题是：通过实习面试。了解工业界级别的数据库在做什么事情，解决怎样的问题，我的位置在哪里。</p><p>现状：9-10月看了6.031的大部分内容以及6.004的系统部分的阅读，过了一遍数据结构；11月看6.033读系统方向的论文又看了三周左右基本看到了分布式系统（除了Raft还没看）。</p><h2><span id="premise">Premise</span><a href="#premise" class="header-anchor">¶</a></h2><p>五个前提和intro课作为这门课的基础。之后的内容都是在这个基础上的延伸。</p><h3><span id="1-bridge-building-vs-division-and-separation">1. Bridge building Vs. Division and separation</span><a href="#1-bridge-building-vs-division-and-separation" class="header-anchor">¶</a></h3><p>*Practical idealist：*People just see the stereotypes without seeing their desire of making a difference</p><ul><li><p>Bridge ivory tower to Main Street</p></li><li><p>sense of mission, desire to make a difference: How can I make this world a better place?</p></li><li><p>false stereotypes: accolades, prestige, money</p></li></ul><p><u>scenario</u>: fall short of what we are cable of doing with good intentions.</p><p>Problem 1: 为什么仍旧有人身处逆境仍然成功？</p><p>Problem 2: 为什么有良好的动机仍然不能够发挥自身的最大效能，甚至为此所害？</p><p>例子：研究表明conflict resolution: 让矛盾双方聚在一起共同讨论停止争端；但这在中东地区矛盾方接触后反而引起更大的冲突。因为后来发现这还需要矛盾双方有一个superordinate goal，才能在讨论中逐渐消除差异。</p><p>例子：无分辨的称赞别人常常会适得其反。</p><p>ans: 理想和好的动机并不够，研究和实践需要结合起来。你必须自己去发现和实践，承担责任和失败的后果。因为没有人会来为你解决问题，你想要的问题的答案需要你自己去找寻。</p><h3><span id="2-change-is-possible-vs-change-is-illusive">2. Change is possible Vs. Change is illusive</span><a href="#2-change-is-possible-vs-change-is-illusive" class="header-anchor">¶</a></h3><ol><li>这主要讲了积极心理学研究为什么合理。这门课的研究方向：Study what works -&gt; study what works the best -&gt; make a difference in practice</li></ol><ul><li><p>study also the extraordinary/exceptions as studying the average</p></li><li><p>Learn from the best: not only others’ best, but also personal best</p></li><li><p>How difficult to make a change? How is possible to make a change?</p></li></ul><ol start="2"><li><p>例子：一个干涉实验，对250个处于边缘的小孩进行干涉，250个不作干涉，（干涉指提供学业上的指导，解决家庭问题）经过40年的追踪，对照组和实验组在各个因素的表现都相差无几，而对照组在有些方面甚至表现得更好（比如在工作上的提升）。</p><p>这个例子说明了好的动机并不能够解决问题，改变的发生很难进行。</p></li><li><p>Exponential nature of social network/change/the power of one</p><p>问题是选择变化的方向。</p></li></ol><h3><span id="3-internal-factors-vs-external-factors">3. internal factors Vs. external factors</span><a href="#3-internal-factors-vs-external-factors" class="header-anchor">¶</a></h3><p>Internal factors primarily determine happiness Vs. Happiness is primarily a function of external circumstances</p><p>fact 1: Extrem external circumstances would make a difference in happiness. But in general, it would not affect the degree of our happiness.</p><p>fact 2:Right versus wrong expectations would affect our well-beings, not high versus low expectations.</p><p><u>problem</u>: What is the right expectation? Beliefs + transformation</p><ul><li>believe in change from within</li><li>Transformation: interpretation, preception,focus of the world</li></ul><h3><span id="4-human-nature-must-be-obeyed-vs-perfected">4. Human nature must be: obeyed Vs. perfected</span><a href="#4-human-nature-must-be-obeyed-vs-perfected" class="header-anchor">¶</a></h3><blockquote><p>Nature to be commanded must be obeyed.</p></blockquote><p>在心理学层面上，人们天性应该得到尊重，而不是尝试去完善它即使存在那么多的缺点。</p><p>例子：内向导致的在很多人面前讲话而紧张。Tal 以自己为例解释说自己非常内向，在五人以上的场合讲话会非常紧张，但与其告诉自己“不要紧张，不要紧张”不如接受这样的紧张的感觉。因为不要紧张反而会使人放大这种情绪使人更加紧张。</p><p><u>the permission to be a human</u>: it’s ok to experience these painful feelings.</p><ol><li><p>Active acceptance is not resignation(passive acceptance)</p><ul><li><p>Certain things can not change while certain things I can and ought to change</p></li><li><p>the wisdom to tell the difference between changeable  and unchangeable things.</p></li></ul></li><li><p>Distinction between ABC(affect-emotion, behavior-action, cognition-thoughts)</p><p>情绪，行为，想法可以分开来看。</p><ul><li>How to behave and act even with some emotion like jealousy/…</li></ul></li><li><p>建立心理免疫系统：</p><ul><li>how quickly to recover from the depression?</li><li>Strengthens when we give ourselves the permission to be a human</li></ul></li></ol><h3><span id="5-happiness-is-and-ought-to-be-the-ultimate-end-vs-happiness-should-be-a-secondary-pursuit">5. Happiness is and ought to be the ultimate end Vs. Happiness should be a secondary pursuit</span><a href="#5-happiness-is-and-ought-to-be-the-ultimate-end-vs-happiness-should-be-a-secondary-pursuit" class="header-anchor">¶</a></h3><p>理由：1. 对自己好；2.对周围的人好</p><p>情绪变化</p><p>Downward spiral: narrow and constrict -&gt; sad emotions</p><p>Upward spiral: build and broaden -&gt; positive emotions</p><ul><li>olc:这个情绪变化的循环我应该在中学时就见过，只是当时仍旧停留在理论上，不懂怎么产生积极情绪于是陷在长期的负面情绪里不可自拔。只知道这个循环仍旧不够，重点是如何改变。</li></ul><h3><span id="reminder">reminder</span><a href="#reminder" class="header-anchor">¶</a></h3><p>例子：Tal给出了几个做动作的指令并自己给出了示范，学生大多根据Tal的动作来做而不是他说的指令。</p><ul><li>leading by example: people do what you do, not what you say</li></ul><p>有趣的概念：</p><ol><li>Constrained view vs unconstrained view of human nature</li><li>pink elephant</li><li>过度思考负面情绪 Vs. 静心沉思</li><li>Be the change you want to see in the world.</li></ol>]]></content>
      
      
      <categories>
          
          <category> HASS </category>
          
          <category> positive psychology </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我们内心的冲突</title>
      <link href="/sg/2021/12/09/innerconflicts/"/>
      <url>/sg/2021/12/09/innerconflicts/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#shen-jing-zheng-chong-tu-he-chu-li-de-chang-shi">神经症冲突和处理的尝试</a><ul><li><a href="#shen-jing-zheng-chong-tu-de-tong-ku-he-ji-ben-chong-tu">神经症冲突的痛苦和基本冲突</a></li><li><a href="#si-chong-chang-shi">四种尝试</a></li><li><a href="#hui-bi-ren">回避人</a></li></ul></li><li><a href="#wei-jie-jue-chong-tu-de-hou-guo">未解决冲突的后果</a><ul><li><a href="#kong-ju">恐惧</a></li><li><a href="#ren-ge-wei-suo">人格萎缩</a></li><li><a href="#jue-wang">绝望</a></li></ul></li></ul><!-- tocstop --></div><p>前言：我现在最喜欢的图形是一个螺旋上升的圆，人在生活中总是出现似曾相识的背景，不一样的故事内核都是一样的，只是我们在不同的阶段做出了怎样的选择，采取了怎样的行动，导致了怎样的结果。这本书我在20年暑假看完并做了笔记，当时的很多想法虽然意图良善，但是仍有些幼稚和过于情感化，不过笔记中的内容仍然留有很大的思考和行动空间。一个人要么沉浸在失败里，要么从失败中走出来。希望我采取的行动能够让我走出现在的谜团。</p><hr><p>我选取了相关度较高的章节阅读，包括对神经症冲突和处理的尝试的了解以及未解决冲突后果中的恐惧，人格萎缩和绝望部分。</p><p>这无疑是近年我所读到的对我影响最大的一本书。我不能断言自己是否是神经症的一员，但作者对内心冲突的细致分析（虽然她说只作为分析角度出发不一定能解决实际问题，但她明显为解决内心冲突提供了可能）让我明白对待内心冲突所应采取的态度和行动。</p><blockquote><p>而我的观点是，一个人愿意并且也有能力去发展他的潜能，努力成为一个更优秀的人。但是，如果他与别人、与自己的关系不断受到干扰，他的这种潜能可能就会丧失殆尽。我相信人是会改变的，人只要活着，就会不断地改变。而且，随着理解的不断深入，我对这一信念越发坚定。</p></blockquote><h2><span id="shen-jing-zheng-chong-tu-he-chu-li-de-chang-shi">神经症冲突和处理的尝试</span><a href="#shen-jing-zheng-chong-tu-he-chu-li-de-chang-shi" class="header-anchor">¶</a></h2><h3><span id="shen-jing-zheng-chong-tu-de-tong-ku-he-ji-ben-chong-tu">神经症冲突的痛苦和基本冲突</span><a href="#shen-jing-zheng-chong-tu-de-tong-ku-he-ji-ben-chong-tu" class="header-anchor">¶</a></h3><p>人人都有矛盾。根据矛盾做出决策的前提是对自己观念的清楚认知和意识到冲突时做出选择和为选择承担责任的意愿和能力。</p><p>神经症患者：指达到病态程度的人，对自己情感和愿望的意识非常弱，唯一能清晰体验到的情感就是恐惧和愤怒。在强迫性倾向的控制下，患者失去了决定方向，放弃决定和承担责任的能力。</p><p>神经症冲突使人痛苦的原因：它们难以识别，具有足够的破坏性。</p><p>为应对环境所采取的基本行动：亲近人，对抗人，回避人。分别反映了焦虑的某一个元素：无助，敌意，孤立。三种倾向必定都会出现。我们看到的只是其中占主导地位的倾向。正常人和神经症患者的区别在于这三种态度是否互相排斥。</p><blockquote><p>它的动力核心就是三种态度之间的基本冲突，即“亲近人”“对抗人”和“回避人”。患者一方面害怕自己出现分裂，另一方面又必须作为一个整体发挥功能，所以他便不顾一切地尝试处理冲突。尽管他可以制造出一种人为的平衡，但新的冲突不断产生，并不断要求采取进一步的补救措施。在这场追求整体性的斗争中，每一步都使神经症患者变得更加敌对，更加绝望，更加恐惧，更加疏远自己和他人。其结果便是，这些冲突造成的困难越来越多，真正的解决办法却越来越少。患者最终变得绝望，就试图在施虐行为中寻求补偿，而这反过来又增加了他的绝望，产生了新的冲突。</p></blockquote><p>这些态度从人际关系渗透到整个人格中，最终不仅支配着患者与别人的关系，而且控制着他与自己和整个生活的关系。</p><blockquote><p>冲突开始于我们与别人的关系，最终会影响我们的整个人格，这并不是偶然的。人际关系重要到能够塑造我们发展的品质，影响我们设定的目标，引导我们信仰的价值观。而所有这一切，反过来又会作用于我们与别人的关系，它们是不可分割地交织在一起的。</p></blockquote><p>神经症的核心：由不相容的态度产生的冲突。神经症是人际关系紊乱的一种表现。</p><h3><span id="si-chong-chang-shi">四种尝试</span><a href="#si-chong-chang-shi" class="header-anchor">¶</a></h3><blockquote><p>第一种尝试是掩盖某一部分冲突，并使其对立面占据主导地位。第二种尝试是“回避人”。我们现在对神经症孤僻的功能有了新的认识。孤僻是基本冲突的一部分，也是一种对待别人的原始的矛盾态度；它同时也表现出处理冲突的意图，在自我和他人之间保持情感距离，使冲突停止运作。第三种尝试在性质上有很大不同。神经症患者没有“回避人”，而是回避他自己。他的整个现实自我在某种程度上对他来说是不真实的，他创造了一个理想化的自我形象来取代真实自我。在这个理想化的形象中，相互冲突的部分得到了美化，冲突不再表现为冲突，而像是一个丰富人格中的各个方面。这一概念帮助我们澄清了许多迄今为止无法理解并因此无 法治疗的神经症问题。它也使得起初难以融合的两种神经症倾向各归其位。现在看来，对完美的需求似乎就是患者为了达到这个理想化形象而做出的努力；而对被赞美的渴求可以看作患者需要外界肯定他和他的理想化形象是一致的。从逻辑上讲，这种形象与现实的差距越大，患者的需求就越难以满足。在所有处理冲突的尝试中，这种理想化的形象可能是最重要的，因为它对整个人格有着深远的影响。但反过来，它又产生了新的内心裂痕，因此需要进一步的修补。第四种尝试主要是为了消除这一裂痕，它也顺带消除了其他的冲突。通过我所称作的“外化作用”，患者在自我之外所发生的事件中体验他的内心活动。如果说理想化形象意味着与真实自我只有一步之遥，那么外化作用则代表了与真实自我的彻底叛离。它再次制造了新的冲突，或者更确切地说，大大增强了原有的冲突，即自我和外界之间的冲突。</p></blockquote><h3><span id="hui-bi-ren">回避人</span><a href="#hui-bi-ren" class="header-anchor">¶</a></h3><p>首先要意识到神经症性质的孤僻和儒家思想中的的独处的区别。只有在人际交往中出现了无法忍受的紧张，独处变成主要的逃避手段时，独处才是神经症孤僻的表现。</p><p>严重孤僻的人的表现：对别人的普遍疏远；与自我的疏远，对情感体验的麻木，对自己是谁，对自己的爱，恨，欲望，希望，恐惧，怨恨，信仰的不确定；他们内心需要与自己，与别人保持情感距离。</p><blockquote><p>他们对自己都持“旁观者”态度，一如他们对待生活的态度。他们往往是自己内心活动的出色观察员。一个突出的例子就是，他们经常对梦中的象征表现出惊人的理解力。</p></blockquote><p>孤僻型患者的需要：</p><ul><li><p>主要需求：不参与。表现的特征为对独立的需要。能做的事情不能做的事情都倾向于自己独立完成，永远不对任何人和事产生强烈的依恋以至其不可或缺。</p></li><li><p>其它需要：保护自己隐私；</p></li></ul><p>优越感，孤僻和优越的联系在于-&gt;如果不是真的特别强大和足智多谋，或者感觉自己出类拔萃，恐怕没有人能够忍受孤立。</p><p>孤僻者对优越感需求的独特性在于他讨厌竞争，不愿意付出努力去超越别人；另一种表现为他认为自己是独一无二的，拒不接受任何外来因素。</p><p>我认为这两点是我15岁开始停滞不前的主要原因，too young too naive，少时自我没有太多内容，更多的只是一些浅显的概念。而由于对外在陌生环境的惧怕和无所适从，以及对这种不适应的掩饰逐步影响到人际关系。</p><blockquote><p>当孤僻型患者的优越感被暂时粉碎时，无论是因为具体的失败还是内心冲突的加剧，他都无法再去忍受孤独，而会疯狂地寻求关爱和保护。这种动荡在他的人生历程中会经常出现。在他十几岁或二十出头的时候，他可能有过一些不冷不热的友谊，但总体上过着相对孤立的生活，感觉自由自在。他经常幻想未来，自己会成就非凡的事业。但后来，这些梦想在现实的岩石上摔得粉碎。尽管在高中时，他无可争辩的是第一名，但在大学，他遇到了激烈的竞争并被击败。他的第一次恋爱也失败了。或者，随着年龄的增长，他意识到自己的梦想是难以实现的。然后，孤独离群变得令他难以忍受；在某种强迫性力量的驱动下，他开始渴求亲密关系、性关系以及婚姻。只要有人爱他，他宁愿卑躬屈膝。</p></blockquote><p>我认为自己确实存在与别人保持情感距离，以避免冲突或更加亲密；也确实希望尽可能单凭理性解决问题。可我不认为这种状态是不可改变的，最多只是在现在这一人生阶段持续着，也有可能因为某人或某事改变。不过这应该也属于作者对孤僻症患者有固有的情感倾向的范畴。作者说的孤僻者对独立有歇斯底里的态度，为此可做出任何牺牲，可以抛弃全部外在利益和内在价值。我对独立没有到这一极端的程度，独立和依赖在我看来也不是非此即彼的关系。这需要因人（所对待的人）而宜。</p><p>Update: 这段话即使是现在看也仍然很令人警醒。虽然我应该不是孤僻者，也没有优越感🙂️。</p><blockquote><p>孤僻型患者的情感生活并不像其他类型那样遵循严格的模式。这一类型的个体差异较大，主要是因为不同于其他两种类型有着积极的目标——顺从型追求喜欢、亲密和爱，攻击型追求生存、控制和成功——而孤僻型的目标是消极的：他不想参与其中，不需要任何人，不允许别人干涉或影响他。他们的情感状态依赖于在消极框架下形成和发展的特殊欲望，而且只会形成少量固有的倾向。</p></blockquote><p>每种态度都有积极价值。但在神经症的结构中出现并运作时，他们会变得相互排斥。</p><blockquote><p>作为众多创造虚假和谐的神经症方式之一，这是一种通过逃避来处理冲突的尝试。但这不是真正的解决之道，因为患者亲近、控制、利用和超越别人的强迫性需求仍然存在，在思维瘫痪之前，他将持续受其骚扰。最后，只要相互矛盾的价值观继续存在，他就永远不能实现真正的内心平静和自由。</p></blockquote><p>外化作用：通过把问题外化而忽略内心冲突的存在，无法把自己想象成个人生活中的积极推动者。患者与自我的疏远加剧了个人和外部世界之间的冲突。</p><p>虚假和谐：拆东墙补西墙。除非最初导致困难的条件被彻底改变否则就是无效的。</p><p>围绕基本冲突这一核心建立起来的防御机制：称为防护性结构。每种神经症都形成了一套防御系统，包含上述形式，活跃程度不同。</p><h2><span id="wei-jie-jue-chong-tu-de-hou-guo">未解决冲突的后果</span><a href="#wei-jie-jue-chong-tu-de-hou-guo" class="header-anchor">¶</a></h2><h3><span id="kong-ju">恐惧</span><a href="#kong-ju" class="header-anchor">¶</a></h3><blockquote><p>通过压抑、理想化和外化的过程，患者已经失去了大部分的自我；即使还没有真的变成影子，但他感觉自己就像一个无足轻重、毫无内涵的影子。 与此同时，他对别人的需要和恐惧，不仅使他们更加令人生畏，而且更加不可或缺。</p></blockquote><p>当时浑浑噩噩地白天睡觉，晚上刷剧的原因就是不知道如何面对周围环境的评价，索性采取了漠视的态度。印象比较深的场景时上课睡觉，当时应该在讲卷子我没写，然后被老师抓到了作为反面典型，顺便再评论了一下我之后的人生就只能这样了。</p><blockquote><p>这样做的后果是，患者过度看重别人对他的评价，而自我评价则变得无关紧要。这使得别人的意见对他具有一种压倒性的力量。</p></blockquote><p>虽然尚未到这种程度，但是这样的后果也足够惊骇了。</p><blockquote><p>一般来说，这种恐惧的后果就是使神经症患者远离别人，并对别人产生敌意。更重要的是，这种恐惧使受其折磨的人无法施展自己的才能。他们不敢对别人抱有期望，也不敢为自己设定远大理想。他们不敢接近那些看起来比自己优秀的人；他们不敢发表意见，即使自己可能很有见解；他们不敢运用自己的创造力，即使自己拥有这种能力；他们不敢让自己具有吸引力，不敢试图给人留下深刻印象，也不敢寻求更好的职位，等等。即使有时他们在这些方面跃跃欲试，但想到被人嘲笑的场景便望而却步，退回到自己的矜持和自尊中寻求慰藉。</p></blockquote><p>我想要：</p><blockquote><p>如果我们想要最终获得人格的整合，就必须把自己暴露在恐惧面前，所以它们也是我们直面自己所遇到的障碍。它们如同炼狱，我们必须在那里徘徊，最后才能得到救赎。</p></blockquote><h3><span id="ren-ge-wei-suo">人格萎缩</span><a href="#ren-ge-wei-suo" class="header-anchor">¶</a></h3><p><strong>压抑的部分基本冲突</strong>造成了个人精力的部分消耗。</p><p>造成的主要困扰有：犹豫不决；普遍的效率低下（开车的同时踩刹车）；普遍的惰性。</p><p>未解决的神经症冲突所浪费的精力是无法估量的。</p><blockquote><p>神经症患者可能认为，必须不懈地努力这一事实让他感到羞辱，这无异于表示他不是他的理想化形象；一想到要付出世俗的努力，他宁愿什么也不做，整天在幻想中大展拳脚。自卑的折磨伴随着理想化形象，剥夺了他的自信，让他觉得自己做不了任何有价值的事，从而把所有的动力和乐趣都埋在流沙里。</p></blockquote><p>理想</p><blockquote><p>我断言他并没有认真对待自己的理想，意思是说这些理想对他的生活并没有约束力。当理想很容易实现或很有用的时候，他就会付诸行动，一旦时过境迁，他便束之高阁。而对认真对待理想的人来说，这种情况是很难想象的。<strong>如果这些理想是真实的，他们不可能轻易将其抛到一边。</strong></p></blockquote><p>责任</p><blockquote><p>我们说的承担责任，是指能够为我们认为正确的事情挺身而出，而且当我们的行动或决定被证明是错误时，能够承担后果。</p></blockquote><h3><span id="jue-wang">绝望</span><a href="#jue-wang" class="header-anchor">¶</a></h3><p>注解说绝望来自于无法成为自己。我的程度应该没有这么深，丧是肯定的，但只有某些时刻才会有这样的感觉。15-16时存在某种理想化形象，不过就算是那个时候也是极其浅显的认知，衍生了很多无谓的幻想。不过我认为这种情况很难避免，由于对环境的不够完全的认知，个人又丢失了基本的行动力，停停走走，直到这个状态彻底不能维持下去。</p><blockquote><p>不仅如此，日常生活中的小意外在他头脑中都犹如大难临头。任何微小的失败都可能使他陷入抑郁，因为这证明了他毫无价值——即使失败是由不可控的因素造成的。任何无伤大雅的批评都可能使他忧心忡忡或前思后想，如此等等。结果，他比一般人更不快乐、 更不满意，这当然是庸人自扰。</p></blockquote><p>绝望者的态度</p><blockquote><p>生命是一种永恒的负担，他们见怪不怪，也没有什么抱怨。但是，他们的情绪永远都处于低谷的状态。</p></blockquote><blockquote><p>他一直处于自己极不满意的情境中，或许只要付出一点努力，拿出一点积极性，这种状况就可以得到改善。但是，他可能因为绝望而完全瘫痪，对他而言，正常的困难似乎都是不可逾越的障碍。</p></blockquote><p>从对待绝望态度到对待神经症态度：<br>绝望由内心冲突引起。这种境况十分困难，但真正使事情变得绝望的是患者态度。</p><blockquote><p>假如提供建议的是一 位优秀的分析师，他会说：“当然，这种境况十分困难。但真正使事情变得绝望的是你们自己的态度。如果你们考虑改变自己对生活的要求，就不会再感到绝望了。</p></blockquote><blockquote><p>我认为神经症的强迫性倾向并非出自本能，而是来自人际关系的紊乱；当患者的人际关系得到改善时，这些倾向是可以改变的，发源于此的冲突也可以真正得到解决。</p></blockquote><blockquote><p>尽管每次遇到问题都必须从头处理，但只要患者认识到他真的可以改变，绝望对他的控制就会有所松动，他的动力也会随之增强。<strong>在分析开始时，这种动力可能仅限于他希望摆脱最令人不安的症状；但是，当患者越来越意识到他的枷锁，尝到了自由的滋味时，他的动力就会越来越强</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win10 下装子系统 ubuntu20.04</title>
      <link href="/sg/2021/12/02/env_linux_child/"/>
      <url>/sg/2021/12/02/env_linux_child/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#an-zhuang-zi-xi-tong">安装子系统</a></li><li><a href="#she-zhi-wang-luo-dai-li">设置网络代理</a></li><li><a href="#ruan-jian-an-zhuang">软件安装</a><ul><li><a href="#xu-ni-ji">虚拟机</a></li><li><a href="#ide">IDE</a></li></ul></li><li><a href="#github-lian-jie">GitHub 连接</a></li><li><a href="#jian-pan-ying-she">键盘映射</a></li></ul><!-- tocstop --></div><p>install linux on pc -&gt; set up proxy -&gt; install virtual machine -&gt; install vagrant -&gt; change keyboard mapping -&gt; change bash file setting -&gt; connect to GitHub via ssh</p><h2><span id="an-zhuang-zi-xi-tong">安装子系统</span><a href="#an-zhuang-zi-xi-tong" class="header-anchor">¶</a></h2><p>安装的是ubuntu20.04 amd版本。</p><p>安装步骤参考<a href="https://zhuanlan.zhihu.com/p/363640824">这篇文章</a></p><p>遇到的问题</p><ol><li><p>无法打开虚拟磁盘</p><p>搜一下改虚拟磁盘的启动项，记得要重启才能生效</p></li><li><p>开机出现grub</p><p>看到grub懵了，exit后也不能正常显示。后来参看了<a href="https://blog.csdn.net/luo617/article/details/81321721?spm=1001.2101.3001.6650.9&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7Eessearch%7Evector-9.essearch_pc_relevant&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7Eessearch%7Evector-9.essearch_pc_relevant">这篇文章</a></p></li><li><p>分区，c drive 15000MB, D drive 300000MB</p><p>先分逻辑区，后分主区。</p></li><li><p>安装的时候先不要联网，基本安装完后再联网更新</p></li></ol><h2><span id="she-zhi-wang-luo-dai-li">设置网络代理</span><a href="#she-zhi-wang-luo-dai-li" class="header-anchor">¶</a></h2><p>参考<a href="https://zhuanlan.zhihu.com/p/359755946">linux配置v2ray</a></p><p>遇到的问题</p><ol><li><p>设置代理后无法打开网页，导致http解析全部失败。然而我还没有意识到只有打开代理才能连接网络。</p><p>参考了<a href="https://blog.csdn.net/weixin_30413739/article/details/96381847">代理网页解决</a></p></li><li><p>这也是在安装虚拟机时出现的问题。最后通过1解决。</p><p>对应了6.031中说的排查问题范围的顺序。</p></li></ol><h2><span id="ruan-jian-an-zhuang">软件安装</span><a href="#ruan-jian-an-zhuang" class="header-anchor">¶</a></h2><h3><span id="xu-ni-ji">虚拟机</span><a href="#xu-ni-ji" class="header-anchor">¶</a></h3><h4><span id="virtual-box">Virtual box</span><a href="#virtual-box" class="header-anchor">¶</a></h4><p>刚开始照着官网教程安装（瞎搞），出现了各种问题，按步骤调了下，又出现一个http解析错误，试图改vagrantfile(瞎搞)，最后发现是网络问题。并且virtual box的安装应该只需要(虽然我安装了官网上的各种key认证，但我并不确定这是否是必需的步骤）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualbox</span><br></pre></td></tr></table></figure><p>瞎搞出现的问题</p><ol><li><p>更改sources.list并apt-get update后出现：不支持i386架构</p><p>通过<a href="https://qastack.cn/ubuntu/741410/skipping-acquire-of-configured-file-main-binary-i386-packages-as-repository-x">这篇文章</a>解决（？）。解释说因为有多种架构发生了混乱于是删除了32位架构。</p></li><li><p>瞎搞的步骤</p><p>中间wget一直报错：http解析错误。就是因为网络问题。</p></li><li><p>既然是瞎搞肯定会出现安装错误/不完整的情况，于是就需要<a href="https://askubuntu.com/questions/703746/how-to-completely-remove-virtualbox">完全删除</a>掉已安装的内容</p></li><li><p>Security boot: 出现UEFI安全错误，重启后按F2进入BIOS界面<a href="https://askubuntu.com/questions/1105710/installing-virtualbox-your-system-has-uefi-secure-boot-enabled-message">关掉了这个检查</a></p></li></ol><h4><span id="vagrant">Vagrant</span><a href="#vagrant" class="header-anchor">¶</a></h4><p>按<a href="https://www.vagrantup.com/downloads">官网</a>即可。</p><h3><span id="ide">IDE</span><a href="#ide" class="header-anchor">¶</a></h3><p>clion:下载一个包后解压缩，用命令行打开。可参考<a href="https://blog.csdn.net/feimeng116/article/details/105898892">安装clion</a></p><p>Code: 直接下载deb文件安装</p><h2><span id="github-lian-jie">GitHub 连接</span><a href="#github-lian-jie" class="header-anchor">¶</a></h2><p><a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">ssh connection</a></p><p>照着提示进行就行了。出现的问题基本都是网络问题，而不是步骤哪错了。</p><h2><span id="jian-pan-ying-she">键盘映射</span><a href="#jian-pan-ying-she" class="header-anchor">¶</a></h2><p>查了几篇文章试了试，xmodmap不能很好的解决问题（可能是因为没有重启？？）。</p><p>于是用了<a href="https://askubuntu.com/questions/363346/how-to-permanently-switch-caps-lock-and-esc">deconf-tools</a>，由于在ubuntu20.04中不支持（？）然后找了<a href="https://askubuntu.com/questions/1248426/what-has-replaced-dconf-tools-for-ubuntu-20-04?noredirect=1&amp;lq=1">替代方案</a>。</p>]]></content>
      
      
      <categories>
          
          <category> toolbox </category>
          
          <category> environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设置 AWS EC2 作为服务器</title>
      <link href="/sg/2021/12/01/open_ec2/"/>
      <url>/sg/2021/12/01/open_ec2/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#jian-yao-bu-zou">简要步骤</a><ul><li><a href="#1-chuang-jian-ec2-xu-ni-ji">1 创建EC2虚拟机</a></li><li><a href="#2-she-zhi-ip-di-zhi">2 设置IP地址</a></li></ul></li><li><a href="#ding-jie">定价</a></li><li><a href="#she-zhi-gong-zuo-qu">设置工作区</a></li><li><a href="#guan-bi-fu-wu">关闭服务</a></li></ul><!-- tocstop --></div><h2><span id="jian-yao-bu-zou">简要步骤</span><a href="#jian-yao-bu-zou" class="header-anchor">¶</a></h2><h3><span id="1-chuang-jian-ec2-xu-ni-ji">1 创建EC2虚拟机</span><a href="#1-chuang-jian-ec2-xu-ni-ji" class="header-anchor">¶</a></h3><p>由于我也看不懂安全组，卷，实例这些，就按照默认设置了。</p><p>我设置的存储空间是16G（免费上限是30G）</p><h3><span id="2-she-zhi-ip-di-zhi">2 设置IP地址</span><a href="#2-she-zhi-ip-di-zhi" class="header-anchor">¶</a></h3><p>具体参考<a href="https://zhuanlan.zhihu.com/p/59125060">亚马逊AWS EC2免费服务器+域名配置教程</a>中的二到四步</p><h2><span id="ding-jie">定价</span><a href="#ding-jie" class="header-anchor">¶</a></h2><p>亚马逊云服务如果超出免费套餐收费很贵，收费规则也相对复杂。</p><p>归纳一下：开机/关机不足一小时（1s也算不足）按1小时计费。关机后，存储服务（EBS）仍要收费。只有清除后才不会再收取费用。</p><p>注意事项：</p><blockquote><p>如果在“Instances”页面看到多于一个instance，你一定要stop甚至terminate多于一个的，不然你将面临计费风险。aws提供的免费服务包中有其它的服务会自动开启Instance的，我关闭相关服务才关闭了我不需要的Instance。一个t1.micro，一个月是140多美元。</p><p>参考<a href="https://zhuanlan.zhihu.com/p/124102508">AWS收费</a></p></blockquote><ol><li>EC2<u>只开1个instance</u>。服务器的免费政策是720 <u>1个Instance</u>小时/月，开多个instance则需收费。</li><li>start/stop server: <a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/ec2-instance-hour-billing/">instance记时</a>是以1小时做单位的，如果一个小时之内start/stop 5次服务器的话，会被记5个小时</li><li>流量，I/O次数等等很多信息都有免费的上限</li><li>付款以美元记</li><li>免费期是12个月，12月之内一定要终止(terminate)你使用的aws服务，否则会被计费。</li><li><a href="https://docs.amazonaws.cn/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html#eip-pricing">弹性IP地址</a>收费：为确保弹性IP 地址的有效使用，如果弹性IP 地址未与正在运行的实例关联，或者它已与停止的实例或未附加的网络接口关联，我们将强制收取小额的小时费用。 当您的实例正在运行时，您无需为与该实例关联的某个弹性IP 地址付费，但需为与该实例关联的所有其他弹性IP 地址付费。</li></ol><h2><span id="she-zhi-gong-zuo-qu">设置工作区</span><a href="#she-zhi-gong-zuo-qu" class="header-anchor">¶</a></h2><p>EC2中使用yum而不是apt-get</p><ul><li>install <a href="https://serverfault.com/questions/836198/how-to-install-docker-on-aws-ec2-instance-with-ami-ce-ee-update">docker</a></li><li><a href="https://stackoverflow.com/questions/61165009/how-to-install-devtoolset-8-gcc-8-on-amazon-linux-2">how to install devtoolset-8 / GCC 8 on Amazon Linux 2</a></li><li>install <a href="https://www.softwarecollections.org/en/scls/rhscl/llvm-toolset-7/">llvm 7</a>: 这里安装失败了</li></ul><h2><span id="guan-bi-fu-wu">关闭服务</span><a href="#guan-bi-fu-wu" class="header-anchor">¶</a></h2><p>有个坑是 aws 会分地区显示关联的弹性 IP 地址，因为没注意这一点导致多收了2美元左右。</p>]]></content>
      
      
      <categories>
          
          <category> toolbox </category>
          
          <category> environment </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>recitation network</title>
      <link href="/sg/2021/11/29/recitation_network/"/>
      <url>/sg/2021/11/29/recitation_network/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#paper-ethernet">Paper: Ethernet</a><ul><li><a href="#background">Background</a></li><li><a href="#design-choice">Design choice</a></li><li><a href="#implementation">Implementation</a></li><li><a href="#performance-measure">performance measure</a></li><li><a href="#protocols">protocols</a></li></ul></li><li><a href="#paper-ron">Paper: RON</a><ul><li><a href="#general-goal">General goal</a></li><li><a href="#design-goal">Design goal</a></li><li><a href="#design">Design</a></li><li><a href="#conclusion">conclusion</a></li></ul></li><li><a href="#paper-dctcp">Paper: DCTCP</a></li><li><a href="#paper-e2e-argument-1981">Paper: E2E argument 1981</a><ul><li><a href="#what">what</a></li><li><a href="#performance-view">performance view</a></li><li><a href="#how-identifying-the-ends">How: identifying the ends</a></li><li><a href="#some-thinking">Some thinking</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="paper-ethernet">Paper: Ethernet</span><a href="#paper-ethernet" class="header-anchor">¶</a></h2><p>Ethernet: Distributed Packet Switching for Local Computer Networks</p><h3><span id="background">Background</span><a href="#background" class="header-anchor">¶</a></h3><ol><li><p>demands of computer-computer interconnection grow</p><ul><li><img src="/sg/2021/11/29/recitation_network/trans.png" class title="trans"></li></ul></li><li><p>Reliability:</p><p>packets are delivered only with high probability.</p><ul><li>Fact: control is completely distributed among stations with packet transmissions coordinated through statistical arbitration.</li></ul></li></ol><h3><span id="design-choice">Design choice</span><a href="#design-choice" class="header-anchor">¶</a></h3><p>Problem 1: distribute control of the communications facility among the communicating computers</p><h4><span id="choice"><strong>Choice</strong></span><a href="#choice" class="header-anchor">¶</a></h4><ol><li><p>Topology: an unrooted tree is better than a star network in distributed interconnections.</p></li><li><p>Control</p><p>Problem 2: collision: more than one packets are transmitted at the same time</p><ul><li>Retransmission: controller would adjust the mean retransmission interval in proportion to the frequency of collisions.</li><li>equity: cooperation among the stations is required. This equality rule is maintained by low-level software in each station</li></ul></li><li><p>Addressing : packet(source, destination)</p></li><li><p>Reliability : remove the responsibility for reliable communication from the <u>packet transport mechanism</u></p><p>从而把责任转移给应用层，更好地决定可靠性和恢复。</p><ul><li>error-free communication(reliable delivery of any single packet) is hard. Instead, we choose to support reliable transport where it can get both economy of transmission and high reliability averaged over many packets</li></ul></li><li><p>packet transport mechanism</p><p>Problem 3: reduce the probability and cost of losing a packet.</p><p>Fact: a station connects to the Ether with a tap and  transceiver.</p><p>There are five mechanisms: (1) carrier detection, (2) interference detection, (3) packet error detection, (4) truncated packet filtering, and (5) collision consensus enforcement.</p></li></ol><p><strong>Alternatives of design choice</strong></p><h3><span id="implementation">Implementation</span><a href="#implementation" class="header-anchor">¶</a></h3><ul><li><img src="/sg/2021/11/29/recitation_network/ethernet.png" class title="ethernet"></li><li><img src="/sg/2021/11/29/recitation_network/cca.png" class title="cca"></li></ul><h3><span id="performance-measure">performance measure</span><a href="#performance-measure" class="header-anchor">¶</a></h3><p>Acquisition probability, waiting time, efficiency</p><h3><span id="protocols">protocols</span><a href="#protocols" class="header-anchor">¶</a></h3><p>What does the term “layering” mean in the context of networking?</p><p>Why do we use a layered model?</p><p>How do you imagine that layered model is reflected in actual packets?</p><h2><span id="paper-ron">Paper: RON</span><a href="#paper-ron" class="header-anchor">¶</a></h2><blockquote><p>Resilient overlay networks: an application-layer overlay on top of the existing internet routing substrate.</p></blockquote><p>Problem 1: failure and latency</p><p>BGP 可扩展性同时造成的问题：端到端通信的容错性减少，导致网络延迟发生和延迟时间加长（几十分钟的程度）。这也让现有的网络非常脆弱，会由于各种问题而崩溃。</p><p>因为BGP出于可扩展性和政策执行的考虑，隐藏了许多拓扑细节，几乎没有关于交通状况的信息，并且在出现潜在问题时抑制路由更新以防止大规模振荡。</p><p>解决方法是在应用层上分布一层重叠的节点来完成连接。底层网络节点的变化不会扰动到上层，由此来解决可扩展性带来的问题。</p><h3><span id="general-goal">General goal</span><a href="#general-goal" class="header-anchor">¶</a></h3><ol><li><p>Main goal: enable a group of nodes to communicate in the face of problem1</p><p>what RON can do:</p><ul><li>检测问题快：whether the underlying internet path is the best one</li><li>交换交通信息</li><li>限制RON path的大小以避免过度占用网络带宽，减少网络延迟</li></ul></li><li><p>integrate <u>routing and path selection</u> with distributed applications more tightly</p><p>更针对性的建设网络通路</p><ul><li>consult <u>application-specific</u> metrics in selecting paths</li><li>incorporate application-specific notions of what network conditions constitute a “fault.”</li></ul></li><li><p>provide a <u>framework</u> for the implementation <u>of expressive routing policies</u>, which govern the choice of paths in the network</p></li></ol><h3><span id="design-goal">Design goal</span><a href="#design-goal" class="header-anchor">¶</a></h3><p>更准确的描述设计目标：</p><h4><span id="1-fast-failure-detection-and-recovery">1 Fast failure detection and recovery</span><a href="#1-fast-failure-detection-and-recovery" class="header-anchor">¶</a></h4><p>评估failure造成的影响。现有的BGP-4找到合适的线路通信经常会遇到failures。failure可以分为link failures和path failures。它们在应用中常表现为两种形式：outages or performance failures。outage对网络造成的影响能达到几个数量级（比如TCP degrades, average packet loss rate over a sustained period of several minutes）；而performance failures的影响则没有那么极端，仍在同等数量级下。</p><p>因此我们希望RON能够做到检测快和恢复快。</p><h4><span id="2-tighter-integration-with-applications">2 Tighter integration with applications</span><a href="#2-tighter-integration-with-applications" class="header-anchor">¶</a></h4><p>fact: Failures and faults are application-specific notions.</p><p>根据应用场景的不同而制定的标准（metrics）来选择合适的网络线路。理想的情况下，最合适的线路应该满足多种标准。</p><p>这里不同标准在实际应用之间的衡量（trade-offs）是设计考虑的重点。</p><h4><span id="3-expressive-policy-routing">3 expressive policy routing</span><a href="#3-expressive-policy-routing" class="header-anchor">¶</a></h4><p>RON’s powerful end-points allow fine-grained policy routing.</p><p>打个比方就就是地图精度更高了，路径规划也就越准确。</p><h3><span id="design">Design</span><a href="#design" class="header-anchor">¶</a></h3><img src="/sg/2021/11/29/recitation_network/ron.png" class title="ron"><h4><span id="1-software-architecture">1 Software architecture</span><a href="#1-software-architecture" class="header-anchor">¶</a></h4><ul><li><p>RON client: forwarder, conduits</p></li><li><p>RON: router, membership manager</p></li><li><p>forwarding service:</p><ul><li>IP paths</li><li>RON</li></ul></li><li><p><strong>forwarder</strong>: onduits access RON</p><ul><li>send(pkt, dst, via_ron): forward a packet to a destination RON</li><li>recv(pkt, via_ron): callback function that is called when a packet arrives for the client program</li></ul></li></ul><h4><span id="2-routing-and-path-selection">2 routing and path selection</span><a href="#2-routing-and-path-selection" class="header-anchor">¶</a></h4><ul><li><p>Routing = building up the forwarding tables -&gt; choose paths for packets</p></li><li><p>default metrics for selecting the path:</p><p>latency; packet loss rate; throughput</p><ul><li>RON clients: can override defaults</li><li>RON library: construct the table</li><li>Router: build up forwarding tables following the demands</li></ul></li></ul><ol><li>link-state dissemination</li></ol><ul><li>small size of RON allows fast propagation</li></ul><ol start="2"><li>path evaluation and selection</li></ol><ul><li><p>path evaluation is composed of combination of two links into a path and formula used to evaluate it.</p></li><li><p>Outage detection: whether the connection is still working?</p></li><li><p>Throughput path selection: avoid paths of low throughput when alternatives are available instead of an optimal one</p><p>为了避免performance failure，选择一条相对合适的路径而不是直接中断。</p><p>Problem:  how throughput-intensive applications handle traffic?</p><p>Solution:TCP or TCP-like congestion control</p></li></ul><ol start="3"><li><p>performance database</p><p>Demand:RON needs to know performance info</p><p>Consideration:</p><ol><li>Performance repository must be reliable and flexible</li><li>Measurement data : noisy, and many clients would want to use the data</li></ol><p>we conclude that the system needs a flexible summarization mechanism.</p><p>-&gt; each RON node or local group of nodes uses a separate performance database to store samples.</p><ul><li><img src="/sg/2021/11/29/recitation_network/pt.png" class title="pt"></li></ul></li></ol><h4><span id="3-policy-routing">3 policy routing</span><a href="#3-policy-routing" class="header-anchor">¶</a></h4><ol><li>Classification：查找信息</li><li>routing table formation：计算最短路径</li></ol><p>two policy mechanism :</p><ol><li><p>Exclusive cliques</p><p>比如校园网</p></li><li><p>general policies</p><p>更灵活地制定规则</p></li></ol><h4><span id="4-data-forwarding">4 data forwarding</span><a href="#4-data-forwarding" class="header-anchor">¶</a></h4><ul><li><img src="/sg/2021/11/29/recitation_network/df1.png" class title="df1"></li><li><img src="/sg/2021/11/29/recitation_network/df2.png" class title="df2"></li></ul><h4><span id="5-bootstrap-and-membership-management">5 Bootstrap and membership management</span><a href="#5-bootstrap-and-membership-management" class="header-anchor">¶</a></h4><h3><span id="conclusion">conclusion</span><a href="#conclusion" class="header-anchor">¶</a></h3><h2><span id="paper-dctcp">Paper: DCTCP</span><a href="#paper-dctcp" class="header-anchor">¶</a></h2><p>Applications in datacencer network are expected to have these requirements:</p><ol><li>low latency for short flows</li><li>high burst tolerance</li><li>high utilization for long flows</li></ol><h2><span id="paper-e2e-argument-1981">Paper: E2E argument 1981</span><a href="#paper-e2e-argument-1981" class="header-anchor">¶</a></h2><blockquote><p>The function in question can completely and correctly be implemented only with the knowledge and help of the application standing at the end points of the communication system. Therefore, providing that questioned function as a feature of the communication system itself is not possible. (Sometimes an incomplete version of the function provided by the communication system may be useful as a performance enhancement.)</p></blockquote><h3><span id="what">what</span><a href="#what" class="header-anchor">¶</a></h3><p>E2E argument is a reasoning against low-level function implementation. It is applied in many contexts but this paper chose data communication networks to provide more concrete details about it. For designers, it’s a guideline that helps in application and protocol design analysis rather than a rule.</p><p>ex: reliable data transmission in file transfer - “the function in question”</p><p>The same example as in the book with extra details on the file transfer machanism which is to retry/commit after dectect checksum failures.</p><p>Conclusion:</p><blockquote><p>The end-to-end check of the file transfer application must still be implemented no matter how reliable the communication system becomes.</p></blockquote><ol><li>Apps that perform file transfer must supply a file-transfer-specific, end-to-end reliability guarantee.</li><li>Reliable transport does not guarantee the reliablity of apps.</li></ol><h3><span id="performance-view">performance view</span><a href="#performance-view" class="header-anchor">¶</a></h3><ol><li>The lower levels need not provide “perfect” reliability. The effort to provide reliability at the lower level may cost more than the effort and still guarantee nothing.</li><li><u>Engineering tradeoff</u>: The effort to supply reliablity measures on the data communication networks is a tradeoff of <strong>performance</strong>.</li><li>Function placement at the lower level may not be efficient for two reasons:<ul><li>Function at the low level affects many applications. Other applications may not need this function.</li><li>The low-level subsystem has less information that high levels.</li></ul></li><li>ex: where to put reliable technique? File transfer application or communication system.<ul><li>More efficient in communication system. Adding the reliable checks on every application is redundant.</li></ul></li></ol><h3><span id="how-identifying-the-ends">How: identifying the ends</span><a href="#how-identifying-the-ends" class="header-anchor">¶</a></h3><blockquote><p>one must use some care to identify the end points to which the argument should be applied.</p></blockquote><p>example 1: network carrying some packet voice connections between two telephones</p><p>example 2: speech message system, user listens to the voice message stored in the file system</p><p>A srong E2E argument will ask in-order delivery to provide reliability. In example 1, if it needs to preserve a bit-perfect communication, enforcements on the delivery order (low-level reliability measures) causing delay are disruptive. It’s better to receive damaged data and add replacement measures as duplication, noise for better performance. However, some applications like real-time communication require the strong E2E argument.</p><p>In example 2, a storage system is at the receiving end of the voice communciation. Short delays are not disruptive. So designers can consider the low-level reliability measure like packet ordering for correctness and performance.</p><h3><span id="some-thinking">Some thinking</span><a href="#some-thinking" class="header-anchor">¶</a></h3><ol><li>My opinions of E2E argument?</li><li>How might one use the end-to-end argument when designing a system?</li><li>What role does trust play in the end-to-end argument?</li><li>Packet acknowledgement is ignored in this paper but becomes an esstial part of reliable tranport. Though, the E2E argument still influenced the design of TCP as being a layer above IP (From recitation notice).</li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SC functional programming</title>
      <link href="/sg/2021/11/27/SC_functional_programming/"/>
      <url>/sg/2021/11/27/SC_functional_programming/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r26-map-filter-reduce">R26: map, filter, reduce</a></li></ul><!-- tocstop --></div><h2><span id="r26-map-filter-reduce">R26: map, filter, reduce</span><a href="#r26-map-filter-reduce" class="header-anchor">¶</a></h2><p>problems: write a method that finds all the words in the Java files in your project.</p><p>Approach 0:</p><p>Use recursion.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all the files in the filesystem subtree rooted at folder.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> folder root of subtree, requires folder.isDirectory() == true</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> list of all ordinary files (not folders) that have folder as</span></span><br><span class="line"><span class="comment"> *         their ancestor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;File&gt; <span class="title function_">allFilesIn</span><span class="params">(File folder)</span> &#123;</span><br><span class="line">    List&lt;File&gt; files = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (File f : folder.listFiles()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">            files.addAll(allFilesIn(f));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">            files.add(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> files;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goal: design functions that operate over sequences of elements.</p><p>Approach 1: abstracting out control flow</p><p>Ex 1: Iterator abstraction</p><p>Without worrying about the data representations.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">ii</span> <span class="operator">=</span> <span class="number">0</span>; ii &lt; files.size(); ii++) &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> files.get(ii);</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;File&gt; iter = files.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> iter.next();</span><br><span class="line">    <span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p><strong>Ex 2: map/filter/reduce abstraction</strong></p><p>use streams to represent the entire sequence of elements.(java,cpp都有stream的datatype)</p><ul><li>map : Stream&lt;‍E&gt; × (E → F) → Stream&lt;‍F&gt;</li></ul><p>Approach 1.1 higher order functions: pass function in functions.</p><p>Java related: call chaining, method reference.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>).stream()</span><br><span class="line">    .map(x -&gt; Math.sqrt(x))</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>).stream()</span><br><span class="line">    .map(Math::sqrt)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Function&lt;Double,Double&gt; mySquareRoot = Math::sqrt;</span><br><span class="line">mySquareRoot.apply(<span class="number">16.0</span>); <span class="comment">// returns 4.0</span></span><br></pre></td></tr></table></figure><ul><li><p>filter : Stream&lt;‍E&gt; × (E → boolean) → Stream&lt;‍E&gt;</p></li><li><p>reduce : Stream&lt;‍E&gt; × E × (E × E → E) → E</p><p>Three design choices in the reduce operation.</p><ol><li><p>whether to require an initial value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List.of(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>).stream()</span><br><span class="line">    .reduce(<span class="number">0</span>, (x,y) -&gt; x+y)</span><br><span class="line"><span class="comment">// computes (((0+1)+2)+3) to produce the integer 6</span></span><br><span class="line">  </span><br><span class="line">List.of(<span class="number">5</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">1</span>).stream()</span><br><span class="line">    .reduce(Math::max)</span><br><span class="line"><span class="comment">// computes max(max(max(5,8),3),1) and returns an Optional&lt;Integer&gt; value containing 8</span></span><br></pre></td></tr></table></figure></li><li><p>the order in which the elements are accumulated.</p></li></ol><ul><li>Depends on the associativity. If non-associative, the order of combination changes.</li></ul><ol start="3"><li><p>reduction to another type</p><p>in java: reduce : Stream&lt;‍E&gt; × F × (F × E → F) × (F × F → F) → F</p><ul><li>an accumulator ⊙ : F × E → F that adds an element from the sequence (of type E) into the growing result (of type F)</li><li>a combiner ⊗ : F × F → F that combines two partial results, each accumulated from part of the sequence, into a growing result</li></ul></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SD security</title>
      <link href="/sg/2021/11/27/SD_security/"/>
      <url>/sg/2021/11/27/SD_security/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#l20-authentication">L20:authentication</a></li><li><a href="#l21">L21</a></li></ul><!-- tocstop --></div><p>We will look security problem from one single machine, network, server, multi-server.</p><blockquote><p>steps towards building a more secure system</p><ol><li>be clear about goals (policy)</li><li>be clear about assumptions (threat model)</li></ol></blockquote><h2><span id="l20-authentication">L20:authentication</span><a href="#l20-authentication" class="header-anchor">¶</a></h2><p><em>Concept</em></p><p>hash function: 一对一，从输出反推输入很难</p><hr><p>policy: provide authentication for users</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">check_password(username, inputted_password): </span><br><span class="line">    stored_password = accounts_table[username] </span><br><span class="line">    <span class="keyword">return</span> stored_password == inputted_password</span><br></pre></td></tr></table></figure><p>threat model: adversary has access to the entire stored table</p><p>Problem 1: the adversary (with access to the stored table) can just read the passwords directly.</p><p>Attempt 0: store plaintext passwords on server</p><p>Attempt 1: use hash function -&gt; store hashes of passwords on the server.</p><p>Problem 1.1 adversary can still have access to password by using the same hash function providing stored table</p><p>Attempt 2: add a random string -&gt; salt the hashes</p><h2><span id="l21">L21</span><a href="#l21" class="header-anchor">¶</a></h2>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SD communication skill</title>
      <link href="/sg/2021/11/21/SD_communication_skill/"/>
      <url>/sg/2021/11/21/SD_communication_skill/</url>
      
        <content type="html"><![CDATA[<p>genre, What-how-why</p><ul><li><p>good supplement</p></li><li><p>Consensus &amp; dissent: expert, agreement, diversity</p></li><li><p>stasis</p><ol><li>fact: who,what,when,where,how much</li><li>definition<ul><li>What kind of thing is this?</li><li>How should we use this term?</li></ul></li><li>causation<ul><li>How did this happen?</li><li>Why did this occur?</li><li>What will the effects be?</li></ul></li><li>value<ul><li>Why should we care?</li><li>How much does this matter?</li><li>How good or bad is it?</li></ul></li><li>outcome<ul><li>What should we do?</li><li>Which option or process should we choose?</li></ul></li></ol></li><li><p>Group work</p><ul><li>Organizations tend to work at three levels</li><li>shared values<ul><li>common purpose</li><li>establish and protect credibility</li></ul></li><li>Shared tasks:<ul><li>explain the day to day group actions</li><li>shaped by value and habits</li><li>Plan</li></ul></li><li>shared habits<ul><li>shared method of completing tasks</li><li>learned from experience</li><li>group rules</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SD distributed system</title>
      <link href="/sg/2021/11/20/SD_ds/"/>
      <url>/sg/2021/11/20/SD_ds/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#l14-raid-reliability-via-replication">L14:RAID:reliability via replication</a></li><li><a href="#l15-transactions-atomicity-isolation">L15:Transactions: atomicity &amp; isolation</a><ul><li><a href="#atomicity">Atomicity</a></li><li><a href="#isolation">isolation</a></li></ul></li><li><a href="#l16-logging-atomicity">L16:Logging(atomicity)</a></li><li><a href="#l17-two-phase-locking-isolation">L17:two-phase locking(isolation)</a><ul><li><a href="#serializability">Serializability</a></li><li><a href="#two-phase-locking">Two-phase locking</a></li></ul></li><li><a href="#l18-distributed-transactions-two-phase-commit-multi-site-atomicity">L18:distributed transactions: two-phase commit(multi-site atomicity)</a></li><li><a href="#l19-replication-replicated-state-machines">L19:Replication:replicated state machines</a></li></ul><!-- tocstop --></div><blockquote><p>our goal is to build reliable systems from unreliable components. we want to build systems that serve many clients, store a lot of data, perform well, all while keeping availability high.</p></blockquote><h2><span id="l14-raid-reliability-via-replication">L14:RAID:reliability via replication</span><a href="#l14-raid-reliability-via-replication" class="header-anchor">¶</a></h2><p>Question: how to build fault-tolerant/reliable systems?</p><p>The high-level process of dealing with failures is to identify the faults, detect/contain the faults, and handle the faults. in lecture, we will build a set of abstractions to make that process more manageable.</p><p>How to measure success?</p><ul><li>availability is one way to measure reliability. Reliability metrics differ from different systems.</li><li>Mean time to failure, mean time to repair, mean time between failures, availability</li></ul><p>Problem: single disk failures</p><blockquote><p>RAID is a data storage virtualization technology that combines multiple physical disk drive components into one or more logical units for the purposes of data redundancy, performance improvement, or both.</p></blockquote><p>Three effective approaches are as following:</p><ol><li>RAID 1: mirroring. Make a replica to store the same data inside.</li><li>RAID 4: make a dedicated parity disk. A xor B = C. We can induce the failed one no matter which one failed.</li><li>RAID 5:  intersperse the parity sectors amongst all N+1 disks to load balance writes.</li></ol><img src="/sg/2021/11/20/SD_ds/m.png" class title="截屏2021-11-21 上午9.29.05"><p>Review: RAID 不能解决现有的问题，因为现实中不会永远只是单个磁盘崩溃，需要更系统地处理方法。</p><h2><span id="l15-transactions-atomicity-amp-isolation">L15:Transactions: atomicity &amp; isolation</span><a href="#l15-transactions-atomicity-amp-isolation" class="header-anchor">¶</a></h2><p>problem: Possible crash in some point at thousand lines of code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">transfer (bank_file, account_a, account_b, amount): </span><br><span class="line">    bank = read_accounts(bank_file) </span><br><span class="line">    bank[account_a] = bank[account_a] - amount </span><br><span class="line">    bank[account_b] = bank[account_b] + amount </span><br><span class="line">    write_accounts(tmp_file) </span><br><span class="line">    rename(tmp_file, bank_file)</span><br></pre></td></tr></table></figure><h3><span id="atomicity">Atomicity</span><a href="#atomicity" class="header-anchor">¶</a></h3><blockquote><p><strong>What is atomicity?</strong></p><ul><li><p>an action is atomic if it happens completely or not at all. if we can guarantee atomicity, it will be much easier to reason about failures.</p></li><li><p>Understanding that this code should be atomic comes from understanding what the application is <em>doing</em>. What actions need to be atomic depends on the application.</p></li></ul></blockquote><p>分析：为了实现文件读写的原子性，我们需要保证文件的数据不能因为某行程序崩溃而丢失。</p><p>Golden rule: never modify the only copy.</p><p>Attempt 1: 只用一个文件存储账户，账户的任何操作（读写，加载，更新）都在这个文件中直接修改，当修改完成，再从内存写回到磁盘中。</p><p>Attempt 2: <strong>shadow copy</strong>：创建一个复制的文件后再对原文件进行操作（比如rename). 这里需要一步重命名文件，以使能对failures更准确地推断。（在Example中详述）</p><p>summary of shadow copy: it meets our goal. However, it perform badly. Problems include requiring copying the entire file for even small changes…</p><p><strong>Example: file crash</strong></p><p>Problem1: a crash during rename() potentially leaves bank_file in an intermediate state.</p><p>Solution 1: make rename() atomic</p><ul><li>Single-sector writes are atomic</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rename(tmp_file, orig_file): </span><br><span class="line">    tmp_inode = lookup(tmp_file)   // = <span class="number">2</span> </span><br><span class="line">    orig_inode = lookup(orig_file) // = <span class="number">1</span> </span><br><span class="line">    orig_file dirent = tmp_inode &lt;- crash!</span><br><span class="line">    remove tmp_file dirent </span><br><span class="line">    decref(orig_inode)</span><br></pre></td></tr></table></figure><p>Problem2: rename happened, but refcounts wrong</p><p>Solution2: recover the disk after a crash.</p><p>如果在recover时crash，那么继续recover</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">recover(disk): </span><br><span class="line">    <span class="keyword">for</span> inode <span class="keyword">in</span> disk.inodes: </span><br><span class="line">        inode.refcount = find_all_refs(disk.root_dir, inode) </span><br><span class="line">    <span class="keyword">if</span> exists(tmp_file): </span><br><span class="line">        unlink(tmp_file)</span><br></pre></td></tr></table></figure><h3><span id="isolation">isolation</span><a href="#isolation" class="header-anchor">¶</a></h3><blockquote><p>isolation refers to how and when the effects of one action (A1) are visible to another (A2) where A1 and A2 appear to have executed serially, even if they are actually executed in parallel.</p></blockquote><p>Problem: how to use lock?</p><p>Problem: transactions are powerful abstraction that provides atomicity and isolation. How to implement transaction?</p><p>Example:</p><p>​  T1                         T2<br>​      begin                   begin<br>​      transfer(A, B, 20)       transfer(B, C, 5)<br>​      withdraw(B, 10)         deposit(A, 5)<br>​      end                      end</p><h2><span id="l16-logging-atomicity">L16:Logging(atomicity)</span><a href="#l16-logging-atomicity" class="header-anchor">¶</a></h2><p>Problem 0: how do systems guarantee atomicity and isolation?</p><p>Basic idea: Keep a log of all changes and whether a transaction commits.</p><p>changes include:</p><ol><li>begin(allocate new transaction ID),</li><li>write(append entry to log),</li><li>read(scan log to find last committed value),</li><li>commit(write commit record),</li><li>recover(doing nothing).</li></ol><p>Problem 1: which operation in(read, write, recovery) is slowest?</p><p>Answer: Read is slowest because it must scan entire log.</p><p>Improvement 1: use cell storage(non-volatile memory) to store data. Updates go to log and cell storage, then we can read from cell storage without scanning the entire log.</p><p>Changes with improvement 1:</p><ol><li><p>how to write?</p><p>Log before install. And the record helps to recover from a crash in between the two writes. (Write-ahead logging)</p></li><li><p>how to recover?</p><p>basically, scan the log entry requiring recovering</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">read(var): </span><br><span class="line">  <span class="keyword">return</span> cell_read(var)</span><br><span class="line">write(var, value): </span><br><span class="line">  log.append(current_tid, “UPDATE”, var, </span><br><span class="line">             read(var), value) </span><br><span class="line">  cell_write(var, value)</span><br><span class="line">recover(log):   </span><br><span class="line">  commits = [] </span><br><span class="line">  <span class="keyword">for</span> record r <span class="keyword">in</span> log[<span class="built_in">len</span>(log)-<span class="number">1</span>] .. log[<span class="number">0</span>]: </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == COMMIT: </span><br><span class="line">      commits.add(r.tid) </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == UPDATE <span class="keyword">and</span> r.tid <span class="keyword">not</span> <span class="keyword">in</span> commits: </span><br><span class="line">      cell_write(r.var, r.old_val) // undo</span><br></pre></td></tr></table></figure><p>problem 2: the changes made in problem 1 cause bad performance in recovery for it needs to scan the entire log.</p><p>Improvement 2: use a cache(volatile memory).</p><p>Problem 2.1: After crash, there may be updates that didn’t make it to cell storage (were in cache but not flushed)</p><p>Improvement 2.1: We need a redo phase in addition to an undo phase in our recovery (see slide for code)</p><p>Problem 2.2: recovery takes longer and longer as the log grows</p><p>Improvement 2.2: write the <code>checkpoint</code> record and truncate the log</p><p><code>checkpoint</code> is a certain point in the process of transactions where all previous transactions are known to store in the NVM storage. Flush all cached entries, write a <code>checkpoint</code> record, then truncate the log prior to the <code>checkpoint</code> record.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">read(var): </span><br><span class="line">  <span class="keyword">if</span> var <span class="keyword">in</span> cache: </span><br><span class="line">    <span class="keyword">return</span> cache[var] </span><br><span class="line">  <span class="keyword">else</span>: </span><br><span class="line">    // may evict others <span class="keyword">from</span> cache to cell storage </span><br><span class="line">    cache[var] = cell_read(var) </span><br><span class="line">    <span class="keyword">return</span> cache[var]</span><br><span class="line">  </span><br><span class="line">write(var, value): </span><br><span class="line">  log.append(current_tid, update, var, </span><br><span class="line">             read(var), value) </span><br><span class="line">  cache[var] = value</span><br><span class="line">  </span><br><span class="line">flush(): // called “occasionally” </span><br><span class="line">  cell_write(var, cache[var]) <span class="keyword">for</span> each var</span><br><span class="line">  </span><br><span class="line">recover(log):   </span><br><span class="line">  commits = &#123;&#125; </span><br><span class="line">  <span class="keyword">for</span> record r <span class="keyword">in</span> log[<span class="built_in">len</span>(log)-<span class="number">1</span>] .. log[<span class="number">0</span>]: </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == commit: </span><br><span class="line">      commits.add(r.tid) </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == update <span class="keyword">and</span> r.tid <span class="keyword">not</span> <span class="keyword">in</span> commits: </span><br><span class="line">      cell_write(r.var, r.old_val) // undo  </span><br><span class="line">  <span class="keyword">for</span> record r <span class="keyword">in</span> log[<span class="number">0</span>] .. log[<span class="built_in">len</span>(log)-<span class="number">1</span>]: </span><br><span class="line">    <span class="keyword">if</span> r.<span class="built_in">type</span> == UPDATE <span class="keyword">and</span> r.tid <span class="keyword">in</span> commits: </span><br><span class="line">      cell_write(r.var, r.new_value) // redo, improvement <span class="number">2.1</span></span><br></pre></td></tr></table></figure><p>real problem: one single failure in high-scalability system can cause problems as well. like bank system, hospital system…</p><h2><span id="l17-two-phase-locking-isolation">L17:two-phase locking(isolation)</span><a href="#l17-two-phase-locking-isolation" class="header-anchor">¶</a></h2><p>Problem: We have multiple transactions – T1, T2, …, TN – all of which must be atomic, and all of which can have multiple steps.  We want to schedule the steps of these transactions so that it appears as if they ran sequentially.</p><p>Solution: we need a fine-grained locking. our goal (in lecture) is to run transactions concurrently, but to produce a schedule that is conflict serializable</p><h3><span id="serializability">Serializability</span><a href="#serializability" class="header-anchor">¶</a></h3><p>what type of serializability you want depends on what your application needs/what state do we need/want?</p><p>different type of serializability: <strong>conflict serializability</strong></p><ul><li><p>Conflicts: two operations conflict if they operate on the same object and at least one of them is a write.</p></li><li><p>a schedule is <strong>conflict serializable</strong> if the order of all of its conflicts is the same as the order of the conflicts in some sequential schedule.</p></li></ul><p>Problem: how do we generate conflict-serializable schedules?</p><h3><span id="two-phase-locking">Two-phase locking</span><a href="#two-phase-locking" class="header-anchor">¶</a></h3><ol><li>each shared variable has a lock</li><li>before <strong>any</strong> operation on a variable, the transaction must acquire the corresponding lock</li><li><em>multiple transactions can hold reader locks for the same variable at once; a transaction can only hold a writer lock for a variable if there are no other locks held for that variable.</em>(improvement 1)</li><li><em>after a transaction releases a lock, it may <strong>not</strong> acquire any other locks</em>(improvement 0)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">T1 </span><br><span class="line">begin acquire(x.lock) </span><br><span class="line">T1<span class="number">.1</span> read(x) </span><br><span class="line">acquire(y.lock) </span><br><span class="line">T1<span class="number">.2</span> tmp = read(y) </span><br><span class="line">T1<span class="number">.3</span> write(y, tmp+<span class="number">10</span>) </span><br><span class="line">commit release(x.lock) </span><br><span class="line">release(y.lock)</span><br><span class="line"></span><br><span class="line">T2 </span><br><span class="line">begin acquire(x.lock) </span><br><span class="line">T2<span class="number">.1</span> write(x, <span class="number">20</span>) </span><br><span class="line">acquire(y.lock) </span><br><span class="line">T2<span class="number">.2</span> write(y, <span class="number">30</span>) </span><br><span class="line">commit release(x.lock) </span><br><span class="line">release(y.lock)</span><br></pre></td></tr></table></figure><p>Lemma:2PL (without improvement version) produces a conflict-serializable schedule.</p><p>Proof: prove by contradiction. If 2PL is not conflict serializable, then a cycle exists in the conflict graph. There are T1, T2, … Tk transactions in the graph. To cause conflicts, each pair of confict graph must share a lock as T1 and T2 shares lock x1, (T2, T3, x2), (Tk, T1, xk). To process in the graph, x1 must be released by T1 before T2 can acquire it which contradicts #4 in 2PL.</p><p>problem 1: dead lock</p><p>Better solution than global ordering on locks is to take advantage of atomicity and abort one of the transactions.</p><p>performance improvement(improvement 1): reader-writer locks</p><ul><li>Rules: many readers, one writer.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">T1 </span><br><span class="line">begin acquire(x.reader_lock) </span><br><span class="line">T1<span class="number">.1</span> read(x) </span><br><span class="line">acquire(y.reader_lock) </span><br><span class="line">T1<span class="number">.2</span> tmp = read(y) </span><br><span class="line">acquire(y.writer_lock) </span><br><span class="line">T1<span class="number">.3</span> write(y, tmp+<span class="number">10</span>) </span><br><span class="line">commit release(x.reader_lock) </span><br><span class="line">release(y.reader_lock) </span><br><span class="line">release(y.writer_lock)</span><br><span class="line"></span><br><span class="line">T2 </span><br><span class="line">begin acquire(x.writer_lock) </span><br><span class="line">T2<span class="number">.1</span> write(x, <span class="number">20</span>) </span><br><span class="line">acquire(y.writer_lock) </span><br><span class="line">T2<span class="number">.2</span> write(y, <span class="number">30</span>) </span><br><span class="line">commit release(x.writer_lock) </span><br><span class="line">release(y.writer_lock)</span><br></pre></td></tr></table></figure><p>improvement 2: give up conflict serializable in view serializable cases</p><p>why not view serializable?</p><ul><li><p>view serializablity is the intermediate reads and final state (writes) are the same as in some sequential schedule.</p></li><li><p>test reason: hard to detect view serializable cases. While checking whether a graph is acyclic is fast.</p></li><li><p>aside: how to check a graph is acyclic? dfs, O(|V| + |E|)</p></li></ul><h2><span id="l18-distributed-transactions-two-phase-commit-multi-site-atomicity">L18:distributed transactions: two-phase commit(multi-site atomicity)</span><a href="#l18-distributed-transactions-two-phase-commit-multi-site-atomicity" class="header-anchor">¶</a></h2><p>Scenario: Client + coordinator + two servers: one with accounts A-M, the other with accounts N-Z.</p><ul><li><img src="/sg/2021/11/20/SD_ds/6.png" class title="截屏2021-12-07 下午5.26.21"></li></ul><p>Goal: develop a protocol that can provide multi-site atomicity in the face of all sorts of failures(every part of the system can fail)</p><p>Problem: one server committed, the other did not</p><p>Approach: two-phase commit, nodes agree that they’re ready to commit before committing</p><p>more specifically,</p><blockquote><ol><li>Coordinator sends tasks to servers (workers)</li><li>Once all tasks are done, coordinator sends prepare messages to workers.</li><li>Once all workers are confirmed to be prepared, coordinator will tell them to commit, and tell client that the transaction has committed.</li></ol></blockquote><ul><li><img src="/sg/2021/11/20/SD_ds/7.png" class title="截屏2021-12-07 下午5.33.40"></li></ul><p>Understanding the process is possible to infer the stage where the failure occurred and solve it.</p><p>basic idea: it’s ok to abort the process before the <code>commit point</code>. Otherwise, it cannot abort, and it needs recovery approach.</p><p><u>question</u>: how things work?</p><ul><li><p>Worker: worker prepared, worker acknowledged</p></li><li><p>Coordinator</p><ul><li>if heared all workers prepared, it writes COMMIT to its own log,(<code>commit point</code>)</li><li>if heard all workers committed, it writes DONE to its own log.(transaction is totally done at that point)</li></ul></li></ul><p>approach applies in different types of <u>failures</u>:</p><ol><li>Worker/Network Failures Prior to the Commit Point<ul><li>Lost prepared message</li><li>lost ACK for prepare</li><li>Worker failure before prepare</li></ul></li><li>Worker Failures After the Commit Point<ul><li>Before receiving commit</li><li>After commit received</li></ul></li><li>Coordinator Failures<ul><li>Before prepare</li><li>After commit point, before DONE</li><li>After writing DONE</li></ul></li></ol><p><u>performance issues</u>:</p><p><u>Problem -1</u>: when sys fails, some data becomes unavailable.</p><p>Solution: replication.</p><p>approach: single-copy consistency</p><p>Problem -1.1: we need to keep multiple copies of the same pieces of data consistent, and we need to decide what type of consistency we want in different scenarios.</p><h2><span id="l19-replication-replicated-state-machines">L19:Replication:replicated state machines</span><a href="#l19-replication-replicated-state-machines" class="header-anchor">¶</a></h2><p>goal:solve problem -1.1 of L18</p><p>Attempt 1: replicate data on two servers</p><img src="/sg/2021/11/20/SD_ds/8.png" class title="截屏2021-12-07 下午6.20.50"><p>Problem 1: messages can arrive at replicas in different orders resulting in inconsistent state.</p><img src="/sg/2021/11/20/SD_ds/9.png" class title="截屏2021-12-07 下午6.24.06"><p>Attempt 2: make one replica the primary replica, and have a coordinator in place to help manage failures</p><img src="/sg/2021/11/20/SD_ds/0.png" class title="截屏2021-12-07 下午6.28.17"><p>Problem 2: network partition splits the communication in half</p><img src="/sg/2021/11/20/SD_ds/1.png" class title="截屏2021-12-07 下午6.28.31"><p>Attempt 3: use a view server to determine which replica is primary, in hopes that we can deal with network partitions</p><img src="/sg/2021/11/20/SD_ds/2.png" class title="截屏2021-12-07 下午6.30.02"><p>problem 3.1: network partition prevents S1 from communicating with VS</p><img src="/sg/2021/11/20/SD_ds/3.png" class title="截屏2021-12-07 下午6.31.01"><p>problem 4: VS fails. It can be a bottleneck of the system.</p><p>Solution: Distribute the view server and achive agreement from them. View sever 1 through n, each manages a partition of replica sets.</p><ul><li>machanisms for distributed consensus<ul><li>Raft</li><li>Paxos</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SD network</title>
      <link href="/sg/2021/11/17/SD_network/"/>
      <url>/sg/2021/11/17/SD_network/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#introduction">introduction</a><ul><li><a href="#history-view">history view</a></li></ul></li><li><a href="#routing-hard-to-scale-version">Routing(hard to scale version)</a></li><li><a href="#routing-at-scale-bgp">Routing at scale:BGP</a></li><li><a href="#tcp">TCP</a></li><li><a href="#in-network-resource-management">In-network resource management</a><ul><li><a href="#a1-queue-management">A1:Queue management</a></li><li><a href="#a2-delay-based-scheduling">A2:Delay-based scheduling</a></li><li><a href="#a3-bandwidth-based-scheduling">A3:Bandwidth-based scheduling</a></li><li><a href="#discussion">Discussion</a></li></ul></li></ul><!-- tocstop --></div><p>目标：对计算机网络的网络层到应用层有最基本的了解。包括TCP和UDP、IP和应用层分别提供了什么保证，没有提供什么保证；我们能通过他们达到什么目的；我们如何使用他们。</p><blockquote><p>general goal: on the Internet, we have to solve all of the “normal” networking problems (addressing, routing, transport) at massive scale, while supporting a diverse group of applications and competing economic interests.</p></blockquote><h2><span id="introduction">introduction</span><a href="#introduction" class="header-anchor">¶</a></h2><p>link -&gt; network -&gt; transport -&gt; application</p><ul><li><p>a simple network example</p><ul><li>topology<ul><li><img src="/sg/2021/11/17/SD_network/Screenshot-1141820.png" class title="Screenshot-1141820"></li></ul></li></ul></li><li><p><a href="https://www.caida.org/projects/as-core/2020/">CAIDA’s IPv4 and IPv6 AS Core</a>: Visualizing IPv4 and IPv6 Internet Topology at a Macroscopic Scale in 2020</p></li></ul><h3><span id="history-view">history view</span><a href="#history-view" class="header-anchor">¶</a></h3><img src="/sg/2021/11/17/SD_network/sc.png" class title="截屏2021-11-17 下午3.37.43"><ol><li><p>make the internet flexible: layered model in 1978</p><blockquote><p>with a layered model, we can swap out protocols at one layer without much (or perhaps any) change to protocols at other layers.</p></blockquote></li><li><p>reliable transport: TCP 1983</p></li><li><p>scalibility: EGP (1978), DNS (1982)</p></li></ol><p>Problems (history view):</p><ol><li><p>Congestion collapse -&gt; congestion control mechanism</p></li><li><p>Commercial use -&gt; policy routing(BGP) (early 90s)</p></li><li><p>Assign addresses in chunks of different sizes -&gt; CIDR</p></li></ol><p>Problems (today):</p><ol><li>Denial of service attack</li><li>security</li><li>mobility</li><li>address space depletion: IPv4 -&gt; IPv6</li><li>congestion control</li></ol><h2><span id="routing-hard-to-scale-version">Routing(hard to scale version)</span><a href="#routing-hard-to-scale-version" class="header-anchor">¶</a></h2><p>Problems: For every node X, after the routing protocol is run, X’s routing table should contain a <em>minimum-cost route</em> to every other reachable node.</p><p>Concept:</p><ul><li><p>Path: full path packets will travel.</p></li><li><p>Route: first hop of that path.</p></li><li><p>Link cost</p></li></ul><p><u>distributed routing protocol</u>: nodes build up their own routing tables, rather than having tables given to them by a centralized authority.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> Nodes:</span><br><span class="line">Hello(Neighbors);</span><br><span class="line">advertisements();</span><br><span class="line">count(minimum_cost_routes);</span><br></pre></td></tr></table></figure><p>Analysis:</p><p>there are two ways of routing applying distributed routing protocols:</p><ol><li><p>Link-state routing: disseminate full topology information so that nodes can run a shortest-path algorithm (Dijkstra)</p></li><li><p>Distance-vector routing: disseminate information about the current costs to each node, rather than the actual topology. A node applies Bellman-Ford algorithm to compute the next-hop node for every destination.</p><ul><li><img src="/sg/2021/11/17/SD_network/sc1.png" class title="截屏2021-11-17 下午4.19.25"></li></ul></li></ol><p>Flooding makes link-state robust to failure but the overhead of flooding is overwhelming, close to 2NL advertisements for N nodes, L links.</p><p>The good thing of distance-vector routing is the overhead of advertisements cost 2L. However, distance-vector routing incurs issues of couting to infinity when a node has no route to destination B. Some nodes can incorrectly think there’s a route when there isn’t one. A workaround is split horizon, which doesn’t send advertisements about a route back to the node providing the route.</p><p>Summary: they are good for very small networks but not good enough for scaling to the size of the internet.</p><h2><span id="routing-at-scale-bgp">Routing at scale:BGP</span><a href="#routing-at-scale-bgp" class="header-anchor">¶</a></h2><p><em>Concept</em></p><p>BGP: border gateway protocol</p><p>policy routing: switches make routing decisions based on some set of policies set by a human.  Routing protocol must disseminate enough information to enable those policies.</p><ul><li><img src="/sg/2021/11/17/SD_network/sc2.png" class title="截屏2021-11-21 下午12.18.49"></li></ul><p>Problem: why BGP can scale while link state and distance vector can’t?</p><p>BGP relationships: customer/provider, peers</p><p>Export policies</p><p>Import policies</p><p>Distributed routing</p><p>Problems with BGP</p><ul><li>Scale</li><li>Secure</li></ul><h2><span id="tcp">TCP</span><a href="#tcp" class="header-anchor">¶</a></h2><p><em>Concept</em>: reliable transport&amp;congestion control</p><p>arguments: Sequence numbers, acknowledgements,timeouts</p><p><u>Problem 0</u>: create a reliable transport protocol, which delivers each byte of data <strong>exactly once, in-order</strong>, to the receiving application.</p><p>Goal: fairness and efficiency.</p><ul><li>Approach 1: sliding-window protocol<ul><li><img src="/sg/2021/11/17/SD_network/sc3.png" class title="截屏2021-12-05 下午6.33.00"></li></ul></li></ul><p><u>problem 1</u>: how to decide W? (Drops,delay, bandwidth bottleneck)</p><p><em>assumption</em>: infinite offered load</p><p><u>Improvement 1</u>: congestion control</p><p>AIMD (additive-increase/multiplicative-decrease): every RTT(round-trip-time, if there is no loss, W = W + 1; else, W = W/2</p><ul><li><p>Issue 1: when remove the assumption, TCP has trouble measuring the fairness.</p></li><li><p>Example: S1,S2 offered load 10 packets/s; S3 5 packets/s.</p><p>Result: get max-min fairness:S3 stops increase once it’s sending 5 packets/s. S1 and S2 continue increasing until they reach 7-8 packets/s.</p></li></ul><p><u>improvement 2</u>: Slow-start: at the start of the connection, double W every RTT.</p><p><u>improvement 3</u>: Fast retransmit/fast recovery: retransmit packet k+1 as soon as four ACKs with sequence number k are received.</p><ul><li>issue 2: TCP doesn’t react to congestion until it’s already happening.  -&gt; next lecture</li></ul><h2><span id="in-network-resource-management">In-network resource management</span><a href="#in-network-resource-management" class="header-anchor">¶</a></h2><p>TCP have issues that:</p><p>problem 1: long delays when routers have too much buffering</p><p>problem 2: Doesn’t work well in some scenarios (DCTCP)</p><p>Problem 3: doesn’t react to congestion until queues are full.</p><p>Goal: solve problem 3: transient queues.</p><p>Idea: manipulate switches to get flexibility.</p><p>consideration: we need to think about what the method allows a switch to do? Example protocols? How the protocol works? Pros/cons of each protocol.</p><h3><span id="a1-queue-management">A1:Queue management</span><a href="#a1-queue-management" class="header-anchor">¶</a></h3><ol><li><p>drop tail</p></li><li><p>Random early detection</p></li><li><p>explicit congestion notification</p></li></ol><h3><span id="a2-delay-based-scheduling">A2:Delay-based scheduling</span><a href="#a2-delay-based-scheduling" class="header-anchor">¶</a></h3><ol><li>priority queueing</li></ol><h3><span id="a3-bandwidth-based-scheduling">A3:Bandwidth-based scheduling</span><a href="#a3-bandwidth-based-scheduling" class="header-anchor">¶</a></h3><ol><li>Round-robin</li><li>weighted round-robin</li><li>deficit round-robin</li></ol><h3><span id="discussion">Discussion</span><a href="#discussion" class="header-anchor">¶</a></h3><p>let’s think about three ideas in lecture:</p><ol><li><p>Traffic differentiation</p></li><li><p>Queue-management</p></li><li><p>In-network resource-management</p><img src="/sg/2021/11/17/SD_network/sc4.png" class title="截屏2021-12-05 下午6.48.52"></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.046 randomization</title>
      <link href="/sg/2021/11/15/6.046-randomization/"/>
      <url>/sg/2021/11/15/6.046-randomization/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#randomization">Randomization</a><ul><li><a href="#matrix-multiply">Matrix multiply</a></li><li><a href="#quicksort">quicksort</a></li><li><a href="#r4-randomized-median">R4: Randomized median</a></li><li><a href="#skip-lists">skip lists</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="randomization">Randomization</span><a href="#randomization" class="header-anchor">¶</a></h2><p>随机算法有很多种，比较有趣的三类是：</p><ol><li>Probably correct(determined fast) : <a href="https://en.wikipedia.org/wiki/Monte_Carlo_algorithm">Monte Carlo algorithm</a></li><li>Probably fast(determined correct): <a href="https://en.wikipedia.org/wiki/Las_Vegas_algorithm">Las Vegas algorithm</a></li><li>not guaranteed to be fast or correct: <a href="https://en.wikipedia.org/wiki/Atlantic_City_algorithm">Atlantic City algorithms</a></li></ol><h3><span id="matrix-multiply">Matrix multiply</span><a href="#matrix-multiply" class="header-anchor">¶</a></h3><p>problem: Matrix product checker</p><p>Given  n × n  matrices  A, B, C,  the  goal  is to  check  if A × B  = C  or not.<br>Question:  a such matrix multiplication would take O(n**3) time. We want a checker algorithm to take less time than that, or else the checker doesn’t make sense.</p><p>We  will  see an  O(n**2)  algorithm  that:</p><ul><li>if A × B = C, then  Pr[output=YES] = 1.</li><li>if A × B = C, then  Pr[output=YES] ≤ 1/2</li></ul><p><u>Frievald’s algorithm</u>: Choose a random binary vector r[1…n] such that Pr[ri  = 1] = 1 /2 independently for  r = 1 , …, n.  The algorithm  will output  ’YES’  if A(Br) =   Cr and  ’NO’ otherwise.</p><p><u>Analysis of correctness if AB != C</u></p><p>Claim:  If  AB != C, then  Pr[ABr != Cr] ≥ 1/2.</p><p><u>want to show</u>: ABr != Cr =&gt; Dr != 0 where D=AB-C. The goal is to show that there are many r such that Dr != 0.(many &gt;= 1/2)</p><p><em>Proof</em>:</p><ol><li><p>Dr != 0 case, we would output ‘No’, done</p></li><li><p>Dr = 0 case(specifically, it means that find r’ s.t. Dr’ != 0)</p><p>Set a binary vector v is 0 in all coordinates except for v_j = 1: (Dv)_i = d_ij !=0 implies Dv != 0</p><p>Take any r where Dr = 0, set r’ = r + v.</p><ul><li>Dr’ = D(r + v) = 0 + Dv != 0</li><li>r to r’ is 1 to 1</li></ul><p>Therefore # r’ for which Dr’ != 0 &gt;= # r for which Dr=0</p></li></ol><p>we can conclude that Pr[ABr != Cr] ≥ 1/2.</p><h3><span id="quicksort">quicksort</span><a href="#quicksort" class="header-anchor">¶</a></h3><p>Quick sort is in-place sort, which need not require auxiliary space as merge sort. Divide and conquer algorithm doesn’t work well in the combine step.</p><p>We can use median finding in pivot selection. It takes theta(n*logn) time. However, it is slow in practice and loses to merge sort.</p><p>randomized quicksort comes to solution.</p><p>“paranoid” quicksort analysis and expected runtime analysis</p><h3><span id="r4-randomized-median">R4: Randomized median</span><a href="#r4-randomized-median" class="header-anchor">¶</a></h3><p>Quick find, quick sort</p><p>expected runtime, amoritized runtime are just fancier way saying average runtime.</p><h3><span id="skip-lists">skip lists</span><a href="#skip-lists" class="header-anchor">¶</a></h3><p>With high probability bound</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SD os</title>
      <link href="/sg/2021/11/15/SD_os/"/>
      <url>/sg/2021/11/15/SD_os/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#concurrency">concurrency</a></li><li><a href="#virtual-machines">virtual machines</a></li></ul><!-- tocstop --></div><h2><span id="concurrency">concurrency</span><a href="#concurrency" class="header-anchor">¶</a></h2><p>problem: how to handle concurrency problem using yield? And the problems encountered.(from lecture 5)</p><p>yield(): suspends the running thread, chooses a new thread to run, and resumes the new thread</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">yield</span>(): </span><br><span class="line">  acquire(t_lock) </span><br><span class="line">  // Suspend the running thread </span><br><span class="line">  <span class="built_in">id</span> = cpus[CPU].thread </span><br><span class="line">  threads[<span class="built_in">id</span>].state = RUNNABLE </span><br><span class="line">  threads[<span class="built_in">id</span>].sp = SP </span><br><span class="line">  threads[<span class="built_in">id</span>].ptr = PTR </span><br><span class="line">  // Choose a new thread to run </span><br><span class="line">  do: </span><br><span class="line">    <span class="built_in">id</span> = (<span class="built_in">id</span> + <span class="number">1</span>) mod N </span><br><span class="line">  <span class="keyword">while</span> threads[<span class="built_in">id</span>].state != RUNNABLE </span><br><span class="line">  // Resume the new thread </span><br><span class="line">  SP = threads[<span class="built_in">id</span>].sp </span><br><span class="line">  PTR = threads[<span class="built_in">id</span>].ptr </span><br><span class="line">  threads[<span class="built_in">id</span>].state = RUNNING </span><br><span class="line">  cpus[CPU].thread = <span class="built_in">id</span> </span><br><span class="line">    </span><br><span class="line">  release(t_lock)</span><br></pre></td></tr></table></figure><h2><span id="virtual-machines">virtual machines</span><a href="#virtual-machines" class="header-anchor">¶</a></h2><p>Scenario: running multiple Ones on a single physical machine.</p><p>problem: how to safely share physical hardware?</p><img src="/sg/2021/11/15/SD_os/sc.png" class title="截屏2021-11-15 下午10.12.27">]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to read a paper?</title>
      <link href="/sg/2021/11/15/paper/"/>
      <url>/sg/2021/11/15/paper/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#zen-me-du-lun-wen">怎么读论文</a><ul><li><a href="#third-pass">third pass</a></li></ul></li><li><a href="#du-shi-me-lun-wen">读什么论文</a></li><li><a href="#review">review</a></li></ul><!-- tocstop --></div><h2><span id="zen-me-du-lun-wen">怎么读论文</span><a href="#zen-me-du-lun-wen" class="header-anchor">¶</a></h2><h3><span id="third-pass">third pass</span><a href="#third-pass" class="header-anchor">¶</a></h3><p>Goals:</p><ol><li>general idea</li><li>Content, not details(such as proofs)</li><li>Read in depth</li></ol><h4><span id="first-pass">first pass</span><a href="#first-pass" class="header-anchor">¶</a></h4><p>5~10 min, 决定是否继续读</p><ul><li>步骤：</li></ul><ol><li>读标题，摘要，介绍</li><li>读部分和小部分的标题，略去其他</li><li>读结论</li><li>瞥一眼引用，去掉读过的</li></ol><ul><li>回答问题：5C</li></ul><ol><li><p>Category: What type of paper is this? A measurement paper? An analysis of an existing system? A description of a research prototype?</p></li><li><p>Context: Which other papers is it related to? Which theoretical bases were used to analyze the</p><p>problem?</p></li><li><p>Correctness: Do the assumptions appear to be valid?</p></li><li><p>Contributions: What are the paper’s main contributions?</p></li><li><p>Clarity: Is the paper well written?</p></li></ol><ul><li>适用类型：可能相关，不在研究氛围内</li></ul><h4><span id="second-pass">Second pass</span><a href="#second-pass" class="header-anchor">¶</a></h4><p>1h</p><ul><li>步骤</li></ul><ol><li>Look carefully at the figures, diagrams and other illustrations in the paper. Pay special attention to graphs.<ol><li>Are the axes properly labeled?</li><li>Are results shown with error bars, so that conclusions are statistically significant?</li></ol></li><li>Remember to mark relevant unread references for further reading (this is a good way to learn more about the background of the paper).</li></ol><ul><li>回答：summarize the main thrust of the paper, with supporting evidence, to someone else</li><li>适用类型：感兴趣的，但不在研究范围之内</li><li>当仍旧看不懂这篇论文在讲啥：延后再读</li></ul><h4><span id="third-pass">third pass</span><a href="#third-pass" class="header-anchor">¶</a></h4><p>4-5 hours, virtually re-implement the paper</p><ul><li>making the same assumptions as the authors: identify and challenge every assumption in every statement</li><li>recreate the work: think about how you yourself would present a particular idea.</li><li>By comparing this re-creation with the actual paper, you can easily identify not only a paper’s innovations, but also its hidden failings and assumptions.</li></ul><h2><span id="du-shi-me-lun-wen">读什么论文</span><a href="#du-shi-me-lun-wen" class="header-anchor">¶</a></h2><p>暂时跟着课表走就好了。都要记下对之后可能有用的点（积累</p><h2><span id="review">review</span><a href="#review" class="header-anchor">¶</a></h2><p>我个人的一个小建议是，看的时候，自己心里也想一想，如果是我来做，我会怎么做？如果我来讲这篇paper，我要怎么样才能给别人讲懂</p><p>关于paper review：</p><ol><li><p>review是什么？所有会议paper，在投稿之后，怎么判断中还是不中呢？这个流程叫同行评审，是找几个同行专家对你的paper进行review，了解你paper的内容，判断你paper的优缺点，决定是接收还是录取。</p></li><li><p>review的主要内容：paper的内容与优缺点。一般是大约半页到一页A4纸的篇幅。</p></li><li><p>review的目的：这个过程会需要你去 主动地思考paper的内容与价值，批判性地学习与吸收，这样的效果很多时候比 被动地接受 要更好一些。</p></li><li><p>如何判断paper的价值？这也是在review的时候你们要问自己的问题。我这里给一些参考建议</p><p>解决的问题是什么？重要嘛？<br>效果怎么样？显著嘛？<br>表述怎么样，清晰嘛？<br>逻辑合理嘛？<br>技术是否有问题？<br>影响力有多大？<br>是否够详细，能根据它复现出来嘛？<br>核心的思想是什么，有道理嘛？<br>实验是否完整，是否合理公平？</p></li></ol><p>注：方法部分来自How to Read a Paper；review部分来自胡 Sir(胡津铭)的分享和建议。</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> skill </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>recitation os</title>
      <link href="/sg/2021/11/15/recitation_os/"/>
      <url>/sg/2021/11/15/recitation_os/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#reading-we-did-nothing-wrong">Reading: We did nothing wrong</a></li><li><a href="#r-dns">R: DNS</a></li><li><a href="#paper-unix">Paper: UNIX</a></li></ul><!-- tocstop --></div><h3><span id="reading-we-did-nothing-wrong">Reading: We did nothing wrong</span><a href="#reading-we-did-nothing-wrong" class="header-anchor">¶</a></h3><p>主要讲了个软件出错然后辐射量增大导致病人死亡或得癌症的事件。本来FDA不管软件的事，但造成伤亡后开始进行监管。质检机制只能减少这种情况，很难消除。然后讲了措施避免这样的问题，其中一条就是提高从业人员的专业门槛。我个人的看法是提高专业门槛是有必要的，但是这门槛不能简单用标化成绩或者学位证来衡量。</p><p>注：之前卡在这儿的原因是，十页以上的英文阅读真不知道如何读起？😭现在知道咋读了。</p><h3><span id="r-dns">R: DNS</span><a href="#r-dns" class="header-anchor">¶</a></h3><p>The internet domain name system is designed for the communication between client and server. The primary purpose of DNS is to associate domain names to internet addresses.</p><p>DNS的设计主要从三个部分看：</p><ul><li><p>name resolution</p><p><strong>Design of structures</strong></p><p>it can be designed in three ways:Telephone book model, the central directory service model and the distributed directory service model.</p><p>Telephone book model gives one big file to every machine. The volume of <u>network traffic</u> required to keep it up to date would grow with the cube of the number of domain names.</p><p>Central view is one powerful machine with one big table.That machine is hit with a ton of requests, which leads to a trade-off between a performance bottleneck and a potential source of massive failure.</p><p>Distributed view provides delegation and respond to increases in scale while maintaining reliability and performance.</p><p><strong>Operations</strong></p><ol><li>Name client makes a request. Its DNS_RESOLVE sends that domain name to a root name server</li><li>recursive part:The root name server matches the name in the request with the subset of domain names it knows about,starting with the most significant component of the requested domain name. If matching, respond with both domain names and internet addresses.</li><li>DNS_RESOLVE receives the response and resends the same name resolution request to what the response is.</li><li>Repeat operations above until DNS_RESOLVE finally reaches the the name server we wants.</li></ol><p><strong>Details</strong></p><ol><li><p>cache in name server and recursive names query</p><p>A server that provides <u>recursive name</u> service thus collects records that can greatly <u>speed up</u> future name resolution requests.</p><p>Fact: cache uses expiration instead of explicit invalidation of changed entries.</p><blockquote><p>A DNS cache manager is expected to discard entries that have passed their expiration period.</p></blockquote><p>由于name server发出的请求总是会在recursive name的范围中，那么请求次数较多的网址在缓存中保存的期限就会更长。从而增加了hit ratio。</p></li></ol></li><li><p>hierarchical name management</p><ul><li>Benefits: decentralization-&gt;distributing responsibility and Independent naming authorities(path name different).</li><li>Drawbacks?</li></ul></li><li><p>name discovery</p><ol><li>How this address gets into the configuration table?</li><li>Domain names</li><li>the extension that is used for unqualified domain names.</li></ol></li><li><p>Other features</p><p>Problem1: 如果总服务器着火了，那么连接就断了，那该怎么上网？</p><p>Problem2: 如果我想要去的地址改变了地址，那我还怎么找到它？</p><ul><li>备份: replica of servers and network services to increase fault-tolerance<ul><li>Fact: the importance of separated attachment increases at higher levels of the naming hierarchy.</li></ul></li><li>Robust design of DNS<ul><li>DNS server’s public interface is idempotent</li><li>DNS server’s job is simple: accept a request packet, search a table, and send a response packet.</li></ul></li><li>重定向<ul><li>Maintenance: the names of services can be expected to outlive their bindings to particular Internet addresses, and synonyms cater to this difference in lifetimes.</li><li>allow a single computer to appear to be in two widely different naming domains</li></ul></li></ul></li><li><p>trustworthiness of dns response: authentication and accuracy</p></li></ul><h3><span id="paper-unix">Paper: UNIX</span><a href="#paper-unix" class="header-anchor">¶</a></h3><p>历史：UNIX是一个很棒的操作系统，现代的许多os都是从unix出发，它的历史可以追溯到70年代，贝尔实验室的研究员为了摆脱现有的糟糕的可用计算机设施而研制出的，之后再逐渐添加了新的功能。它并不是从一开始就从设计上决定的，但为了适合研究员编程的需要而逐渐添加的功能使它最后成为了虽然小但是功能强大的操作系统。</p><h4><span id="basic-structures">basic structures</span><a href="#basic-structures" class="header-anchor">¶</a></h4><p>UNIX 的设计可以分为四部分：</p><ol><li><p>file system</p><ul><li><p>Naming in file system applies layering and hierarchy like that in DNS.</p></li><li><p>The file can be divided into: ordinary files, directories, special files.</p></li><li><p>operations on files</p><ul><li>create</li><li>open</li><li>write</li><li>read</li><li>delete</li></ul></li><li><p>Implementations:</p><ul><li>When the file is accessed, the i-number is used as an index into a system table(the i-list) stored somewhere.</li><li>The entry thereby found is file’s i-node.</li></ul></li></ul></li><li><p>process</p><ul><li>Create a new process</li><li>Pipes: communication between processes using the read and write calls</li><li>execute</li><li>Process synchronization: wait()</li><li>Terminate a process</li></ul></li><li><p>shell</p><ul><li>Standard I/O</li><li>filters</li><li>Command separators to perform multitasking</li><li>Command files</li><li>Implementations</li></ul></li><li><p>Traps</p><ul><li>illegal action</li><li>Unwanted command</li><li>Quit</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 6.033 system design </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.046 amortization</title>
      <link href="/sg/2021/11/13/6.046_amortization/"/>
      <url>/sg/2021/11/13/6.046_amortization/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#amortized-analysis-techniques">amortized analysis techniques</a></li><li><a href="#union-find">union-find</a></li></ul><!-- tocstop --></div><p>We have already known amortization in array resizing and hashing with chaining.</p><p><u>Amortized bound</u>: sum(amortized cost) &gt;= sum(actual cost)</p><p>Ex: 2-3 tree, O(1) amortized cost per create, O(lg n*) amortized cost per insert, and 0 amortized cost per delete.</p><ul><li>n* is the maximum size of 2-3 tree.</li><li>0 amortized cost per delete: can’t delete without inserting first.</li></ul><h2><span id="amortized-analysis-techniques">amortized analysis techniques</span><a href="#amortized-analysis-techniques" class="header-anchor">¶</a></h2><ol><li><p>aggregate method</p><p>amortized cost per operation = total cost of k operations / k</p></li><li><p>accounting method</p><p>for each operation:</p><p>​Store credit: amortized cost &gt; actual cost</p><p>​pay for it: amortized cost &lt; actual cost</p><p>Example</p><ul><li><p>table doubling</p></li><li><p>2-3 tree</p></li></ul></li><li><p>charging method</p><p>amortized cost of an operation = actual cost of this operation - total cost charged to past operations + total cost charged by future operations</p><p>Example</p><ul><li>table doubling and halving</li><li>Free deletion in 2-3 trees</li></ul></li><li><p>potential method</p><p>Example:</p><ul><li>binary counter</li><li>insert in 2-3 tree</li><li>Insert and delete in 2-5 tree</li></ul></li></ol><h2><span id="union-find">union-find</span><a href="#union-find" class="header-anchor">¶</a></h2><p>Problem: how can a simple doubly linked list improve to support fast search and fast union? how this method is different from what is in cs61b disjoint set course?</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5 synchronization</title>
      <link href="/sg/2021/11/09/6.004_synchronization/"/>
      <url>/sg/2021/11/09/6.004_synchronization/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#20-concurrency-synchronization">20 concurrency &amp; synchronization</a><ul><li><a href="#synchronous-communication-in-producer-consumer-model">Synchronous Communication in producer-consumer model</a></li></ul></li><li><a href="#21-system-level-communication">21 system-level communication</a><ul><li><a href="#communication-channel">communication channel</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="20-concurrency-amp-synchronization">20 concurrency &amp; synchronization</span><a href="#20-concurrency-amp-synchronization" class="header-anchor">¶</a></h2><p>前言：翻了一下以前看61c的笔记不禁扶额，写得什么鬼。之前的笔记感觉就是简单概念的堆砌加抄写教授讲授的东西，没有太多的思考，所以才感觉学了和没学一样。不管怎么说，既然现在在学6.004，那么就按照课程设置的标准都搞定。</p><blockquote><p>Scenerio 1: video compression algorithms represent each video frame as an array of 8-pixel by 8-pixel macroblocks.</p><p>Scenario 2: Applications like video games are naturally divided into the “front-end” user interface and “back-end” simulation and rendering engines.</p></blockquote><p>problem: What’s the advantage of using multiple processes instead of just a single process? How should the processes communicate with each other?</p><p>Data-/Event- driven applications have the need to improve the efficiency. We can divide computation among multiple threads of execution. Independent sequential threads compete for shared resource while cooperating sequential threads communicate with each other.</p><p>We can divide communication models into:</p><ol><li>shared memory</li><li>Message passing</li></ol><p>goal: synchronization and thread-safe programming</p><h3><span id="synchronous-communication-in-producer-consumer-model">Synchronous Communication in producer-consumer model</span><a href="#synchronous-communication-in-producer-consumer-model" class="header-anchor">¶</a></h3><img src="/sg/2021/11/09/6.004_synchronization/sc1.png" class title="test"><p>Producer sends char to consumer and consumer receives char.</p><ul><li><p>constraints</p><ol><li>The consumer can’t consume data before it’s produced.</li><li>The producer can’t overwrite data before it’s consumed.</li></ol></li><li><p>design a FIFO(first-in first-out) buffers: The producer can run up to N values ahead of the consumer.</p><p>Implementation: ring buffer in shared memory. Consumers control write pointer, producers control read pointer. After space is full, producer starts to write char into receiver.</p></li><li><p>design a data type for synchronization: semaphores</p><blockquote><p>Basic structure:  an integer ≥ 0<br>semaphore s = K;  // initialize s to K<br>New operations (defined on semaphores):</p><ul><li><p>wait(semaphore s)<br>wait until s &gt; 0, then s = s – 1</p></li><li><p>signal(semaphore s)<br>s = s + 1 (one waiting thread may now be able to proceed)</p></li><li><p>Semantic guarantee: A semaphore s initialized to K enforces the precedence constraint:</p><p>The ith call to signal(s) must complete before the (i+K)th call to wait(s) completes.</p></li></ul><p>Implementation:</p><ul><li>use a special instruction that performs an atomic read-modify-write</li><li>use system calls.Works in uniprocessors only, where the kernel is uninterruptible</li></ul></blockquote><ol><li>for precedence: Declare semaphore = 0 -&gt; signal(s) at start of arrow-&gt;wait(s) at end of arrow</li><li>for resource allocation: Invariant: Semaphore value = number of resources left in pool.</li></ol></li></ul><p>scenerio1:single producer + single consumer</p><p>solution: enforce precedence and avoid buffer overflow</p><img src="/sg/2021/11/09/6.004_synchronization/sc2.png" class title="testi"><p>Scenerio2: multiple producers and consumers</p><p>Problem: producers interfere with each other.</p><p>disign: set constraint(mutual exclusion) to critical sections. Only one thread can execute critical sections at the time.</p><ul><li><p>Issue: lock granularity-&gt;How many locks do we need?</p><p>It depends. Think about the extreme sides: one lock for all accounts or one lock per account? We can choose the middle case.</p></li></ul><p>scenerio3: in the transfer scenario, account A transfer M money to account B.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> account1, <span class="type">int</span> account2, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">  <span class="comment">//int a = min(account1, account2); dead lock solution</span></span><br><span class="line"><span class="comment">//int b = max(account1, account2);</span></span><br><span class="line">wait(lock[account1]);</span><br><span class="line">wait(lock[account2]);</span><br><span class="line">balance[account1] = balance[account1] - amount;</span><br><span class="line">  balance[account2] = balance[account2] + amount;</span><br><span class="line">signal(lock[account2]);</span><br><span class="line">signal(lock[account1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Downside: dead lock: no thread can make progress because all the process are locked.</p><ul><li><p>Example: dining philosophers</p><p>问题来源于他们几个人几个筷子，而吃饭的顺序是先拿左边的筷子，当每个人都拿了这只筷子后等待右边有没被拿的筷子，而这种情况无法发生，所有就一直等待，陷入僵局。</p><p>解决这个问题只需要改变用餐的顺序，只要能够避免筷子同时被拿的情况就行。</p><p>solution: Assign a unique number to each chopstick, request resources in a consistent order</p></li><li><p>solution: Establishing and using a global order for shared resources</p></li></ul><h2><span id="21-system-level-communication">21 system-level communication</span><a href="#21-system-level-communication" class="header-anchor">¶</a></h2><p>computer system technologies: each part has a detailed specification of the functionality and interface. We can still add things together without knowing the details of those implementations for things evolve rapidly.</p><p>Problem: what is  the appropriate interface choices for interconnecting system components?</p><h3><span id="communication-channel">communication channel</span><a href="#communication-channel" class="header-anchor">¶</a></h3><p>fact: the synchronous multi-signal channels of earlier systems -&gt; asynchronous point-to-point channels nowadays</p><p>problem 1 : how hard can it be to build a <strong>communication channel</strong>?</p>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.006 data structures</title>
      <link href="/sg/2021/11/09/6.006-data_structures/"/>
      <url>/sg/2021/11/09/6.006-data_structures/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#binary-search-tree">Binary search tree</a></li><li><a href="#sort">Sort</a></li></ul><!-- tocstop --></div><h3><span id="binary-search-tree">Binary search tree</span><a href="#binary-search-tree" class="header-anchor">¶</a></h3><p>Balanced: a tree on n nodes is balanced if its height is O(logn). Bst is not always balanced.</p><ul><li><p>AVL tree: height-balanced tree</p><ul><li>skew of a node is the height difference between right subtree and left subtree.</li><li>skew is -1,0,1</li></ul></li></ul><h3><span id="sort">Sort</span><a href="#sort" class="header-anchor">¶</a></h3><p>Selection sort, insertion sort, heap sort, merge sort, quick sort</p><ul><li><p>in-place: 当数列中有相同的成员时，先后次序的不同。</p><ul><li>Whether merge sort is stable depends on how an implementation breaks ties when merging<ul><li>Stable: that items with duplicate keys appear in the same order in the output as the input</li></ul></li></ul></li><li><p>Comparison model</p><ul><li>worse case analysis</li></ul><p>The worst-case number of comparisons that must be made by any comparison search algorithm will be the height of the algorithm’s decision tree. Comparisons are limiting because each operation performed can lead to most constant branching factor in the decision tree. Any fixed a will lead to a decision tree with at least omega(logn) height. It can be improved that data structures are not limited to comparisons.</p></li><li><p>comparison sorting</p><ul><li>Analysis to lower bound the worst-case running time of any sorting algorithm that only uses comparisons</li></ul><p>sort n items, n! Permutations of the items,  height of decision tree is omega(log(n!)) = omega(nlogn). so run time at least omega(nlogn).</p></li><li><p>Direct access array: use data as index, might cause collisions and interger overflow, but skip comparisons to gain more efficiency.</p><p>Space: u slots to store items;  n items</p><ul><li><p>solution: make it dynamic: let m = O(n)</p><p>need a function that maps item keys to different slots of the direct access array, and no two keys map to the same direct access array index. Then we can support worst-case constant time search.</p></li><li><p>If m &lt; u: collisions occur.</p><ul><li>Solution: 1. Open address. 2. Chaining</li></ul><p>Chaining, a separate data structure that supports the dynamic set interfaces, operations including <strong>find, insert and delete.</strong> It is common to implant using a linked list or dynamic array, but any implementation supporting those operations would work.</p><p>what’s a good hash function? Minimize the frequency of collisions (all items stored in one chain) in order to minimize the maximum size of any chain.</p><ul><li>hash function: the performance of data structures would be independent of the keys we choose to store.</li><li>amortized bounds for dynamic operations<ul><li>Resize</li></ul></li></ul></li><li><p>Problems: n positive integers array A, find duplicates.</p></li><li><p>direct access array sort</p><p>n items, u slots array. (n &lt;= u)</p><ul><li>runtime analysis: insert + initialize &amp; scan: theta(n+u), if u = O(n), then the algorithm is linear.</li><li>Drawbacks: can’t handle duplicate keys and large key ranges</li></ul></li></ul></li></ul><p>Impovement:</p><ul><li><p>Allow duplicates on the basis of direct access array sort while preserving linear runtime property-&gt; counting sort</p></li><li><p>sort keys from a larger integer range: break up integer keys into parts, and then sort each part -&gt; tuple sort</p><ul><li>Example: LSD/MSD radix sort, sort in a certain order.</li></ul><blockquote><p>Then tuple sort uses a stable sorting algorithm as a subroutine to repeatedly sort the objects, first according to the least important key, then the second least important key, all the way up to most important key, thus lexicographically sorting the objects.</p></blockquote></li><li><p>Radix sort: counting sort + tuple sort</p><ul><li>Problems<ul><li>n ints from [-n** 2, n** 3]</li><li>n strings having k English characters</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.006 algorithms </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>6.046 divide and conquer</title>
      <link href="/sg/2021/11/09/6.046-divide_and_conquer/"/>
      <url>/sg/2021/11/09/6.046-divide_and_conquer/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#interval-scheduling">Interval scheduling</a></li><li><a href="#convex-hull">Convex hull</a></li><li><a href="#median-finding">Median finding</a></li><li><a href="#r1-methods">R1: methods</a><ul><li><a href="#smarter-is">smarter IS</a></li><li><a href="#strassen-s-algorithm">Strassen’s algorithm</a></li><li><a href="#master-theorem">Master theorem</a></li></ul></li><li><a href="#fast-fourier-transform">Fast Fourier Transform</a><ul><li><a href="#polynomial-multiplication">Polynomial multiplication</a></li><li><a href="#fft">FFT</a></li><li><a href="#application">application</a></li></ul></li><li><a href="#van-emade-boas-tree">Van Emade Boas Tree</a><ul><li><a href="#structure">Structure</a></li><li><a href="#analysis">Analysis</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="interval-scheduling">Interval scheduling</span><a href="#interval-scheduling" class="header-anchor">¶</a></h2><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7925628.png" class title="Screenshot-7925628"><h2><span id="convex-hull">Convex hull</span><a href="#convex-hull" class="header-anchor">¶</a></h2><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7925587.png" class title="Screenshot-7925587"><h2><span id="median-finding">Median finding</span><a href="#median-finding" class="header-anchor">¶</a></h2><p>Runtime: O($n^2$)</p><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7925566.png" class title="Screenshot-7925566"><h2><span id="r1-methods">R1: methods</span><a href="#r1-methods" class="header-anchor">¶</a></h2><h3><span id="smarter-is">smarter IS</span><a href="#smarter-is" class="header-anchor">¶</a></h3><p>recursion tree: reduce the runtime to O(logn)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">M[j] = max(w(j) + M[p(j)], M[j - 1]) for j=1 to n</span><br></pre></td></tr></table></figure><h3><span id="strassen-s-algorithm">Strassen’s algorithm</span><a href="#strassen-s-algorithm" class="header-anchor">¶</a></h3><ol><li>multiplication runs much slower than addition</li><li>Strassen’s only uses 7 multiplications instead of 8</li></ol><h3><span id="master-theorem">Master theorem</span><a href="#master-theorem" class="header-anchor">¶</a></h3><ol><li>Old stuff of 6.006</li></ol><h2><span id="fast-fourier-transform">Fast Fourier Transform</span><a href="#fast-fourier-transform" class="header-anchor">¶</a></h2><ol><li><p>polynomial representations</p><ul><li>Coefficient vector</li><li>Roots and a scale term: A(x) = ( x − $r_0$) · (x − $r_1$) · · · · · (x −$ r_{n−1}$) · c</li><li>Samples: (x0, y0),  (x1, y1),  . . . ,  ( xn−1, yn−1) with A(xi) =  yi (∀i) , xi is distinct.</li></ul></li><li><p>Operations: evaluation; addition; multiplication</p></li><li><p>Conversion between coefficients and samples in O(nlgn) time</p><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7930623.png" class title="Screenshot-7930623"></li></ol><h3><span id="polynomial-multiplication">Polynomial multiplication</span><a href="#polynomial-multiplication" class="header-anchor">¶</a></h3><ol><li><p>a divide and conquer algorithm: Divide into even and odd coefficients</p></li><li><p>Construct a collapsing set X</p></li><li><p>nth roots of unity: Euler’s formula</p><img src="/sg/2021/11/09/6.046-divide_and_conquer/Screenshot-7931842.png" class title="Screenshot-7931842"></li></ol><h3><span id="fft">FFT</span><a href="#fft" class="header-anchor">¶</a></h3><ol><li><p>FFT: O(nlgn) divide and conquer algorithm for DFT</p></li><li><p>Discrete Fourier Transform: computing A → A* = V  · A for $x_k  = e^{iτk/n}$ where n = $2^l$, where A is the set of coefficients and<br>A* is the resulting samples.</p></li><li><p>Inverse Discrete Fourier Transform: A*  → $V^ {−1}$ · A*  = A</p><p>$V^ {−1}$  = 1/n * complex conjugate of V</p></li><li><p>Fast Polynomial Multiplication</p><ul><li>A* = FFT(A), B* = FFT(B)</li><li>c_k* = a_k* b_k * for k = 0, 1, …, n-1</li><li>C = IFFT(c*)</li></ul></li></ol><h3><span id="application">application</span><a href="#application" class="header-anchor">¶</a></h3><ol><li>audio processing</li></ol><h2><span id="van-emade-boas-tree">Van Emade Boas Tree</span><a href="#van-emade-boas-tree" class="header-anchor">¶</a></h2><p>problem: why use b tree instead of bst in practice?</p><p>答案与内存层级有关。通常的算法中我们假定从内存中直接获取数据，而实际上计算机的基本内存结构包括：cpu与缓存器间的高速通道，缓存与磁盘中的低速通道。每次访问磁盘获取数据的花费都很大，所以我们需要减少磁盘的访问，因而引入了缓存器。然后我们需要将需要的内存块从磁盘带到缓存中，当块的大小与cache line size相同时，能更大的利用访问的花费。</p><p>二叉树的存储方式是逐层存储的，一个分支对应一个数据。而b tree可以将整个块存储在同个分支，这样能更快的带出需要的内存块而不需要逐次访问磁盘。</p><h3><span id="structure">Structure</span><a href="#structure" class="header-anchor">¶</a></h3><ol><li><p>B represents branching factor, which is related to cache line length. ex:in 2-3 tree: B = 2</p><ul><li>All leaves are at the same level</li></ul></li><li><p>Operation: how to delete node?</p><ul><li><p>move deletion to the leaves.</p><p>Successor: leftmost in the right subtree or rightmost in the left subtree.</p></li><li><p>Case1: have sibling tree undersell</p></li><li><p>Case2: don’t have sibing tree underfull -&gt; merge: propagate the emptiness up, merge; if sibling tree is underfull, rotate.</p></li></ul></li></ol><h3><span id="analysis">Analysis</span><a href="#analysis" class="header-anchor">¶</a></h3><p>We want to maintain n elements in the range {0, 1, 2, . . . , u − 1} and perform Insert, Delete and Successor operations in O(log log u) time.</p><p>Intuition: binary search on the levels of tree.</p><p>Improvements: how a very simple data structure become vEB tree?</p><ol><li><p>Bit vector: We maintain a vector V  of size u such that V[x] = 1 if and only if  x  is in the set.</p></li><li><p>Split Universe into Clusters: splitting up the range {0, 1, 2, . . . , u − 1} into sqrt(u) clusters of size sqrt(u).</p><p>Then we have a summary vector.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">low(x) = x mod sqrt(u) = j</span><br><span class="line">high(x) = x //（下取整）sqrt(u) = i</span><br><span class="line">index(i,j) = i*sqrt(u) + j</span><br></pre></td></tr></table></figure><p>Version 1:</p><blockquote><p>Insert:</p><ul><li>Set V.cluster[ high(x) ] [ low(x) ] = 1</li><li>Mark cluster high(x) as non-empty</li></ul><p>Successor:</p><ul><li>Look within cluster high(x)</li><li>Else, find next non-empty cluster i</li><li>Find minimum entry j in that cluster</li><li>Return index(i, j)</li></ul></blockquote><p>Version 2: use recursion: successor calls inside successor, insert calls inside insert.</p><p>V.cluster[i], V.summary, V.summary[i]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INSERT(V, x) </span><br><span class="line"><span class="number">1</span> Insert(V.cluster[high(x)], low[x]) </span><br><span class="line"><span class="number">2</span> Insert(V.summary, high[x])</span><br><span class="line"></span><br><span class="line">SUCCESSOR(V, x) </span><br><span class="line"><span class="number">1</span> i = high(x) </span><br><span class="line"><span class="number">2</span> j = Successor(V.cluster[i], j) </span><br><span class="line"><span class="number">3</span> <span class="keyword">if</span> j = =   ∞ </span><br><span class="line"><span class="number">4</span> i = Successor(V.summary, i) </span><br><span class="line"><span class="number">5</span> j = Successor(V.cluster[i], −∞) </span><br><span class="line"><span class="number">6</span> <span class="keyword">return</span> index(i, j)</span><br></pre></td></tr></table></figure><p>then we have a problem: two recursive call in insert, three recursive call in successor. We want one recursive call to achieve our goal.</p></li><li><p>Maintain Min and Max: We store the minimum and maximum entry in each structure.  This gives an O(1) time overhead for each Insert operation.</p></li><li><p>Don’t store Min recursively:</p><p>The Successor call now needs to check for the min separately.</p><blockquote><p>if x &lt; V.min : return V.min</p></blockquote></li></ol><p>space improvement: We can improve from Θ(u) to O(n log log u).</p><p>Intuition: for each element in n, perform a O(lglgu) runtime insertion.</p>]]></content>
      
      
      <categories>
          
          <category> Algorithms </category>
          
          <category> 6.046 algorithms design </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《暗黑》—— 关于时间问题的另一种陈述</title>
      <link href="/sg/2021/11/07/dark/"/>
      <url>/sg/2021/11/07/dark/</url>
      
        <content type="html"><![CDATA[<blockquote><p>跌跌撞撞穿过时空，方向是无止境。飞蛾扑火，就像你和我。随时随地未来随时开始。我不会再等待。爱由勇气而生，所以不要再犹豫。我们踩着炽热的火轮，穿过黑夜驶向未来。</p></blockquote><h3><span id="qian-yan">前言</span><a href="#qian-yan" class="header-anchor">¶</a></h3><p>之前就听说过暗黑被称为德国版怪奇物语，虽然我觉得怪奇物语是很不错的故事，但不确定自己能不能看完整整三季冗长的叙述，就没有立即去看。然后第一个场景和片头就让我感觉这会成为我最喜欢的剧，一个双目被侵蚀的人从时间裂缝中掉出来，一个窄小的地下室，两三个人在讨论如何处理。片头初见只是简单的对称图形，越看越觉得这应该是分形的结构，有一种几何美。配乐也非常空灵。</p><p>为什么要写这篇文章呢？我想梳理一下对这部剧的想法，尝试联系之前看过的类似题材，更重要的是问自己一些问题。有时候觉得自己是很矛盾的人，既追求实用主义，又向往无用之学。比如对生科强烈地排斥态度就由于生科所研究的东西我都不能理解和日常生活有什么太大联系，实验包含很多重复实验而往往重做的时间又很长，这些都是我后来发现的一些理想和现实的差距。另一方面，我又很爱看一些科幻历史题材，也会看感兴趣的哲学类话题。喜欢计算机也是因为它既有用也无用，现在也只是想完成最开始设定的6-3的主干课程，群里的小伙伴已经去实习和刷题准备秋招了，而我还待在学校一事无成。</p><p>如果不能感受生活的乐趣，那么这生活——我们所努力去做的事情——还有什么意义呢？我也有自己的路要走。</p><h3><span id="qiang-lie-de-hui-xiang">强烈的回响</span><a href="#qiang-lie-de-hui-xiang" class="header-anchor">¶</a></h3><p>《暗黑》在故事开头就有一种强烈的即视感。时间线因为某个关键节点的改变产生新的时间线，各种人物关系，利益团体交错复杂，主角为了改变这所谓的宿命在不同时间来回跳跃，最后终于使时间线收敛，这是石头门所讲的部分。又或者是一个闭环的故事，一个完整的圆形循环，其中的节点有特定的人去完成，周而复始，这是阿西莫夫《永恒的终结》所讲述的。暗黑虽然被称为德国版怪奇物语，但和怪奇物语是完全不同的故事，最多也就是视觉效果上都比较暗沉。和谐的音乐和剪辑，一环扣一环的剧情展开，讲述了一个结♾️的展开和消失归于黑暗的故事。</p><h3><span id="jiao-du-bian-hua">角度变化</span><a href="#jiao-du-bian-hua" class="header-anchor">¶</a></h3><p>我很少会在看剧的时候有认知在不断变化和加深的经历，感受不到太多明显的层次。然而在暗黑的整个过程中我都处于惊讶状态，常常是我觉得我懂了然后下一集又推翻了这个想法。在刚开始我以为三个世界是以年代划分的，1986，1999，1953构成了三个世界代表现在未来过去，通过唯一的洞穴充当虫洞连接起不同的时空。故事是一个循环进行的环形叙事，故事的开始就是结尾，结尾就是开始。然而即使是最简单的图形通过一点变换就能变成不同的样子。正如一个圆镜像对称了另一个圆，构成了无限的符号。一个世界镜像了另一个平行世界，而这两个世界通过男主女主连接成一个不破的结，所有节点上的事情按部就班地发生，每个人的命运在最开始就已经写好，即使他/她总有错觉在这一次循环里能够打破这个结。</p><p>印象深刻的一个情节是，新派来的警长在面对小镇群众对前任警方负责人无法解决青少年失踪案仍参与调查时说，一个大象十个人去看会得到十种不同的样子，但如果一个人用十种角度去看，根据不同的结果进行修正往往就能得到对大象正确的认知。暗黑不断追问的问题“起源在哪里”纠缠了所有人无尽个循环，Jonus(Adam)每次循环里都认为自己不会成为老年时期Adam麻木残酷的样子，只要自己在某件事做了不同的决定，就能打破这次循环，但最后只是一次次地走向固定的命运。Martha(eve)为了延续因旧世界Martha死去而创造出的新世界，不断引导年轻时的自己走向循环的不同方向，以存续这个结和两个世界。他们沉浸在自己的视角里太久，观者也沉浸在自己的视角里走不出来。</p><p>两个世界只是起源世界的分支，它们在诞生时就摧毁了起源世界，并成为回环往复的衔尾蛇，所有人自此困顿在时间的囚牢里。而只有从最开始改变起源，阻止时间机器的产生，才能避免这个结，让世界正常单线进行。代价就是两个世界不复存在，曾经奋斗的一切化为虚无，而结以外的人还能在起源世界活下去。Claudia提供了第三种角度，她为了拯救女儿必死的命运来往于两个世界，在不同的时空通过改变不同角色的行为观察导致的结果，在每次循环里提供给新循环里的自己新的认知，当碎片被收集完全，才得到了追寻的答案。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>4 virtual memory</title>
      <link href="/sg/2021/11/04/6.004-vm/"/>
      <url>/sg/2021/11/04/6.004-vm/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#17-virtual-memory">17 virtual memory</a><ul><li><a href="#virtual-memory">Virtual memory</a></li><li><a href="#virtual-machine">Virtual machine</a></li></ul></li><li><a href="#18-virtualizing-the-processor">18 virtualizing the processor</a><ul><li><a href="#build-a-vm">build a VM</a></li><li><a href="#jin-cheng-ru-he-fu-yong-cpu">进程如何复用cpu？</a></li><li><a href="#interrupts-to-time-sharing">interrupts to time-sharing</a></li><li><a href="#exception-handling">exception handling</a></li><li><a href="#communicate-with-os">Communicate with os</a></li></ul></li><li><a href="#19-devices-and-interrupts">19 devices and interrupts</a><ul><li><a href="#interrupt-based-asynch-i-o">Interrupt-based asynch I/O</a></li><li><a href="#implementations-of-readkey">Implementations of ReadKey</a></li><li><a href="#time-sharing-can-t-meet-with-ddl">Time-sharing can’t meet with ddl</a></li><li><a href="#the-need-for-real-time">the need for real time</a></li><li><a href="#real-time-scenarios">Real-time scenarios</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="17-virtual-memory">17 virtual memory</span><a href="#17-virtual-memory" class="header-anchor">¶</a></h2><p>Fact:DRAM accessing hard disk is much more slower(100,000) than cache accessing main main memory.</p><p>Problem: Enormous miss penalty of secondary storage</p><p>Solution/Goal: the miss rate should be very small compared to the rate of executing instructions.(decrease miss ratio)</p><p>Design policy:</p><ol><li><p>high associativity: avoid collisions between accesses</p></li><li><p>large block size: amortize the cost of miss over many future hits</p></li><li><p>Write-back strategy: separation of hardware and software.only update the contents of disk when data that’s changed in main memory needs to be replaced by data from other blocks of secondary storage.</p><blockquote><p>upside of long latencies: manage the organization of main memory and the accesses to secondary storage in software.</p><p>-&gt; handle hits in hw, misses in sw</p></blockquote></li></ol><h3><span id="virtual-memory">Virtual memory</span><a href="#virtual-memory" class="header-anchor">¶</a></h3><p>Fact: we only need to ensure the current working set of a program is actually resident in main memory. Locations not currently being used could live in secondary storage until needed.</p><p>Goal:</p><ul><li><p>Exploit locality on a large scale</p><ul><li>solution: MMU with single-level page map</li><li>optimizations<ul><li>store in RAM</li><li>TLB</li></ul></li><li>Cache/VM interactions</li></ul></li><li><p>ease memory management, protect multiple contexts from each other.</p></li></ul><h4><span id="gt-mmu-translate-va-to-pa">&gt; MMU:translate VA to PA</span><a href="#gt-mmu-translate-va-to-pa" class="header-anchor">¶</a></h4><p>Solution: two part: VAtoPA + PageFault</p><ul><li>use hw(MMU) to implement VtoP, use sw(page fault exception handler of CPU) to handle exceptional cases</li></ul><blockquote><p>fact:  MMU maps virtual pages to physical pages. Cause a page fault if virtual page is not resident in physical memory.</p></blockquote><p>implementation: Paging/demand paging</p><p>Plan:</p><ol><li><p>All virtual pages in secondary storage, MMU empty.</p></li><li><p>map VA to PA</p><p>2.1 RAM-resident page</p><p>2.2 non-resident page: page fault</p><p>​CPU switches execution to page fault handler, the handler allocates a physical page for VA loaded from hard disk, then adjusts the page map entry. If all physical pages are unavailable, it chooses an existing page to replace. Finally return control to program.</p></li><li><p>Working set incrementally loaded via page faults</p><p>problem: thrashing: programs constantly generate page faults, which causes the program run very slowly.</p></li></ol><p>Arithmetic: page map(v, m, p)</p><h4><span id="gt-where-to-store-page-map">&gt; Where to store page map:</span><a href="#gt-where-to-store-page-map" class="header-anchor">¶</a></h4><ol><li><p>store in RAM(main memory): RAM-resident page maps</p><blockquote><p>use a register, called the page map pointer, to hold the address of the page map array in main memory</p></blockquote><p>problem: each memory reference takes 2 accesses to physical memory</p></li><li><p>cache the page map entries: translation look-aside buffer: a special-purpose fully-associative cache</p><p>TLB(VA, PA)</p><blockquote><p>If the PPN is found by using the TLB, the access to main memory for the page table entry can be avoided.</p></blockquote><ul><li><p>Variations:</p><ul><li>Multi-level page map</li></ul><blockquote><p>The key idea is that the page map segments are in virtual memory, <em>i.e.</em>, they don’t all have to be resident at any given time. If the running application is only actively using a small portion of its virtual address space, we may only need a handful of pages to hold the page directory and the necessary page map segments.</p></blockquote><ul><li>paging the page map</li></ul></li></ul></li></ol><h4><span id="gt-sum-up-mmu-address-translation">&gt; sum up: MMU address translation</span><a href="#gt-sum-up-mmu-address-translation" class="header-anchor">¶</a></h4><img src="/sg/2021/11/04/6.004-vm/sc1.png" class title="截屏2021-11-01 上午10.15.13"><h3><span id="virtual-machine">Virtual machine</span><a href="#virtual-machine" class="header-anchor">¶</a></h3><p>Fact:</p><blockquote><p>context: a mapping of VA to PA</p></blockquote><ul><li>problem: timesharing among several programs,When new program starts, the context should be updated by flushing TLB which costs a lot.</li></ul><p>example: OS kernel/user</p><ul><li><p>Solution: perform rapid context-switching</p><ul><li>add a register to hold index of current context.</li><li>switch contexts: update context # and pageablePtr registers.</li></ul></li><li><p>Problem: use caches with Virtual memory</p><p>disign choice:</p><ol><li>Virtually-addressed cache</li><li>Physically-addressed cache</li><li>Overlapped operation</li></ol></li></ul><p>several part to consider: MMU time on HIT, flush cache after context switch</p><p>…to be continued this part</p><h2><span id="18-virtualizing-the-processor">18 virtualizing the processor</span><a href="#18-virtualizing-the-processor" class="header-anchor">¶</a></h2><p>回顾一下虚拟内存，简单来说它提供给每个运行的程序一个拥有计算机所有内存地址空间的幻想。它通过内存控制单元实现从虚拟地址到物理地址的转换，用虚拟地址查询页表，而用页表来记录物理地址，完成查询。</p><p>由于访问硬盘的延迟比主存储器（main memory）慢的多，通过TLB（一种缓存器）来记录活跃的虚拟地址到物理地址的转换。</p><h3><span id="build-a-vm">build a VM</span><a href="#build-a-vm" class="header-anchor">¶</a></h3><p>把正在运行的程序抽象成进程，一个进程包含它运行所需要的所有资源(CPU,I/O device, MMU,virtual address space)…</p><p>有一个特别的优先的进程叫kernel。OS为各种进程提供服务，比如访问文件中的数据，建立网络连接，管理UI。从不同用户模式的进程切换，OS需要保存现在运行的进程状态，保存在主存储器中或二级存储器中。</p><p>Problem: share one physical machine between all the virtual machines.  As if each process was running on its own “virtual machine” that works independently of other virtual machines for other processes.(OS’s job)</p><p>Fact: one VM for each process</p><ul><li>OS把外接设备都抽象成服务，为每个进程提供独立的虚拟机，周期性地从一个进程转换到下一个进程。</li><li>外接设备包含一个定时器触发周期性的CPU中断，提供非易失性存储的二级存储器，连接外部设备的USB接口，视频监控器，键盘，鼠标等用户界面服务。</li><li>抽象包括窗口，访问磁盘内的文件，网络传输等。OS通过supervisor calls(SVCs)配置和控制虚拟服务。</li></ul><blockquote><p>The process state includes</p><ul><li>the hardware state of the CPU, <em>i.e.</em>, the values in the registers and program counter.</li><li>the contents of the process’ virtual address space, including code, data values, the stack, and data objects dynamically allocated from the heap. Under the management of the MMU, this portion of the state can be resident in main memory or can reside in secondary storage.</li><li>the hardware state of the MMU, which, as we saw earlier, depends on the context-number and page-directory registers. Also included are the pages allocated for the hierarchical page map.</li><li>additional information about the process’ input and output activities, such as where it has reached in reading or writing files in the file system, the status and buffers associated with open network connections, pending events from the user interface (<em>e.g.</em>, keyboard characters and mouse clicks), and so on.</li></ul></blockquote><h3><span id="jin-cheng-ru-he-fu-yong-cpu">进程如何复用cpu？</span><a href="#jin-cheng-ru-he-fu-yong-cpu" class="header-anchor">¶</a></h3><p>time-multiplexing of the cpu = timesharing</p><p>OS从运行进程0到运行进程1：</p><img src="/sg/2021/11/04/6.004-vm/sc2.png" class title="截屏2021-11-02 上午1.06.21"><ul><li>运行进程0 -&gt; 停止运行0，将控制转移回OS kernel，保存当前地址（PC+4）-&gt; 保存进程0的状态并且加载进程1的状态 -&gt; 回到进程1 -&gt; 运行进程1。</li><li>第2步和第4步是不同的trap handler。</li></ul><h3><span id="interrupts-to-time-sharing">interrupts to time-sharing</span><a href="#interrupts-to-time-sharing" class="header-anchor">¶</a></h3><p>中断处理:handler</p><ul><li><p>Hardware</p><p>Timer interrupts:  the periodic interrupt from the external timer device.</p><p>how the interrupt hardware in the Beta works?</p><blockquote><p>it saves the PC+4 of the interrupted user-mode program in the XP register and sets the program counter to some predetermined value that depends on which external interrupt happened.</p></blockquote></li><li><p>software: beta interrupt handling</p><ul><li><p>保存状态到寄存器中（在os是叫UserMState的数据结构，在main memory中存储CPU的寄存器）-&gt; C程式处理exception -&gt;重装寄存器内保存的状态  -&gt; 回到原来的地址（Reg[XP]-4)</p></li><li><p>Where to find handlers</p><ul><li>Beta scheme: wire in a low-memory address for each exception handler entry point</li><li>Table of handler addresses</li></ul></li><li><p>问题：不是很懂中断对用户程序是透明的？或许是指用户程序能够访问中断改变的变量/状态。</p><blockquote><p>Since the process state is saved and restored during an interrupt, interrupts are transparent to the running user-mode program.</p></blockquote></li></ul></li><li><p>Example: timer interrupt handler</p><ul><li><p>设定：os maintains current time of day count in response to clock events.There are program A and clock handler.</p></li><li><p>目标是用时间中断器来更新os中记录现在时间的值。定时器定期中断用户模式程序，以在操作系统中运行时钟中断处理程序代码，然后继续用户模式程序的运行。对A来说，中断仿佛没有发生。如果A需要访问时间，则需要向os做出提出相应的服务要求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//Handler(C)</span><br><span class="line">long TimeOfDay;</span><br><span class="line">Struct Mstate &#123;&#125; UserMstate;</span><br><span class="line">Clock_Handler()&#123;&#125;</span><br><span class="line"></span><br><span class="line">//Interrupt stub(assymbly)</span><br><span class="line">Clock_h:</span><br><span class="line">save the values of all registers into the UserMState;</span><br><span class="line">set up the kernel-mode stack;</span><br><span class="line">call clock_handler;</span><br><span class="line">reload registers;</span><br><span class="line">decrement the XP register value;</span><br><span class="line">return to the app;</span><br></pre></td></tr></table></figure><img src="/sg/2021/11/04/6.004-vm/sc3.png" class title="截屏2021-11-02 上午10.46.46"></li></ul></li><li><p>Scheduler: simple timesharing scheduler</p><ul><li><p>设定：UserMState, process control block of each process(process table), index of current process</p></li><li><p>怎样运行一个新的时间共享的进程？</p><ul><li><p>scheduler通过保存现在进程的状态，改变索引值为进入下一个进程准备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scheduler()&#123;</span><br><span class="line">  proctbl[cur].state = UserMState;</span><br><span class="line">  cur = (cur+<span class="number">1</span>)%N;</span><br><span class="line">  UserMState = proctbl[cur].state; <span class="comment">//install state</span></span><br><span class="line">  LoadUserContext(....PageMap); <span class="comment">//install context</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Time-sharing story in os</p><ul><li><p>Timer 中断正在运行的用户模式程序并开始执行clock handler代码。clock handler先保存现在的进程状态到相关的数据结构中然后调用scheduler。scheduler将暂时保存的进程状态转移到process table中，而之后调用的scheduler会为下一个运行的进程保存相关的状态到暂时存放的地址，clock handler重新加载寄存器保存的状态继续运行下一个进程，这样循环下去。</p></li><li><p>设定: supervisor mode bit：1时不允许中断，0时允许。kernel mode is set 1; user mode is set 0.</p><ul><li>中断不能同时运行，一次只能运行一次。设置监控位保证这一点。由于中断发生会改变进程状态，这样是为了确保不会覆盖进程的状态到寄存器（UserMState）中。</li></ul></li></ul></li></ul><h3><span id="exception-handling">exception handling</span><a href="#exception-handling" class="header-anchor">¶</a></h3><p>problem: how to deal with “illegal” opcodes?</p><p>…跳过了硬件，汇编的部分</p><h3><span id="communicate-with-os">Communicate with os</span><a href="#communicate-with-os" class="header-anchor">¶</a></h3><p>Problem: how user-mode programs communicate with OS code?</p><p>当os在运行其他进程时，用户程序该如何将控制转移回os？</p><p>Solution:</p><ul><li>abstraction: Use supervisor calls with args in registers</li><li>Implementation: use illegal instructions to cause an exception, and OS recognize the instruction as a user-mode SVCs</li></ul><p>…跳过了汇编部分</p><h2><span id="19-devices-and-interrupts">19 devices and interrupts</span><a href="#19-devices-and-interrupts" class="header-anchor">¶</a></h2><p>Problem 1: how the OS interacts with the devices themselves?</p><p>Problem 2: how supervisor calls access the kernel buffers in response to requests from user-mode processes?</p><h3><span id="interrupt-based-asynch-i-o">Interrupt-based asynch I/O</span><a href="#interrupt-based-asynch-i-o" class="header-anchor">¶</a></h3><p>操作系统中有很多输入/输出设备，以键盘输入为例，用户在键盘上打字，引起键盘向cpu发起中断请求。中断停止当前程序的运行而执行这个特别的输入输出事件。当内核中的缓存用完后会发生什么？</p><p>早先的处理方式是丢弃收到的键盘输入的字符，提示用户之前输入的已作废。</p><p>后来用户模式的程序执行ReadKey() SVC，要求OS返回下一个字母到R0寄存器中，然后遵循SVC继续执行指令。</p><blockquote><p>ReadKey() SVC: a blocking I/O request.</p><p>当没有字符返回时不执行直到有可用的结果返回。</p><p>the program assumes that when the SVC returns, the next character is in R0. If there isn’t (yet) a character to be returned, execution should be “blocked”, <em>i.e.</em>, suspended, until such time that a character is available.</p><p>Non-blocking I/O request: return immediately with both a status flag and a result.</p><p>当没有字符返回时仍然执行指令，在之后重新发起请求。</p></blockquote><ul><li><p>Operation: no attention to keyboard during normal operation</p><ul><li><p>Event-driven approach</p><p>用户模式程序和键盘并没有直接互动，而是通过事件驱动方法，设备当需要处理输入时通过中断向操作系统发出信号。这样把责任分离的好处是减少操作系统不停地检查是否有未完成的I/O操作</p></li></ul></li><li><p>The interrupt-driven OS interactions with I/O devices are completely transparent to user programs.</p></li><li><p>Example: keyboard interrupt handler</p><ul><li>sketch: cpu needs access device status and data</li><li>approach:Memory-mapper I/O: a portion of the kernel address space is devoted to servicing I/O devices.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Device</span>&#123;</span></span><br><span class="line">  <span class="type">char</span> Flag, Data;</span><br><span class="line">&#125;keyboard;</span><br><span class="line"></span><br><span class="line">keyHit_h()&#123;</span><br><span class="line">  Buffer[inptr] = keyboard.Data;</span><br><span class="line">  inptr = (...)...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现实中更复杂：</p><p>键盘处理还需要识别键的状态是按下还是释放，然后将字符转换成ASCII码，并且需要处理特殊的按键组合。</p></li></ul><h3><span id="implementations-of-readkey">Implementations of ReadKey</span><a href="#implementations-of-readkey" class="header-anchor">¶</a></h3><p>Goal: the associated supervisor call that lets user programs read characters.</p><p>Attempt1: 直接写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReadKey_h()&#123;</span><br><span class="line">  <span class="type">int</span> kbdnum = ProcTbl[Cur].DPYNum;</span><br><span class="line">  <span class="keyword">while</span> (BufferEmpty(kbdnum))&#123;</span><br><span class="line">    <span class="comment">/* busy wait loop*/</span></span><br><span class="line">  &#125;</span><br><span class="line">UserMState.Reqs[<span class="number">0</span>] = ReadInputBuffer (kbdnum) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​kbdnum:keyboard num;proctbl: process table</p><ul><li><p>Problem：kernel/supervisor mode can’t be interrupted.</p><blockquote><p>the SVC handler is running with the supervisor bit (PC[31]) set to 1, disabling interrupts.</p></blockquote><ul><li><p>such that the buffer never gets filled.</p></li><li><p>陷入死循环</p></li></ul></li></ul><p>Attempt2: fix the looping problem by adding code to subtract 4 from the saved value of the XP register before returning</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ReadKey_h()&#123;</span><br><span class="line">  <span class="type">int</span> kbdnum = ProcTbl[Cur].DPYNum;</span><br><span class="line"><span class="keyword">if</span> (BufferEmpty(kbdnum))&#123;</span><br><span class="line"><span class="comment">/* busy wait loop*/</span></span><br><span class="line">UserMState.Regs[XP] = UserMState.Regs [XP]<span class="number">-4</span> ;</span><br><span class="line">    Scheduler(); <span class="comment">//attempt3</span></span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">UserMState.Reqs[<span class="number">0</span>] = ReadInputBuffer (kbdnum) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>和Attempt1的区别是：</p><ul><li><p>执行循环的方式：当中断推出时，操作系统通过跳到xp继续执行用户模式的指令。通过改变这一地址来循环发出中断。（汇编的常见循环方式？我认为）</p><blockquote><p>When the handler exits, the OS will resume execution of the user-mode program by reloading the registers and then executing a JMP(XP), which would normally then execute the instruction <em>following</em> the SVC instruction.</p></blockquote></li><li><p>ReadKey() SVC 进入用户模式</p></li></ul></li><li><p>Problem: waste its time-slice waiting for next keystroke</p></li></ul><p>Attempt3: 利用等待的时间执行别的程序，通过循环调度的方式最后回到ReadKey() SVC</p><blockquote><p>The call to Scheduler() suspends execution of the current process and arranges for the next process to run when the handler exits. (Round-robin scheduling).</p><p>建立在以下事实上：</p><p>Fact: the time slices for each process are small enough that one round of process execution happens more quickly than the time between two typed characters</p></blockquote><ul><li>Time-sharing 在此场景下的意义：<ul><li>进行计算密集型的程序时由于分隔时间(cycles)过短，time-sharing可能会增加额外的成本在进程交换（context-switching, scheduling）上。</li><li>当有很多个程序需要执行时，分隔时间增加，time-sharing才增加了效率</li></ul></li><li>进一步的提高效率：将进程的状态（活跃/等待）记录到进程的数据中，通过优先执行活跃的程序减少等待的时间。<ul><li>unix系统中sleep, wakeup可以改变进程的相应状态</li></ul></li></ul><p>Attemp4: “进一步”的实现:no CPU cycles are wasted on useless activity.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">ReadKey_h()&#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">if</span> (BufferEmpty(kbdnum))&#123;</span><br><span class="line">User.Regs[XP] = User.Regs&#123;XP] - <span class="number">4</span>;</span><br><span class="line">sleep(kbdnum);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;... &#125;</span><br><span class="line">&#125;</span><br><span class="line">sleep(status s) &#123;</span><br><span class="line">ProcTbI[Cur].status = s;</span><br><span class="line">Scheduler();</span><br><span class="line">&#125;</span><br><span class="line">Scheduler)&#123;</span><br><span class="line"><span class="keyword">while</span> (ProcTbIfi].status != <span class="number">0</span>) &#123;</span><br><span class="line">i=(i+<span class="number">1</span>)%N;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">KeyHit_h()&#123;</span><br><span class="line">  ...</span><br><span class="line">  writeBuffer(kbdnum, key);</span><br><span class="line">wakeup(kbdnum);</span><br><span class="line">  ...</span><br><span class="line">)  </span><br><span class="line">wakeup(status s) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ProcTbli].status == s)</span><br><span class="line">ProcTbli].status = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The effect is that once a process goes to sleep() WAITING for an event, it’s not considered for execution again until the event occurs and wakeup() marks the process as ACTIVE.</p></blockquote><p>Example: which handler &amp; os? 像个解谜游戏。根据handler和os的特点来排除。</p><h3><span id="time-sharing-can-t-meet-with-ddl">Time-sharing can’t meet with ddl</span><a href="#time-sharing-can-t-meet-with-ddl" class="header-anchor">¶</a></h3><p>Problem: asynchronous world.</p><p>Solution: I/O: separate “event handling” from “event processing”.</p><ul><li>Downside: the need for real-time: can’t predict completion time, therefore can’t deal with real-time system</li><li>Example: ESC on cars,需要实时计算各种因素才能准确刹车。而这是时间分享系统不能做到的</li></ul><blockquote><p>Time-sharing system: 在单个硬件系统上通过快速在进程间切换伪造并行的假象，为每个程序提供了在独立的虚拟机上运行的幻想。</p><p>downside: processing throughput is more variable</p></blockquote><h3><span id="the-need-for-real-time">the need for real time</span><a href="#the-need-for-real-time" class="header-anchor">¶</a></h3><ul><li><p>what’s the largest L such that Lmax+S=D?</p><blockquote><p>Measure of performance in a real-time system: interrupt latency L,the amount of time that elapses between a request to run some code and when that code actually starts executing.</p></blockquote></li></ul><img src="/sg/2021/11/04/6.004-vm/sc4.png" class title="截屏2021-11-04 上午12.10.58"><ul><li><p>What factors contribute to interrupt latency?</p><ul><li><p>关心这个问题的原因在于实现最小化中断延迟以在期限时间完成程序运行的目标。所以我们需要知道导致延迟的原因然后减小延迟。</p></li><li><p>state save, context switch</p><blockquote><p>While handling an interrupt:it takes times to save the process state, switch to the kernel context, and dispatch to the correct interrupt handler.</p></blockquote></li><li><p>periods of un-interruptability</p><ul><li>Long,uninterruptable instructions</li><li>explicitly disabled periods: interrupt handler in kernel mode</li></ul></li><li><p>to bound and minimize interrupt latency by all means</p><blockquote><p>We’ll do this by optimizing the cost of taking an interrupt and dispatching to the correct handler code. We’ll avoid instructions whose execution time is data dependent. And we’ll work to minimize the time spent in kernel mode.</p></blockquote></li></ul></li></ul><h3><span id="real-time-scenarios">Real-time scenarios</span><a href="#real-time-scenarios" class="header-anchor">¶</a></h3><p>scenario: scheduling of multiple devices: long-running handlers have a huge impact on the worst-case latency seen by the other devices.</p><h4><span id="gt-stragegy0-first-come-first-served-scenario">&gt; Stragegy0:  first-come-first-served scenario.</span><a href="#gt-stragegy0-first-come-first-served-scenario" class="header-anchor">¶</a></h4><p>Problems: reducing the worst-case latencies</p><h4><span id="gt-strategy1-nonpreemptive-weak-priority-system">&gt; Strategy1: “nonpreemptive” / “weak” priority system.</span><a href="#gt-strategy1-nonpreemptive-weak-priority-system" class="header-anchor">¶</a></h4><ul><li><p>assign priorities to the pending requests and to serve the requests in priority order</p></li><li><p>Result: worsk-case latency = the worst-case service time of all the other devices + the service time of all higher-priority devices</p><p>当前运行的程序完成后才会运行下一个（在不支持中断的系统中）。</p></li><li><p>Subproblem: How should priorities be assigned given hard real-time constraints?</p><ul><li><p>assume each device has a service deadline D after the arrival of its service request. assume D is the time until the <em>next</em> request for the same device.</p></li><li><p>Strategy: earliest deadline, therefore highest priority = earliest deadline</p><blockquote><ol><li><p>Sort the requests by their deadlines.</p></li><li><p>Assign the highest priority to the earliest deadline, second priority to the next deadline, and so on.</p></li></ol></blockquote></li></ul></li><li><p>例子：机场候机排序，优先让飞机快要起飞的乘客候机虽然会延迟部分乘客的候机时间，但是会减少延误的次数。但是如果系统过载，让最先要起飞的乘客优先候机会导致所有人都延误，在这个场景中排序优先问题需要重新讨论，因为目标变成了能够使延误航班次数最少的排序优先。</p></li><li><p>downside：the worst-case latency for a device always includes the maximum time we have to wait for the currently-running task to complete.</p><blockquote><p>Scenario: suppose disk requests have a 800 us deadline in order to guarantee the best throughput from the disk subsystem. Since the disk handler service time is 500 us, the maximum allowable latency between a disk request and starting to execute the disk service routine is 300 us.</p></blockquote><img src="/sg/2021/11/04/6.004-vm/sc5.png" class title="截屏2021-11-04 下午12.57.13"></li></ul><h4><span id="gt-strategy2-the-need-for-preemption">&gt; Strategy2: the need for preemption</span><a href="#gt-strategy2-the-need-for-preemption" class="header-anchor">¶</a></h4><p>-&gt;a preemptive priority system/“strong” priority system</p><p>怎么处理strategy1中的场景问题？</p><p>设定新的优先级排序为：disk &gt; printer&gt; keyboard，改变的是当请求发出时立刻执行当前程序而不等待更低优先级程序的完成。在强优先级系统中，优先级和ddl非常相关，所以一定能在限期完成请求；而在弱优先系统中，优先级按照服务需要完成的时间划分，所以在考虑中断延迟时需要考虑其他服务的中断延迟时间。</p><p>…跳过了硬件实现部分…</p><h4><span id="gt-recurring-interrupts">&gt; recurring interrupts</span><a href="#gt-recurring-interrupts" class="header-anchor">¶</a></h4><p>Consider interrupts which recur at bounded rates:</p><img src="/sg/2021/11/04/6.004-vm/sc6.png" class title="截屏2021-11-04 下午1.16.28"><p>Keyboard handler doesn’t complete until 3 ms after its request was received.</p><p>由于只要有优先级高于键盘的请求，就必须先执行那个程序。所以在实时系统中用ddl作为约束而不是延迟时间的长短。</p><p>面临的问题：当键盘ddl在3ms之前时，强优先系统仍然无法达到实时条件的限制，这时说明在紧张的ddl下没有足够的cpu周期达到对服务的重复要求。</p><img src="/sg/2021/11/04/6.004-vm/sc7.png" class title="sc7"><p>calculations of recurring interrupts</p><ul><li><p>how much load each periodic request places on the system?</p><ul><li>Service time * max frequency = Load%</li><li>User-mode share</li></ul></li><li><p>whether have enough CPU cycles to meet each of the deadlines?</p><ul><li>example: for disk: 500/800=67.5% of the cycles to service the disk in the time between the disk request and disk deadline.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer architecture </category>
          
          <category> 6.004 computation structures </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SC programming</title>
      <link href="/sg/2021/11/04/SC_programming/"/>
      <url>/sg/2021/11/04/SC_programming/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r19-programming-with-adts">R19: programming with ADTs</a></li></ul><!-- tocstop --></div><h2><span id="r19-programming-with-adts">R19: programming with ADTs</span><a href="#r19-programming-with-adts" class="header-anchor">¶</a></h2><p>Recipes: Test-first programming approach -&gt; writing an ADT -&gt; writing a program with ADTs</p><p>区别在于test-first和ADT都是从规范出发，然后测试，然后具体实现，可能会改变实现的方式根据不同的规范。而在编程时需要我们根据实际情况选用数据类型，选用我们需要实现的大概步骤以得到想要的数据。然后才进行和测试先行编程方法一样的步骤。</p><blockquote><ol><li><strong>Choose datatypes.</strong> Decide which ones will be mutable and which immutable.</li><li><strong>Choose static methods.</strong> Write your top-level <code>main</code> method and break it down into smaller steps.</li><li><strong>Spec.</strong> Spec out the ADTs and methods. Keep the ADT operations simple and few at first. Only add complex operations as you need them.</li><li><strong>Test.</strong> Write test cases for each unit (ADT or method).</li><li><strong>Implement simply first.</strong> Choose simple, brute-force representations. The point here is to put pressure on the specs and the tests, and try to pull your whole program together as soon as possible. Make the whole program work correctly first. Skip the advanced features for now. Skip performance optimization. Skip corner cases. Keep a to-do list of what you have to revisit.</li><li><strong>Iterate</strong>. Now that it’s all working, make it work better. Reimplement, optimize, redesign if necessary.</li></ol></blockquote><p>case study: matrix multiplication</p><p>Ideas including static typing, testing, spec, immutability, and interfaces.</p>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SC test&amp;debug</title>
      <link href="/sg/2021/10/29/SC_test-debug/"/>
      <url>/sg/2021/10/29/SC_test-debug/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r3-ce-shi">R3 测试</a><ul><li><a href="#ce-shi-hen-nan">测试很难👀</a></li><li><a href="#ce-shi-you-xian-bian-cheng">测试优先编程</a></li><li><a href="#xi-tong-shi-bian-cheng">系统式编程</a></li><li><a href="#ce-shi-fang-fa">测试方法</a></li><li><a href="#zong-jie">总结</a></li></ul></li><li><a href="#r9-bi-mian-diao-shi">R9: 避免调试</a><ul><li><a href="#sheng-ming">声明</a></li></ul></li><li><a href="#r13-debugging">R13: debugging</a><ul><li><a href="#fu-xian-wen-ti">复现问题</a></li><li><a href="#ke-xue-shi-yan-fa-xun-zhao-wen-ti">科学实验法寻找问题</a></li><li><a href="#1-yan-jiu-shu-ju">1.研究数据</a></li><li><a href="#2-ti-chu-jia-she">2.提出假设</a></li><li><a href="#3-shi-yan">3.实验</a></li><li><a href="#4-chong-fu">4.重复</a></li><li><a href="#xiu-fu-wen-ti">修复问题</a></li><li><a href="#tips">Tips</a></li><li><a href="#zong-jie-1">总结</a></li></ul></li></ul><!-- tocstop --></div><p>everything is hard.</p><h2><span id="r3-ce-shi">R3 测试</span><a href="#r3-ce-shi" class="header-anchor">¶</a></h2><p>Goal: systematic testing</p><p>验证包括：</p><ul><li>formal reasoning:verification caonstructs a formal proof that a program is correct.</li><li>code review: have others read your code</li><li>Testing</li></ul><h3><span id="ce-shi-hen-nan">测试很难👀</span><a href="#ce-shi-hen-nan" class="header-anchor">¶</a></h3><ul><li>暴力测试很难进行</li><li>haphazard testing(just try it and see if it works)如果程序的错误不明显很难被随意选择的测试例子发现，而假如那么明显程序中只会含有更多错误<ul><li>我一般就是这种？所以根本不会写测试</li></ul></li><li>Random or statistical testing：软件测试在可能的输入项中是不连续和离散的。</li></ul><h3><span id="ce-shi-you-xian-bian-cheng">测试优先编程</span><a href="#ce-shi-you-xian-bian-cheng" class="header-anchor">¶</a></h3><ul><li>terms: module, spec, implementation, test case, test suite</li><li>Steps<ul><li>Spec: types of parameters and constraints, type of return value and how return value relates to the inputs</li><li>Test: write tests that exercise the spec</li><li>Implement: write the implementation</li></ul></li><li>先写测试。拖到最后测试找bug会很痛苦😖</li></ul><h3><span id="xi-tong-shi-bian-cheng">系统式编程</span><a href="#xi-tong-shi-bian-cheng" class="header-anchor">¶</a></h3><p>Goal</p><ul><li>correct: 当运行时通过所有测试</li><li>thorough：有漏洞时报错</li><li>Small</li></ul><h4><span id="gt-fen-qu-xuan-ze-ce-shi-yang-li">&gt; 分区选择测试样例</span><a href="#gt-fen-qu-xuan-ze-ce-shi-yang-li" class="header-anchor">¶</a></h4><ul><li><p>divide the input space into subdomains, which form a partition</p></li><li><p>Include boundaries in the partition</p><ul><li>Bugs happen at boundaries<ul><li>0, empty, null</li><li>Maximum and minimum</li><li>Emptiness for collection types</li><li>first and last element of a sequence</li></ul></li><li>why bugs happen at boundaries?<ul><li>Off-by-one mistake</li><li>Special case</li><li>places of discontinuity in the code’s behavior</li></ul></li></ul></li><li><p>Use multiple partitions</p><ul><li>如何划分space of input<ul><li>Cartesian-product</li><li>独立地看，然后再考虑交互产生的效果</li><li>Smaller test suit as possible to cover the input space</li></ul></li></ul></li></ul><h4><span id="gt-zi-dong-hua-dan-yuan-ce-shi-junit">&gt; 自动化单元测试: JUnit</span><a href="#gt-zi-dong-hua-dan-yuan-ce-shi-junit" class="header-anchor">¶</a></h4><ul><li><p>Unit test: tests for every individual module</p></li><li><p>all JUnit assertions that compare values: expected first, actual second</p></li><li><p>Every assertion method accepts an optional message argument which will show when error happens</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assertTrue(..., <span class="string">&quot;...&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h4><span id="gt-ji-lu-ce-shi-fang-an">&gt; 记录测试方案</span><a href="#gt-ji-lu-ce-shi-fang-an" class="header-anchor">¶</a></h4><ul><li>document the partitions and subdomains at the top of test class</li><li>For each test case: comment which subdomains it covers</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Multiply</span> &#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Testing strategy</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * cover the cartesian product of these partitions:</span></span><br><span class="line"><span class="comment">   *   partition on a: positive, negative, 0</span></span><br><span class="line"><span class="comment">   *   partition on b: positive, negative, 0</span></span><br><span class="line"><span class="comment">   *   partition on a: 1, !=1</span></span><br><span class="line"><span class="comment">   *   partition on b: 1, !=1</span></span><br><span class="line"><span class="comment">   *   partition on a: small (fits in a long value), or large (doesn&#x27;t fit)</span></span><br><span class="line"><span class="comment">   *   partition on b: small, large</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * cover the subdomains of these partitions:</span></span><br><span class="line"><span class="comment">   *   partition on signs of a and b:</span></span><br><span class="line"><span class="comment">   *      both positive</span></span><br><span class="line"><span class="comment">   *      both negative</span></span><br><span class="line"><span class="comment">   *      different signs</span></span><br><span class="line"><span class="comment">   *      one or both are 0</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// covers a is positive, b is negative, </span></span><br><span class="line">  <span class="comment">//        a fits in long value, b fits in long value,</span></span><br><span class="line">  <span class="comment">//        a and b have different signs</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDifferentSigns</span><span class="params">()</span> &#123;</span><br><span class="line">      assertEquals(BigInteger.valueOf(-<span class="number">146</span>), BigInteger.valueOf(<span class="number">73</span>).multiply(BigInteger.valueOf(-<span class="number">2</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// covers a = 1, b != 1, a and b have same sign</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testIdentity</span><span class="params">()</span> &#123;</span><br><span class="line">      assertEquals(BigInteger.valueOf(<span class="number">33</span>), BigInteger.valueOf(<span class="number">1</span>).multiply(BigInteger.valueOf(<span class="number">33</span>)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3><span id="ce-shi-fang-fa">测试方法</span><a href="#ce-shi-fang-fa" class="header-anchor">¶</a></h3><h4><span id="gt-bo-li-xiang-he-hei-xiang-ce-shi">&gt; 玻璃箱和黑箱测试</span><a href="#gt-bo-li-xiang-he-hei-xiang-ce-shi" class="header-anchor">¶</a></h4><ul><li><p>Goal: full test cases</p></li><li><p>Difference:</p><ul><li>black box testing means choosing test cases only from the specification</li><li>Glass box chooses test cases from the implementation of the function</li></ul></li></ul><h4><span id="gt-fu-gai-du">&gt; 覆盖度</span><a href="#gt-fu-gai-du" class="header-anchor">¶</a></h4><ul><li>statement coverage: every statement<ul><li>Coverage tool: counts the number of times each statement is run by your test suite</li></ul></li><li>Branch coverage: if/while/…, both the true and false direction</li><li>path coverage:combinations of branches</li></ul><h4><span id="gt-dan-yuan-he-ji-cheng-ce-shi">&gt; 单元和集成测试</span><a href="#gt-dan-yuan-he-ji-cheng-ce-shi" class="header-anchor">¶</a></h4><ul><li>Unit test a single module in isolation</li><li>integration test tests a combination of modules</li><li>Isolating a higher-level module is hard<ul><li>write stub versions of the modules that it calls: mock object</li></ul></li></ul><h4><span id="gt-zi-dong-hua-hui-gui-ce-shi">&gt; 自动化回归测试</span><a href="#gt-zi-dong-hua-hui-gui-ce-shi" class="header-anchor">¶</a></h4><ul><li><p>Regression test: test new changes to the code against existing test cases</p><ul><li>new changes: fix bugs, add new features, optimization</li><li>a test is good if it elicits a bug</li><li>save regression tests: avoid reintroducing the bug</li><li>Test-first debugging</li></ul></li><li><p>automated test: running the tests and checking the results automatically</p><ul><li>Test driver</li><li>using junits</li></ul></li><li><p>Automate regeression test: use in combination</p></li></ul><h3><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">¶</a></h3><p>迭代式测试优先编程：</p><ol><li>Practice</li></ol><ul><li>Write spec</li><li>write test that exercise the spec. As u find problems, iterate on the spec and the tests</li><li>Write an implementation. As u find problems, iterate on the spec, the tests, and the implementation</li></ul><ol start="2"><li>writing tests to understand the spec and fix specs</li><li>Plan for iteration</li></ol><ul><li>large spec:  先写一部分spec，然后写测试和实现那一部分，迭代此步骤</li><li>Complex test suite: 选择少部分重要的写一个小的测试集，再写一个简单的实现通过测试，迭代</li><li>tricky implementation： 先暴力写个解法通过测试以确定真的理解了spec和测试。then move on to the harder implementation.</li></ul><h2><span id="r9-bi-mian-diao-shi">R9: 避免调试</span><a href="#r9-bi-mian-diao-shi" class="header-anchor">¶</a></h2><p>first defense: make bugs impossible</p><ul><li>by immutability</li><li>static checking.</li></ul><p>second defense:localize bugs</p><ul><li><p>by <strong>defensive programming</strong> such as throwing exception when checking preconditions</p></li><li><p>By incremental development</p><p>一点点写，写一点测试一点（单元测试和回归测试）</p></li><li><p>By modularity</p><blockquote><p><strong>Modularity</strong> means dividing up a system into components, or modules, each of which can be designed, implemented, tested, reasoned about, and reused separately from the rest of the system.</p></blockquote></li><li><p>encapsulation</p><blockquote><p><strong>Encapsulation</strong> means building walls around a module so that the module is responsible for its own internal behavior, and bugs in other parts of the system can’t damage its integrity.</p></blockquote><ul><li><p>Access control: use “public, private, protect” to control the visibility and accessibility of the variables and methods.</p></li><li><p>variable scope: minimize the scope of variables</p><ul><li><p>Always declare a loop variable in the for-loop initializer.</p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br></pre></td></tr></table></figure><p>Better:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>Declare a variable only when you first need it, and in the innermost curly-brace block that you can.</p></li><li><p>Avoid global variables.</p></li></ul></li></ul></li></ul><h3><span id="sheng-ming">声明</span><a href="#sheng-ming" class="header-anchor">¶</a></h3><blockquote><p>java tips:<strong>A serious problem with Java assertions is that assertions are off by default.</strong></p><p>由于assertion需要额外的时间消耗检视数据，所以在运行时关掉但在测试时最好打开以定位可能的程序设计错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssertionsEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">    assertThrows(AssertionError.class, () -&gt; &#123; <span class="keyword">assert</span> <span class="literal">false</span>; &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>what to assert?</p><ul><li>Method argument requirements: like preconditions</li><li>method return value requirements: postconditions</li></ul><p>when to assert?</p><ul><li>As you write the code, you can still remember the invariants of the program.</li></ul><p>what not to assert?</p><ul><li><p>external conditions</p><blockquote><p>外界条件比如文件是否存在，网络可用性，输入数据的正确性。assertion应该考虑的是程序是否能符合spec的规范。</p><p>When an assertion fails, it indicates that the program has run off the rails in some sense, into a state in which it was not designed to function properly.</p></blockquote></li><li><p>Expression whether is executed</p></li><li><p>conditional statements cover all the possible cases: instead, throw an exception in the illegal cases when checking</p></li></ul><h2><span id="r13-debugging">R13: debugging</span><a href="#r13-debugging" class="header-anchor">¶</a></h2><p>learn the systematic debugging techniques.</p><h3><span id="fu-xian-wen-ti">复现问题</span><a href="#fu-xian-wen-ti" class="header-anchor">¶</a></h3><p>Have a test case for the bug, and make this test work.</p><blockquote><p>First work on <u>reducing the size of the buggy input</u> to something manageable that still exhibits the same (or very similar) bug.</p></blockquote><h3><span id="ke-xue-shi-yan-fa-xun-zhao-wen-ti">科学实验法寻找问题</span><a href="#ke-xue-shi-yan-fa-xun-zhao-wen-ti" class="header-anchor">¶</a></h3><p>Problem: where is the bug?</p><p>scientific methods:</p><h3><span id="1-yan-jiu-shu-ju">1.研究数据</span><a href="#1-yan-jiu-shu-ju" class="header-anchor">¶</a></h3><p>查看测试输入导致的问题，检查错误结果，失败声明，和stack traces</p><h3><span id="2-ti-chu-jia-she">2.提出假设</span><a href="#2-ti-chu-jia-she" class="header-anchor">¶</a></h3><p>think about your program as a flow of data, or steps in an algorithm, and try to rule out whole sections of the program at once. Binary search can help minimize the search space.</p><ul><li><p>Slicing:找到产生出一个特定值的所有计算部分。</p><p>如果该计算错误则问题出现在这一部分的某一步骤，那么从错误的结果出发回溯代码中涉及到的所有部分。有利的设计选择有助于帮助缩小检索范围。比如：immutability,这提示我们这一变量是否会受代码的其他部分影响，不过应该注意final修饰的限定变量的不同（final int bonus vs. final Sale s, 尽管s不会重新赋值，但Sale仍可能会改变从而影响s)；scope minimization, 比如local variable和global variable。</p><blockquote><p>With instance variables, the slicing search might have to expand to include the entire class. For a global variable (gasp), the search expands to include the entire program.</p></blockquote></li><li><p>Delta debugging: it uncovers two closely-related test cases that bracket the bug, in the sense that one succeeds and one fails.One hypothesis is that the bug lies in those lines of code, the <em>delta</em> between the passing run and the failing run.</p><p>利用版本控制来比较两种情况（A成功，B失败；A失败，B成功）下代码的改变情况，知道找到导致出错的问题。</p></li><li><p>prioritize hypotheses: trust lower levels code until you’ve found good reason not to. Like: java compiler and runtime, os, hardware&gt;well-tested code &gt; your code.</p><p>比如在db pj0 autograder导致的一系列问题，实际上是对smart pointer的部分使用不熟。</p></li></ul><h3><span id="3-shi-yan">3.实验</span><a href="#3-shi-yan" class="header-anchor">¶</a></h3><p>Make a prediction and test it. The best experiment is a probe.</p><ul><li><p>print debugging</p><ul><li><p>print statement: write good debugging print statement to keep track of code</p><p>需要注意在测试完成后除去print statement</p></li><li><p>Logging</p><p>能够从全局用变量控制是否启用logging</p><blockquote><p>A logging framework like <a href="https://logging.apache.org/log4j/">Log4j</a> can also direct the logging to a file or to a server across the network, can log structured data as well as human-readable strings, and can be used in deployment, not just development.</p></blockquote></li></ul></li><li><p>assertion</p><p>好处是不用手动检查变量，只用设置条件。</p></li><li><p>breakpoint with a debugger like gdb</p></li></ul><p>对一些方法的分析：</p><ul><li><p>Swap components: don’t do it unless you have good reasons</p><blockquote><p>If you hypothesize that the bug is in a module, a different implementation of it that satisfies the same interface, then one experiment you can do is to try swapping in the alternative.</p><ul><li>If you suspect your <code>binarySearch()</code> implementation, then substitute a simpler <code>linearSearch()</code> instead.</li><li>If you suspect <code>java.util.ArrayList</code>, swap in <code>java.util.LinkedList</code> instead.</li></ul></blockquote></li><li><p>one bug at a time</p><ul><li><p>keep a bug list</p></li><li><p>Don’t get distracted from the bug you’re working on.Keep your code changes focused on careful,controlled probes of one bug at a time.</p><p>a bug can be reproduce another bug and get into recursive debugging process which is bad cause you don’t know how those changes might affect your debugging experiments.</p><blockquote><p>because you may have a hard time popping your mental stack to return to the original bug. And don’t edit your code arbitrarily while you are debugging, because you don’t know whether those changes might affect your debugging experiments.</p></blockquote></li></ul></li><li><p>don’t fix yet: mere probe &gt; fix the hypothesized bug</p><p>fix the real problem.</p><p>你可能只是掩盖了错误而不是找到了真正的问题所在。我觉得我在db pj1遇到的就是这样。</p></li></ul><h3><span id="4-chong-fu">4.重复</span><a href="#4-chong-fu" class="header-anchor">¶</a></h3><p>重复以上步骤，如果假设正确缩小产生错误的可能区域，假设错误修改假设以适应观察。</p><ul><li><p>When to apply this method? 10-minute rule. 十分钟肉眼调试调不出来就用</p></li><li><p>Taking note during this process:</p></li></ul><blockquote><ul><li><em>Hypothesis.</em> Based on what you’ve learned so far, what’s your next hypothesis about the location or cause of the bug?</li><li><em>Experiment.</em> What are you about to try that will shed light on the hypothesis, by verifying or falsifying it?</li><li><em>Predictions.</em> What do you expect, based on your hypothesis, to be the result of the experiment?</li><li><em>Observations.</em> What actually happened when you did the experiment?</li></ul></blockquote><h3><span id="xiu-fu-wen-ti">修复问题</span><a href="#xiu-fu-wen-ti" class="header-anchor">¶</a></h3><p>直到你找到问题并理解导致原因时，再修改代码。</p><p>先问问题是哪种类型的：</p><ul><li>coding error<ul><li>Misspelled variable/interchanged method parameters</li></ul></li><li>design error -&gt; step back and revisit your design<ul><li>Underspecified or insufficient interface</li></ul></li></ul><p>Method：</p><ul><li><p>Look for related bugs, and newly-created ones.</p></li><li><p>Undo debugging probes.</p></li><li><p>Make a regression test</p><blockquote><p>make sure that :</p><p>(a) the bug is fixed</p><p>(b)no new bugs have been introduced</p></blockquote></li></ul><h3><span id="tips">Tips</span><a href="#tips" class="header-anchor">¶</a></h3><ul><li><p>Keep an audit trail: 当进行了很多次科学实验的循环（肉眼调试）找bug</p><p>keep a log in a text file of what you dit, in what order, and what happened as a result.</p><blockquote><ul><li>the hypothesis you are exploring now</li><li>the experiment you are trying now to test that hypothesis</li><li>what you observe as a result of the experiment:<ul><li>whether the test passed or failed this time</li><li>the program output, especially your own debugging messages</li><li>any stack traces</li></ul></li></ul></blockquote></li><li><p>check the plug</p><p>当反复迭代找问题仍然不可解时，可以怀疑是不是assumption（外置条件）错了。就像电脑无法启动怀疑插头没插电源没开没电了而不是怀疑机器或者开关坏了。比如db的autograder只支持当年的project（函数名正确）。</p><ul><li>Make sure your source code and object code are up to date.</li></ul></li><li><p>if YOU didn’t fix it, it isn’t really fixed</p><p>当你并没有明白问题为什么消失时，问题并没有真正解决而只是暂时藏了起来。尤其在并行编程出现问题的时候。</p><p>因此系统的调试帮助我们理解为什么问题被解决而不是暂时隐藏问题。这就是最初要先让问题显现的原因，你必须在问题仍没被解决是发现导致问题的原因，知道你真正理解自己在做什么。</p><blockquote><p>you want to see that your change caused the system to transition from failing to working, and understand why.</p></blockquote></li><li><p>Get a fresh view</p><p>小黄鸭测试法。解释为什么你的代码可以运行，它在做什么。</p><p>小黄鸭-&gt;知道你在做什么的同事-&gt;staff/mentor</p><ul><li>Minimizing your bug will help you make a minimal,reproducible example to throw at stackoverflow.</li></ul></li><li><p>Sleep on it. Trade latency for efficiency</p></li></ul><h3><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">¶</a></h3><blockquote><p>In this reading, we looked at how to debug systematically:</p><ul><li>reproduce the bug as a test case, and put it in your regression suite</li><li>find the bug using the scientific method:<ul><li>generate hypotheses using slicing, binary search, and delta debugging</li><li>use minimially-invasive probes, like print statements, assertions, or a debugger, to observe program behavior and test the prediction of your hypotheses</li></ul></li><li>fix the bug thoughtfully</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SC concurrency</title>
      <link href="/sg/2021/10/20/SC_concurrency/"/>
      <url>/sg/2021/10/20/SC_concurrency/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r20-concurrency">R20: concurrency</a><ul><li><a href="#two-models-for-concurrent-programming">two models for concurrent programming</a></li><li><a href="#basic-concepts">basic concepts</a></li><li><a href="#starting-a-thread-with-an-anonymous-class">starting a thread with an anonymous class</a></li><li><a href="#shared-memory-example">Shared memory example</a></li><li><a href="#message-passing-example">Message passing example</a></li><li><a href="#concurrency-is-hard-to-debug">concurrency is hard to debug</a></li></ul></li><li><a href="#r21-22-thread-safety">R21&amp;22: thread safety</a><ul><li><a href="#what-is-threadsafe">what is threadsafe?</a></li><li><a href="#how-to-make-a-safety-argument">how to make a safety argument?</a></li><li><a href="#strategy1-confinement">Strategy1: confinement</a></li><li><a href="#strategy2-immutability">Strategy2: immutability</a></li><li><a href="#strategy3-using-threadsafe-data-types">Strategy3:using threadsafe data types</a></li><li><a href="#strategy4-synchronization">Strategy4: synchronization</a></li></ul></li><li><a href="#r23-queues-message-passing">R23: queues &amp; message-passing</a><ul><li><a href="#producer-consumer-design-pattern">producer-consumer design pattern</a></li><li><a href="#race-conditions">race conditions</a></li></ul></li><li><a href="#r24-sockets-networking">R24: sockets &amp; networking</a><ul><li><a href="#client-server-design-pattern">Client/server design pattern</a></li><li><a href="#sockets-and-streams">sockets and streams</a></li><li><a href="#using-network-sockets-in-java">Using network sockets in Java</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="r20-concurrency">R20: concurrency</span><a href="#r20-concurrency" class="header-anchor">¶</a></h2><p>Concurrency is handling tasks in the overlapping period (multitask on a single-core computer) while parallelism is when tasks run at the same time (multi-processor)<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p><h3><span id="two-models-for-concurrent-programming">two models for concurrent programming</span><a href="#two-models-for-concurrent-programming" class="header-anchor">¶</a></h3><ol><li>message passing: modules share the same memory space</li><li>shared memory: modules communicate through a communication channel</li></ol><h3><span id="basic-concepts">basic concepts</span><a href="#basic-concepts" class="header-anchor">¶</a></h3><p><strong>Process</strong></p><blockquote><p>A process is an instance of a running program that is <em>isolated</em> from other processes on the same machine. In particular, it has its own private section of the machine’s memory.</p></blockquote><ul><li>The process abstraction is a <em>virtual computer</em>.</li></ul><p><strong>Thread</strong></p><blockquote><p>A thread is a locus of control inside a running program. Think of it as a place in the program that is being run, plus the stack of method calls that led to that place (so the thread can go back up the stack when it reaches <code>return</code> statements).</p></blockquote><ul><li>the thread abstraction represents a <em>virtual processor</em></li></ul><p><strong>Time slicing</strong></p><ul><li>the processor switches between threads when there are more threads than processors</li></ul><h3><span id="starting-a-thread-with-an-anonymous-class">starting a thread with an anonymous class</span><a href="#starting-a-thread-with-an-anonymous-class" class="header-anchor">¶</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from a thread!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//named class</span></span><br><span class="line"><span class="comment">/** A comparison function that imposes a total ordering on some objects.</span></span><br><span class="line"><span class="comment"> *  ... */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Comparator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/** Compares its two arguments for order.</span></span><br><span class="line"><span class="comment">     *  ...</span></span><br><span class="line"><span class="comment">     *  <span class="doctag">@return</span> a negative integer, zero, or a positive integer if the first</span></span><br><span class="line"><span class="comment">     *          argument is less than, equal to, or greater than the second */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Orders Strings by length (shorter first) and then lexicographically. */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringLengthComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() == s2.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;alice&quot;, &quot;bob&quot;, &quot;yolanda&quot;, &quot;zach&quot; &#125;</span></span><br><span class="line">With a Comparator:</span><br><span class="line"></span><br><span class="line"><span class="comment">// uses StringLengthComparator declared above</span></span><br><span class="line">Comparator&lt;String&gt; compareByLength = <span class="keyword">new</span> <span class="title class_">StringLengthComparator</span>();</span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(compareByLength);</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;bob&quot;, &quot;zach&quot;, &quot;alice&quot;, &quot;yolanda&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// uses StringLengthComparator declared above</span></span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">StringLengthComparator</span>());</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;bob&quot;, &quot;zach&quot;, &quot;alice&quot;, &quot;yolanda&quot; &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// no StringLengthComparator class!</span></span><br><span class="line">SortedSet&lt;String&gt; strings = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1.length() == s2.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s1.compareTo(s2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s1.length() - s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">strings.addAll(List.of(<span class="string">&quot;yolanda&quot;</span>, <span class="string">&quot;zach&quot;</span>, <span class="string">&quot;alice&quot;</span>, <span class="string">&quot;bob&quot;</span>));</span><br><span class="line"><span class="comment">// strings is &#123; &quot;bob&quot;, &quot;zach&quot;, &quot;alice&quot;, &quot;yolanda&quot; &#125;</span></span><br></pre></td></tr></table></figure><p>advantage: one-off implementations</p><p>Disadvantage: a named class is good for needing more than once.</p><p>Never call run() on a thread, or on a runnable that you created for a thread, which uses the same thread.</p><p>Instead, make a new Thread() with an instance of your Runnable, and call start() on the thread to start it.</p><p>junit: test fails if an exception is thrown and not caught by the test code itself.</p><h3><span id="shared-memory-example">Shared memory example</span><a href="#shared-memory-example" class="header-anchor">¶</a></h3><p>Race condition: the correctness of the program depends on the relative timing of events in concurrent computations A and B. “A is in a race with B.”</p><p>It can’t be told what the atomic operations(the individual steps of the computation) will be.</p><p>System.exit(): main() may return while its threads are still running. Use exit to force the process to exit.</p><h3><span id="message-passing-example">Message passing example</span><a href="#message-passing-example" class="header-anchor">¶</a></h3><p>Interleaving of the messages sent to the bank account.</p><h3><span id="concurrency-is-hard-to-debug">concurrency is hard to debug</span><a href="#concurrency-is-hard-to-debug" class="header-anchor">¶</a></h3><p>问题可能存在于多个程序，os？网络？cpu?</p><p>问题很难再现，想想吧，相同的问题位置，出错的地方确不同或者不会发生。</p><p>并且print-debug失效，因为它们相比于运行的程序的操作要慢100倍～1000倍。当使用print时，足够的时间改变操作的时间。</p><p>Nondeterministic behavior causation?</p><h2><span id="r21-amp-22-thread-safety">R21&amp;22: thread safety</span><a href="#r21-amp-22-thread-safety" class="header-anchor">¶</a></h2><h3><span id="what-is-threadsafe">what is threadsafe?</span><a href="#what-is-threadsafe" class="header-anchor">¶</a></h3><blockquote><p>if it behaves correctly when used from multiple threads, regardless of how those threads are executed, and without demanding additional coordination from the calling code.</p><ul><li>“Behaves correctly” means satisfying its specification and preserving its rep invariant.</li><li>“Regardless of how threads are executed” means threads might be on multiple processors or timesliced on the same processor.</li><li>And “without additional coordination” means that the data type can’t put preconditions on its caller related to timing, like “you can’t call <code>get()</code> while <code>set()</code> is in progress.”</li></ul></blockquote><h3><span id="how-to-make-a-safety-argument">how to make a safety argument?</span><a href="#how-to-make-a-safety-argument" class="header-anchor">¶</a></h3><p>how to make code safe in concurrent programming?</p><p>Don’t share data between threads (by confinement, immutability, threadsafe data types).</p><p>The difficult one is how to implement a threadsafe type.</p><h3><span id="strategy1-confinement">Strategy1: confinement</span><a href="#strategy1-confinement" class="header-anchor">¶</a></h3><p>idea: Avoid races on reassignable references and mutable data by keeping those confined to a single thread.</p><p>Shared mutable state is the root cause of a race condition.</p><p>don’t use global variables: static variables are accessible to all threads therefore can be changed. While local variables are confined to single thread.</p><h3><span id="strategy2-immutability">Strategy2: immutability</span><a href="#strategy2-immutability" class="header-anchor">¶</a></h3><p>keep the data immutable and variables unreassignable.</p><blockquote><p>Threadsafe immutability:</p><ul><li>no mutator methods</li><li>all fields declared <code>private</code> and <code>final</code></li><li>no <a href="https://web.mit.edu/6.031/www/sp21/classes/11-abstraction-functions-rep-invariants/#invariants">representation exposure</a></li><li>no mutation whatsoever of mutable objects in the rep – not even <a href="https://web.mit.edu/6.031/www/sp21/classes/11-abstraction-functions-rep-invariants/#beneficent_mutation">beneficent mutation</a></li></ul></blockquote><h3><span id="strategy3-using-threadsafe-data-types">Strategy3:using threadsafe data types</span><a href="#strategy3-using-threadsafe-data-types" class="header-anchor">¶</a></h3><p>Store shared data in existing threadsafe data types.</p><p>threadsafe collections:</p><p>wrapper methods that make collections threadsafe while still mutable</p><p>Notice:</p><ul><li>don’t circumvent the wrapper</li><li>Iterators are still not threadsafe<ul><li>Solution: collections’ lock</li></ul></li><li>Atomic operations aren’t enough to prevent races</li></ul><h3><span id="strategy4-synchronization">Strategy4: synchronization</span><a href="#strategy4-synchronization" class="header-anchor">¶</a></h3><p><u>The correctness of a concurrrent program should not depend on accidents of timing.</u></p><p>Problem: bugs in concurrent programming</p><blockquote><p>steps to develop the datatype:</p><ol><li><p>Specify: define operations</p></li><li><p>test</p></li><li><p>rep</p><p>a. Implement a simple, brute-force rep first</p><p>b. write down the rep invariant and abstraction function, and implement checkRep()</p></li><li><p>Synchronize</p></li><li><p>Iterate</p></li></ol></blockquote><h2><span id="r23-queues-amp-message-passing">R23: queues &amp; message-passing</span><a href="#r23-queues-amp-message-passing" class="header-anchor">¶</a></h2><p>主要用java讲了个queue&amp;message-passing的例子。内容：</p><ol><li>与shared memory system对比，message-passing使两个thread间有独立性，出错的概率更小。</li><li>blocking queues pattern，其实和6.004中sophomore的例子相似，加上了一些java语法的细节</li><li>实例： 放在冰箱里有一些饮料，一些人需要拿饮料。(代码在本地文件夹中)</li></ol><p>相当于6.004的sychronization另外的一个例子。</p><h3><span id="producer-consumer-design-pattern">producer-consumer design pattern</span><a href="#producer-consumer-design-pattern" class="header-anchor">¶</a></h3><p>problem: how to implement message passing with in single process?</p><p>Design: producer-consumer design pattern</p><p>Problem: how to stop the process?</p><p>Approach1: a <em>poison pill</em>: a special message on the queue that signals the consumer of that message to end its work.</p><p>Approach2: change the type of elements on the requests queue to an ADT:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FridgeRequest = DrinkRequest(n:int) + StopRequest</span><br></pre></td></tr></table></figure><p>with operations:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drinksRequested : FridgeRequest → int</span><br><span class="line">shouldStop : FridgeRequest → boolean</span><br></pre></td></tr></table></figure><p>and when we want to stop the fridge, we enqueue a <code>FridgeRequest</code> where <code>shouldStop</code> returns <code>true</code>.</p><p>Approach3:signal a thread that it should stop working by calling that thread’s <a href="http://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Thread.html#interrupt()"><code>interrupt()</code></a> method</p><h3><span id="race-conditions">race conditions</span><a href="#race-conditions" class="header-anchor">¶</a></h3><p>prevent deadlock:</p><ol><li><p>design the system so that there is no possibility of a cycle — so that if A is waiting for B, it cannot be that B was already (or will start) waiting for A.</p></li><li><p><em>timeouts</em>：If a module has been blocked for too long (maybe 100 milliseconds? or 10 seconds? how to decide?), then you stop blocking and throw an exception.</p><p>problem: what do you do when that exception is thrown?</p></li></ol><h2><span id="r24-sockets-amp-networking">R24: sockets &amp; networking</span><a href="#r24-sockets-amp-networking" class="header-anchor">¶</a></h2><p>compared to producer-consumer pattern, client-server pattern abstracts the communication over the network using the sockets.</p><h3><span id="client-server-design-pattern">Client/server design pattern</span><a href="#client-server-design-pattern" class="header-anchor">¶</a></h3><blockquote><p>In this pattern there are two kinds of processes: clients and servers. A client initiates the communication by connecting to a server. The client sends requests to the server, and the server sends replies back. Finally, the client disconnects. A server might handle connections from many clients concurrently, and clients might also connect to multiple servers.</p></blockquote><h3><span id="sockets-and-streams">sockets and streams</span><a href="#sockets-and-streams" class="header-anchor">¶</a></h3><p>Basic concepts related to network communication, and to input/output. (I/O refers to communication into and out of a process.)</p><ul><li><p>IP addresses</p></li><li><p>Hostnames</p></li><li><p>Port numbers</p></li></ul><h4><span id="gt-network-sockets">&gt; Network sockets</span><a href="#gt-network-sockets" class="header-anchor">¶</a></h4><p>A <a href="http://en.wikipedia.org/wiki/Network_socket"><strong>socket</strong></a> represents one end of the connection between client and server.</p><ul><li>listening socket：used by a server process to wait for connections from remote clients.</li><li>connected socket：send and receive messages to and from the process on the other end of the connection.</li></ul><p><strong>Physical-socket analogy</strong></p><ul><li><p>用户和服务器的连接过程就像将USB线插入接口一样，没插入前的接口是listening socket，插入接口的线和接口是connected socket。正如一条线有两个终端，连接的socket也有两个终端分别在用户端和服务器端。</p></li><li><p>细节上的区别：在实际的socket连接中，当用户请求被listening socket接收，服务器重新产生一个新的connected socket来管理连接，而保留着listening socker继续接受用户请求。</p></li></ul><h4><span id="gt-streams">&gt; streams</span><a href="#gt-streams" class="header-anchor">¶</a></h4><ul><li>buffers</li><li>Byte streams</li><li>character streams</li><li>Blocking</li></ul><h4><span id="gt-wire-protocols">&gt; wire protocols</span><a href="#gt-wire-protocols" class="header-anchor">¶</a></h4><blockquote><p>A <strong>protocol</strong> is a set of messages that can be exchanged by two communicating parties.</p><p>A <strong>wire protocol</strong> in particular is a set of messages represented as byte sequences, like <code>hello world</code> and <code>bye</code> (assuming we’ve agreed on a way to encode those characters into bytes).</p></blockquote><ul><li><p>Telnet client</p></li><li><p>http</p></li><li><p>smtp</p></li></ul><p><strong>Design a wire protocol</strong></p><p>use same <a href="http://web.mit.edu/6.031/www/sp21/classes/24-sockets-networking/#designing_a_wire_protocol">strategy</a> as designing ADT</p><h3><span id="using-network-sockets-in-java">Using network sockets in Java</span><a href="#using-network-sockets-in-java" class="header-anchor">¶</a></h3><ul><li>client</li><li>server</li><li>multithreaded server</li><li>Closing streams and sockets with <u>try-with-resources statement</u></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (</span><br><span class="line">    <span class="comment">// preamble: declare variables initialized to objects that need closing after use</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="comment">// body: runs with those variables in scope</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(...) &#123;</span><br><span class="line">    <span class="comment">// catch clauses: optional, handles exceptions thrown by the preamble or body</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// finally clause: optional, runs after the body and any catch clause</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// no matter how the try statement exits, it automatically calls</span></span><br><span class="line"><span class="comment">// close() on all variables declared in the preamble</span></span><br></pre></td></tr></table></figure><p><strong>testing</strong></p><p><a href="http://web.mit.edu/6.031/www/sp21/classes/24-sockets-networking/#testing_clientserver_code">Example</a></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://stackoverflow.com/questions/1050222/what-is-the-difference-between-concurrency-and-parallelism">https://stackoverflow.com/questions/1050222/what-is-the-difference-between-concurrency-and-parallelism</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>db buffer poo</title>
      <link href="/sg/2021/10/19/db_memory_management/"/>
      <url>/sg/2021/10/19/db_memory_management/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#buffer-pool-manager">Buffer Pool Manager</a></li></ul><!-- tocstop --></div><p>Terminology:</p><ol><li>Hardware page: The storage device guarantees an atomic write of the size of the hardware page. A hardware page is the largest block of data that the storage device can guarantee failsafe writes.</li><li>Database heap: Heap file organization is one of ways to organize pages of a DBMS. It helps to find the location of the page that DBMS wants on disk. A heap file consists of unordered pages where tuples are stored in random order.</li><li>Tuple: a tuple is a sequence of bytes, contiguous or not, to interpreted by DBMS into attribute types and values.</li></ol><p>Storage should prove virtually sufficient memory, maximize sequential access due to principle of locality and prevent I/O delays due to disk access. Databases manage its own storage because operating systems are not aware of the file layout or the difference of queries.</p><p>The DBMS stores database as files on disk in pages. Storage manager can organize files as a collection of pages and keep track of data read/written to pages and available space. Pages in DBMS concepts are divided into hardware page (usually 4 KB), OS page (4 KB), and database page (1-16 KB). A database page is always fixed-size to avoid the engineering overhead to support variable page size. If a database page is larger than a hardware page, the DBMS needs to guarantee write atomicity.</p><p>Data layouts in pages use two main approaches: slotted-pages and log-structured. Slotted pages map slots to offsets. Log-structured architecture stores the log records of changes to the tuples. The log-structured model assumes no overwrites and only allows creation of new pages on a system, which helps to address several problems of slotted pages such as fragmentation, useless and random disk I/O.</p><p>Log-structure storage is built upon LSTF and LSM Tree. To store a log entry, the DBMS does the following operations:</p><ol><li>Apply changes to an in-memory data structure (MemTable)</li><li>Write out the changes sequentially to disk (SSTable)</li><li>Sorts each SSTable based on keys before writing out.</li></ol><p>The read path is to check MemTable first and then check SSTables at each level. To avoid brute force scans of SSTables, the DBMS maintains an in-memory SummaryTable to track system catalogs.</p><p>In a write-heavy workload, the DBMS stockpiles a large number of SSTables. Thus, the DBMS periodically compacts the logs by taking the most recent update. The log compaction can reduce wasted space and accelerate reads. There are three major approaches to log compaction: universal, level, and tiering compaction.</p><p>Analysis of trade-offs of using log-structured storage breaks down to several aspects: writes, reads, compaction, write amplification.</p><p>In the index-organized storage, the DBMS stores indexes as keys and a table’s tuples as the values to those keys. The tables of databases are inherently unsorted. Storages rely on indexes to find a particular tuple.</p><h3><span id="buffer-pool-manager">Buffer Pool Manager</span><a href="#buffer-pool-manager" class="header-anchor">¶</a></h3><p>Terminology:</p><ol><li>Buffer pool: an in-memory cache of pages between memory and disk.</li><li>write-back cache: dirty pages are buffered and not written to disk immediately on mutation.</li><li>write-through cache: any changes are instantly propagated to disk.</li></ol><p>mmap vs. buffer pool</p><p>Disadvantages of mmap:</p><ul><li>Mmap must align sizes to a page size.</li><li>The memory mapped file’s content must fit into the calling process’ virtual address space.</li><li>Performance issues: cache coherence.</li></ul><p>What differentiates them is the management of memory contents in terms of OS or databases. A database can bypass the page cache of OS’ and manage in-memory data matching its own needs.</p><p>Paper: Are You Sure You Want to Use MMAP in Your Database Management System?</p>]]></content>
      
      
      <categories>
          
          <category> computer systems </category>
          
          <category> 15-445 databases </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sicp</title>
      <link href="/sg/2021/10/03/fp_sicp/"/>
      <url>/sg/2021/10/03/fp_sicp/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#procedures-as-building-blocks">Procedures as building blocks</a></li><li><a href="#recursion">Recursion</a></li><li><a href="#procedural-abstraction">Procedural abstraction</a></li><li><a href="#data-abstraction">Data abstraction</a></li><li><a href="#symbols">Symbols</a></li><li><a href="#mutation-and-the-environment-model">Mutation and the environment model</a><ul><li><a href="#data-mutation">Data mutation</a></li><li><a href="#environment-model">environment model</a></li></ul></li><li><a href="#interpretation-and-evaluation">Interpretation and evaluation</a><ul><li><a href="#interpretation-and-interpreter">interpretation and interpreter</a></li></ul></li></ul><!-- tocstop --></div><p>6.037 crash sicp</p><h2><span id="procedures-as-building-blocks">Procedures as building blocks</span><a href="#procedures-as-building-blocks" class="header-anchor">¶</a></h2><ul><li><p>Primitives: numbers, strings, booleans</p></li><li><p>Built-in procedures, value, primitives</p></li><li><p>Lambda: the value of a lambda expression is a procedure.</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lambda (x) (* x x))</span><br><span class="line">;(lambda (parameter list) (body))</span><br><span class="line">(define sth toSth)</span><br></pre></td></tr></table></figure><ul><li>Modularity</li><li>controlling the process:</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">;(if predicate consequent alternative)</span></span><br></pre></td></tr></table></figure><ul><li>Test<ul><li>rules for evaluation : sustitution model</li></ul></li></ul><h2><span id="recursion">Recursion</span><a href="#recursion" class="header-anchor">¶</a></h2><ul><li><p>Recursion vs. iteration</p><p>pending operations?</p><ul><li>Recurse: reduce problems to smaller subproblems</li><li>Iterative: constant space, based on the form of data<ul><li>需要一个范围，起点是什么，终点是什么</li></ul></li></ul></li></ul><h2><span id="procedural-abstraction">Procedural abstraction</span><a href="#procedural-abstraction" class="header-anchor">¶</a></h2><ul><li>Type of a procedure is a contract: 输入和输出的类型是确定的，如果输出不是此类型，那么：the behavior is undefined</li><li>patterns across procedures</li><li>Higher-order procedures take a <u>procedure</u> as a argument, or <u>return</u> one as a value</li><li>一个方程可以合在一起写，也可以分开写。</li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;argument&quot;</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">sum</span> term a next b)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">&gt;</span></span> a b)</span><br><span class="line">      <span class="number">0</span></span><br><span class="line">      (<span class="name"><span class="built_in">+</span></span> (<span class="name">term</span> a) (<span class="name">sum</span> term (<span class="name">next</span> a) next b))))</span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">new-sum-integers</span> a b)</span><br><span class="line">  (<span class="name">sum</span> (<span class="name"><span class="built_in">lambda</span></span> (x) x) a (<span class="name"><span class="built_in">lambda</span></span> (x) (<span class="name"><span class="built_in">+</span></span> x <span class="number">1</span>) b))</span><br><span class="line">  </span><br><span class="line"><span class="string">&quot;return procedures&quot;</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> incrementby (<span class="name"><span class="built_in">lambda</span></span> (n) ...))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> add1 (<span class="name">incrementby</span> <span class="number">1</span>)) <span class="comment">;;type: number -&gt; (number -&gt; number)</span></span><br></pre></td></tr></table></figure><h2><span id="data-abstraction">Data abstraction</span><a href="#data-abstraction" class="header-anchor">¶</a></h2><ul><li>types</li><li>Compound data<ul><li>a way of gluing data together</li><li>a way of getting the pieces back out</li><li>a contract between glue and unglue</li><li>Property: closure: treated as a primitive object</li></ul></li><li>Cons and friends<ul><li>Pairs (cons cell)<ul><li>a data abstraction</li></ul></li><li>abstractions have two communities: builders and users<ul><li><u>Constructor + accessors + contract + operations</u></li><li>----- abstraction barrier-----</li><li>Implementation</li></ul></li></ul></li><li>ex: rational number -&gt; list -&gt; map<ul><li>scheme list is a linked list</li></ul></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">cons</span></span> &lt;a&gt; &lt;b&gt;) -&gt; &lt;p&gt; <span class="comment">;;cons:construct</span></span><br><span class="line">(<span class="name"><span class="built_in">car</span></span> &lt;p&gt;) -&gt; &lt;a-val&gt;</span><br><span class="line">(<span class="name"><span class="built_in">cdr</span></span> &lt;p&gt;) -&gt; &lt;b-val&gt;</span><br></pre></td></tr></table></figure><h2><span id="symbols">Symbols</span><a href="#symbols" class="header-anchor">¶</a></h2><ul><li>Data types in scheme<ul><li>Conventional: numbers, characters and strings, booleans, vectors</li><li>Scheme- specific<ul><li>procedures</li><li>pairs and lists</li><li>Symbols</li></ul></li></ul></li><li>All data types are first class (scheme)<ul><li>Symbols -&gt; procedures -&gt; value of procedures -&gt; store in data structures</li></ul></li><li>referring to symbols: quote<ul><li>Object or expression to be evaluated</li></ul></li><li>operations<ul><li><u>symbol?</u> has type anytype -&gt; boolean: (symbol? 'foo) -&gt; #t</li><li>eq? tests the equality of symbols</li></ul></li><li>tagged data<ul><li>benefits<ul><li>Data-directed programming:</li><li>defensive programming</li></ul></li></ul></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">make-point</span> x y)</span><br><span class="line">  (<span class="name"><span class="built_in">list</span></span> <span class="symbol">&#x27;point</span> x y))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name">point?</span> thing)</span><br><span class="line">  (<span class="name"><span class="built_in">and</span></span> (<span class="name"><span class="built_in">pair?</span></span> thing)</span><br><span class="line">       (<span class="name"><span class="built_in">eq?</span></span> (<span class="name"><span class="built_in">car</span></span> thing) <span class="symbol">&#x27;point</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> (<span class="name"><span class="built_in">...</span></span>)</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name">point?</span> thing)</span><br><span class="line">      (<span class="name">....</span>)</span><br><span class="line">      (<span class="name">.....</span>))</span><br><span class="line">  (<span class="name"><span class="built_in">if</span></span> (<span class="name"><span class="built_in">not</span></span> (<span class="name">point?</span> pt)) <span class="comment">;;非需要的类型，更好地说明错误在哪</span></span><br><span class="line">      .....))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="mutation-and-the-environment-model">Mutation and the environment model</span><a href="#mutation-and-the-environment-model" class="header-anchor">¶</a></h2><h3><span id="data-mutation">Data mutation</span><a href="#data-mutation" class="header-anchor">¶</a></h3><ul><li><p>Mutators</p><ul><li>mutate 指的是改变pointer指向的对象。不只是substitution model。</li><li>Enable new and efficient data structures</li></ul></li><li><p>syntax: Expression sequences</p><ul><li>Begin: do sth and then return a value</li><li>Lambda,let, cond accept sequence</li><li>mutating compound data<ul><li>Only side-effect: type is changed to undef</li></ul></li></ul></li><li><p>Semantics: related to environment model</p></li></ul><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;primitive data&quot;</span></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> x <span class="number">1</span>)</span><br><span class="line">(<span class="name"><span class="built_in">set!</span></span> x <span class="number">2</span>) <span class="comment">;;mutate, for names; set-car!, set-cdr! for pairs.</span></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">begin</span></span> </span><br><span class="line"> (<span class="name"><span class="built_in">set!</span></span> x <span class="number">2</span>)</span><br><span class="line"> (<span class="name"><span class="built_in">set!</span></span> y <span class="number">3</span>)</span><br><span class="line"> <span class="number">4</span>)</span><br></pre></td></tr></table></figure><ul><li><p>Sharing, equivalence, and identity</p><ul><li>Same object: eq?</li><li>Look the same: equal?</li></ul></li><li><p>functional programming vs imperative programming</p><ul><li>函数式编程：计算函数，no assignments, easy to understand(代入求解都不会么？)</li><li>命令式编程：relies heavily on assignment, introduce new classes of bugs<ul><li>be able to modify local state</li></ul></li></ul></li><li><p>queue implementation</p><ul><li>Simple -&gt; better(attach a type tag to maintain queue identity)</li><li>单向链表到双向链表，就是语法不一样</li></ul></li></ul><h3><span id="environment-model">environment model</span><a href="#environment-model" class="header-anchor">¶</a></h3><p>New model of mutation for closures</p><ul><li><p>what</p><ul><li>Name-rule</li><li>define-rule</li><li>Set!-rule</li><li>Lambda-rule: creates a procedure in the same EM</li><li>application</li></ul></li><li><p>view on computation</p><ul><li>Variable, place to store things</li><li>Procedure, object with inherited context</li><li>Expressions, 不只与环境有关</li></ul></li><li><p>组成</p><ul><li>Frame: a table of bindings</li><li>Environment: a sequence of frames<ul><li>enclosing environment pointer</li></ul></li></ul></li><li><p>evalutation in the environment model</p><ul><li>Global environment</li><li>to evaluate a combination: evaluate the subexpressions in the current environment</li><li>Capture state in local frames &amp; procedures</li></ul></li><li><p>Let special form</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="built_in">let</span></span> ( (<span class="name">&lt;name1&gt;</span> &lt;expr1&gt;)</span><br><span class="line"> (<span class="name">&lt;name2&gt;&lt;expr2&gt;</span>)...) </span><br><span class="line">&lt;body&gt;) <span class="comment">;;body are evaluated in the new frame generated from current frame; hidden lambda</span></span><br><span class="line"></span><br><span class="line">Ex: (<span class="name"><span class="built_in">let</span></span> ((<span class="name">z</span> (<span class="name"><span class="built_in">/</span></span> (<span class="name"><span class="built_in">-</span></span> x2 x1) num-steps)))</span><br><span class="line">(<span class="name">square</span> z))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="built_in">define</span></span> make-counter</span><br><span class="line">  (<span class="name"><span class="built_in">lambda</span></span> (n)</span><br><span class="line">    (<span class="name"><span class="built_in">lambda</span></span> () (<span class="name"><span class="built_in">set!</span></span> n (<span class="name"><span class="built_in">+</span></span> n <span class="number">1</span>))</span><br><span class="line">      n</span><br><span class="line">      )))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Lambda captures the frame, which can be used to store local state.</p></li><li><p>people make rules to allow computer following, not themselves. (没想到是这样的EM)</p></li></ul><h2><span id="interpretation-and-evaluation">Interpretation and evaluation</span><a href="#interpretation-and-evaluation" class="header-anchor">¶</a></h2><h3><span id="interpretation-and-interpreter">interpretation and interpreter</span><a href="#interpretation-and-interpreter" class="header-anchor">¶</a></h3><ul><li>interpreter<ul><li>lexical analyzer: break up input str into words called tokens</li><li>parser: convert to a tree</li><li>evaluator<ul><li>Convert tree to a value</li><li>read and modify the environment</li></ul></li><li>Printer</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
          <category> functional programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>苏妈某演讲</title>
      <link href="/sg/2021/10/03/speechofsu/"/>
      <url>/sg/2021/10/03/speechofsu/</url>
      
        <content type="html"><![CDATA[<p>Good morning. Thank you for the opportunity to be here today. It’s really such an honor for me to be back at MIT and to really participate in today’s hooding ceremony. And I have to say a big, hearty congratulations to all of you who are graduating this week. I know just how hard you’ve worked for this achievement, and it’s an honor to be here to recognize you today. And also, to all of the friends and family who have supported our graduates this week, congratulations to you as well. Everyone here should feel extremely proud of this amazing accomplishment.</p><p>Now I heard a very insightful comment once that really stuck with me. And it was really that the two most important things that determines a person’s success in life is really the love of their family and their education. And I certainly believe that. As I think back to my days at MIT, I am incredibly grateful for the experiences that I had here and the things that I learned. And if you will indulge me for a few minutes, let me tell you a little bit about my story. So I was born in Taiwan, and I came to the United States when I was two, and I grew up in New York to immigrant parents. I was very lucky to have parents that supported me as I grew up, and really treating my brother and I as equals and <strong>setting extremely high standards for what success meant.</strong></p><p>Throughout grade school and middle school, I was an OK student, but I certainly wasn’t anywhere near best in my class. I did realize, though, that competition made me better. So in high school I went to the Bronx High School of Science, and I met some very smart people, and some of them were pretty competitive. And that pushed me harder and shaped my interests in math and science. Then I was lucky enough to get into MIT as an undergrad, and I truly understood what smart was. I think you guys understand that, too. Freshman year at MIT was actually very eye opening. And I would say it was pretty intimidating taking some of those freshmen weed out classes that we know exist at the Institute.</p><p>However, it was during my freshman year at MIT that I got my first undergraduate research assignment, and it was in a semiconductor lab. And I had the opportunity for the first time to do something that I thought was amazing. I fell in love with semiconductors because it was the ability to build something really small and really complicated, and I could do it myself. And it was during this time that I realized that I didn’t need to be the smartest person in the classroom, but if I really applied myself to solve practical problems, I could make a big difference. And so as I was graduating from the 6-A program at MIT, my parents encouraged me to get a PhD. I actually really wasn’t sure that this is what I wanted to do, but I was really too young you know at the time to know any better, so I said-- some of you might relate to that-- but I said, OK, you know, I’ll do it. But I was really torn with the prospect of spending another four to five years of my life in school.</p><p>Now I can honestly say that the MIT PhD has truly shaped who I am in so many ways, both personally and professionally. And so when people ask me what has MIT meant to me, I usually say a couple of things. I say MIT is pure, and it’s really hard. I do believe that MIT practices the motto what doesn’t kill you makes you stronger. Hope you guys agree with that. But what I really say, though, is that MIT taught me how to think and solve really tough problems because today, for all of you who are completing your doctoral dissertations, you have created something or discovered something or demonstrated something that nobody else in the world has. And that should give you an incredible amount of confidence about what you’re able to do when you put your mind to it. And through that you’ve really proven that you’re at the top of your field, and so you should feel extremely proud of that accomplishment.</p><p>So my path since leaving MIT has had a few twists and turns, and I find myself often coming back to the principles that I learned here. So as each of you sit here today, about to embark on your own journey, I have maybe just a couple of small pieces of advice that I would like to share with you.</p><p>The first-- and I’ll say this is, you should really <strong>dream big</strong>. Believe that you can change the world. I remember when I first left MIT,I was really intimidated about joining a large corporate environment I was 25 years old and I joined IBM’s TJ Watson Research Center, which had an incredible reputation. And I met people who had a lot more experience and knowledge than I had. And I had no idea how could I contribute in that environment and make a difference. However, what I learned is that MIT has really prepared you for that journey. MIT trains the best problem solvers in the world, and the world is starving for new ideas and great leaders who will champion those ideas. So I was able to make a difference even after a few short months, and each of you will make an incredible difference as well. You are the next generation of great leaders with fresh, innovative ideas, and you will solve the world’s toughest problems. You just have to believe in yourself and give yourself the permission to believe that you can change the world.</p><p>Second, I would say have the courage to <strong>take risks</strong>, sometimes big risks. But make sure you also enthusiastically learn from your mistakes. And there will be a few mistakes. I started off as an engineer and then turned to the business and management side of things in my career. And I saw, actually, in many business environments, that MIT PhDs worked for Harvard MBAs. And the truth is, that made absolutely no sense to me.[appLAUSE]I was determined to make sure that I wasn’t working for Harvard MBAs for the rest of my career. But truthfully, I actually thought I could make better business decisions because I understood the technology, whereas sometimes generalists don’t.[appLAUSE]So I took a risk, and I asked my management at IBM to give me a chance to run a business. And they did actually give me a shot, surprisingly. I made a lot of mistakes those first few years, and I learned that the moments that really shaped my career were the times when I really screwed up the most. It’s like in the lab, you know, when that experiment you thought was supposed to work out didn’t quite work out, you know, what do you do? You need to learn and adjust your next steps. It’s certainly like that in your career, as well. And sometimes you even make some very large mistakes. Like for example, the first business ran, I missed my revenue the first year by 50%.My boss wasn’t very happy about that. I spent about 24 hours being extremely disappointed in myself, but the day after, I promised myself I would learn from it. And I adjusted my game plan for the rest of the year. And you can believe I never made that particular mistake again. And so I really do say, don’t be afraid to take risks, even if some of them seem large, and don’t be afraid to make a few mistakes. Mistakes are natural. There’s no straight line to success. But the people who learn best from their mistakes are actually the ones who end up being the best leaders.</p><p>And the last thing I want to leave you with is perhaps most important. I encourage each of you to <strong>make your own luck</strong>. MIT has given you all the tools and training to be the best in the world and make a huge impact on your chosen field. However, in addition to being smart, you also have to be lucky, and <strong>you have to be in the right place at the right time solving the right problems.</strong> So my favorite advice to graduates is find the toughest problems in the world and volunteer to help solve them because this is really how you make your own luck. This is when people really pay attention. And this is when you’re really doing something that makes a difference. I’ve had the opportunity several times in my career to work on some very hard problems. Sometimes I found it extremely frustrating and stressful. But each time, I found that working on something hard brought out the best in me and also my team. And it also created a new set of opportunities. So five years ago I had the opportunity to join AMD. Now when I joined AMD, there were a few of my mentors who actually questioned my decision because they knew about the challenges of the company. And I actually looked at them really perplexed. I actually felt like I could not possibly have a better opportunity because I had trained my entire career, since my days at MIT through my 20 years in industry, to lead a semiconductor company. And so this was my opportunity to make my own luck.</p><p>The world is full of very complex and challenging problems. And I truly believe that what MIT has taught us is that <strong>there is no problem that is too hard to solve if you have the right mindset, the right perseverance, and the right creativity.</strong> So I advise you to run towards those problems, and you will have great luck throughout your career. So today is a tremendous day for all of you. It really is a celebration of your MIT experience, but it’s also a celebration of the beginning of the next chapter in your career, where you start to leverage all of the tools and training you’ve received here to go off and solve the world’s hardest problems and make the world a better place. <strong>So I encourage each of you to dream big and believe you can change the world, have the courage to take risks and enthusiastically learn from those mistakes, and work damn hard every day to solve the world’s toughest problems.</strong> And I think if you do that, I’m pretty sure you’re going to make everybody very proud, and you will be incredibly lucky throughout your career. So I do have one last personal request for all of you. You know, I told you at the beginning that I’m slightly competitive, just slightly. So please promise me that you will join me on my journey to make sure that there are lots of Harvard MBAs working for MIT PhDs in the future. Thank you very much and congratulations.</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SC ADT</title>
      <link href="/sg/2021/09/30/SC_ADT/"/>
      <url>/sg/2021/09/30/SC_ADT/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r10-abstraction-data-types">R10: abstraction data types</a><ul><li><a href="#access-control">access control</a></li><li><a href="#what-abstraction-means">What abstraction means</a></li><li><a href="#classifying-types-and-operations">classifying types and operations</a></li><li><a href="#what-and-how-what-is-adt-and-how-to-design">What and how: what is ADT and how to design</a></li><li><a href="#representation-independence">representation independence</a></li><li><a href="#testing">Testing</a></li></ul></li><li><a href="#r11-abstraction-function-rep-invariants">R11: abstraction function &amp; rep invariants</a><ul><li><a href="#invariants">invariants</a></li><li><a href="#rep-invariants-and-abstract-function">Rep invariants and abstract function</a></li><li><a href="#beneficent-mutation">Beneficent mutation</a></li><li><a href="#documenting-the-af-ri-and-safety-from-rep-exposure">Documenting the AF, RI, and safety from rep exposure</a></li><li><a href="#adt-invariants-replace-preconditions">ADT invariants replace preconditions</a></li></ul></li><li><a href="#r12-defining-adts">R12:defining ADTs</a><ul><li><a href="#interface">Interface</a></li><li><a href="#subclassing">subclassing</a></li><li><a href="#generic-types">Generic types</a></li><li><a href="#enumerations">enumerations</a></li><li><a href="#adts-in-non-oop-languages">ADTs in non-OOP languages</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="r10-abstraction-data-types">R10: abstraction data types</span><a href="#r10-abstraction-data-types" class="header-anchor">¶</a></h2><h3><span id="access-control">access control</span><a href="#access-control" class="header-anchor">¶</a></h3><p>Private(only in the same class), public, no modifiers(only in the same package), protected(only in the same parentage)</p><ul><li><p>Scope: same class, same package, subclass of other package, different class of other package</p></li><li><p>区分： instance variable vs. class name</p></li></ul><h3><span id="what-abstraction-means">What abstraction means</span><a href="#what-abstraction-means" class="header-anchor">¶</a></h3><ul><li>fancy words? Not that fancy.<ul><li>Abstraction/modularity/encapsulation/information hiding/separation of concerns</li></ul></li><li>User-defined types<ul><li>type is characterized by the operations you can perform on it.</li><li>abstract away from the details of data structure, memory storage, implementation</li></ul></li></ul><h3><span id="classifying-types-and-operations">classifying types and operations</span><a href="#classifying-types-and-operations" class="header-anchor">¶</a></h3><ul><li><p>Types: mutable / immutable</p></li><li><p>Operations:</p><ul><li>Creator, create new objects of the type. Input: values<ul><li>constructor</li><li>implemented as a static method called a factory method</li></ul></li><li>Producers. Input: existing objects</li><li>Observer</li><li>Mutators, change objects</li></ul></li></ul><h3><span id="what-and-how-what-is-adt-and-how-to-design">What and how: what is ADT and how to design</span><a href="#what-and-how-what-is-adt-and-how-to-design" class="header-anchor">¶</a></h3><ul><li>Representation</li><li>Implementation</li></ul><h3><span id="representation-independence">representation independence</span><a href="#representation-independence" class="header-anchor">¶</a></h3><h3><span id="testing">Testing</span><a href="#testing" class="header-anchor">¶</a></h3><h2><span id="r11-abstraction-function-amp-rep-invariants">R11: abstraction function &amp; rep invariants</span><a href="#r11-abstraction-function-amp-rep-invariants" class="header-anchor">¶</a></h2><h3><span id="invariants">invariants</span><a href="#invariants" class="header-anchor">¶</a></h3><p>good ADTs preserve its own invariants.</p><ul><li><p>mutable objects</p></li><li><p>public and private in access control</p></li><li><p>Immutable wrappers around mutable data types, get exception at runtime not at compile time.</p><ul><li>avoid representation exposure</li></ul></li></ul><h3><span id="rep-invariants-and-abstract-function">Rep invariants and abstract function</span><a href="#rep-invariants-and-abstract-function" class="header-anchor">¶</a></h3><p>abstract type can be divided into abstract value space and representation value space.</p><ul><li>every abstract value is mapped to by some rep value.</li><li>Some abstract values are mapped to by more than one rep value.</li><li>Not all rep values are mapped.</li></ul><ol><li>Abstract function</li></ol><blockquote><p>AF: R -&gt; A</p></blockquote><ol start="2"><li>Rep invariant</li></ol><blockquote><p>RI: R-&gt;boolean //subset of rep values on which AF is defined</p></blockquote><p>Implementations of an ADT means not only choosing the two spaces, but alse deciding which rep values are legal, and how to interpret them as abstract values.</p><h3><span id="beneficent-mutation">Beneficent mutation</span><a href="#beneficent-mutation" class="header-anchor">¶</a></h3><ul><li><p>beneficent mutation: 改变rep value, 不改变abstract value</p><p>The rep value has changed to another that still maps to the same abstract value.</p></li></ul><h3><span id="documenting-the-af-ri-and-safety-from-rep-exposure">Documenting the AF, RI, and safety from rep exposure</span><a href="#documenting-the-af-ri-and-safety-from-rep-exposure" class="header-anchor">¶</a></h3><ul><li>Rep exposure safety argument</li><li>What an ADT spec<ul><li>may talk about<ul><li>Things that are visible to the client: parameters, return values, exceptions thrown by its operations</li><li>Abstract values</li></ul></li><li>should not talk about<ul><li>details of the representation</li><li>AF and RI should hide within the body of the class</li></ul></li></ul></li></ul><h3><span id="adt-invariants-replace-preconditions">ADT invariants replace preconditions</span><a href="#adt-invariants-replace-preconditions" class="header-anchor">¶</a></h3><ul><li><p>Encapsulate preconditions in ADTs</p></li><li><p>How to establish invariants</p><blockquote><p>if an invariant of an ADT is</p><pre><code>1. established by creators and producers2. preserved by mutators, observers, and producers; and3. no representation exposure occurs</code></pre><p>then the invariant is true of all instances of the ADT.</p></blockquote></li></ul><h2><span id="r12-defining-adts">R12:defining ADTs</span><a href="#r12-defining-adts" class="header-anchor">¶</a></h2><p>Objectives:implement interfaces, generic types, enumerations and global functions operating on opaque type of ADT, determine subtyping relationship</p><h3><span id="interface">Interface</span><a href="#interface" class="header-anchor">¶</a></h3><h4><span id="gt-interfaces">&gt; interfaces:</span><a href="#gt-interfaces" class="header-anchor">¶</a></h4><ul><li><p>advantage:</p><ol><li>Interface specifies the contract for the client.</li><li>Support multiple different representations</li></ol></li><li><p>Java’s interfaces: do not include info about the representations</p><p>所以不需要提供有关interface的额外信息，比如：instance variables, instance method bodies, constructors</p></li></ul><h4><span id="gt-subtypes">&gt; subtypes:</span><a href="#gt-subtypes" class="header-anchor">¶</a></h4><ul><li>编译器能检查子类型有无实现其父类的所有类型，但不能检查是否符合其规范。我们需要保证子类型的规范至少要和其父类一样的强劲。</li></ul><blockquote><p>“B is a subtype of A” means “every B is an A.” In terms of specifications: “every B satisfies the specification for A.</p></blockquote><ul><li><p>Declare subtypes in java</p><ul><li>declare that a class B is a subtype of an interface A, use <code>implements</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>declare that an interface is a subtype of another interface, using <code>extends</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SortedSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Set</span>&lt;E&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4><span id="gt-example-mystring">&gt; Example:mystring</span><a href="#gt-example-mystring" class="header-anchor">¶</a></h4><p>需要注意的地方：</p><ol><li><p>Constructor: valueOf(). The difference between concrete class’s static method and interface’s constructor</p></li><li><p>Inheritance: @override</p></li><li><p>Private constructors are allowed</p></li><li><p>abstraction barrier between ADT and its concrete representations</p><ul><li><p>How clients use ADT?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">MyString</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastMyString</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="type">MyString</span> <span class="variable">s</span> <span class="operator">=</span> MyString.valueOf(<span class="literal">true</span>); <span class="comment">//better</span></span><br></pre></td></tr></table></figure><ul><li>implement the creator operation <code>valueOf</code> as a static <a href="https://web.mit.edu/6.031/www/sp21/classes/10-abstract-data-types/#factory_method">factory method</a> in the interface <code>MyString</code></li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyString represents an immutable sequence of characters.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyString</span> &#123; </span><br><span class="line">    <span class="comment">// public static MyString valueOf(boolean b) &#123; ... &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> MyString <span class="title function_">valueOf</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FastMyString</span>(b);&#125; <span class="comment">//notice 4</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">    <span class="keyword">public</span> MyString <span class="title function_">substring</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMyString</span> <span class="keyword">implements</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] a;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a string representation of b, either &quot;true&quot; or &quot;false&quot;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b a boolean value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleMyString</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">        a = b ? <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125; </span><br><span class="line">              : <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// private constructor, used internally by producer operations</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SimpleMyString</span><span class="params">(<span class="type">char</span>[] a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123; <span class="keyword">return</span> a.length; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> i)</span> &#123; <span class="keyword">return</span> a[i]; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> MyString <span class="title function_">substring</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] subArray = <span class="keyword">new</span> <span class="title class_">char</span>[end - start];</span><br><span class="line">        System.arraycopy(<span class="built_in">this</span>.a, start, subArray, <span class="number">0</span>, end - start);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleMyString</span>(subArray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastMyString</span> <span class="keyword">implements</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span>[] a;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a string representation of b, either &quot;true&quot; or &quot;false&quot;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b a boolean value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastMyString</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">        a = b ? <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125; </span><br><span class="line">              : <span class="keyword">new</span> <span class="title class_">char</span>[] &#123; <span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125;;</span><br><span class="line">        start = <span class="number">0</span>;</span><br><span class="line">        end = a.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private constructor, used internally by producer operations.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">FastMyString</span><span class="params">(<span class="type">char</span>[] a, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.start = start;</span><br><span class="line">        <span class="built_in">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span> &#123; <span class="keyword">return</span> end - start; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> i)</span> &#123; <span class="keyword">return</span> a[start + i]; &#125;</span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">public</span> MyString <span class="title function_">substring</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FastMyString</span>(<span class="built_in">this</span>.a, <span class="built_in">this</span>.start + start, <span class="built_in">this</span>.start + end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="gt-why-interfaces">&gt; Why interfaces？</span><a href="#gt-why-interfaces" class="header-anchor">¶</a></h4><ol><li>使用界面能为编译器和人们增加可读性。</li><li>从最开始抽象出独立的实现，然后再修正具体细节。能够在不同方式实现间权衡性能。</li><li>有意未明确的方法规范，在之后更具体的实现</li><li>multiple view of one class. <a href="https://stackoverflow.com/questions/21263607/can-a-normal-class-implement-multiple-interfaces#:~:text=Yes%2C%20a%20class%20can%20implement,for%20some%20sort%20of%20behavior.">A java class may implement multiple interfaces.</a></li><li>通过从简单的实现到更复杂/严格的实现，一步步构建可信的方法实现</li></ol><h3><span id="subclassing">subclassing</span><a href="#subclassing" class="header-anchor">¶</a></h3><p>和界面实现的区别在于：subclass 可以继承superclass的method bodies, fields；包含spec 和rep,而interface只包含spec。</p><p>Problem: what inheriting the rep means?</p><ul><li><p>answer: 一个安全的subclass需要遵循两个合同，和用户的以及和其subclass的，而这导致了rep独立性被破坏的问题。</p><blockquote><ul><li>rep exposure between the superclass and all its subclasses</li><li>rep dependence between superclass and subclasses</li><li>superclass and subclass can inadvertently break each other’s rep invariants</li></ul></blockquote></li></ul><p>Static type vs. dynamic type:</p><ul><li><p>Dispatching to the method</p><blockquote><p>Java’s dynamic dispatch: it uses the implementation appropriate to the <em>dynamic type</em> of the object, not the static type of the reference that points to the object.</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FastMyString</span> <span class="variable">fms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastMyString</span>(<span class="literal">true</span>); <span class="comment">// recall that this represents the 4-character string &quot;true&quot;</span></span><br><span class="line">fms.toString() → <span class="string">&quot;FastMyString@504bae78&quot;</span> <span class="comment">// not useful! just the class name followed by the object&#x27;s address in memory</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastMyString</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length(); ++i) &#123;</span><br><span class="line">            s += <span class="built_in">this</span>.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastMyString</span>(<span class="literal">true</span>);</span><br><span class="line">obj.toString() → <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>Object is static type known at compile time, while FastMyString is the typpe unknown until runtime.</p><h3><span id="generic-types">Generic types</span><a href="#generic-types" class="header-anchor">¶</a></h3><p><em>generic type</em>: a type whose specification is in terms of a placeholder type to be filled in later. -&gt; generic programming</p><p>Implementations:</p><ul><li><p>Generic interface, non-generic implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Set</span>&lt;E&gt; &#123;)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CharSet</span> <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;Character&gt; &#123;&#125;                      </span><br></pre></td></tr></table></figure></li><li><p>Generic interface, generic implementation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Set</span>&lt;E&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSet</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt; &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3><span id="enumerations">enumerations</span><a href="#enumerations" class="header-anchor">¶</a></h3><p><em>enumeration</em>: a small and finite values which can be defined as named constants.</p><p>和c struct相像。</p><ul><li><p>Java 中.equals 和 == 的额外细节：equals在运行时间检查是否在意义上相同，而==检查两个对象是否是同一个reference。这在一般的比较中是有差异的，而在enum中由于只有唯一的reference，equals和==反而没什么区别，同时==符合fail fast的特点因为我们检查的正是它们是否是相同的reference指向唯一的enum中的值。</p></li><li><p>java中有内置的enum类型，自动提供一些操作：</p><blockquote><ul><li><code>ordinal()</code> is the index of the value in the enumeration, so <code>JANUARY.ordinal()</code> returns 0.</li><li><code>compareTo()</code> compares two values based on their ordinal numbers.</li><li><code>name()</code> returns the name of the value’s constant as a string, e.g. <code>JANUARY.name()</code> returns <code>&quot;JANUARY&quot;</code>.</li><li><code>toString()</code> has the same behavior as <code>name()</code></li></ul></blockquote></li><li><p>可以自定义需要的enum</p><ul><li>An <code>enum</code> declaration can contain all the usual fields and methods that a <code>class</code> can. (Rep, methods, constants)</li><li>Example</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Month</span> &#123;</span><br><span class="line">    <span class="comment">// the values of the enumeration, written as calls to the private constructor below</span></span><br><span class="line">    JANUARY(<span class="number">31</span>),</span><br><span class="line">    FEBRUARY(<span class="number">28</span>),</span><br><span class="line">    MARCH(<span class="number">31</span>),</span><br><span class="line">    APRIL(<span class="number">30</span>),</span><br><span class="line">    MAY(<span class="number">31</span>),</span><br><span class="line">    JUNE(<span class="number">30</span>),</span><br><span class="line">    JULY(<span class="number">31</span>),</span><br><span class="line">    AUGUST(<span class="number">31</span>),</span><br><span class="line">    SEPTEMBER(<span class="number">30</span>),</span><br><span class="line">    OCTOBER(<span class="number">31</span>),</span><br><span class="line">    NOVEMBER(<span class="number">30</span>),</span><br><span class="line">    DECEMBER(<span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// rep</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> daysInMonth;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// enums also have an automatic, invisible rep field:</span></span><br><span class="line">    <span class="comment">//   private final int ordinal;</span></span><br><span class="line">    <span class="comment">// which takes on values 0, 1, ... for each value in the enumeration.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rep invariant:</span></span><br><span class="line">    <span class="comment">//   daysInMonth is the number of days in this month in a non-leap year</span></span><br><span class="line">    <span class="comment">// abstraction function:</span></span><br><span class="line">    <span class="comment">//   AF(ordinal,daysInMonth) = the (ordinal+1)th month of the Gregorian calendar</span></span><br><span class="line">    <span class="comment">// safety from rep exposure:</span></span><br><span class="line">    <span class="comment">//   all fields are private, final, and have immutable types</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make a Month value. Not visible to clients, only used to initialize the</span></span><br><span class="line">    <span class="comment">// constants above.</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Month</span><span class="params">(<span class="type">int</span> daysInMonth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.daysInMonth = daysInMonth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isLeapYear true iff the year under consideration is a leap year</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> number of days in this month in a normal year (if !isLeapYear) </span></span><br><span class="line"><span class="comment">     *                                           or leap year (if isLeapYear)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDaysInMonth</span><span class="params">(<span class="type">boolean</span> isLeapYear)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == FEBRUARY &amp;&amp; isLeapYear) &#123;</span><br><span class="line">            <span class="keyword">return</span> daysInMonth+<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> daysInMonth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> first month of the semester after this month</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Month <span class="title function_">startOfNextSemester</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> JANUARY:</span><br><span class="line">                <span class="keyword">return</span> FEBRUARY;</span><br><span class="line">            <span class="keyword">case</span> FEBRUARY:   <span class="comment">// cases with no break or return</span></span><br><span class="line">            <span class="keyword">case</span> MARCH:      <span class="comment">// fall through to the next case</span></span><br><span class="line">            <span class="keyword">case</span> APRIL:</span><br><span class="line">            <span class="keyword">case</span> MAY:</span><br><span class="line">                <span class="keyword">return</span> JUNE;</span><br><span class="line">            <span class="keyword">case</span> JUNE:</span><br><span class="line">            <span class="keyword">case</span> JULY:</span><br><span class="line">            <span class="keyword">case</span> AUGUST:</span><br><span class="line">                <span class="keyword">return</span> SEPTEMBER;</span><br><span class="line">            <span class="keyword">case</span> SEPTEMBER:</span><br><span class="line">            <span class="keyword">case</span> OCTOBER:</span><br><span class="line">            <span class="keyword">case</span> NOVEMBER:</span><br><span class="line">            <span class="keyword">case</span> DECEMBER:</span><br><span class="line">                <span class="keyword">return</span> JANUARY;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;can&#x27;t get here&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3><span id="adts-in-non-oop-languages">ADTs in non-OOP languages</span><a href="#adts-in-non-oop-languages" class="header-anchor">¶</a></h3><p>define ADT in non-oop languages like C: a group of globally-accessible functions that operate on an opaque data type.</p><p>(data abstraction)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FILE* f = fopen(<span class="string">&quot;out.txt&quot;</span>, <span class="string">&quot;w&quot;</span>); // <span class="built_in">open</span> a file <span class="keyword">for</span> writing</span><br><span class="line">fputs(<span class="string">&quot;hello&quot;</span>, f); // write to the file</span><br><span class="line">fclose(f);  // close the file</span><br></pre></td></tr></table></figure><blockquote><p>The notion of an abstract data type does not depend on language features like classes, or interfaces, or <code>public</code>/<code>private</code> access control. Data abstraction is a powerful design pattern that is ubiquitous in software engineering.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SC recursion</title>
      <link href="/sg/2021/09/05/SC_recursion/"/>
      <url>/sg/2021/09/05/SC_recursion/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r14-recursion">R14: recursion</a><ul><li><a href="#decompostion">decompostion</a></li><li><a href="#structure-of-recursive-implementations">structure of recursive implementations</a></li><li><a href="#choosing-the-right-recursive-subproblem">choosing the right recursive subproblem</a></li><li><a href="#recursive-problems-vs-recursive-data">recursive problems vs. recursive data</a></li><li><a href="#mutual-recursion">Mutual recursion</a></li><li><a href="#reentrant-code">reentrant code</a></li><li><a href="#when-to-use-recursion-rather-than-iteration">when to use recursion rather than iteration</a></li><li><a href="#common-mistakes-in-recursive-implementations">common mistakes in recursive implementations</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="r14-recursion">R14: recursion</span><a href="#r14-recursion" class="header-anchor">¶</a></h2><p>有时候会觉得自己对recursion/iteration的了解已经够多了，但不够多总是常态。尤其在应用到不同的场景的时候。</p><h3><span id="decompostion">decompostion</span><a href="#decompostion" class="header-anchor">¶</a></h3><p>Choose the right decomposition for a problem.</p><p>recursion is one method</p><h3><span id="structure-of-recursive-implementations">structure of recursive implementations</span><a href="#structure-of-recursive-implementations" class="header-anchor">¶</a></h3><p>helper methods: don’t expose the helper method to your clients.</p><p>base case + recursive case</p><h3><span id="choosing-the-right-recursive-subproblem">choosing the right recursive subproblem</span><a href="#choosing-the-right-recursive-subproblem" class="header-anchor">¶</a></h3><p>Think about several ways to break down the problem, and try to write the recursive steps.</p><p>Recursive subproblem can be smaller or simpler in more subtle ways.</p><h3><span id="recursive-problems-vs-recursive-data">recursive problems vs. recursive data</span><a href="#recursive-problems-vs-recursive-data" class="header-anchor">¶</a></h3><ul><li><p>recursive problems</p></li><li><p>recursive data</p><ul><li>file systems</li><li>data structures: binary search tree</li></ul></li></ul><h3><span id="mutual-recursion">Mutual recursion</span><a href="#mutual-recursion" class="header-anchor">¶</a></h3><p>return immutable object</p><h3><span id="reentrant-code">reentrant code</span><a href="#reentrant-code" class="header-anchor">¶</a></h3><ul><li>it can be called again even while a call to it is underway.</li><li>many application scenario: concurrency, callbacks, mutual recursion…</li></ul><h3><span id="when-to-use-recursion-rather-than-iteration">when to use recursion rather than iteration</span><a href="#when-to-use-recursion-rather-than-iteration" class="header-anchor">¶</a></h3><p>像递归这样只用考虑输入和输出模式的范式属于函数式编程的一种。它与命令式编程/迭代还有一个主要区别就是可变性(mutablity)，不可避免产生的可变变量在迭代过程中不断改变，导致出现漏洞。但递归相较于迭代的明显的缺点就是需要更多的空间。</p><blockquote><p>building up a stack of recursive calls consumes memory temporarily, and the stack is limited in seze.</p></blockquote><h3><span id="common-mistakes-in-recursive-implementations">common mistakes in recursive implementations</span><a href="#common-mistakes-in-recursive-implementations" class="header-anchor">¶</a></h3><ul><li>base case missing</li><li>recursive step fails to reduce to a smaller subproblem</li><li>aliases to mutable data structures are inadvertently shared, mutated among the recursive calls.</li></ul><p>Bright side: fail faster. StackOverflowError.</p>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SC specifications</title>
      <link href="/sg/2021/09/03/SC_specifications/"/>
      <url>/sg/2021/09/03/SC_specifications/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r6-specifications">R6: specifications</a><ul><li><a href="#behavioral-equivalence">Behavioral equivalence</a></li><li><a href="#specifications">Specifications</a></li><li><a href="#do-not-allow-null-references">do not allow null references</a></li><li><a href="#include-emptiness">Include emptiness</a></li><li><a href="#testing">~ testing</a></li><li><a href="#mutating">~ mutating</a></li><li><a href="#exceptions">exceptions</a></li></ul></li><li><a href="#r7-design-specifications">R7: design specifications</a><ul><li><a href="#deterministic-vs-underdetermined-specs">Deterministic vs. underdetermined specs</a></li><li><a href="#declarative-vs-operational-specs">Declarative vs. operational specs</a></li><li><a href="#stronger-vs-weaker-specs">stronger vs. weaker specs</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="r6-specifications">R6: specifications</span><a href="#r6-specifications" class="header-anchor">¶</a></h2><h3><span id="behavioral-equivalence">Behavioral equivalence</span><a href="#behavioral-equivalence" class="header-anchor">¶</a></h3><p>whether it could be substituted with one implementation for the other</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(...)</span>&#123;</span><br><span class="line"><span class="comment">//requires: ........</span></span><br><span class="line"><span class="comment">//effects:</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="specifications">Specifications</span><a href="#specifications" class="header-anchor">¶</a></h3><h4><span id="why">why</span><a href="#why" class="header-anchor">¶</a></h4><ul><li>Acts as firewall</li><li>Connect / separate client and implementer<ul><li>Client: input, output</li><li>Implementater: computation<ul><li>Local variables, private fields, implementation details</li></ul></li></ul></li></ul><h4><span id="structure">structure</span><a href="#structure" class="header-anchor">¶</a></h4><ul><li>Composition<ul><li>method signature</li><li>requires clause -&gt; additional restrictions on the parameters<ul><li>type</li><li>interactions between parameters</li></ul></li><li>effects clause -&gt; return value, exceptions, and other effects of the method<ul><li>How the return value relates to the inputs</li><li>exceptions</li><li>Whether and how objects are mutated</li></ul></li></ul></li><li>precondition and postcondition of the method</li><li>Overall structure:<ul><li>if the precondition holds, then the postcondition must hold when the method completes</li><li>Else, free to do anything</li></ul></li></ul><h4><span id="in-java">in java</span><a href="#in-java" class="header-anchor">¶</a></h4><ul><li>javadoc</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@param p</span><br><span class="line">@param q</span><br><span class="line">@return</span><br><span class="line">@throw</span><br></pre></td></tr></table></figure><h3><span id="do-not-allow-null-references">do not allow null references</span><a href="#do-not-allow-null-references" class="header-anchor">¶</a></h3><ul><li>syntactically illigal<ul><li>primitives cannot be null</li><li>Some methods or fields: length()</li></ul></li><li>Null values are vague<ul><li>Disallowed in parameter and return values unless spec says otherwise</li><li>use something other than null makes your meaning clear</li><li>Fail fast: null can overlook many kinds of bugs</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map.get(key) <span class="keyword">return</span> when the key is not found in the map: </span><br><span class="line">Optional&lt;T&gt;</span><br></pre></td></tr></table></figure><h3><span id="include-emptiness">Include emptiness</span><a href="#include-emptiness" class="header-anchor">¶</a></h3><ul><li><p>difference between null and emptiness</p></li><li><p>empty values are alway allowed as parameter or return values.</p></li></ul><h3><span id="testing">~ testing</span><a href="#testing" class="header-anchor">¶</a></h3><ul><li>Black box tests need follow specification</li><li>Glass box test must follow spec too.</li></ul><h3><span id="mutating">~ mutating</span><a href="#mutating" class="header-anchor">¶</a></h3><ul><li>describe side-effects-changes to mutable objects-in the postcondition</li><li>Mutation is disallowed unless stated otherwise</li></ul><h3><span id="exceptions">exceptions</span><a href="#exceptions" class="header-anchor">¶</a></h3><ul><li>Function<ul><li>Signaling bugs</li><li>for special results</li></ul></li><li>checked and unchecked exceptions</li><li>exception hierarchy</li><li>declare exceptions in specs</li></ul><h2><span id="r7-design-specifications">R7: design specifications</span><a href="#r7-design-specifications" class="header-anchor">¶</a></h2><p>Three dimensions for comparing specs</p><ul><li>deterministic</li><li>declarative</li><li>strong</li></ul><h3><span id="deterministic-vs-underdetermined-specs">Deterministic vs. underdetermined specs</span><a href="#deterministic-vs-underdetermined-specs" class="header-anchor">¶</a></h3><ul><li>deterministic: one final state for the same input.</li><li>undetermined: multiple valid outputs for the same input<ul><li>different from Nondeterministic, which means same program with the same inputs can generate different outcomes</li></ul></li></ul><h3><span id="declarative-vs-operational-specs">Declarative vs. operational specs</span><a href="#declarative-vs-operational-specs" class="header-anchor">¶</a></h3><ul><li>Operational : steps that the method performs</li><li>Delcarative : properties of the final outcome, and how it related to the initial state</li></ul><h3><span id="stronger-vs-weaker-specs">stronger vs. weaker specs</span><a href="#stronger-vs-weaker-specs" class="header-anchor">¶</a></h3><p>a spec S2 is stronger than a spec S1 if the set of implementations that satisfy S2 is a strict subset of those that match S1.</p><blockquote><p>Rule: S2 is stronger than a spec S1 iff</p><ul><li>S2’s precondition is weaker than or equal to S1.<ul><li>S2’s input is less, placing fewer demands on a client</li></ul></li><li>S2’s postcondition is stronger than or equal to S1.<ul><li>Make more promises to the client</li></ul></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SC code review</title>
      <link href="/sg/2021/09/01/SC_code_review/"/>
      <url>/sg/2021/09/01/SC_code_review/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#r4-code-review">R4: code review</a><ul><li><a href="#code-review">code review</a></li><li><a href="#dry-don-t-repeat-yourself">DRY: don’t repeat yourself</a></li><li><a href="#comments-where-needed">Comments where needed</a></li><li><a href="#fail-fast">Fail fast</a></li><li><a href="#avoid-magic-numbers">avoid magic numbers</a></li><li><a href="#one-purpose-for-each-variable">one purpose for each variable</a></li><li><a href="#use-good-names">use good names</a></li><li><a href="#use-whitespace-to-help-the-reader">Use whitespace to help the reader</a></li><li><a href="#don-t-use-global-variables">don’t use global variables</a></li><li><a href="#methods-should-return-results-not-print-them">Methods should return results, not print them</a></li><li><a href="#avoid-special-case-code">avoid special-case code</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="r4-code-review">R4: code review</span><a href="#r4-code-review" class="header-anchor">¶</a></h2><ul><li>code review: read and discuss code written by others</li><li>General principles of good coding: things you can look for in every code review(与编程语言和目的无关的)</li></ul><h3><span id="code-review">code review</span><a href="#code-review" class="header-anchor">¶</a></h3><ul><li>Purpose<ul><li>Improve the code</li><li>improve the programmer<ul><li>新语言特性，项目设计的改变，its coding standards, new techniques…</li></ul></li></ul></li><li>Style standards: 除了特定语言的规范，比如google C++/java/… style guide，还有许多部分值得审视<ul><li>spec, ADT with representation invariants, concurrency and thread safety</li><li>be a team player: 在写pj时考虑别人已经写了的部分的风格</li></ul></li></ul><h3><span id="dry-don-t-repeat-yourself">DRY: don’t repeat yourself</span><a href="#dry-don-t-repeat-yourself" class="header-anchor">¶</a></h3><ul><li>avoid duplication</li></ul><h3><span id="comments-where-needed">Comments where needed</span><a href="#comments-where-needed" class="header-anchor">¶</a></h3><h4><span id="gt-where-to-comment">&gt; where to comment</span><a href="#gt-where-to-comment" class="header-anchor">¶</a></h4><ul><li>Specifications document assumptions</li><li>Specify the provenance of code that was copied from elsewhere<ul><li>Reason<ul><li>Copyright</li><li>Answers change fast</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function: read a web page into a str</span></span><br><span class="line"><span class="comment">//see web:http://...</span></span><br><span class="line">........</span><br></pre></td></tr></table></figure><ul><li>Obscure code<ul><li>一串莫名其妙的公式</li></ul></li></ul><h4><span id="gt-where-not-comment">&gt; where not comment</span><a href="#gt-where-not-comment" class="header-anchor">¶</a></h4><ul><li>direct transliterations of code into English<ul><li>assume readers at least knows java</li></ul></li></ul><h3><span id="fail-fast">Fail fast</span><a href="#fail-fast" class="header-anchor">¶</a></h3><p>code should reveal its bugs earlier as possible</p><ul><li>static checking</li><li>Dynamic checking</li><li>…</li></ul><h3><span id="avoid-magic-numbers">avoid magic numbers</span><a href="#avoid-magic-numbers" class="header-anchor">¶</a></h3><p>Magic numbers：一串莫名其妙的数字</p><ul><li>do not hardcode; reason<ul><li>a number is less readable than a name</li><li>constants may need to change in the future</li><li>Constants may be dependent on other constants</li></ul></li><li>use named constants</li><li>When there are many magic numbers, treat them as data and consider to store in data structures.<ul><li>Easy to understand: uncover the hidden relationship.  存储在某数据结构中并不能保证这一点。</li><li>Ex: 0, used as an integer value,作为计数的最小值或identity value in addition; symbolically, magic number.</li></ul></li></ul><h3><span id="one-purpose-for-each-variable">one purpose for each variable</span><a href="#one-purpose-for-each-variable" class="header-anchor">¶</a></h3><p>Don’t reuse variables/parameters. (我之前还不太习惯用太多变量名)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//final: variables can&#x27;t be reassigned.</span></span><br></pre></td></tr></table></figure><h3><span id="use-good-names">use good names</span><a href="#use-good-names" class="header-anchor">¶</a></h3><ul><li><p>what to do</p><ul><li>follow the lexical naming conventions of the language<ul><li>Python/java: Classes, setVariableName(java), set_variable_name(python)</li><li>Global constants(public static final): use capitalization in java, ALL_CAPS_WITH_UNDERSCORES</li><li>Local variablesL use camelCaseNames like secondsPerDay</li></ul></li><li>method name: verb phrases</li><li>Variable, class names: noun phrases</li></ul></li><li><p>what not to do</p><ul><li>No abbr/single-character variable names except conventional one</li></ul></li></ul><h3><span id="use-whitespace-to-help-the-reader">Use whitespace to help the reader</span><a href="#use-whitespace-to-help-the-reader" class="header-anchor">¶</a></h3><ul><li>don’t use tab for indentation; use space instead<ul><li>why: tab represents numbers of spaces in different languages</li><li>只要将tab设置成相应的空格就行了。</li></ul></li></ul><h3><span id="don-t-use-global-variables">don’t use global variables</span><a href="#don-t-use-global-variables" class="header-anchor">¶</a></h3><ul><li>Global variable: accessible and changeable from anywhere in the program<ul><li>final: unchanged</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ... </span><br></pre></td></tr></table></figure><ul><li>Kinds of variables<ul><li>local variable: inside a method<ul><li>Disappear when the method returns</li></ul></li><li>instance variable: inside an instance of an object (belong to certain class instance)<ul><li>created when calling new object; disappears when object is no longer accessible</li><li>each object instance has its own instance variables</li><li>别名：field, property, member variable, attribute</li></ul></li><li>Static variable: associated with a class(belong to class itself)</li></ul></li></ul><h3><span id="methods-should-return-results-not-print-them">Methods should return results, not print them</span><a href="#methods-should-return-results-not-print-them" class="header-anchor">¶</a></h3><ul><li>except debugging output: aim to debugging the design</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out <span class="comment">//sends result to the console</span></span><br></pre></td></tr></table></figure><h3><span id="avoid-special-case-code">avoid special-case code</span><a href="#avoid-special-case-code" class="header-anchor">¶</a></h3><ul><li>Resits to handle special cases separately<ul><li>Special cases add complexity and hide possible bugs</li><li>Special cases is not exactly related to overall performance.</li></ul></li><li>think for the general case.<ul><li>Broader, general-case code pay off.</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
          <category> 6.031 software construction </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>How to speak</title>
      <link href="/sg/2021/08/03/speak/"/>
      <url>/sg/2021/08/03/speak/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#intro">intro</a></li><li><a href="#how-to-start">How to start</a><ul><li><a href="#4-samples">4 samples</a></li></ul></li><li><a href="#the-tools">the tools</a><ul><li><a href="#time-and-place">Time and place</a></li><li><a href="#boards-and-props">Boards and props</a></li><li><a href="#projections">projections</a></li></ul></li><li><a href="#informing">informing</a><ul><li><a href="#promise">promise</a></li><li><a href="#inspiration">inspiration</a></li><li><a href="#how-to-think">how to think</a></li></ul></li><li><a href="#persuading">persuading</a><ul><li><a href="#job-talks">Job talks</a></li><li><a href="#getting-famous">getting famous</a></li></ul></li><li><a href="#how-to-stop">How to stop</a><ul><li><a href="#final-slide">final slide</a></li><li><a href="#final-words">final words</a></li></ul></li><li><a href="#shi-li">实例</a></li></ul><!-- tocstop --></div><p>之前有看过几节Professor Winston的AI课，感觉是个很有热情比较严肃的老师，没想到教授在19年就过世了。他的这个演讲主要是在教我们如何构建自己给出talk架构，而不只是单纯的讲方法，这样的思考方式也很inspring。</p><h2><span id="intro">intro</span><a href="#intro" class="header-anchor">¶</a></h2><ul><li><p>实现人生价值的重要性：Speak &gt; write &gt; quality of ideas</p></li><li><p>Quality = f (Knowledge, Practice, talent)</p><p>knowledge and practice weigh more than talent</p></li><li><p>本演讲顺序：Example to techniques</p></li></ul><h2><span id="how-to-start">How to start</span><a href="#how-to-start" class="header-anchor">¶</a></h2><p>Empowerment promise : 告诉观众会学到什么，这个演讲的目标，可以达成什么</p><h3><span id="4-samples">4 samples</span><a href="#4-samples" class="header-anchor">¶</a></h3><ul><li>Cycle: repetitions to keep well-informed</li><li>build fence: one good example can serve the purpose</li><li>Verbal punctuation: time stamps, 易于专注和回顾</li><li>Question：合适的问题，不要太难或太简单，停顿7s左右</li></ul><h2><span id="the-tools">the tools</span><a href="#the-tools" class="header-anchor">¶</a></h2><p>Empathetic mirroring: 人会假设自己处于这样的状况做什么</p><h3><span id="time-and-place">Time and place</span><a href="#time-and-place" class="header-anchor">¶</a></h3><p>类似study area，什么样的时间和环境做怎样的事。talk 和 study同理</p><ul><li>well lit</li><li>cased</li><li>Populated</li></ul><h3><span id="boards-and-props">Boards and props</span><a href="#boards-and-props" class="header-anchor">¶</a></h3><p>教授讲了黑板和幻灯片的对比，以及他认为黑板是更适合学生理解学习的方式。以及运用道具教学能给人更深刻的印象，这是单纯的slide不能比较的。</p><h3><span id="projections">projections</span><a href="#projections" class="header-anchor">¶</a></h3><p>如何做ppt，字体，风格</p><h2><span id="informing">informing</span><a href="#informing" class="header-anchor">¶</a></h2><h3><span id="promise">promise</span><a href="#promise" class="header-anchor">¶</a></h3><p>just like empowerment promise</p><h3><span id="inspiration">inspiration</span><a href="#inspiration" class="header-anchor">¶</a></h3><p>How to get inspired?</p><p>by example: 当有人对他们所做的事情表现出激情时，身边的人就会受鼓舞</p><h3><span id="how-to-think">how to think</span><a href="#how-to-think" class="header-anchor">¶</a></h3><p>how to get people know how to think?</p><p>people are story-telling animals: 故事，根据故事提出的问题，mechanism provided to analyze, ways to organize，ways to evaluate how reliable a story is…</p><h2><span id="persuading">persuading</span><a href="#persuading" class="header-anchor">¶</a></h2><h3><span id="job-talks">Job talks</span><a href="#job-talks" class="header-anchor">¶</a></h3><p>finish in 5 minutes</p><ul><li>vision<ul><li>problem</li><li>Approach</li></ul></li><li>Done sth</li><li>Contributions</li></ul><h3><span id="getting-famous">getting famous</span><a href="#getting-famous" class="header-anchor">¶</a></h3><p>why people want to be famous?</p><p>because they want their ideas valued.</p><img src="/sg/2021/08/03/speak/sc.png" class title="截屏2021-08-03 下午12.29.35"><h2><span id="how-to-stop">How to stop</span><a href="#how-to-stop" class="header-anchor">¶</a></h2><h3><span id="final-slide">final slide</span><a href="#final-slide" class="header-anchor">¶</a></h3><p>contribution slide: show your work</p><p>把致谢人员清单放到first slide</p><h3><span id="final-words">final words</span><a href="#final-words" class="header-anchor">¶</a></h3><p>don’t say thank you or thank you for listening. 虽然很多人都这样做，但这并不是正确的，这会让你的发言软弱。</p><p>Rather, salute the audience.</p><ul><li>How much you value your time at a place</li><li>How much you look forward to coming back</li><li>…</li></ul><h2><span id="shi-li">实例</span><a href="#shi-li" class="header-anchor">¶</a></h2><blockquote><p>1）在基本的flow上能比较快的理顺出一个slides draft（最初刚学习的时候，我会去看一下跟我work flow类似的人的slides）。每一页slides基本都会用很少的字，提炼重点，多用图和说来illustrate。</p><p>2）有了draft以后，在准备正式演讲的时候，我会把每一页要讲的东西全都写下来：每一页基本要包含transition，basic content和summary/takeaways。然后会把这个拿给老板看（或者native speaker？），他的修改会让我在语言的简明和准确性上有提高，下次就会用类似的句式。</p><p>3）准备好了演讲稿以后就开始一遍一遍的练。如果是英文演讲的话，有机会可以找个native speaker，让他读几页slides录下来，学习他的抑扬顿挫 (比如在for example以后，通常每个短语的音调都会有特别声调，且短语间都很紧凑)。</p><p>这样准备过一两次以后就会很有提高。平时不太重要的presentation也不再用写演讲稿，因为各种transition或者句式已经慢慢学会了。</p><p>&lt;women in tech 小组&gt;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> skill </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿纳金</title>
      <link href="/sg/2021/07/31/starwars/"/>
      <url>/sg/2021/07/31/starwars/</url>
      
        <content type="html"><![CDATA[<p>Star wars和Star Trek 系列一样作为生活大爆炸主角的爱好，我早就有所耳闻。但是我之前一直以为只有geek才会喜欢这种类型的，一直没有看。直到偶然看到星球大战：残次品，动画效果展现出的宇宙有一种真实的浩瀚感，而故事也很有意思。于是我又开始看背景中的克隆人战争，看到中途还补了前传三部曲，正传只是略看了下。</p><p>在全系列中我最喜欢的人物还是阿纳金·天行者。</p><p>阿纳金在小时候就向往走过每一个星球，眼前浩瀚无垠的星空显得神秘而又不可控制。阿纳金一直将亲人的重要性放在任何准则之上，他的母亲，妻子，徒弟是他最重要的人。当他的母亲意外时他杀了绑架她的一整个部族的人，预见妻子会难产而死时又想打破这命运即使因此进入原力的黑暗面成了黑暗尊主的学徒达斯·维达。克隆人战争系列丰满了阿纳金的血肉。他是独特的绝地武士，除了卓越的军事能力和思考问题的灵活性，他有自己所相信的。</p><p>阿纳金的悲剧源于他的性格如此，由环境所推动。他的徒弟阿索卡被诬陷入狱并被剥夺绝地学徒身份，直到他找回证据后绝地委员会也未在此事件上承认过失，只是用绝地的试炼来掩饰曾表现出对阿索卡的不信任。阿纳金对绝地委员会的信任在克隆人战争未结束前就已经一点点的丧失。而在委员会和议长的争斗中，他身为绝地一员却因为议长对他展示出的信任而失去委员会的信任，却要求他充当间谍来监视议长的活动，即使这有违绝地守则。在阿纳金发现了议长的最终身份告知了委员会后，他们仍然将他孤立在抓捕议长的行动之外。他恳求温杜留下议长的性命因为这是唯一拯救妻子生命的机会没有得到温杜的任何回应和解释，于是他也做出了自己的选择。他一直是个决绝人。阿纳金投向黑暗面最初是为了拯救爱人，但在爱人死去和徒弟离开后彻底不能回头。力量让他迷失在对权力的追逐和统治整个银河系的幻想中。</p><p>共和国失去民主然后变成帝国的过程始终有些不可思议，也让我想去了解更多什么才是民主。共和国在克隆人战争未开始时已经由于腐败而在经济，政治，军事等方面暴露出各种弱点，而之后在共和国议会议长帕尔帕廷在暗中操控下，通过和分离势力的战争一步步将权力集中在自己手里，最后独裁帝国成立。虽然绝地委员会表面上是为了阻止最高议长的阴谋而意图在过渡期掌控议会，但绝地制度的僵化和共和国一样难以挽回，他们不允许被挑战权威同时又固执己见，没有解释的空间。新帝国在早期未辜负人民渴望和平的期望，结束了银河系中环和外环的战争。但在权力集中后，强大的军事力量成为了帝国控制各星系的武器，帝国不再需要人民的支持，凭借威慑就能使之臣服，而帝国议会的解散则标志着民主的完全丧失。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>军训</title>
      <link href="/sg/2021/07/19/exercise/"/>
      <url>/sg/2021/07/19/exercise/</url>
      
        <content type="html"><![CDATA[<p>平凡无奇的野外实习和军训。</p><h3><span id="e-mei">峨眉</span><a href="#e-mei" class="header-anchor">¶</a></h3><p>去金顶的第一个感觉就是冷。扩写一下就是：当站在3000米海拔高的山涧边，水雾蒸腾向上浮到脸上感觉很清爽。</p><img src="/sg/2021/07/19/exercise/IMG_4078.jpeg" class title="IMG_4078"><p>野外实习其实是在峨眉边缘地带的某农家乐附近进行的，六天内我们完成了制作植物标本，动物标本和样方统计。</p><p>（7.4:昆虫标本定种）为了消除孤独感？好像我总是需要在一件事上寻求意义。但是我并不需要无中生义。<br>从减少重复性工作的角度，这项任务可以也应该做的优化是：建立一个昆虫，植物的大型数据库，利用过往N年野外做标本的数据作为原始数据。即使这一点做不到，那么把查找昆虫的图鉴的书籍制作成可搜索的pdf格式也好很多吧。还有在任务本身上在过去的工作上优化，而不是年年相似没有本质上的变化。</p><h3><span id="ge-ren-ce-shi">个人测试</span><a href="#ge-ren-ce-shi" class="header-anchor">¶</a></h3><p>6月几乎没怎么学cs。状态也一直挺糟糕的，经常会有一种虚无感。直到考试那几天才临时抱了佛脚。</p><p>记录：有机，植生，细胞（开卷，但仍然很难，从未上过那么难的课），遗传。期末占比有机0.5，其余0.4。4科，平时都没学过但尽力水了平时分，平时分完成百分比：有机植生分别为0.85和0.9，细胞0.7，遗传0.8。期末考试复习总时间40h。最后期末得分，有机42（其实事先算过了，40分就能及格），综合后62；植生综合后83；细胞期末得分60，综合后72；遗传期末得分58，综合后77。</p><h3><span id="jun-xun">军训</span><a href="#jun-xun" class="header-anchor">¶</a></h3><p>刚开始两天的训练内容没有那么紧张，晚上大家围坐在一起唱唱跳跳的场景显得很平静温馨。</p><p>并不喜闻乐见的举报事件接连发生，我们学院里有个别男生举报女生，学校里第二批举报第一批，连队间因为休息时间互相举报。结果就是营长被骂了半小时，连长（直系教官）被营长骂，我们连站了半小时军姿并且之后的休息时间显著减少，休息时间的正常活动也减了大半。第一批早上从相同时间到比第二批提前了半小时集合，连队间的举报一般就是教官首先被训然后就是连队。</p><p>军训虽然每天实际训练时长在6～8小时，什么都没做但就是很累。有两天突然感觉心口时不时会疼，让我小小的恐慌了一下，发现最希望完成的事是定好的课程计划。</p><p>只是因为能和二三同伴度过，这枯燥的生活才让人偶尔有一种淡淡的喜悦。</p><img src="/sg/2021/07/19/exercise/IMG_4174.jpeg" class title="IMG_4174">]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> EOF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>拾遗合集</title>
      <link href="/sg/2021/06/29/review/"/>
      <url>/sg/2021/06/29/review/</url>
      
        <content type="html"><![CDATA[<p>拾遗系列就用来记录一些互联网冲浪中遇见的有意思的想法吧</p><h2><span id="zheng-zhi-zhe-xue">政治哲学</span><a href="#zheng-zhi-zhe-xue" class="header-anchor">¶</a></h2><p>起因是来自于之前和人关于出国选择，性别议题的讨论中我显露出的某些知识层面的欠缺造成了可能的偏狭观点。有些印象深刻的争执点是：在外国生活的人面临可能的歧视而采取的抗争是否有必要；国外不同地区的安全问题和国内外的法制差异；华裔在公司高层的比例，能否接触到核心技术；性别歧视在科技行业中存在吗，跨专业歧视或许会更多；理想和现实的差距需要靠实践来补足…由于社科类的书籍我一向很少接触，有些问题的讨论上还是有些理想和片面。而我又想能够更清晰地认识这些问题，单纯地想去了解这部分内容。</p><p>在参考了一些推荐和建议后，我打算分成以下几部分进行：</p><h3><span id="wen-ti-suo-yin">问题索引</span><a href="#wen-ti-suo-yin" class="header-anchor">¶</a></h3><ul><li><p>自由主义：自由是异见者的自由。</p></li><li><p>公共讨论：非暴力沟通 -&gt;怎样发展出观察方式和判断体系？</p></li></ul><h3><span id="shu-ji-yue-du">书籍阅读</span><a href="#shu-ji-yue-du" class="header-anchor">¶</a></h3><p>一些社科类书籍</p><ul><li>埃及，希腊与罗马</li><li>罗马帝国衰亡史</li></ul><p>…</p><h3><span id="shi-pin-ke-cheng-dao-du">视频课程导读</span><a href="#shi-pin-ke-cheng-dao-du" class="header-anchor">¶</a></h3><p>Yele courses: 古希腊历史，美国内战和重建，欧洲文明，美国独立战争</p><h3><span id="dao-lun-ke-cheng-de-xue-xi">导论课程的学习</span><a href="#dao-lun-ke-cheng-de-xue-xi" class="header-anchor">¶</a></h3><ul><li>finance101</li><li>Microeconomics101</li></ul><h2><span id="xue-xi">学习</span><a href="#xue-xi" class="header-anchor">¶</a></h2><ul><li>了解你自己</li></ul><blockquote><p>了解—&gt;选择—&gt;执行—&gt;复盘</p></blockquote><p>在做事的过程中了解自己。学习的方法论看过很多人的但一直觉得哪里不对，不论是scott young书里写的理解的三个层次还是潇峰的从语言学习展开的理解复盘测试方法，即使实验过一段时间仍然云里雾里，感觉自己的情况并不适用（虽然我是荒废了很多年才意识到了这一点的）。而在看到一位博主的学习经历后我才明白：了解包含“了解自己吸收、整合、再输出知识的速度、质量甚至速率变化”。</p><h3><span id="know-yourself-amp-nothing-in-excess">know yourself &amp; Nothing in excess</span><a href="#know-yourself-amp-nothing-in-excess" class="header-anchor">¶</a></h3><h4><span id="ge-ren-fa-zhan-he-neng-li">个人发展和能力</span><a href="#ge-ren-fa-zhan-he-neng-li" class="header-anchor">¶</a></h4><ul><li>对于状态不好的两点建议：1.学会转弯，2.学会原谅。</li><li>对自己的期许：想成为能力更强的人，而这需要长时间努力。但是盲目的膜拜大佬对我来说是无用的，而且我认为每个人都是独立的个体有自己的思考能力和发展空间，平等才是任何关系发展的基础，因为这代表着相互尊重和理解。希望自己在毕业前能做几个觉得还算有用的project（迟先生就是最近的例子）。</li><li>ddl前压力大的回避心理</li><li>从想进外企到找到自己真正喜欢的工作：外企和国外不是所有问题的答案，选择一份工作，选择一个地方居住这样的问题都需要首先理解自己想要的东西，以及对所有选择的客观数据评估。当然，在这之前是首先有能够选择的能力。</li><li>essential facts，犀利</li><li>学习方式：motivation （by hs），多问为什么，怎么样。多做习题，coding</li></ul><h4><span id="qing-gan-guan-xi">情感关系</span><a href="#qing-gan-guan-xi" class="header-anchor">¶</a></h4><h5><span id="dui-you-yi-de-bu-tong-si-kao-jiao-du">对友谊的不同思考角度</span><a href="#dui-you-yi-de-bu-tong-si-kao-jiao-du" class="header-anchor">¶</a></h5><ul><li><p>优质情感有很多种</p></li><li><p>expectation management</p></li><li><p>掌握各自的节奏</p></li></ul><h5><span id="jia-ting-guan-xi">家庭关系</span><a href="#jia-ting-guan-xi" class="header-anchor">¶</a></h5><p>原生家庭，独立，分割</p><h4><span id="cs">CS</span><a href="#cs" class="header-anchor">¶</a></h4><h5><span id="ji-chu">基础</span><a href="#ji-chu" class="header-anchor">¶</a></h5><ul><li>编程语言的类型</li><li>算法和底层知识</li></ul><h5><span id="gong-zuo">工作</span><a href="#gong-zuo" class="header-anchor">¶</a></h5><ul><li>Research scientist, swe的区别：主要问题在于能否有能力找到问题和独立解决问题。</li><li>如何成为一个优秀的算法工程师？</li><li>对我来说比较重要的元素：找到好的leader和项目，在工作中保持进取心</li></ul><h3><span id="xuan-ze">选择</span><a href="#xuan-ze" class="header-anchor">¶</a></h3><p>我认为实习选择中对我最重要的是mentor和做的东西是否有意思。没有mentor花费的无谓时间会更多，没意思我可能会很拖，就像现在我临近4门考试但是还没怎么复习居然还在写这篇博文一样。学习的过程就是一个漫长的自我探索过程，我也不知道之后具体会学什么，学到哪种程度。比如我现阶段就不是很想学编译器等过于硬件，pl等过于理论的课。</p><blockquote><p>我想了想本科期间大概还是不会做太深的ml方向,应该会从更底层的系统方向做起。谁能想到当初想学计算机就是因为疑犯追踪里的root和the machine。 - 21.4.10</p></blockquote><h3><span id="ying-yu">英语</span><a href="#ying-yu" class="header-anchor">¶</a></h3><p>我现在英语最大的难题是口语，其次是写作，阅读和听力倒是可以在学其他课程中的时候练习。目标就是能够和英语母语者交流。</p><h3><span id="lu-you">旅游</span><a href="#lu-you" class="header-anchor">¶</a></h3><p>想出去玩，认真地了解一个地方（自然&gt;人工），而不是穿行于城市里各种大同小异的商业街。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《论自由》读书笔记</title>
      <link href="/sg/2021/06/21/freedom/"/>
      <url>/sg/2021/06/21/freedom/</url>
      
        <content type="html"><![CDATA[<p>《论自由》一书中论述了公民自由的边界。首先需要确定的原则是社会若要干预个人事务，只有当目的是防止其伤害他人时才能违背其意志而不失正当地施加于他。个人只有有关于他人利害的部分需要对社会负责，只要个人行为仅与自己有关，那么他就无需对社会负责。作者首先正面论证了自由的定义，并对其分支思想言论自由和个人自由的原理展开论述，最后分析了自由原理在社会中的具体应用。我最感兴趣的地方是怎样才算个人自由？当个人表现得与群体大多数不同的时候，社会应当如何对待作为少数群体与大多数表现不同的部分？</p><p>一个人在和社会其他人交互时自然地产生意见和表达意见，并按照自己的意见行动。产生意见，表达意见和行动都属于个人自由的范畴，不应当被社会强制改变。</p><p>文章分别从三个论点论证了思想自由及表达想法的自由对人类精神幸福的必要性。首先权威所压制的意见不一定是错误的。在历史上即使迫害程度有所减轻，对异端者的迫害从未停止并且很少失败。苏格拉底被国人判为不敬神和不道德处以死刑；耶稣背负亵渎神灵的罪名受刑于十字架。况且即使是所在时代拥有一般人难以比拟的判断力和学识的伟人也有出错的可能，正如下令镇压了基督教的人是贤明的古罗马皇帝奥勒留。其次即使这种意见是错误的，禁绝它仍为过错。被压制的意见可能有部分是正确的同时又是当下通行的意见所欠缺的，真理需要经此修正和补足。如果未经过挑战和反对就直接接受真理会使其流于形式，成为一项成见，既不靠论证又不准论证，这样真理则成为了迷信。作者认为人们需要为其信念的正确性提供证明，为自己的观点提供正反两面证明，在不断否定和辩护的过程中理解自己的观点。通过以宗教信条和道德学说的发展史举例，他驳斥了当公认意见为真，缺乏言论自由的危害之处有限的观点。尽管随着社会文明的进步，意见必然统一，但真理需要分歧使人可以为之向对手解释或辩护来获得更新的活力。最后，现实中常出现真理共存于一组相互冲突的信条之间，人们需要做出明智的判断，在各种不同的观点间进行取舍，而不是让一方的偏见压倒另一方。</p><p>那么我们需要怎样的言论自由呢？公共讨论中自由表达的界限在哪里？有人认为，“一切言论固然都应该被允许自由表达，但前提是意见表达方式必须温和节制，不能逾越自由讨论的界限。”为了使双方的观点得到充分表达，限制主流观点使用无节制的谩骂之语的重要性大于以同等要求约束非主流观点。而这种限制需要来自于舆论对实际情况具体分析，而不是来自于法律和权威当局。</p><p>在实际问题中言论自由的考量变得更加复杂。以某个论坛为例，禁言，封号和删帖的标准在哪里？论坛能有不同的声音吗？当某个活跃成员的发言过于激烈冒犯到了部分成员从而累积多次举报后，这个成员被论坛的管理员小组禁言。那么这项处理是否合理呢？这需要进行多方论证其合理性，管理员小组对禁言的标准和论坛的自由表达相关的“不要发表任何理智的人会认为冒犯的、过分的或招致怨恨的言论”的约定再次进行公示并对成员的处理过程公开；同时，受到该成员冒犯的其他成员对为什么感觉到冒犯的问题与支持她应当自由表达个人观点即使语气带有冲突性的成员进行了相互论证；再次，无任何利益关系的第三方成员相对客观地在其中发表了个人观点；当观点发表在论坛上，就能够被反驳或者支持。通过这样一次论坛内的公开讨论，我们虽然不能说明这项处理是绝对合理的，但我们能够认为这是能够保证多数人自由发表言论的合理方案。而对这项处理有反对意见的人仍然有权利做出自己想做出的任何决定，比如删号或者退出。</p><p>思想言论的自由是个性自由的前提，个性的自由表达与发展相关。个性的自由发展造就先进之士，而先进之士拥有的首创力为未进之士打开眼界，从而让他们在眼界完全打开后有机会使自己成为具备首创力的人。这些少数的先进之士“所能要求的，只是为人们指出道路的自由”，而人们有权力也应当去主动选择真正适合自己的道路，而不是盲从盲信于先进之士的道路。</p><blockquote><p>没有理由说一切人类生活都应该被一个或少数几个模型所筑造。如果一个人具备相当的常识和经验，其以自己的方式筹划生活，就是最好的，并非因为这种方式本身就为最好，而是因为这是属于他自己的方式。</p></blockquote><p>虽然个性得到充分发展有利于社会进步和人类多样性，但公众舆论的倾向则往往不能容忍任何显著的个性流露。作者通过东西方文明发展的对比论述了习俗的专制的危害，反面论证了个性自由的价值。中国在很早的时候就发展出世界领先的风俗制度，然而在确保最富智慧的人稳居高位后则陷入了近千年的停滞；反观欧洲之所以能不断进取则是因为各民族的性格与教养异常歧异，这样的分歧造成变化，引导进步。</p><p>现代政体一般是代表大多数人意志的自治政府，然而大多数人的意志并不能等同于全体人民的意志。多数人的暴政可能以难以察觉的方式渗透入个人生活的各方面。除了法律约束，社会中的优势意见和大众情感同样在潜移默化中成为束缚异见者的方式。作为个体，很难在充满反对声音的环境下仍旧坚持个人意见。而经常发生的情况是大多数人的意见取代了个人的。作者认为，每个人都有权利用自己认为善的方式生活。即使大多数人的意见是有利于他的，只要他原本的意见没有伤害到社会其他人，他就有坚持自己想法的自由。“他人可以热心地助其判断，衷心鼓舞他的意志，乃至强行向他进谏，然而是否采纳必须取决于他自己”。而当他的意见伤害到社会中的其他人或有伤害的确定危险，那么就不符合自由原则而应当受道德或法律问责。</p><p>自由原则在现实生活中的具体应用表现得更为复杂。文末通过举了多个例子讨论了个人自由和社会干涉的界限，并且着重论述反对政府干涉即使其所行未侵犯自由的三类理由。自由原则不允许人有放弃自由的自由，也不允许人以任何名义干涉他人的自由。而政府权力应当受到限制，“在不违效率的前提下，尽最大限度地让权力分散；同时由一个集散中枢尽最大可能地让信息得到收集和传播”。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>study less study smart</title>
      <link href="/sg/2021/06/19/study/"/>
      <url>/sg/2021/06/19/study/</url>
      
        <content type="html"><![CDATA[<p>一个简单的归纳。</p><h3><span id="jian-duan-ban">简短版</span><a href="#jian-duan-ban" class="header-anchor">¶</a></h3><p>something I can work on</p><ul><li><p>死记硬背？</p><p>Fact/concept</p><p>Recognition/recollection</p></li><li><p><strong>Reading</strong>:survey, question, read, recite, review</p><ul><li><p>SQ3R</p><p>Survey:浏览要阅读的内容，对要学的部分提出问题。</p><p>Recite:大部分时间？coding is  a nice way to try out.</p><p>Review: go through notes.</p></li></ul></li><li><p>sleep</p></li><li><p><strong>Notes</strong> -&gt; comprehension?</p><p>课上：记尽可能少的笔记，大纲；</p><p>课后：give it depth, flesh it out；</p><ul><li>how to flesh it out? What to?</li></ul><p>而不是一开始就写漂亮的笔记。</p></li><li><p>Feymann’s methods: 教给别人听</p></li><li><p>study area</p></li><li><p><strong>组队学习</strong></p></li></ul><h3><span id="jia-chang-ban">加长版</span><a href="#jia-chang-ban" class="header-anchor">¶</a></h3><p>学习其实并不需要太多花哨的方法，很多巧计妙思大多是没有用的，掌握基本的方法后花时间就够了。在高中非常迷恋学习方法，以为有一种通解能够很快地解决所有问题，但事实并非如此。就像思维导图的核心并不是五颜六色的图画，不是选择的某个词，而是我们是否真正理解学习了这部分内容，然后能用一种结构化的方式表达出来，能否讲给别人听。</p>]]></content>
      
      
      <categories>
          
          <category> study </category>
          
          <category> skill </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无名城记</title>
      <link href="/sg/2021/06/11/story_nn1/"/>
      <url>/sg/2021/06/11/story_nn1/</url>
      
        <content type="html"><![CDATA[<p>我，一个二十岁的潦倒青年，唯一的爱好就是解谜。听闻本市郊区有一座古堡，而主人是一位年逾花甲的老人，他唯一的乐趣就是听各种不同的声音。或许我可以去老人那碰碰运气，看看是否能听到有趣的事情，或者我可以给他讲我解过的谜题。</p><p>当来到这座古堡门下，我就被这尖顶建筑给吓到了，或许是这颜色深褐的玻璃，或许因为这阴暗的氛围，谁能知道诺大的城堡只有那么几盏昏暗的灯？谁能想到我来到这里已经是深夜了？</p><p>管家的及时出现让我镇定下来，我立刻被带到老人面前，“这么晚还没睡？”。老人把看着的书放下，直视我，“告诉我年轻人，你有什么故事？”我，虽然其实并未真正解过什么复杂的谜题，但是我可是好歹也看过几本侦探小说，大不了胡乱编造一些。</p><p>“以时间为谜底的谜题，在博尔赫斯的笔下是不断分叉的花园迷宫。主人公进入其中做出了选择A,他传递出了信息出去但自己因此杀了无辜的人并被绞死；选择不进入逃走为选择B；选择进入但不连累别人为选择C……这无数个选择同时存在因时间上的区别而分叉出无数个枝桠。你知道，这并不是我第一次听到这样的故事。阿西莫夫写的时间的终结里，时间是一条衔尾蛇，终结过后就又回到初始，无限循环，直到有一天循环的某个环节的执行者发现了存在另一个时间节点的自己产生悖论。时间因果论，平行世界说，时间线的收敛，无限♾️与永恒，这些不过是哄骗青年的未知题。”我顿了顿，窗外的夜色掩映下仿佛我正身处一个迷宫“或许这样说并不恰当。”老人只是略皱着眉，示意我继续往下说……</p><p>“思考一个故事的发展，需要考虑背景。我记得特德姜的你一生的故事里的女主人公通过和外星生物的交谈获得了对世界的全新认知，在知道未来，过去和现在中仍旧按着既定轨迹生活着，这并不是因为她对自己不能改变命运而心如死水，而是她从新的角度理解了自己的故事。而我们讨论的故事主人公余淮尽管并未一开始就知道迷宫的存在，却在走进花园迷宫后和艾伯特的交谈中明白了祖先遗留下文字的意义，明白了自己此行既是巧合，也是时间无限分叉中的必然。他杀了艾伯特，后来他又被绞死，再后来他亲自讲述了这个故事。最后这个他或许是某个分岔中的不同时间点存在的余淮对这一选择下后果的窥视，一个能够明白余淮的无限悔恨和厌倦的人正是他自己，一个不存在在现实中的幽灵……”。老人打断了我，“年轻人，我懂你想表达的意思。但让我来问你一个问题，我们为什么要讨论一些看上去没有实际意义而对生活没有改善的东西？没有冒犯的意思，但我注意到你卷曲干燥的头发，穿的有些年月的破旧的深色外套，或许你的生活境况并不好。你今年多少岁？“”二十一，先生，过了十月的话。“我耸耸肩，无所谓地说。</p><p>“因为思考这样的问题能让我思考问题的角度更透彻，对工作和学习也会有帮助。”我停顿了下，“这样的回答您是否满意呢？我想您只会认为我在巧言令色。我想这些问题只不过是因为觉得有趣而已，自由而无用是我所信奉的。而在我看来，您现在愿意听我讲到这里而没把我赶出去，一是因为您和我是相似的人，二是因为您想要听到的不一样的声音既不是实用的，也不是无用的，而是真实的被体验的。”老人与我对视，然后走到窗前。“活到我这样岁数的人，看过很多故事。现实中的，别人写的。空谈无用，我见过很多和你一样年纪的青年讲述自己将要做的事情，仿佛他们已经做成了。但最后能够做成的却是其中能不畏异见坚持的人，能听见的声音终将被听见。不过，人生辗转，最后也不过是归于泥土，为什么要考虑这些现实呢？我之前的问题只是想知道你想从我这里寻求什么，现在我已经知道了。“钟声敲响，已经十二点了。”现在很晚了，你先去休息，明天跟我去一个地方走走。“老人摆摆手。我点头致意，走了出去。管家安排了个房间给我，我却没有丝毫睡意，或许是长时间的步行，或许是刚刚的交谈。</p><p>天上有很多星星，这可不是你在城市里能经常看到的情景。我来这里好像也没什么特殊的目的，听说是个有意思的老头，所以就来了。或许我还要去找一份工作，身上快没钱了，还暂时不想流落街头。断断续续的念头冒出来，仿佛无数条断点连成了一条线，而这条线上写着的就是我人生的记录。我从任何角度上来看都是个随意的人，要说和以前的一点区别大概就是从无欲无求到随心所欲，自由总是有代价的，这一点我不是不明白，但我更想在有限的时间里做点自己喜欢做的事，不管它有没有实际用处。而学院里的事不管多么精彩，都与我无关，魔药学是我最讨厌的一门课，我又不是混血王子，怎么配制出那一个个奇形怪状有着奇怪名字的各式药剂。好在比起低年级我逃课也逃得越理直气壮了，今年更是索性休学了。</p>]]></content>
      
      
      <categories>
          
          <category> life </category>
          
          <category> read </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ 101</title>
      <link href="/sg/2021/05/12/cpp_101/"/>
      <url>/sg/2021/05/12/cpp_101/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#fundamentals">Fundamentals</a><ul><li><a href="#types-and-structs">types and structs</a></li><li><a href="#initialization-and-references">initialization and references</a></li><li><a href="#streams">streams</a></li></ul></li><li><a href="#standard-template-library">standard template library</a><ul><li><a href="#sequence-containers">Sequence containers</a></li><li><a href="#associative-containers">associative containers</a></li><li><a href="#advanced-containers">advanced containers</a></li><li><a href="#templates">templates</a></li><li><a href="#function-algorithms">Function&amp;algorithms</a></li><li><a href="#modern-stl">Modern stl</a></li></ul></li><li><a href="#classes">classes</a><ul><li><a href="#oop-basic-syntax">oop basic syntax</a></li><li><a href="#oop-design">oop design</a></li><li><a href="#operators">operators</a></li><li><a href="#special-member-functions">Special member functions</a></li><li><a href="#move-semantics">move semantics</a></li><li><a href="#namespaces">namespaces</a></li><li><a href="#inheritance">inheritance</a></li><li><a href="#template-classes">Template classes</a></li><li><a href="#concept-c-20">concept(c++20)</a></li></ul></li><li><a href="#modern-cpp">modern cpp</a><ul><li><a href="#raii">raII</a></li><li><a href="#multithreading">multithreading</a></li><li><a href="#template-mateprogramming">template mateprogramming</a></li></ul></li></ul><!-- tocstop --></div><p>goal</p><ul><li>Features and existence</li><li>read documentation</li><li>Design philosophy of modern cpp</li></ul><img src="/sg/2021/05/12/cpp_101/p1.png" class title="p1"><h2><span id="fundamentals">Fundamentals</span><a href="#fundamentals" class="header-anchor">¶</a></h2><p>highly evolving, absorb other languages features, multi-paradigm, effcient in time and space</p><ul><li>history of cpp</li></ul><p>Assembly -&gt; c -&gt; c with classes</p><ul><li><p>Design philosophy of c++</p><ul><li><p>Paradigm, multiple paradigm</p></li><li><p>Performance</p></li><li><p>Abstraction: compartmentalize messy constructs</p></li></ul></li></ul><h3><span id="types-and-structs">types and structs</span><a href="#types-and-structs" class="header-anchor">¶</a></h3><ul><li>types</li><li>structs</li><li>type deduction with auto</li><li>structured binding</li></ul><h3><span id="initialization-and-references">initialization and references</span><a href="#initialization-and-references" class="header-anchor">¶</a></h3><h3><span id="streams">streams</span><a href="#streams" class="header-anchor">¶</a></h3><h4><span id="overview">overview</span><a href="#overview" class="header-anchor">¶</a></h4><p>Interact with outside like sockets in internet or programs as pipelines</p><p>Stream is like a character buffer: make conversion between external source, variables representations in program.</p><p>4 standard iostreams: cin, cout, cerr, clog</p><p><strong>cin reads whitespace not consuming it until next call of cin.</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getline</span>();</span><br></pre></td></tr></table></figure><h4><span id="stringstream">stringstream</span><a href="#stringstream" class="header-anchor">¶</a></h4><ul><li><strong>when to use stringstream?</strong> compared to str<ul><li>processing strings</li><li>Formatting input/output</li><li>parsing different types</li></ul></li></ul><p>buffered state: JG(short for just google)</p><ul><li>type conversion</li></ul><p>Overwrites, use ::ate</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">osstringstream <span class="title">oss</span><span class="params">(<span class="string">&quot;...&quot;</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; oss.<span class="built_in">str</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"><span class="function">istringstream <span class="title">iss</span><span class="params">(<span class="string">&quot;...&quot;</span>)</span></span>; <span class="comment">//automatic conversion</span></span><br><span class="line">iss &gt;&gt; ..;</span><br></pre></td></tr></table></figure><p>pointer points to the end of stringstream, so it can be written from where it ends last.</p><p>position of pointer can be changed using …(Just Google). stringbuf is for more low-level control(pointers).</p><h5><span id>?</span><a href="#" class="header-anchor">¶</a></h5><p>initializa a os stream, writing to it would be overwrites unless specified. keep writing, which would continue from the end of last stream.</p><ul><li><p>Delimiter</p><ul><li>Read string: whitespace separated token, token preference</li><li>Stream stops: whitespace or invalid type matched</li></ul></li><li><p>stringstream formatted i/o</p><ul><li><p>Why operator works?</p><p>Operators return a reference to the stream itself. It’s like that streams eat whatever left and become much longer</p></li></ul></li><li><p>Practice: write stringtointeger;</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">stringToInteger</span><span class="params">(<span class="type">const</span> String&amp; s)</span> </span>&#123;</span><br><span class="line">  <span class="function">istringstream <span class="title">iss</span><span class="params">(s)</span></span>;</span><br><span class="line">  <span class="type">int</span> temp;</span><br><span class="line">  iss &gt;&gt; temp; <span class="comment">//losing part:parsing process, else temp not initilized</span></span><br><span class="line">  <span class="keyword">if</span> (iss.<span class="built_in">fail</span>()) <span class="keyword">throw</span> std::<span class="built_in">domain_error</span>(<span class="string">&quot;error&quot;</span>); <span class="comment">//no value int at beginning</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">char</span> remain;</span><br><span class="line">  iss &gt;&gt; remain;</span><br><span class="line">  <span class="keyword">if</span> (!iss.<span class="built_in">fail</span>()) <span class="keyword">throw</span> std::<span class="built_in">domain_error</span>(<span class="string">&quot;error&quot;</span>); <span class="comment">//more than a single valid int</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printStateBits</span>(iss);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fix: Errornous input</p><h4><span id="state-bits">state bits</span><a href="#state-bits" class="header-anchor">¶</a></h4><ul><li><p>Check for errors? what the error message means?</p><p>Detect error messages: by reading partial stream</p></li><li><p>state</p><ul><li><p>good bit</p><ul><li>rarely used</li></ul></li><li><p>fail bit !</p></li><li><p>EOF bit !</p><ul><li>on only read passing the end</li></ul></li><li><p>bad bit</p></li></ul></li><li><p>State bits act as boolean value of stream</p><p>expression be like (iss &gt;&gt; result)</p></li></ul><h4><span id="input-output-streams">Input/output streams</span><a href="#input-output-streams" class="header-anchor">¶</a></h4><ul><li><p>Buffering</p><p>Buffering stuff won’t print to console instantly?</p></li><li><p>Rushing</p><ul><li><p>endl = ‘\n’ + flush(print to console) : much slow, don’t use too much</p></li><li><p>‘\n’(without flushing)</p></li></ul></li><li><p>Input stream problems</p><p>read token by token, trash would stop reading of cin, redundancy.</p><ul><li>How to solve it?</li></ul></li><li><p>getline return value?</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">getline</span>(cin, line)) <span class="keyword">throw</span> <span class="built_in">domain_error</span>(...);</span><br><span class="line"></span><br><span class="line">iss.<span class="built_in">ignore</span>(); <span class="comment">//skip one place</span></span><br></pre></td></tr></table></figure><h4><span id="manipulators">manipulators</span><a href="#manipulators" class="header-anchor">¶</a></h4><p>keywords will change the behavior of the stream when inserted, serving as functions</p><h4><span id="types">types</span><a href="#types" class="header-anchor">¶</a></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unsigned int, signed int: cause type unmatched error.</span></span><br><span class="line">string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i) <span class="comment">//error</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">1</span>; i &lt; str.<span class="built_in">size</span>() - <span class="number">1</span>; ++i) <span class="comment">//if str is empty, it will run into trouble for -1 size. And you will always miss the last element of str.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); ++i) <span class="comment">//correction</span></span><br></pre></td></tr></table></figure><ul><li><p>type aliases</p><ul><li>long</li></ul></li><li><p>Auto</p><ul><li>Cstring, cppstring: array(unknown size) vs. string</li><li>drop c stuff (reference, const)</li><li>when to use<ul><li>only necessary : explicit, lambda, …</li><li>Don’t return auto type generally</li><li>can’t use in parameters of functions</li></ul></li></ul></li><li><p>Pair/tuple functions</p><ul><li><p><strong>structured binding</strong>(cpp17), learn from python</p><ul><li><p>Drawbacks: implict binding, may use struct instead</p><p>ex: Pairt(min, max)</p></li></ul></li></ul></li><li><p>Struct</p><ul><li>Light way of class</li><li>Public (class may not)</li><li>Semicolon at the end!</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">discount</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pair</span></span><br><span class="line"><span class="comment">//struct</span></span><br></pre></td></tr></table></figure><ul><li><p>Parameters(in) and return values(out) guidelines for modern c++ code</p><p>??</p><p>when to return reference</p></li><li><p>uniform initialization(cpp11)</p><p>Multiple way of initialization depending on types</p><ul><li><p>automatically deduced the type, like struct</p></li><li><p>initializer list</p></li></ul></li></ul><h2><span id="standard-template-library">standard template library</span><a href="#standard-template-library" class="header-anchor">¶</a></h2><p>overview</p><img src="/sg/2021/05/12/cpp_101/p2.png" class title="p2"><p>Open source</p><p>efficiency : think problems in depth</p><h3><span id="sequence-containers">Sequence containers</span><a href="#sequence-containers" class="header-anchor">¶</a></h3><p>Store stuff, container</p><p>std::vector bounds check by default</p><ul><li><p>segmentation fault won’t happen</p></li><li><p>Drawbacks</p><ul><li>fail silently, don’t where goes wrong</li><li>Write correctly, slow down the program</li></ul></li><li><p>grow rapidly in one direction, so push_back slow case can be substituted of deque</p></li></ul><h3><span id="associative-containers">associative containers</span><a href="#associative-containers" class="header-anchor">¶</a></h3><ul><li><p>container adaptors</p><p>Stack: first in first out -&gt;Push back, pop back</p><p>Queue: first in last out -&gt;Push back, pop front</p><ul><li>Build at the base of deque, why not deque?<ul><li>Design philosophy: express directly and abstraction without losing efficiency, allow full control for programmers</li></ul></li></ul></li><li><p>associative containers: key, value pairs</p><p>Map, set:</p><ul><li>ordered or not<ul><li>Ordered: &lt; less than, sorted keys</li><li>Hash functions</li></ul></li></ul></li><li><p>iterators</p><ul><li>usage: begin, end<ul><li>create, dereference, advance, compare</li></ul></li><li>Iterate through any container, which is powerful<ul><li>apply the same logic action to containers regardless of which data structures it is.</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt;::iterator iter = mySet.<span class="built_in">begin</span>(); <span class="comment">//define type autoamtically by qt</span></span><br><span class="line"><span class="type">int</span> val = *iter;</span><br><span class="line">iter++; <span class="comment">//or ++iter;</span></span><br></pre></td></tr></table></figure><ul><li><p>multimaps</p><p>Same key different values</p></li></ul></li><li><p>map iterators</p><p>Using pairs: std::pair</p><ul><li>Access through *</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ways to create pairs(3...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map iterators</span></span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator i = m.<span class="built_in">begin</span>();</span><br><span class="line">map&lt;<span class="type">int</span>, <span class="type">int</span>&gt;::iterator end = m.<span class="built_in">end</span>();</span><br><span class="line"><span class="keyword">while</span> (i != end) &#123;</span><br><span class="line">  cout &lt;&lt; (*i).first &lt;&lt; (*i).second &lt;&lt; endl; <span class="comment">//not *i.first</span></span><br><span class="line">  ++i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3><span id="advanced-containers">advanced containers</span><a href="#advanced-containers" class="header-anchor">¶</a></h3><ul><li><p>further iterator usages</p><ul><li><p>Iterator is just memory address</p></li><li><p>vector end points to in c++</p><blockquote><p>The C++ function std::vector::end() returns an iterator which points to <strong>past-the-end element</strong> in the vector container. The past-the-end element is the theoretical element that would follow the last element in the vector.</p></blockquote></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set&lt;<span class="type">int</span>&gt; mySet&#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">57</span>,<span class="number">137</span>&#125;;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator iter = mySet.<span class="built_in">lower_bound</span>(<span class="number">2</span>);<span class="comment">// strictly greater than</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(; iter != end; ++iter) &#123;</span><br><span class="line">  cout &lt;&lt; *iter &lt;&lt; endl; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>Find, count</p></li><li><p>ranges based for loop</p><p>short for iterator</p></li></ul></li><li><p>Quick note on structs</p><p>declare, initialize, operate(dot notation to enter field)</p></li><li><p>iterator types</p><p>Incremented iterators,  jump far iterators</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::list&lt;<span class="type">int</span>&gt; <span class="title">myLIst</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="keyword">auto</span> some_iter = myList.<span class="built_in">begin</span>() + <span class="number">3</span>;<span class="comment">//error, list not supported this kind of iterator</span></span><br></pre></td></tr></table></figure><p>Input/output &lt;- forward &lt;- bidirectional &lt;- random access</p><ul><li>similarity: above</li><li>diff<ul><li>Input: read only, move in single direction</li><li>Output: write only</li><li>Forward: read and write, multiple passes,</li><li>Bidir: go forwards or backwards</li><li>Random access item: ++, – arbitrary amounts(most powerful)</li></ul></li></ul></li></ul><h3><span id="templates">templates</span><a href="#templates" class="header-anchor">¶</a></h3><ul><li><p>programming paradigm</p><ul><li>oop: java, python</li><li>Procedural programming: c</li><li>generic programming</li></ul></li><li><p>template functions</p><ul><li><p>Overload programs, generic type in java, but in c++?</p><p>it turns out to be the same.</p><p>Template augmentation help(JG)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;  <span class="comment">//declare T is a type</span></span><br><span class="line"><span class="function">pair&lt;T, T&gt; <span class="title">my_minmax</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> [min, max] = <span class="built_in">my_minmax</span>&lt;<span class="type">double</span>&gt;(<span class="number">2.3</span>, <span class="number">4.3</span>); <span class="comment">//explicitly instantiating, specify the type</span></span><br><span class="line"><span class="keyword">auto</span> [min1, max1] = <span class="built_in">my_minmax</span>(<span class="string">&quot;Ad&quot;</span>, <span class="string">&quot;Av&quot;</span>); <span class="comment">// implicitly. type should be c string, which would not convert to cpp string as explicitly isntantiating.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//in case there is a large collection</span></span><br><span class="line"><span class="comment">//pass in the pointer of object, </span></span><br><span class="line"><span class="comment">//const T&amp; a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>varadic templates(since c++11)</p></li><li><p>concept lifting</p><ul><li><p>generic programming</p></li><li><p>concept lifting</p><ul><li><p>relax constraints? Is certain type necessary?</p></li><li><p>Iterate through all elements</p></li></ul></li></ul></li></ul><h3><span id="function-amp-algorithms">Function&amp;algorithms</span><a href="#function-amp-algorithms" class="header-anchor">¶</a></h3><p>Cpp compile and run</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -std=c++17 program -o program_executable_filename</span><br></pre></td></tr></table></figure><ul><li><p>Implicit interfaces</p><p>given a piece of program, determine what it suggest?</p></li><li><p>concepts c++20: explicit interfaces</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> It, <span class="keyword">typename</span> Type&gt;</span><br><span class="line"><span class="keyword">requires</span> Input_iterator&lt;It&gt; &amp;&amp; Iterator_of&lt;It&gt; &amp;&amp; Equality_comparable&lt;value_type&lt;It&gt;, Type&gt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countOccurences</span><span class="params">(It begin, It end, Type val)</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>lambdas</p><p>Q：How many times does the element satisfy equal[val] in [a range of elements]?</p><ul><li>[Predicate(JG)] : return boolean</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">predicate</span>(*iter)) ++ count; <span class="comment">//predicate typeL UnaryPred</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//predicate in template</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> DataType&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isEven</span><span class="params">(DataType val)</span> </span>&#123;<span class="keyword">return</span>;&#125;</span><br></pre></td></tr></table></figure><ul><li>problems encountered<ul><li>annoying to write separate functions for solving similar tasks</li><li>scope issue: a variable limit in the calling function</li></ul></li><li>Solve: lamda functions (since c++11<ul><li>Semicolon at the end!(compared to function)</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//anatomy of a lambda function</span></span><br><span class="line"><span class="keyword">auto</span> func = [capture-clause](parameters) -&gt; <span class="keyword">return</span>-type &#123; <span class="comment">//auto is required</span></span><br><span class="line"><span class="comment">//body</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ex</span></span><br><span class="line"><span class="keyword">auto</span> isLessThanLimit = [limit](<span class="keyword">auto</span> val) -&gt; <span class="type">bool</span> &#123; <span class="comment">//bool can be ommitted since it is predicate</span></span><br><span class="line">  <span class="keyword">return</span> val &lt; limit;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>[Capture-clause]<ul><li>by value: [=]</li><li>by reference: large sets [&amp;]</li><li>(never)Lazy: capture all the available [=, &amp;exception]</li></ul></li></ul></li><li><p>Algorithms library</p><ul><li><p>Sort, copy, partition,</p></li><li><p>Stream iterator</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">copy</span>(courses.<span class="built_in">begin</span>(), courses.<span class="built_in">end</span>(), std::<span class="built_in">ostream_iterator</span>&lt;Course&gt;(std::cout, <span class="string">&quot;\n&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>Problems run into:</p><ul><li><p>find</p><p>Which data structure is faster?</p></li><li><p>Remove</p><p>can’t remove actually : remove is not in the vector algorithms</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fix: erase-remove idiom</span></span><br><span class="line">v.<span class="built_in">erase</span>(</span><br><span class="line">  std::<span class="built_in">remove_if</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">end</span>(), predicate), <span class="comment">//return iterator to beginning of trash, s.t.it can be removed later</span></span><br><span class="line">  v.<span class="built_in">end</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>copy:</p><p>limited container size: expand the size</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">back_inserter</span>(csCourses); <span class="comment">//iterate the container</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>adaptors</p></li><li><p>ranges</p></li></ul><h3><span id="modern-stl">Modern stl</span><a href="#modern-stl" class="header-anchor">¶</a></h3><ul><li><p>Conclusion</p><img src="/sg/2021/05/12/cpp_101/p3.png" class title="p3"><ul><li><p>Boost is one layer above.</p></li><li><p>abstraction</p><p>Basic types -&gt; containers -&gt; iterators -&gt; algorithms</p><p>🧐it’s fascinating of all those abstraction levels</p></li></ul></li></ul><p>Ex: matching</p><p>Word frequency count -&gt; similarity - &gt; dot product</p><p>Writing a program from scratch</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//using namespace</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; <span class="comment">//single class</span></span><br><span class="line"><span class="comment">//so instead</span></span><br><span class="line"><span class="keyword">using</span> std::cout; <span class="keyword">using</span> std:endl <span class="comment">//specify which coutstream of library is using; multiple classes work together</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>Decompose, from top down</p><h2><span id="classes">classes</span><a href="#classes" class="header-anchor">¶</a></h2><img src="/sg/2021/05/12/cpp_101/p4.png" class title="p4"><h3><span id="oop-basic-syntax">oop basic syntax</span><a href="#oop-basic-syntax" class="header-anchor">¶</a></h3><p>Extensions decided by compilers</p><ul><li><p>constructor and destructor</p></li><li><p>Const keyword</p></li><li><p>operator overloading</p></li></ul><h3><span id="oop-design">oop design</span><a href="#oop-design" class="header-anchor">¶</a></h3><h4><span id="const">const</span><a href="#const" class="header-anchor">¶</a></h4><p>Decide scope used</p><ul><li><p>const correctness</p><ul><li>why use const? safety always matters.</li><li>why not global variable? hard to track</li></ul><p>It’s like immutable and hashable value in python. There is price to make to use lists.</p><ul><li>const allows us to reason about whether a variable will be changed</li></ul></li><li><p>const cast : not a good way</p><p>Why ?</p></li><li><p>Const and classes</p><p>Object can be divided into two state: const, non-const</p><p>Const interface, non-const interface</p><p>Const object can only be passed into const interface while non const object is fine for both interface</p><ul><li><p>Const pointer:</p><p>pointer allow to move or not</p><p>(pointer read from right to left)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//constant pointer to a non-constant int</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//non-constant poiter to a constant int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* p;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span>* p;</span><br><span class="line"></span><br><span class="line"><span class="comment">//constant pointer to a constant int</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> p;</span><br><span class="line"><span class="type">int</span> <span class="type">const</span>* <span class="type">const</span> p;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>const iterators</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> vector&lt;<span class="type">int</span>&gt;::iterator itr <span class="comment">//like int* const itr</span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> <span class="title">myClassMethod</span><span class="params">(<span class="type">const</span> <span class="type">int</span>* <span class="type">const</span> &amp; param)</span> <span class="type">const</span></span>; <span class="comment">//means what,const pointer point to const member function which takes const pointer to a const int. </span></span><br></pre></td></tr></table></figure><p>|The last const means this is a const member function(can’t modify variables of the this instance)</p><ul><li>can use autos</li></ul></li><li><p>review</p><ul><li>Generally, we use const when things does not get modified.</li><li>Pass by const reference is better than pass by value<ul><li>exception: Boolean</li></ul></li><li>member functions have both const and non-const iterators</li></ul><p>more specificly,</p><ul><li>const on objects</li><li>const on functions</li></ul></li></ul><h3><span id="operators">operators</span><a href="#operators" class="header-anchor">¶</a></h3><p>when to overload? Principles?design choice?</p><ul><li><p>operator overloading</p><img src="/sg/2021/05/12/cpp_101/p5.png" class title="p5"><p>（40+4）</p><p>how to apply operators to user-defined classes?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function signature</span></span><br><span class="line"><span class="comment">//sth vector&lt;string&gt;::operator+=(type element)</span></span><br><span class="line">[<span class="keyword">return</span>] StringVector::<span class="keyword">operator</span>+=(<span class="type">const</span> std::string&amp; element)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//operator overloading</span></span><br><span class="line"><span class="built_in">push_back</span>(element);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> val: other) <span class="built_in">push_back</span>(val); <span class="keyword">return</span> [something?];</span><br><span class="line"></span><br><span class="line"><span class="comment">//why reference?</span></span><br><span class="line"><span class="comment">//return by value?by const?by reference?</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>rules for member vs. non-member</p><p>:Member function, non - member function(contains itself or not)</p><ul><li><p>which type should be passed in?</p><p>Operator needs reference? values?</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; os, <span class="type">const</span> Fraction&amp; F)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout &lt;&lt; fraction1 &lt;&lt; fraction2</span></span><br><span class="line">cout.<span class="keyword">operator</span>&lt;&lt;(franction1).<span class="keyword">operator</span>&lt;&lt;(fraction2)</span><br></pre></td></tr></table></figure><ul><li>Think about const vs. non-const for member functions.</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">... ()&#123;&#125;;</span><br><span class="line"><span class="type">const</span> ... () <span class="type">const</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><ul><li>Friend</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fraction</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">operator</span>&lt;&lt;(...) <span class="comment">//friend(outside, non-member) can access private member varible of class </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Rules for members vs non-members</p><p>Some are better for member(allow easy access to lfs private members), some are not, depending on treating both operands equally.</p><ul><li><p>member</p></li><li><p>Non-member</p></li><li><p>unary</p></li><li><p>Binary</p></li></ul></li><li><p>canonical forms</p></li><li><p>POLA, principle of least astonishment</p><p>if a necessary feature has a high astonishment factor, it may be necessary to redesign the feature</p></li></ul><h3><span id="special-member-functions">Special member functions</span><a href="#special-member-functions" class="header-anchor">¶</a></h3><p>automatically generated by the compiler:</p><p>default construct,</p><p>copy constructor, (copy from l)</p><p>copy assignment, (overwrite from l)</p><p>destructor</p><ul><li><p>construction vs assignment</p><p>deepcopy</p><p>special case: avoid self-assignment</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//asign</span></span><br><span class="line">StringVector&amp; StringVector::<span class="keyword">operator</span>=(<span class="type">const</span> StringVector&amp; other) &#123;</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">delete</span>[] elems;</span><br><span class="line">  </span><br><span class="line">  elems = <span class="keyword">new</span> std::</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>details and delete</p><p>prevent copy</p></li><li><p>rule of  three/zero</p><p>Default one not working: ownership issues</p><ul><li>rule of three: if you explicitly define(or delete) one special member function, you should define(or delete) all three</li><li>rule of zero: reduce redundant work if orginals working</li></ul></li><li><p>copy elision</p><p>Compiler helps</p></li></ul><h3><span id="move-semantics">move semantics</span><a href="#move-semantics" class="header-anchor">¶</a></h3><p>Moving is more efficient than copying</p><ul><li><p>Lvalues vs. rvalues</p><p>lvalues, long term(name and identity), has address</p><p>rvalues, temporary, no address</p><ul><li>key to move semantics: l copy, r copy and move</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span>&amp; ptre = ptr;</span><br><span class="line"><span class="keyword">auto</span>&amp;&amp; v4 = v1 + v2;</span><br></pre></td></tr></table></figure></li><li><p>Move constructor and assignment(special member functions)</p><ul><li>move constructor(create from r)</li><li>Move assignment(overwrite from r)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//r reference is lvalue</span></span><br><span class="line"><span class="comment">//sol: unconditionally cast, std::move()</span></span><br></pre></td></tr></table></figure></li><li><p>swap</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</span><br><span class="line">  T temp = a; <span class="comment">//std::move()</span></span><br><span class="line">  a = b;</span><br><span class="line">  b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>perfect forwarding</p><p>emplace_back(vector)</p></li></ul><h3><span id="namespaces">namespaces</span><a href="#namespaces" class="header-anchor">¶</a></h3><ul><li><p>scope resolution</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">std::    ;</span><br><span class="line">StringVector:: ;</span><br></pre></td></tr></table></figure></li></ul><h3><span id="inheritance">inheritance</span><a href="#inheritance" class="header-anchor">¶</a></h3><p>c+±specific details</p><p>explicit interface, implicit interface</p><p>abstract classes: any class contains at least one virtual function</p><ul><li><p>Access specified keyword :</p><ul><li>public,</li><li>private,</li><li>protected</li></ul></li><li><p>inherited members</p><ul><li>struct</li></ul></li><li><p>Pure function vs non-pure function</p><p>Pure function must be inherited while non-pure function can be chosen to be inherited or override, which reflects on the syntax below.</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pure virtual function</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">make</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">//Virtual in interface: enforce function defined by subclasses</span></span><br><span class="line"><span class="comment">//non-pure virtual function</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">make2</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//regular</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bar</span><span class="params">()</span> </span>== &#123;<span class="keyword">return</span> <span class="number">33</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span> : <span class="keyword">protected</span> Drink &#123; <span class="comment">//functions in drink become protected functions in tea</span></span><br><span class="line"> </span><br><span class="line">&#125; <span class="comment">//struct just defaults into public</span></span><br></pre></td></tr></table></figure><ul><li><p>call superclass constructor<br>subclassname::subclassname(params)<br>: superclassname(params) {<br>statements;<br>}</p><img src="/sg/2021/05/12/cpp_101/p6.png" class title="p6"></li><li><p>call superclass member<br>superclassname::membername(param){<br>statements;<br>}</p><img src="/sg/2021/05/12/cpp_101/p7.png" class title="p7"></li><li><p>terminology</p><ul><li>Base class</li><li>derived class</li><li>non-virtual destructors</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout; <span class="keyword">using</span> std::endl;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Drink</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Drink</span>() = <span class="keyword">default</span>;</span><br><span class="line">  <span class="built_in">Drink</span>(std::string flavor) : <span class="built_in">flavor</span>(flavor)&#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">make</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">virtual</span> ~<span class="built_in">Drink</span>() = <span class="keyword">default</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  std::string flavor;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span> : <span class="keyword">public</span> Drink &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">Tea</span>() = <span class="keyword">default</span>;</span><br><span class="line">  <span class="built_in">Tea</span>(std::string flavor) : <span class="built_in">Drink</span>(flavor) &#123;&#125;</span><br><span class="line">  ~<span class="built_in">Tea</span>() = <span class="keyword">default</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">make</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout&lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Tea <span class="title">t</span><span class="params">(<span class="string">&quot;red&quot;</span>)</span></span>;</span><br><span class="line">  t.Drink::<span class="built_in">make</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>templates vs. derived classes</p><p>Statics vs. dynamic polymorphism: run time vs. compile time</p><p>when to use each?</p></li><li><p>casting</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = (<span class="type">int</span>)b;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">int</span>(b);</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">static_cast</span>&lt;<span class="type">int</span>&gt;(b); <span class="comment">//best practice, static int</span></span><br></pre></td></tr></table></figure></li></ul><h3><span id="template-classes">Template classes</span><a href="#template-classes" class="header-anchor">¶</a></h3><p>function template</p><p>class template</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//template &lt;typename T&gt;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>, <span class="keyword">class</span> <span class="title class_">Container</span> = std::vector&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">class</span> PQ&#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3><span id="concept-c-20">concept(c++20)</span><a href="#concept-c-20" class="header-anchor">¶</a></h3><p>Implicit interface</p><p>concept: named set of constraints</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> D, <span class="keyword">class</span> B&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">f</span><span class="params">(T)</span> <span class="keyword">requires</span> DerivedFrom&lt;D,B&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="modern-cpp">modern cpp</span><a href="#modern-cpp" class="header-anchor">¶</a></h2><h3><span id="raii">raII</span><a href="#raii" class="header-anchor">¶</a></h3><ul><li><p>Different code paths, delete method may not sufficient to handle meomory leaks.</p><p>can’t guarantee the ‘delete’ call is called if an exception is thrown -&gt; RAII complaint</p></li><li><p>exception</p><ul><li>Nothrow exception guarantee, strong ,basic, no(memory corruption, resource leaks)</li></ul></li><li><p>raii: resource acquisition is initialization</p><ul><li><p>Meaning</p><ul><li><p>scope based memory management,</p></li><li><p>or <u>constructor acquires, destructor realeases</u></p><p>Wrap up in one object</p></li></ul></li><li><p>avoid using new/delete explicitly</p><p>Automatic memory management good?</p></li></ul></li></ul><p>PIMPL: pointer to implementation</p><ul><li><p>smart pointers: implement  pointer</p><ul><li><p>std::unique_ptr: one pointer to one resource</p><ul><li><p>can’t be copied</p><p>Syntax: by deleting the copy constructor and copy assignment</p></li></ul></li><li><p>std::shared_ptr: multiple pointer to same object</p><ul><li>Deleted when none of them point to it</li><li>works only when the new pointers are made through copying</li><li>reference counting: abide some rules</li></ul></li><li><p>std::weak_ptr: circular references of shared_ptr(JG)</p></li></ul><p>how to create these pointers?</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;Node&gt; <span class="title">n</span> <span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Node&gt; <span class="title">n</span> <span class="params">(<span class="keyword">new</span> Node)</span></span>;</span><br><span class="line"><span class="comment">//use built-in smart pointer creators</span></span><br><span class="line">std::unique_ptr&lt;Node&gt; n = std::<span class="built_in">make_unique</span>&lt;Node&gt;();</span><br><span class="line">std::shared_ptr&lt;Node&gt; n = std::<span class="built_in">make_shared</span>&lt;Node&gt;();</span><br></pre></td></tr></table></figure><p>when to use built-in creator rather than original?</p><p>Rules:??sth about function,(timestamp 48:20)</p></li></ul><h3><span id="multithreading">multithreading</span><a href="#multithreading" class="header-anchor">¶</a></h3><p>c</p><h3><span id="template-mateprogramming">template mateprogramming</span><a href="#template-mateprogramming" class="header-anchor">¶</a></h3><ul><li>computations on types</li><li>Mata-functions and implementing identity</li><li>template deduction and implementing is_same</li><li>Wrap up</li></ul>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C 101</title>
      <link href="/sg/2021/03/25/c_101/"/>
      <url>/sg/2021/03/25/c_101/</url>
      
        <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#basic-syntax">Basic syntax</a><ul><li><a href="#pointers-arrays">pointers/arrays</a></li><li><a href="#array">array</a></li><li><a href="#bit-mask-and-shifting">bit mask and Shifting</a></li></ul></li><li><a href="#memory-management">Memory management</a><ul><li><a href="#memory-location">memory location</a></li><li><a href="#things-go-wrong">things go wrong</a></li></ul></li></ul><!-- tocstop --></div><h2><span id="basic-syntax">Basic syntax</span><a href="#basic-syntax" class="header-anchor">¶</a></h2><ul><li><p>Type: unsigned int, int, float, double, char, long, long long.</p></li><li><p>c pre-processor(macros): #include …, #define</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span> <span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> g = <span class="number">1.222</span>;</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">color</span> &#123;</span>RED, GREEN, BLUE&#125;; <span class="comment">//a group of related integer constants</span></span><br></pre></td></tr></table></figure></li><li><p>struct, unions</p><ul><li>structs: groups list of variables under one block in memory</li><li>Union: store different data types in same region of memory</li></ul></li><li><p>Control flow: for, switch</p></li><li><p>Variable declarations</p><p>ANSI C: A variable may be initialized in its declaration. if not, it holds garbage!</p><p>C99 has changed and is similar to java.</p></li><li><p>Undefined behavior: Heisenbugs</p></li><li><p>string: Null-character (‘\0’) terminated character arrays</p></li><li><p>Macros: replace a name with its macro definition.</p><p>Constants, simple operations, …</p><p>use parentheses around macro arguments and result.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> INT_MAX 0x7FFFFFFFF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX(A, B) ((A) &gt; (B) ? (A) : (B))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQUIRES(COND) assert(COND)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WORD_SIZE 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NEXT_WORD(a) ((char*)(a) + WORD_SIZE)</span></span><br></pre></td></tr></table></figure></li><li><p>header guards: double-inclusion problem</p><ul><li><p>include same header file twice.</p><img src="/sg/2021/03/25/c_101/p1.png" class title="header"></li></ul></li></ul><h3><span id="pointers-arrays">pointers/arrays</span><a href="#pointers-arrays" class="header-anchor">¶</a></h3><p>Declaring a pointer allocates space to hold the pointer without allocating space to the value pointing to. Local variables in C are not initialized and may contain anything.</p><ul><li><p>Pointers allow cleaner,more compact code while hiding bugs like dangling references and memory leaks due to dynamic memory management.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> * (a type that can point to anything)</span><br><span class="line">  </span><br><span class="line"><span class="comment">//pointers to functions.</span></span><br><span class="line"><span class="type">int</span> (*fn) (<span class="type">void</span> *, <span class="type">void</span> *) = &amp;foo  <span class="comment">//fn is a function that accepts two void * pointers and returns an int and is initially pointing to the function foo.</span></span><br><span class="line"><span class="comment">//(*fn)(x,y) call the function</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//NULL pointers</span></span><br><span class="line"><span class="keyword">if</span> (!p) <span class="comment">/* p is a null pointer*/</span></span><br><span class="line"><span class="keyword">if</span> q <span class="comment">/* q is not a null pointer*/</span></span><br></pre></td></tr></table></figure></li><li><p>null pointers: program crash when u write/read a null pointer</p></li><li><p>Modern machines are “byte-addressable”.(8-bit storage cells.) We want word allignment. Programs can be slow if you try to access unaligned memory.</p></li><li><p>Pointer arithmetic</p><p>sizeof, the unit is byte. <u>Pointer + n</u> means adding n*sizeof(type) to the memory addresss</p></li><li><p>pointer to pointer</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">IncrementPtr</span><span class="params">(<span class="type">int</span> **h)</span>&#123;</span><br><span class="line">  *h = *h + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> A[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="type">int</span> *q = A; <span class="comment">//*q = A[0]</span></span><br><span class="line">IncrementPtr(&amp;q); <span class="comment">//*q = A[1]</span></span><br></pre></td></tr></table></figure></li></ul><h3><span id="array">array</span><a href="#array" class="header-anchor">¶</a></h3><p>An array variable is a pointer to the first element</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//declaration</span></span><br><span class="line"><span class="type">char</span> *<span class="built_in">string</span> ar</span><br><span class="line"><span class="type">char</span> <span class="built_in">string</span>[] ar</span><br><span class="line"><span class="comment">//ar[0] = *ar</span></span><br><span class="line"><span class="comment">//ar[2] = *(ar+2)</span></span><br></pre></td></tr></table></figure><p>declarations of array differ in: incrementing, declaration of filled arrays.</p><p>Declared arrays are only allocated while the scope<br>is valid. An array in C does not know its own length, &amp; bounds not checked.</p><h3><span id="bit-mask-and-shifting">bit mask and Shifting</span><a href="#bit-mask-and-shifting" class="header-anchor">¶</a></h3><p><strong>Logical shift</strong> correspond to (left-shift) multiplication by 2, (right-shift) integer division by 2.</p><ul><li>&lt;&lt;,&gt;&gt; is logical shifting.</li></ul><p><strong>Arithmetic shift</strong> is something related to 2’s-complement representation of signed numbers. In this representation, the sign is the leftmost bit, then arithmetic shift preserves the sign (this is called sign extension).</p><p><strong>Rotate</strong> has no ordinary mathematical meaning, and is almost an obsolete operation even in computers.</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//number representations</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> mask = <span class="number">1</span>; <span class="comment">// 00000001,binary</span></span><br></pre></td></tr></table></figure><h2><span id="memory-management">Memory management</span><a href="#memory-management" class="header-anchor">¶</a></h2><p>dynamic memory allocation</p><blockquote><p>Rule:</p><ul><li><p>Malloc what you free, free what you malloc.</p></li><li><p>#mallocs = #frees, or memeory leak/double free</p></li><li><p>Free a malloced block exactly once</p></li><li><p>only malloc when necessary</p><ul><li>Persistent, variable sized data structures</li><li>concurrent accesses.</li></ul></li></ul></blockquote><p>Assume size of objects can be misleading and is bad style, so use sizeof(type).</p><ul><li><p>malloc():To allocate room for something new to point to, use malloc(). Once malloc() is called, the memory location contains garbage, so don’t use it</p></li><li><p>free():until you’ve set its value. After dynamically allocating space, we must dynamically free it.</p><ul><li>Bugs happen when free(): frees the same memory twice; frees on sth you didn’t get back from malloc().</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ptr = (<span class="type">int</span>*) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">realloc</span>(p, size);</span><br></pre></td></tr></table></figure><ul><li>Realloc(): managing the heap. Resize a previously allocated block at p to a new size.<ul><li>if p is NULL, behaves like malloc</li><li>if size is 0, behaves like free</li></ul></li><li><u>void* malloc (size_t size)</u>:  allocate block of memory of size bytes,does not initialize memory</li><li><u>void* calloc (size_t num, size_t size)</u>: allocate block of memory for array of num elements, each size bytes long, initializes memory to zero.</li></ul><h3><span id="memory-location">memory location</span><a href="#memory-location" class="header-anchor">¶</a></h3><ul><li><p>Allocate memory for data</p><ul><li>declaration of local variable</li><li>Dynamic allocation at runtime by calling allocation function</li><li>date delcared outside of any procedure(global)</li></ul></li><li><p>Stack: last in, first out data structure. Stack grows down.</p><p>Stack frames contiguous blocks of memory; stack pointer tells where top stack frame is. When procedure ends, stack frame is tossed off the stack; frees memory for future stack frames.</p></li><li><p>Heap: not contiguous.</p><p>需要效率和最小使用内存，避免可用内存碎片化。</p><p>Implementation:</p><p>memory structure: Each block of memory is preceded by a header that has two fields: size of the block and  a pointer to the next block. All free blocks are kept in a circular linked list, the pointer field is unused in an allocated block.</p><p>Malloc() 在可用的内存列表寻找是否有足够的空间，如果没有，向操作系统请求更多的内存。free()检查当前可用空间周围的空间是否可用，如果可用就合并，否则就将另外的可用内存块加入链表。</p><p>Malloc() 如何在多个均符合条件的内存块中选择？</p><ul><li>Best-fit</li><li>First-fit</li><li>Next-fit: first-fit + remember where we finished searching and resume searching from there.</li></ul></li></ul><h3><span id="things-go-wrong">things go wrong</span><a href="#things-go-wrong" class="header-anchor">¶</a></h3><ul><li><p>returning pointers into the stack</p><p>Pointers in C allow access to deallocated memory, leading to hard-to-find bugs.</p><p>The address of something on the stack will be invalid after the function’s execution</p></li><li><p>use after free</p></li><li><p>Forgetting realloc can move data</p></li><li><p>Freeing the wrong stuff</p></li><li><p>Double-free</p></li><li><p>Losing the initial pointer</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> programming </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
